// Created by Microsoft (R) C/C++ Compiler Version 14.16.27026.1 (5f44c275).
//
// d:\dev\r_stk_prod_x64\source\lib\release.x64\tlhbuilder\agstkgator.tli
//
// Wrapper implementations for type library AgStkGator.tlb
// compiler-generated file created 03/29/19 at 20:37:41 - DO NOT EDIT!


//
// interface IAgVACalcObjectCollection wrapper method implementations
//

#pragma implementation_key(1)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVACalcObjectCollection::Add ( _bstr_t Name ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(2)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVACalcObjectCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3)
inline HRESULT AgStkGatorLib::IAgVACalcObjectCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4)
inline IUnknownPtr AgStkGatorLib::IAgVACalcObjectCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5)
inline long AgStkGatorLib::IAgVACalcObjectCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline HRESULT AgStkGatorLib::IAgVACalcObjectCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVACalcObjectCollection::Paste ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(8)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVACalcObjectCollection::InsertCopy ( struct STKObjects::IAgComponentInfo * CalcObj ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = raw_InsertCopy(CalcObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

//
// interface IAgVAStateCalcHeightAboveTerrain wrapper method implementations
//

#pragma implementation_key(9)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcHeightAboveTerrain::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(10)
inline void AgStkGatorLib::IAgVAStateCalcHeightAboveTerrain::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcHeightAboveTerrain wrapper method implementations
//

#pragma implementation_key(11)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(12)
inline void AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(13)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(14)
inline void AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(16)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(17)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(18)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(19)
inline void AgStkGatorLib::_IAgVAStateCalcHeightAboveTerrain::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEpoch wrapper method implementations
//

#pragma implementation_key(20)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEpoch::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(21)
inline void AgStkGatorLib::_IAgVAStateCalcEpoch::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(22)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEpoch::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(23)
inline void AgStkGatorLib::_IAgVAStateCalcEpoch::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(24)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEpoch::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(25)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEpoch::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEpoch::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcOrbitDelaunayG wrapper method implementations
//

#pragma implementation_key(27)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitDelaunayG::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(28)
inline void AgStkGatorLib::IAgVAStateCalcOrbitDelaunayG::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::IAgVAStateCalcOrbitDelaunayG::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline void AgStkGatorLib::IAgVAStateCalcOrbitDelaunayG::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOrbitDelaunayG wrapper method implementations
//

#pragma implementation_key(31)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(32)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(33)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(34)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(35)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(36)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(38)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(39)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayG::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOrbitDelaunayH wrapper method implementations
//

#pragma implementation_key(42)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitDelaunayH::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(43)
inline void AgStkGatorLib::IAgVAStateCalcOrbitDelaunayH::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(44)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::IAgVAStateCalcOrbitDelaunayH::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline void AgStkGatorLib::IAgVAStateCalcOrbitDelaunayH::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOrbitDelaunayH wrapper method implementations
//

#pragma implementation_key(46)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(47)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(49)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(51)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(53)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(54)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayH::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOrbitDelaunayL wrapper method implementations
//

#pragma implementation_key(57)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitDelaunayL::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(58)
inline void AgStkGatorLib::IAgVAStateCalcOrbitDelaunayL::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::IAgVAStateCalcOrbitDelaunayL::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void AgStkGatorLib::IAgVAStateCalcOrbitDelaunayL::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOrbitDelaunayL wrapper method implementations
//

#pragma implementation_key(61)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(62)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(64)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(66)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(68)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(70)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitDelaunayL::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOrbitSemiLatusRectum wrapper method implementations
//

#pragma implementation_key(72)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitSemiLatusRectum::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(73)
inline void AgStkGatorLib::IAgVAStateCalcOrbitSemiLatusRectum::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::IAgVAStateCalcOrbitSemiLatusRectum::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void AgStkGatorLib::IAgVAStateCalcOrbitSemiLatusRectum::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOrbitSemiLatusRectum wrapper method implementations
//

#pragma implementation_key(76)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(79)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(81)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(83)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(84)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitSemiLatusRectum::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcCartesianElem wrapper method implementations
//

#pragma implementation_key(87)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCartesianElem::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(88)
inline void AgStkGatorLib::IAgVAStateCalcCartesianElem::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcCartesianElem wrapper method implementations
//

#pragma implementation_key(89)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartesianElem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(90)
inline void AgStkGatorLib::_IAgVAStateCalcCartesianElem::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartesianElem::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(92)
inline void AgStkGatorLib::_IAgVAStateCalcCartesianElem::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartesianElem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(94)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCartesianElem::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCartesianElem::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(96)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartesianElem::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(97)
inline void AgStkGatorLib::_IAgVAStateCalcCartesianElem::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcCartSTMElem wrapper method implementations
//

#pragma implementation_key(98)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCartSTMElem::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(99)
inline void AgStkGatorLib::IAgVAStateCalcCartSTMElem::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline enum AgStkGatorLib::AgEVASTMPertVariables AgStkGatorLib::IAgVAStateCalcCartSTMElem::GetFinalVar ( ) {
    enum AgEVASTMPertVariables _result;
    HRESULT _hr = get_FinalVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void AgStkGatorLib::IAgVAStateCalcCartSTMElem::PutFinalVar ( enum AgEVASTMPertVariables pVal ) {
    HRESULT _hr = put_FinalVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline enum AgStkGatorLib::AgEVASTMPertVariables AgStkGatorLib::IAgVAStateCalcCartSTMElem::GetInitVar ( ) {
    enum AgEVASTMPertVariables _result;
    HRESULT _hr = get_InitVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void AgStkGatorLib::IAgVAStateCalcCartSTMElem::PutInitVar ( enum AgEVASTMPertVariables pVal ) {
    HRESULT _hr = put_InitVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcCartSTMElem wrapper method implementations
//

#pragma implementation_key(104)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartSTMElem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(105)
inline void AgStkGatorLib::_IAgVAStateCalcCartSTMElem::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartSTMElem::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(107)
inline void AgStkGatorLib::_IAgVAStateCalcCartSTMElem::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartSTMElem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(109)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCartSTMElem::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCartSTMElem::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(111)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCartSTMElem::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(112)
inline void AgStkGatorLib::_IAgVAStateCalcCartSTMElem::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(113)
inline enum AgStkGatorLib::AgEVASTMPertVariables AgStkGatorLib::_IAgVAStateCalcCartSTMElem::GetFinalVar ( ) {
    enum AgEVASTMPertVariables _result;
    HRESULT _hr = get_FinalVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void AgStkGatorLib::_IAgVAStateCalcCartSTMElem::PutFinalVar ( enum AgEVASTMPertVariables pVal ) {
    HRESULT _hr = put_FinalVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline enum AgStkGatorLib::AgEVASTMPertVariables AgStkGatorLib::_IAgVAStateCalcCartSTMElem::GetInitVar ( ) {
    enum AgEVASTMPertVariables _result;
    HRESULT _hr = get_InitVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void AgStkGatorLib::_IAgVAStateCalcCartSTMElem::PutInitVar ( enum AgEVASTMPertVariables pVal ) {
    HRESULT _hr = put_InitVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEnvironment wrapper method implementations
//

#pragma implementation_key(117)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEnvironment::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(118)
inline void AgStkGatorLib::IAgVAStateCalcEnvironment::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(119)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEnvironment::GetAtmosModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(120)
inline void AgStkGatorLib::IAgVAStateCalcEnvironment::PutAtmosModelName ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosModelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEnvironment wrapper method implementations
//

#pragma implementation_key(121)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEnvironment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(122)
inline void AgStkGatorLib::_IAgVAStateCalcEnvironment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(123)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEnvironment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(124)
inline void AgStkGatorLib::_IAgVAStateCalcEnvironment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(125)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEnvironment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(126)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEnvironment::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEnvironment::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(128)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEnvironment::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(129)
inline void AgStkGatorLib::_IAgVAStateCalcEnvironment::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEnvironment::GetAtmosModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(131)
inline void AgStkGatorLib::_IAgVAStateCalcEnvironment::PutAtmosModelName ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosModelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEquinoctialElem wrapper method implementations
//

#pragma implementation_key(132)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEquinoctialElem::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(133)
inline void AgStkGatorLib::IAgVAStateCalcEquinoctialElem::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcEquinoctialElem::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void AgStkGatorLib::IAgVAStateCalcEquinoctialElem::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEquinoctialElem wrapper method implementations
//

#pragma implementation_key(136)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(137)
inline void AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(139)
inline void AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(141)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(143)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(144)
inline void AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline void AgStkGatorLib::_IAgVAStateCalcEquinoctialElem::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDamageFlux wrapper method implementations
//

#pragma implementation_key(147)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDamageFlux::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(148)
inline void AgStkGatorLib::_IAgVAStateCalcDamageFlux::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDamageFlux::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(150)
inline void AgStkGatorLib::_IAgVAStateCalcDamageFlux::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDamageFlux::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(152)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDamageFlux::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDamageFlux::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcDamageMassFlux wrapper method implementations
//

#pragma implementation_key(154)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(155)
inline void AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(157)
inline void AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(159)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(160)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDamageMassFlux::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcMagFieldDipoleL wrapper method implementations
//

#pragma implementation_key(161)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(162)
inline void AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(163)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(164)
inline void AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(165)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(166)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMagFieldDipoleL::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcSEETMagFieldFieldLineSepAngle wrapper method implementations
//

#pragma implementation_key(168)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcSEETMagFieldFieldLineSepAngle::GetTargetObject ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcSEETMagFieldFieldLineSepAngle wrapper method implementations
//

#pragma implementation_key(169)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(170)
inline void AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(171)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(172)
inline void AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(173)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(174)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(176)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcSEETMagFieldFieldLineSepAngle::GetTargetObject ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcImpactFlux wrapper method implementations
//

#pragma implementation_key(177)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcImpactFlux::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(178)
inline void AgStkGatorLib::_IAgVAStateCalcImpactFlux::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcImpactFlux::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(180)
inline void AgStkGatorLib::_IAgVAStateCalcImpactFlux::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcImpactFlux::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(182)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcImpactFlux::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(183)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcImpactFlux::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcImpactMassFlux wrapper method implementations
//

#pragma implementation_key(184)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(185)
inline void AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(186)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(187)
inline void AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(189)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(190)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcImpactMassFlux::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcSEETSAAFlux wrapper method implementations
//

#pragma implementation_key(191)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(192)
inline void AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(193)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(194)
inline void AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(195)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(196)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSEETSAAFlux::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcSEETVehTemp wrapper method implementations
//

#pragma implementation_key(198)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(199)
inline void AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(201)
inline void AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(202)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(203)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSEETVehTemp::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcCloseApproachBearing wrapper method implementations
//

#pragma implementation_key(205)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCloseApproachBearing::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(206)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachBearing::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcCloseApproachBearing::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachBearing::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcCloseApproachBearing::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcCloseApproachBearing wrapper method implementations
//

#pragma implementation_key(210)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(211)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(213)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(215)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(217)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(218)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(219)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(221)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachBearing::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcCloseApproachMag wrapper method implementations
//

#pragma implementation_key(222)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCloseApproachMag::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(223)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachMag::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcCloseApproachMag::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachMag::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcCloseApproachMag::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcCloseApproachMag wrapper method implementations
//

#pragma implementation_key(227)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(228)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(230)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(231)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(232)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(234)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(235)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachMag::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcCloseApproachTheta wrapper method implementations
//

#pragma implementation_key(239)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCloseApproachTheta::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(240)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachTheta::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(241)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcCloseApproachTheta::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachTheta::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcCloseApproachTheta::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcCloseApproachTheta wrapper method implementations
//

#pragma implementation_key(244)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(245)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(246)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(247)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(249)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(250)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(251)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(252)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(253)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(255)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachTheta::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcCloseApproachX wrapper method implementations
//

#pragma implementation_key(256)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCloseApproachX::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(257)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachX::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcCloseApproachX::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachX::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcCloseApproachX::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcCloseApproachX wrapper method implementations
//

#pragma implementation_key(261)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachX::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(262)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachX::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachX::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(264)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachX::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachX::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(266)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCloseApproachX::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachX::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(268)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachX::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(269)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachX::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcCloseApproachX::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachX::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachX::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcCloseApproachY wrapper method implementations
//

#pragma implementation_key(273)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCloseApproachY::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(274)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachY::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcCloseApproachY::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachY::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcCloseApproachY::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcCloseApproachY wrapper method implementations
//

#pragma implementation_key(278)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachY::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(279)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachY::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachY::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(281)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachY::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachY::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(283)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCloseApproachY::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachY::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(285)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachY::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(286)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachY::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcCloseApproachY::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachY::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachY::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcCloseApproachCosBearing wrapper method implementations
//

#pragma implementation_key(290)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCloseApproachCosBearing::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(291)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachCosBearing::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcCloseApproachCosBearing::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline void AgStkGatorLib::IAgVAStateCalcCloseApproachCosBearing::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(294)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcCloseApproachCosBearing::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcCloseApproachCosBearing wrapper method implementations
//

#pragma implementation_key(295)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(296)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(298)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(302)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(303)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(304)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline void AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(306)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcCloseApproachCosBearing::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcRelGroundTrackError wrapper method implementations
//

#pragma implementation_key(307)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(308)
inline void AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline enum AgStkGatorLib::AgEVACalcObjectDirection AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::GetDirection ( ) {
    enum AgEVACalcObjectDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::PutDirection ( enum AgEVACalcObjectDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::GetSigned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Signed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::PutSigned ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Signed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcRelGroundTrackError::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcRelGroundTrackError wrapper method implementations
//

#pragma implementation_key(316)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(317)
inline void AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(319)
inline void AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(321)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(323)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(324)
inline void AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline enum AgStkGatorLib::AgEVACalcObjectDirection AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetDirection ( ) {
    enum AgEVACalcObjectDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::PutDirection ( enum AgEVACalcObjectDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetSigned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Signed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::PutSigned ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Signed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(330)
inline void AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(331)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcRelGroundTrackError::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcRelAtAOLMaster wrapper method implementations
//

#pragma implementation_key(332)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(333)
inline void AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(335)
inline void AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline enum AgStkGatorLib::AgEVACalcObjectDirection AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::GetDirection ( ) {
    enum AgEVACalcObjectDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::PutDirection ( enum AgEVACalcObjectDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcRelAtAOLMaster::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcRelAtAOLMaster wrapper method implementations
//

#pragma implementation_key(341)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(342)
inline void AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(344)
inline void AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(346)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(348)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(349)
inline void AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(351)
inline void AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline enum AgStkGatorLib::AgEVACalcObjectDirection AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetDirection ( ) {
    enum AgEVACalcObjectDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::PutDirection ( enum AgEVACalcObjectDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline void AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcRelAtAOLMaster::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcDeltaFromMaster wrapper method implementations
//

#pragma implementation_key(357)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDeltaFromMaster::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(358)
inline void AgStkGatorLib::IAgVAStateCalcDeltaFromMaster::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(359)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcDeltaFromMaster::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline void AgStkGatorLib::IAgVAStateCalcDeltaFromMaster::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(361)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcDeltaFromMaster::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcDeltaFromMaster wrapper method implementations
//

#pragma implementation_key(362)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(363)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(365)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(367)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(369)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(370)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcDeltaFromMaster::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcLonDriftRate wrapper method implementations
//

#pragma implementation_key(374)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcLonDriftRate::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(375)
inline void AgStkGatorLib::IAgVAStateCalcLonDriftRate::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(376)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcLonDriftRate::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(377)
inline void AgStkGatorLib::IAgVAStateCalcLonDriftRate::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcLonDriftRate wrapper method implementations
//

#pragma implementation_key(378)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonDriftRate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(379)
inline void AgStkGatorLib::_IAgVAStateCalcLonDriftRate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(380)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonDriftRate::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(381)
inline void AgStkGatorLib::_IAgVAStateCalcLonDriftRate::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(382)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonDriftRate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(383)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcLonDriftRate::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcLonDriftRate::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(385)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonDriftRate::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(386)
inline void AgStkGatorLib::_IAgVAStateCalcLonDriftRate::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcLonDriftRate::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void AgStkGatorLib::_IAgVAStateCalcLonDriftRate::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcMeanEarthLon wrapper method implementations
//

#pragma implementation_key(389)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcMeanEarthLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(390)
inline void AgStkGatorLib::IAgVAStateCalcMeanEarthLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcMeanEarthLon wrapper method implementations
//

#pragma implementation_key(391)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(392)
inline void AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(394)
inline void AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(396)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(398)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(399)
inline void AgStkGatorLib::_IAgVAStateCalcMeanEarthLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRectifiedLon wrapper method implementations
//

#pragma implementation_key(400)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRectifiedLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(401)
inline void AgStkGatorLib::IAgVAStateCalcRectifiedLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRectifiedLon wrapper method implementations
//

#pragma implementation_key(402)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRectifiedLon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(403)
inline void AgStkGatorLib::_IAgVAStateCalcRectifiedLon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRectifiedLon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(405)
inline void AgStkGatorLib::_IAgVAStateCalcRectifiedLon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRectifiedLon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(407)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRectifiedLon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRectifiedLon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(409)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRectifiedLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(410)
inline void AgStkGatorLib::_IAgVAStateCalcRectifiedLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcGeodeticElem wrapper method implementations
//

#pragma implementation_key(411)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcGeodeticElem::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(412)
inline void AgStkGatorLib::IAgVAStateCalcGeodeticElem::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcGeodeticElem wrapper method implementations
//

#pragma implementation_key(413)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGeodeticElem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(414)
inline void AgStkGatorLib::_IAgVAStateCalcGeodeticElem::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(415)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGeodeticElem::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(416)
inline void AgStkGatorLib::_IAgVAStateCalcGeodeticElem::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(417)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGeodeticElem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(418)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcGeodeticElem::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcGeodeticElem::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(420)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGeodeticElem::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(421)
inline void AgStkGatorLib::_IAgVAStateCalcGeodeticElem::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRepeatingGroundTrackErr wrapper method implementations
//

#pragma implementation_key(422)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(423)
inline void AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(424)
inline _variant_t AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::GetReferenceLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(425)
inline void AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::PutReferenceLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(426)
inline double AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline void AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline HRESULT AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::EnableControlParameter ( enum AgEVAControlRepeatingGroundTrackErr Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(429)
inline HRESULT AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::DisableControlParameter ( enum AgEVAControlRepeatingGroundTrackErr Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(430)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::IsControlParameterEnabled ( enum AgEVAControlRepeatingGroundTrackErr Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcRepeatingGroundTrackErr::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAStateCalcRepeatingGroundTrackErr wrapper method implementations
//

#pragma implementation_key(432)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(433)
inline void AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(434)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(435)
inline void AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(437)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(439)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(440)
inline void AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetReferenceLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(442)
inline void AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::PutReferenceLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(443)
inline double AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline void AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(445)
inline HRESULT AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::EnableControlParameter ( enum AgEVAControlRepeatingGroundTrackErr Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(446)
inline HRESULT AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::DisableControlParameter ( enum AgEVAControlRepeatingGroundTrackErr Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(447)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::IsControlParameterEnabled ( enum AgEVAControlRepeatingGroundTrackErr Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(448)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRepeatingGroundTrackErr::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAStateCalcAltOfApoapsis wrapper method implementations
//

#pragma implementation_key(449)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcAltOfApoapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(450)
inline void AgStkGatorLib::IAgVAStateCalcAltOfApoapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(451)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcAltOfApoapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline void AgStkGatorLib::IAgVAStateCalcAltOfApoapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcAltOfApoapsis wrapper method implementations
//

#pragma implementation_key(453)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(454)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(455)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(456)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(457)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(458)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(460)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(461)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfApoapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcAltOfPeriapsis wrapper method implementations
//

#pragma implementation_key(464)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcAltOfPeriapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(465)
inline void AgStkGatorLib::IAgVAStateCalcAltOfPeriapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcAltOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void AgStkGatorLib::IAgVAStateCalcAltOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcAltOfPeriapsis wrapper method implementations
//

#pragma implementation_key(468)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(469)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(471)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(473)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(475)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(476)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline void AgStkGatorLib::_IAgVAStateCalcAltOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcArgOfLat wrapper method implementations
//

#pragma implementation_key(479)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcArgOfLat::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(480)
inline void AgStkGatorLib::IAgVAStateCalcArgOfLat::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcArgOfLat::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void AgStkGatorLib::IAgVAStateCalcArgOfLat::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcArgOfLat wrapper method implementations
//

#pragma implementation_key(483)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfLat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(484)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfLat::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfLat::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(486)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfLat::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfLat::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(488)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcArgOfLat::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(489)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcArgOfLat::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(490)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfLat::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(491)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfLat::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcArgOfLat::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfLat::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcArgOfPeriapsis wrapper method implementations
//

#pragma implementation_key(494)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcArgOfPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(495)
inline void AgStkGatorLib::IAgVAStateCalcArgOfPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcArgOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline void AgStkGatorLib::IAgVAStateCalcArgOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcArgOfPeriapsis wrapper method implementations
//

#pragma implementation_key(498)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(499)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(501)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(503)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(505)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(506)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void AgStkGatorLib::_IAgVAStateCalcArgOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEccAnomaly wrapper method implementations
//

#pragma implementation_key(509)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEccAnomaly::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(510)
inline void AgStkGatorLib::IAgVAStateCalcEccAnomaly::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcEccAnomaly::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void AgStkGatorLib::IAgVAStateCalcEccAnomaly::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEccAnomaly wrapper method implementations
//

#pragma implementation_key(513)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccAnomaly::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(514)
inline void AgStkGatorLib::_IAgVAStateCalcEccAnomaly::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccAnomaly::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(516)
inline void AgStkGatorLib::_IAgVAStateCalcEccAnomaly::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccAnomaly::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(518)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEccAnomaly::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEccAnomaly::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(520)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccAnomaly::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(521)
inline void AgStkGatorLib::_IAgVAStateCalcEccAnomaly::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcEccAnomaly::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(523)
inline void AgStkGatorLib::_IAgVAStateCalcEccAnomaly::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEccentricity wrapper method implementations
//

#pragma implementation_key(524)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEccentricity::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(525)
inline void AgStkGatorLib::IAgVAStateCalcEccentricity::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(526)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcEccentricity::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void AgStkGatorLib::IAgVAStateCalcEccentricity::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEccentricity wrapper method implementations
//

#pragma implementation_key(528)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccentricity::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(529)
inline void AgStkGatorLib::_IAgVAStateCalcEccentricity::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(530)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccentricity::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(531)
inline void AgStkGatorLib::_IAgVAStateCalcEccentricity::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(532)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccentricity::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(533)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEccentricity::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEccentricity::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(535)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEccentricity::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(536)
inline void AgStkGatorLib::_IAgVAStateCalcEccentricity::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcEccentricity::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void AgStkGatorLib::_IAgVAStateCalcEccentricity::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcInclination wrapper method implementations
//

#pragma implementation_key(539)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInclination::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(540)
inline void AgStkGatorLib::IAgVAStateCalcInclination::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcInclination::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void AgStkGatorLib::IAgVAStateCalcInclination::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInclination wrapper method implementations
//

#pragma implementation_key(543)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInclination::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(544)
inline void AgStkGatorLib::_IAgVAStateCalcInclination::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(545)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInclination::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(546)
inline void AgStkGatorLib::_IAgVAStateCalcInclination::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(547)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInclination::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(548)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInclination::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInclination::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(550)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInclination::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(551)
inline void AgStkGatorLib::_IAgVAStateCalcInclination::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(552)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcInclination::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline void AgStkGatorLib::_IAgVAStateCalcInclination::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcLonOfAscNode wrapper method implementations
//

#pragma implementation_key(554)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcLonOfAscNode::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(555)
inline void AgStkGatorLib::IAgVAStateCalcLonOfAscNode::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcLonOfAscNode::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void AgStkGatorLib::IAgVAStateCalcLonOfAscNode::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcLonOfAscNode wrapper method implementations
//

#pragma implementation_key(558)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(559)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(561)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(563)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(565)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(566)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(567)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(568)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfAscNode::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcMeanAnomaly wrapper method implementations
//

#pragma implementation_key(569)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcMeanAnomaly::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(570)
inline void AgStkGatorLib::IAgVAStateCalcMeanAnomaly::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(571)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcMeanAnomaly::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(572)
inline void AgStkGatorLib::IAgVAStateCalcMeanAnomaly::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcMeanAnomaly wrapper method implementations
//

#pragma implementation_key(573)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(574)
inline void AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(576)
inline void AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(577)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(578)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(580)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(581)
inline void AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void AgStkGatorLib::_IAgVAStateCalcMeanAnomaly::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcMeanMotion wrapper method implementations
//

#pragma implementation_key(584)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcMeanMotion::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(585)
inline void AgStkGatorLib::IAgVAStateCalcMeanMotion::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcMeanMotion::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline void AgStkGatorLib::IAgVAStateCalcMeanMotion::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcMeanMotion wrapper method implementations
//

#pragma implementation_key(588)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanMotion::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(589)
inline void AgStkGatorLib::_IAgVAStateCalcMeanMotion::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanMotion::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(591)
inline void AgStkGatorLib::_IAgVAStateCalcMeanMotion::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(592)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanMotion::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(593)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMeanMotion::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMeanMotion::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(595)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMeanMotion::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(596)
inline void AgStkGatorLib::_IAgVAStateCalcMeanMotion::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcMeanMotion::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void AgStkGatorLib::_IAgVAStateCalcMeanMotion::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOrbitPeriod wrapper method implementations
//

#pragma implementation_key(599)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitPeriod::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(600)
inline void AgStkGatorLib::IAgVAStateCalcOrbitPeriod::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcOrbitPeriod::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline void AgStkGatorLib::IAgVAStateCalcOrbitPeriod::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOrbitPeriod wrapper method implementations
//

#pragma implementation_key(603)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(604)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(605)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(606)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(607)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(608)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(610)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(611)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitPeriod::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRAAN wrapper method implementations
//

#pragma implementation_key(614)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRAAN::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(615)
inline void AgStkGatorLib::IAgVAStateCalcRAAN::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcRAAN::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline void AgStkGatorLib::IAgVAStateCalcRAAN::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRAAN wrapper method implementations
//

#pragma implementation_key(618)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRAAN::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(619)
inline void AgStkGatorLib::_IAgVAStateCalcRAAN::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRAAN::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(621)
inline void AgStkGatorLib::_IAgVAStateCalcRAAN::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRAAN::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(623)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRAAN::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRAAN::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(625)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRAAN::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(626)
inline void AgStkGatorLib::_IAgVAStateCalcRAAN::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcRAAN::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(628)
inline void AgStkGatorLib::_IAgVAStateCalcRAAN::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRadOfApoapsis wrapper method implementations
//

#pragma implementation_key(629)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRadOfApoapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(630)
inline void AgStkGatorLib::IAgVAStateCalcRadOfApoapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(631)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcRadOfApoapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline void AgStkGatorLib::IAgVAStateCalcRadOfApoapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRadOfApoapsis wrapper method implementations
//

#pragma implementation_key(633)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(634)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(636)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(638)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(640)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(641)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(642)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfApoapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRadOfPeriapsis wrapper method implementations
//

#pragma implementation_key(644)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRadOfPeriapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(645)
inline void AgStkGatorLib::IAgVAStateCalcRadOfPeriapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcRadOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void AgStkGatorLib::IAgVAStateCalcRadOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRadOfPeriapsis wrapper method implementations
//

#pragma implementation_key(648)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(649)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(651)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(653)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(654)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(655)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(656)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void AgStkGatorLib::_IAgVAStateCalcRadOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcSemiMajorAxis wrapper method implementations
//

#pragma implementation_key(659)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcSemiMajorAxis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(660)
inline void AgStkGatorLib::IAgVAStateCalcSemiMajorAxis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(661)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcSemiMajorAxis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline void AgStkGatorLib::IAgVAStateCalcSemiMajorAxis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcSemiMajorAxis wrapper method implementations
//

#pragma implementation_key(663)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(664)
inline void AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(666)
inline void AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(668)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(670)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(671)
inline void AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void AgStkGatorLib::_IAgVAStateCalcSemiMajorAxis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcTimePastAscNode wrapper method implementations
//

#pragma implementation_key(674)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcTimePastAscNode::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(675)
inline void AgStkGatorLib::IAgVAStateCalcTimePastAscNode::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcTimePastAscNode::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void AgStkGatorLib::IAgVAStateCalcTimePastAscNode::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcTimePastAscNode wrapper method implementations
//

#pragma implementation_key(678)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(679)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(681)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(683)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(684)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(685)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(686)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastAscNode::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcTimePastPeriapsis wrapper method implementations
//

#pragma implementation_key(689)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcTimePastPeriapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(690)
inline void AgStkGatorLib::IAgVAStateCalcTimePastPeriapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcTimePastPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline void AgStkGatorLib::IAgVAStateCalcTimePastPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcTimePastPeriapsis wrapper method implementations
//

#pragma implementation_key(693)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(694)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(696)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(697)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(698)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(700)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(701)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(702)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void AgStkGatorLib::_IAgVAStateCalcTimePastPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDeltaV wrapper method implementations
//

#pragma implementation_key(704)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaV::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(705)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaV::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaV::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(707)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaV::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaV::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(709)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDeltaV::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDeltaV::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcDeltaVSquared wrapper method implementations
//

#pragma implementation_key(711)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(712)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(714)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(715)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(716)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDeltaVSquared::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcMCSDeltaV wrapper method implementations
//

#pragma implementation_key(718)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(719)
inline void AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(720)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(721)
inline void AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(723)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMCSDeltaV::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcMCSDeltaVSquared wrapper method implementations
//

#pragma implementation_key(725)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(726)
inline void AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(728)
inline void AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(730)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(731)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMCSDeltaVSquared::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcSequenceDeltaV wrapper method implementations
//

#pragma implementation_key(732)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcSequenceDeltaV::GetSequenceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SequenceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(733)
inline void AgStkGatorLib::IAgVAStateCalcSequenceDeltaV::PutSequenceName ( _bstr_t pVal ) {
    HRESULT _hr = put_SequenceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcSequenceDeltaV wrapper method implementations
//

#pragma implementation_key(734)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(735)
inline void AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(737)
inline void AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(739)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(741)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::GetSequenceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SequenceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(742)
inline void AgStkGatorLib::_IAgVAStateCalcSequenceDeltaV::PutSequenceName ( _bstr_t pVal ) {
    HRESULT _hr = put_SequenceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcSequenceDeltaVSquared wrapper method implementations
//

#pragma implementation_key(743)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcSequenceDeltaVSquared::GetSequenceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SequenceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(744)
inline void AgStkGatorLib::IAgVAStateCalcSequenceDeltaVSquared::PutSequenceName ( _bstr_t pVal ) {
    HRESULT _hr = put_SequenceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcSequenceDeltaVSquared wrapper method implementations
//

#pragma implementation_key(745)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(746)
inline void AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(747)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(748)
inline void AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(752)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::GetSequenceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SequenceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline void AgStkGatorLib::_IAgVAStateCalcSequenceDeltaVSquared::PutSequenceName ( _bstr_t pVal ) {
    HRESULT _hr = put_SequenceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcFuelMass wrapper method implementations
//

#pragma implementation_key(754)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFuelMass::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(755)
inline void AgStkGatorLib::_IAgVAStateCalcFuelMass::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFuelMass::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(757)
inline void AgStkGatorLib::_IAgVAStateCalcFuelMass::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFuelMass::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(759)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcFuelMass::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcFuelMass::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcDensity wrapper method implementations
//

#pragma implementation_key(761)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDensity::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(762)
inline void AgStkGatorLib::_IAgVAStateCalcDensity::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDensity::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(764)
inline void AgStkGatorLib::_IAgVAStateCalcDensity::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDensity::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(766)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDensity::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDensity::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcInertialDeltaVMag wrapper method implementations
//

#pragma implementation_key(768)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(769)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(771)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(773)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInertialDeltaVMag::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcInertialDeltaVx wrapper method implementations
//

#pragma implementation_key(775)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInertialDeltaVx::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(776)
inline void AgStkGatorLib::IAgVAStateCalcInertialDeltaVx::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInertialDeltaVx wrapper method implementations
//

#pragma implementation_key(777)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(778)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(780)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(782)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(784)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(785)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVx::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcInertialDeltaVy wrapper method implementations
//

#pragma implementation_key(786)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInertialDeltaVy::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(787)
inline void AgStkGatorLib::IAgVAStateCalcInertialDeltaVy::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInertialDeltaVy wrapper method implementations
//

#pragma implementation_key(788)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(789)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(791)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(792)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(793)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(795)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(796)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVy::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcInertialDeltaVz wrapper method implementations
//

#pragma implementation_key(797)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInertialDeltaVz::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(798)
inline void AgStkGatorLib::IAgVAStateCalcInertialDeltaVz::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInertialDeltaVz wrapper method implementations
//

#pragma implementation_key(799)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(800)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(801)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(802)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(804)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(806)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(807)
inline void AgStkGatorLib::_IAgVAStateCalcInertialDeltaVz::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcManeuverSpecificImpulse wrapper method implementations
//

#pragma implementation_key(808)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(809)
inline void AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(811)
inline void AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(812)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(813)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcManeuverSpecificImpulse::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcPressure wrapper method implementations
//

#pragma implementation_key(815)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPressure::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(816)
inline void AgStkGatorLib::_IAgVAStateCalcPressure::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(817)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPressure::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(818)
inline void AgStkGatorLib::_IAgVAStateCalcPressure::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPressure::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(820)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcPressure::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcPressure::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcTemperature wrapper method implementations
//

#pragma implementation_key(822)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTemperature::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(823)
inline void AgStkGatorLib::_IAgVAStateCalcTemperature::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(824)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTemperature::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(825)
inline void AgStkGatorLib::_IAgVAStateCalcTemperature::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(826)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTemperature::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(827)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcTemperature::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcTemperature::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcVectorX wrapper method implementations
//

#pragma implementation_key(829)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorX::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(830)
inline void AgStkGatorLib::IAgVAStateCalcVectorX::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(831)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorX::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(832)
inline void AgStkGatorLib::IAgVAStateCalcVectorX::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(833)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorX::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(834)
inline void AgStkGatorLib::IAgVAStateCalcVectorX::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcVectorX::GetNormalize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(836)
inline void AgStkGatorLib::IAgVAStateCalcVectorX::PutNormalize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Normalize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVectorX wrapper method implementations
//

#pragma implementation_key(837)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorX::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(838)
inline void AgStkGatorLib::_IAgVAStateCalcVectorX::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(839)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorX::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(840)
inline void AgStkGatorLib::_IAgVAStateCalcVectorX::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorX::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(842)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorX::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVectorX::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(844)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorX::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(845)
inline void AgStkGatorLib::_IAgVAStateCalcVectorX::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(846)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorX::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(847)
inline void AgStkGatorLib::_IAgVAStateCalcVectorX::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(848)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorX::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(849)
inline void AgStkGatorLib::_IAgVAStateCalcVectorX::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(850)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorX::GetNormalize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(851)
inline void AgStkGatorLib::_IAgVAStateCalcVectorX::PutNormalize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Normalize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVectorY wrapper method implementations
//

#pragma implementation_key(852)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorY::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(853)
inline void AgStkGatorLib::IAgVAStateCalcVectorY::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorY::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(855)
inline void AgStkGatorLib::IAgVAStateCalcVectorY::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorY::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(857)
inline void AgStkGatorLib::IAgVAStateCalcVectorY::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(858)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcVectorY::GetNormalize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline void AgStkGatorLib::IAgVAStateCalcVectorY::PutNormalize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Normalize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVectorY wrapper method implementations
//

#pragma implementation_key(860)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorY::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(861)
inline void AgStkGatorLib::_IAgVAStateCalcVectorY::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(862)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorY::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(863)
inline void AgStkGatorLib::_IAgVAStateCalcVectorY::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(864)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorY::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(865)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorY::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVectorY::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(867)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorY::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(868)
inline void AgStkGatorLib::_IAgVAStateCalcVectorY::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(869)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorY::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(870)
inline void AgStkGatorLib::_IAgVAStateCalcVectorY::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorY::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(872)
inline void AgStkGatorLib::_IAgVAStateCalcVectorY::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorY::GetNormalize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline void AgStkGatorLib::_IAgVAStateCalcVectorY::PutNormalize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Normalize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVectorZ wrapper method implementations
//

#pragma implementation_key(875)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorZ::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(876)
inline void AgStkGatorLib::IAgVAStateCalcVectorZ::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(877)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorZ::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(878)
inline void AgStkGatorLib::IAgVAStateCalcVectorZ::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorZ::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(880)
inline void AgStkGatorLib::IAgVAStateCalcVectorZ::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcVectorZ::GetNormalize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void AgStkGatorLib::IAgVAStateCalcVectorZ::PutNormalize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Normalize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVectorZ wrapper method implementations
//

#pragma implementation_key(883)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorZ::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(884)
inline void AgStkGatorLib::_IAgVAStateCalcVectorZ::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorZ::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(886)
inline void AgStkGatorLib::_IAgVAStateCalcVectorZ::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorZ::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(888)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorZ::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVectorZ::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(890)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorZ::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(891)
inline void AgStkGatorLib::_IAgVAStateCalcVectorZ::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(892)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorZ::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(893)
inline void AgStkGatorLib::_IAgVAStateCalcVectorZ::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorZ::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(895)
inline void AgStkGatorLib::_IAgVAStateCalcVectorZ::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorZ::GetNormalize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline void AgStkGatorLib::_IAgVAStateCalcVectorZ::PutNormalize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Normalize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcMass wrapper method implementations
//

#pragma implementation_key(898)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMass::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(899)
inline void AgStkGatorLib::_IAgVAStateCalcMass::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(900)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMass::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(901)
inline void AgStkGatorLib::_IAgVAStateCalcMass::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMass::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(903)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMass::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMass::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcManeuverTotalMassFlowRate wrapper method implementations
//

#pragma implementation_key(905)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(906)
inline void AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(908)
inline void AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(910)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcManeuverTotalMassFlowRate::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcAbsoluteValue wrapper method implementations
//

#pragma implementation_key(912)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcAbsoluteValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(913)
inline void AgStkGatorLib::IAgVAStateCalcAbsoluteValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcAbsoluteValue wrapper method implementations
//

#pragma implementation_key(914)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(915)
inline void AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(917)
inline void AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(919)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(921)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(922)
inline void AgStkGatorLib::_IAgVAStateCalcAbsoluteValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDifference wrapper method implementations
//

#pragma implementation_key(923)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDifference::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(924)
inline void AgStkGatorLib::IAgVAStateCalcDifference::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(925)
inline enum AgStkGatorLib::AgEVADifferenceOrder AgStkGatorLib::IAgVAStateCalcDifference::GetDifferenceOrder ( ) {
    enum AgEVADifferenceOrder _result;
    HRESULT _hr = get_DifferenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void AgStkGatorLib::IAgVAStateCalcDifference::PutDifferenceOrder ( enum AgEVADifferenceOrder pVal ) {
    HRESULT _hr = put_DifferenceOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDifference wrapper method implementations
//

#pragma implementation_key(927)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifference::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(928)
inline void AgStkGatorLib::_IAgVAStateCalcDifference::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifference::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(930)
inline void AgStkGatorLib::_IAgVAStateCalcDifference::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifference::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(932)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDifference::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(933)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDifference::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(934)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifference::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(935)
inline void AgStkGatorLib::_IAgVAStateCalcDifference::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(936)
inline enum AgStkGatorLib::AgEVADifferenceOrder AgStkGatorLib::_IAgVAStateCalcDifference::GetDifferenceOrder ( ) {
    enum AgEVADifferenceOrder _result;
    HRESULT _hr = get_DifferenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline void AgStkGatorLib::_IAgVAStateCalcDifference::PutDifferenceOrder ( enum AgEVADifferenceOrder pVal ) {
    HRESULT _hr = put_DifferenceOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(938)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(939)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(941)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline enum AgStkGatorLib::AgEVASegmentDifferenceOrder AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::GetDifferenceOrder ( ) {
    enum AgEVASegmentDifferenceOrder _result;
    HRESULT _hr = get_DifferenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceOtherSegment::PutDifferenceOrder ( enum AgEVASegmentDifferenceOrder pVal ) {
    HRESULT _hr = put_DifferenceOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(946)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(947)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(949)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(951)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(953)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(954)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(955)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(956)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(957)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(959)
inline enum AgStkGatorLib::AgEVASegmentDifferenceOrder AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::GetDifferenceOrder ( ) {
    enum AgEVASegmentDifferenceOrder _result;
    HRESULT _hr = get_DifferenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(960)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceOtherSegment::PutDifferenceOrder ( enum AgEVASegmentDifferenceOrder pVal ) {
    HRESULT _hr = put_DifferenceOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcPosDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(961)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcPosDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(962)
inline void AgStkGatorLib::IAgVAStateCalcPosDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcPosDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(964)
inline void AgStkGatorLib::IAgVAStateCalcPosDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcPosDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(965)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(966)
inline void AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(967)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(968)
inline void AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(970)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(972)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(973)
inline void AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline void AgStkGatorLib::_IAgVAStateCalcPosDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVelDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(976)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVelDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(977)
inline void AgStkGatorLib::IAgVAStateCalcVelDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcVelDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void AgStkGatorLib::IAgVAStateCalcVelDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVelDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(980)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(981)
inline void AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(983)
inline void AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(984)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(985)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(987)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(988)
inline void AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(989)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline void AgStkGatorLib::_IAgVAStateCalcVelDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcPosVelDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(991)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcPosVelDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(992)
inline void AgStkGatorLib::IAgVAStateCalcPosVelDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcPosVelDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void AgStkGatorLib::IAgVAStateCalcPosVelDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcPosVelDifferenceOtherSegment wrapper method implementations
//

#pragma implementation_key(995)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(996)
inline void AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(998)
inline void AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(999)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1000)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1002)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1003)
inline void AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1004)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void AgStkGatorLib::_IAgVAStateCalcPosVelDifferenceOtherSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcValueAtSegment wrapper method implementations
//

#pragma implementation_key(1006)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcValueAtSegment::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1007)
inline void AgStkGatorLib::IAgVAStateCalcValueAtSegment::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1008)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcValueAtSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1009)
inline void AgStkGatorLib::IAgVAStateCalcValueAtSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1010)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcValueAtSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline void AgStkGatorLib::IAgVAStateCalcValueAtSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcValueAtSegment wrapper method implementations
//

#pragma implementation_key(1012)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1013)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1014)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1015)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1016)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1017)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcValueAtSegment::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcValueAtSegment::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1019)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegment::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1020)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegment::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegment::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1022)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegment::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcValueAtSegment::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegment::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcMaxValue wrapper method implementations
//

#pragma implementation_key(1025)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcMaxValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1026)
inline void AgStkGatorLib::IAgVAStateCalcMaxValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcMaxValue wrapper method implementations
//

#pragma implementation_key(1027)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMaxValue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1028)
inline void AgStkGatorLib::_IAgVAStateCalcMaxValue::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMaxValue::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1030)
inline void AgStkGatorLib::_IAgVAStateCalcMaxValue::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMaxValue::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1032)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMaxValue::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1033)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMaxValue::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1034)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMaxValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1035)
inline void AgStkGatorLib::_IAgVAStateCalcMaxValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcMinValue wrapper method implementations
//

#pragma implementation_key(1036)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcMinValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1037)
inline void AgStkGatorLib::IAgVAStateCalcMinValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcMinValue wrapper method implementations
//

#pragma implementation_key(1038)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMinValue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1039)
inline void AgStkGatorLib::_IAgVAStateCalcMinValue::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1040)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMinValue::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1041)
inline void AgStkGatorLib::_IAgVAStateCalcMinValue::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1042)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMinValue::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1043)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcMinValue::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcMinValue::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1045)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcMinValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1046)
inline void AgStkGatorLib::_IAgVAStateCalcMinValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcNegative wrapper method implementations
//

#pragma implementation_key(1047)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcNegative::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1048)
inline void AgStkGatorLib::IAgVAStateCalcNegative::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcNegative wrapper method implementations
//

#pragma implementation_key(1049)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcNegative::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1050)
inline void AgStkGatorLib::_IAgVAStateCalcNegative::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcNegative::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1052)
inline void AgStkGatorLib::_IAgVAStateCalcNegative::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcNegative::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1054)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcNegative::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1055)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcNegative::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1056)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcNegative::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1057)
inline void AgStkGatorLib::_IAgVAStateCalcNegative::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcTrueAnomaly wrapper method implementations
//

#pragma implementation_key(1058)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcTrueAnomaly::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1059)
inline void AgStkGatorLib::IAgVAStateCalcTrueAnomaly::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1060)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcTrueAnomaly::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1061)
inline void AgStkGatorLib::IAgVAStateCalcTrueAnomaly::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcTrueAnomaly wrapper method implementations
//

#pragma implementation_key(1062)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1063)
inline void AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1064)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1065)
inline void AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1066)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1067)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1069)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1070)
inline void AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void AgStkGatorLib::_IAgVAStateCalcTrueAnomaly::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABDotRCalc wrapper method implementations
//

#pragma implementation_key(1073)
inline _bstr_t AgStkGatorLib::IAgVABDotRCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1074)
inline void AgStkGatorLib::IAgVABDotRCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1075)
inline _bstr_t AgStkGatorLib::IAgVABDotRCalc::GetRefVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1076)
inline void AgStkGatorLib::IAgVABDotRCalc::PutRefVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABDotRCalc wrapper method implementations
//

#pragma implementation_key(1077)
inline _bstr_t AgStkGatorLib::_IAgVABDotRCalc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1078)
inline void AgStkGatorLib::_IAgVABDotRCalc::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1079)
inline _bstr_t AgStkGatorLib::_IAgVABDotRCalc::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1080)
inline void AgStkGatorLib::_IAgVABDotRCalc::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1081)
inline _bstr_t AgStkGatorLib::_IAgVABDotRCalc::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1082)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABDotRCalc::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline IUnknownPtr AgStkGatorLib::_IAgVABDotRCalc::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1084)
inline _bstr_t AgStkGatorLib::_IAgVABDotRCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1085)
inline void AgStkGatorLib::_IAgVABDotRCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline _bstr_t AgStkGatorLib::_IAgVABDotRCalc::GetRefVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1087)
inline void AgStkGatorLib::_IAgVABDotRCalc::PutRefVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABDotTCalc wrapper method implementations
//

#pragma implementation_key(1088)
inline _bstr_t AgStkGatorLib::IAgVABDotTCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1089)
inline void AgStkGatorLib::IAgVABDotTCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline _bstr_t AgStkGatorLib::IAgVABDotTCalc::GetRefVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1091)
inline void AgStkGatorLib::IAgVABDotTCalc::PutRefVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABDotTCalc wrapper method implementations
//

#pragma implementation_key(1092)
inline _bstr_t AgStkGatorLib::_IAgVABDotTCalc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1093)
inline void AgStkGatorLib::_IAgVABDotTCalc::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline _bstr_t AgStkGatorLib::_IAgVABDotTCalc::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1095)
inline void AgStkGatorLib::_IAgVABDotTCalc::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline _bstr_t AgStkGatorLib::_IAgVABDotTCalc::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1097)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABDotTCalc::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline IUnknownPtr AgStkGatorLib::_IAgVABDotTCalc::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1099)
inline _bstr_t AgStkGatorLib::_IAgVABDotTCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1100)
inline void AgStkGatorLib::_IAgVABDotTCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1101)
inline _bstr_t AgStkGatorLib::_IAgVABDotTCalc::GetRefVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1102)
inline void AgStkGatorLib::_IAgVABDotTCalc::PutRefVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABMagCalc wrapper method implementations
//

#pragma implementation_key(1103)
inline _bstr_t AgStkGatorLib::IAgVABMagCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1104)
inline void AgStkGatorLib::IAgVABMagCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABMagCalc wrapper method implementations
//

#pragma implementation_key(1105)
inline _bstr_t AgStkGatorLib::_IAgVABMagCalc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1106)
inline void AgStkGatorLib::_IAgVABMagCalc::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1107)
inline _bstr_t AgStkGatorLib::_IAgVABMagCalc::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1108)
inline void AgStkGatorLib::_IAgVABMagCalc::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1109)
inline _bstr_t AgStkGatorLib::_IAgVABMagCalc::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1110)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABMagCalc::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1111)
inline IUnknownPtr AgStkGatorLib::_IAgVABMagCalc::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1112)
inline _bstr_t AgStkGatorLib::_IAgVABMagCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1113)
inline void AgStkGatorLib::_IAgVABMagCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABThetaCalc wrapper method implementations
//

#pragma implementation_key(1114)
inline _bstr_t AgStkGatorLib::IAgVABThetaCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1115)
inline void AgStkGatorLib::IAgVABThetaCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1116)
inline _bstr_t AgStkGatorLib::IAgVABThetaCalc::GetRefVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1117)
inline void AgStkGatorLib::IAgVABThetaCalc::PutRefVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABThetaCalc wrapper method implementations
//

#pragma implementation_key(1118)
inline _bstr_t AgStkGatorLib::_IAgVABThetaCalc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1119)
inline void AgStkGatorLib::_IAgVABThetaCalc::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline _bstr_t AgStkGatorLib::_IAgVABThetaCalc::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1121)
inline void AgStkGatorLib::_IAgVABThetaCalc::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1122)
inline _bstr_t AgStkGatorLib::_IAgVABThetaCalc::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1123)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABThetaCalc::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline IUnknownPtr AgStkGatorLib::_IAgVABThetaCalc::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1125)
inline _bstr_t AgStkGatorLib::_IAgVABThetaCalc::GetTargetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1126)
inline void AgStkGatorLib::_IAgVABThetaCalc::PutTargetBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline _bstr_t AgStkGatorLib::_IAgVABThetaCalc::GetRefVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1128)
inline void AgStkGatorLib::_IAgVABThetaCalc::PutRefVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDeltaDec wrapper method implementations
//

#pragma implementation_key(1129)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDeltaDec::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1130)
inline void AgStkGatorLib::IAgVAStateCalcDeltaDec::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1131)
inline enum AgStkGatorLib::AgEVACalcObjectCentralBodyReference AgStkGatorLib::IAgVAStateCalcDeltaDec::GetReferenceType ( ) {
    enum AgEVACalcObjectCentralBodyReference _result;
    HRESULT _hr = get_ReferenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void AgStkGatorLib::IAgVAStateCalcDeltaDec::PutReferenceType ( enum AgEVACalcObjectCentralBodyReference pVal ) {
    HRESULT _hr = put_ReferenceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDeltaDec::GetReferenceBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1134)
inline void AgStkGatorLib::IAgVAStateCalcDeltaDec::PutReferenceBody ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDeltaDec wrapper method implementations
//

#pragma implementation_key(1135)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaDec::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1136)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaDec::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1137)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaDec::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1138)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaDec::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1139)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaDec::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1140)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDeltaDec::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1141)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDeltaDec::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1142)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaDec::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1143)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaDec::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline enum AgStkGatorLib::AgEVACalcObjectCentralBodyReference AgStkGatorLib::_IAgVAStateCalcDeltaDec::GetReferenceType ( ) {
    enum AgEVACalcObjectCentralBodyReference _result;
    HRESULT _hr = get_ReferenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaDec::PutReferenceType ( enum AgEVACalcObjectCentralBodyReference pVal ) {
    HRESULT _hr = put_ReferenceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1146)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaDec::GetReferenceBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1147)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaDec::PutReferenceBody ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDeltaRA wrapper method implementations
//

#pragma implementation_key(1148)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDeltaRA::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1149)
inline void AgStkGatorLib::IAgVAStateCalcDeltaRA::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1150)
inline enum AgStkGatorLib::AgEVACalcObjectCentralBodyReference AgStkGatorLib::IAgVAStateCalcDeltaRA::GetReferenceType ( ) {
    enum AgEVACalcObjectCentralBodyReference _result;
    HRESULT _hr = get_ReferenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline void AgStkGatorLib::IAgVAStateCalcDeltaRA::PutReferenceType ( enum AgEVACalcObjectCentralBodyReference pVal ) {
    HRESULT _hr = put_ReferenceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDeltaRA::GetReferenceBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1153)
inline void AgStkGatorLib::IAgVAStateCalcDeltaRA::PutReferenceBody ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDeltaRA wrapper method implementations
//

#pragma implementation_key(1154)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaRA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1155)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaRA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaRA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1157)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaRA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaRA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1159)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDeltaRA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDeltaRA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1161)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaRA::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1162)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaRA::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1163)
inline enum AgStkGatorLib::AgEVACalcObjectCentralBodyReference AgStkGatorLib::_IAgVAStateCalcDeltaRA::GetReferenceType ( ) {
    enum AgEVACalcObjectCentralBodyReference _result;
    HRESULT _hr = get_ReferenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1164)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaRA::PutReferenceType ( enum AgEVACalcObjectCentralBodyReference pVal ) {
    HRESULT _hr = put_ReferenceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1165)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDeltaRA::GetReferenceBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1166)
inline void AgStkGatorLib::_IAgVAStateCalcDeltaRA::PutReferenceBody ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcApparentSolarLon wrapper method implementations
//

#pragma implementation_key(1167)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcApparentSolarLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1168)
inline void AgStkGatorLib::IAgVAStateCalcApparentSolarLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcApparentSolarLon wrapper method implementations
//

#pragma implementation_key(1169)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1170)
inline void AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1171)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1172)
inline void AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1174)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1176)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1177)
inline void AgStkGatorLib::_IAgVAStateCalcApparentSolarLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcBetaAngle wrapper method implementations
//

#pragma implementation_key(1178)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcBetaAngle::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1179)
inline void AgStkGatorLib::IAgVAStateCalcBetaAngle::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcBetaAngle wrapper method implementations
//

#pragma implementation_key(1180)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcBetaAngle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1181)
inline void AgStkGatorLib::_IAgVAStateCalcBetaAngle::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcBetaAngle::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1183)
inline void AgStkGatorLib::_IAgVAStateCalcBetaAngle::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1184)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcBetaAngle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1185)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcBetaAngle::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcBetaAngle::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1187)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcBetaAngle::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1188)
inline void AgStkGatorLib::_IAgVAStateCalcBetaAngle::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEarthMeanSolarLon wrapper method implementations
//

#pragma implementation_key(1189)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEarthMeanSolarLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1190)
inline void AgStkGatorLib::IAgVAStateCalcEarthMeanSolarLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEarthMeanSolarLon wrapper method implementations
//

#pragma implementation_key(1191)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1192)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1194)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1195)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1196)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1198)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1199)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcLocalApparentSolarLon wrapper method implementations
//

#pragma implementation_key(1200)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcLocalApparentSolarLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1201)
inline void AgStkGatorLib::IAgVAStateCalcLocalApparentSolarLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcLocalApparentSolarLon wrapper method implementations
//

#pragma implementation_key(1202)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1203)
inline void AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1204)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1205)
inline void AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1206)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1207)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1208)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1209)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1210)
inline void AgStkGatorLib::_IAgVAStateCalcLocalApparentSolarLon::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcLonOfPeriapsis wrapper method implementations
//

#pragma implementation_key(1211)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcLonOfPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1212)
inline void AgStkGatorLib::IAgVAStateCalcLonOfPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcLonOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline void AgStkGatorLib::IAgVAStateCalcLonOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcLonOfPeriapsis wrapper method implementations
//

#pragma implementation_key(1215)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1216)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1217)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1218)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1219)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1220)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1221)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1222)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1223)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1224)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1225)
inline void AgStkGatorLib::_IAgVAStateCalcLonOfPeriapsis::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOrbitStateValue wrapper method implementations
//

#pragma implementation_key(1226)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1227)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1228)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetInputCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputCoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1229)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutInputCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_InputCoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1230)
inline _variant_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetX ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1231)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutX ( const _variant_t & pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1232)
inline _variant_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetY ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1233)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutY ( const _variant_t & pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1234)
inline _variant_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetZ ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1235)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutZ ( const _variant_t & pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline _variant_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetVx ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1237)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutVx ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline _variant_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetVy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1239)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutVy ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline _variant_t AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetVz ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1241)
inline void AgStkGatorLib::IAgVAStateCalcOrbitStateValue::PutVz ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline HRESULT AgStkGatorLib::IAgVAStateCalcOrbitStateValue::EnableControlParameter ( enum AgEVAControlOrbitStateValue Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1243)
inline HRESULT AgStkGatorLib::IAgVAStateCalcOrbitStateValue::DisableControlParameter ( enum AgEVAControlOrbitStateValue Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1244)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcOrbitStateValue::IsControlParameterEnabled ( enum AgEVAControlOrbitStateValue Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1245)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcOrbitStateValue::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAStateCalcOrbitStateValue wrapper method implementations
//

#pragma implementation_key(1246)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1247)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1249)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1251)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1252)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1253)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1254)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1255)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetInputCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputCoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1256)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutInputCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_InputCoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1257)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetX ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1258)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutX ( const _variant_t & pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetY ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1260)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutY ( const _variant_t & pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetZ ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1262)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutZ ( const _variant_t & pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1263)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetVx ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1264)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutVx ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1265)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetVy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1266)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutVy ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1267)
inline _variant_t AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetVz ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1268)
inline void AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::PutVz ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline HRESULT AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::EnableControlParameter ( enum AgEVAControlOrbitStateValue Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1270)
inline HRESULT AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::DisableControlParameter ( enum AgEVAControlOrbitStateValue Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1271)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::IsControlParameterEnabled ( enum AgEVAControlOrbitStateValue Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOrbitStateValue::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAStateCalcSignedEccentricity wrapper method implementations
//

#pragma implementation_key(1273)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcSignedEccentricity::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1274)
inline void AgStkGatorLib::IAgVAStateCalcSignedEccentricity::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcSignedEccentricity::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline void AgStkGatorLib::IAgVAStateCalcSignedEccentricity::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcSignedEccentricity wrapper method implementations
//

#pragma implementation_key(1277)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1278)
inline void AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1280)
inline void AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1281)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1282)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1284)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1285)
inline void AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline void AgStkGatorLib::_IAgVAStateCalcSignedEccentricity::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcTrueLon wrapper method implementations
//

#pragma implementation_key(1288)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcTrueLon::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1289)
inline void AgStkGatorLib::IAgVAStateCalcTrueLon::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcTrueLon::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1291)
inline void AgStkGatorLib::IAgVAStateCalcTrueLon::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcTrueLon wrapper method implementations
//

#pragma implementation_key(1292)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueLon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1293)
inline void AgStkGatorLib::_IAgVAStateCalcTrueLon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1294)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueLon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1295)
inline void AgStkGatorLib::_IAgVAStateCalcTrueLon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1296)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueLon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1297)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcTrueLon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcTrueLon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1299)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcTrueLon::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1300)
inline void AgStkGatorLib::_IAgVAStateCalcTrueLon::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1301)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcTrueLon::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline void AgStkGatorLib::_IAgVAStateCalcTrueLon::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcPower wrapper method implementations
//

#pragma implementation_key(1303)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcPower::GetPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1304)
inline void AgStkGatorLib::IAgVAStateCalcPower::PutPowerSourceName ( _bstr_t pVal ) {
    HRESULT _hr = put_PowerSourceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcPower wrapper method implementations
//

#pragma implementation_key(1305)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPower::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1306)
inline void AgStkGatorLib::_IAgVAStateCalcPower::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1307)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPower::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1308)
inline void AgStkGatorLib::_IAgVAStateCalcPower::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1309)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPower::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1310)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcPower::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcPower::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1312)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcPower::GetPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1313)
inline void AgStkGatorLib::_IAgVAStateCalcPower::PutPowerSourceName ( _bstr_t pVal ) {
    HRESULT _hr = put_PowerSourceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRelMotion wrapper method implementations
//

#pragma implementation_key(1314)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRelMotion::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1315)
inline void AgStkGatorLib::IAgVAStateCalcRelMotion::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcRelMotion::GetOriginAtMaster ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginAtMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1317)
inline void AgStkGatorLib::IAgVAStateCalcRelMotion::PutOriginAtMaster ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OriginAtMaster(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1318)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::IAgVAStateCalcRelMotion::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1319)
inline void AgStkGatorLib::IAgVAStateCalcRelMotion::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1320)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcRelMotion::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcRelMotion wrapper method implementations
//

#pragma implementation_key(1321)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelMotion::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1322)
inline void AgStkGatorLib::_IAgVAStateCalcRelMotion::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1323)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelMotion::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1324)
inline void AgStkGatorLib::_IAgVAStateCalcRelMotion::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelMotion::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1326)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRelMotion::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRelMotion::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1328)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRelMotion::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1329)
inline void AgStkGatorLib::_IAgVAStateCalcRelMotion::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1330)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRelMotion::GetOriginAtMaster ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginAtMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1331)
inline void AgStkGatorLib::_IAgVAStateCalcRelMotion::PutOriginAtMaster ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OriginAtMaster(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1332)
inline enum AgStkGatorLib::AgEVACalcObjectReference AgStkGatorLib::_IAgVAStateCalcRelMotion::GetReferenceSelection ( ) {
    enum AgEVACalcObjectReference _result;
    HRESULT _hr = get_ReferenceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline void AgStkGatorLib::_IAgVAStateCalcRelMotion::PutReferenceSelection ( enum AgEVACalcObjectReference pVal ) {
    HRESULT _hr = put_ReferenceSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1334)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcRelMotion::GetReference ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcCustomFunction wrapper method implementations
//

#pragma implementation_key(1335)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCustomFunction::GetResetFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResetFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1336)
inline void AgStkGatorLib::IAgVAStateCalcCustomFunction::PutResetFunctionName ( _bstr_t pVal ) {
    HRESULT _hr = put_ResetFunctionName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCustomFunction::GetEvalFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvalFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1338)
inline void AgStkGatorLib::IAgVAStateCalcCustomFunction::PutEvalFunctionName ( _bstr_t pVal ) {
    HRESULT _hr = put_EvalFunctionName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCustomFunction::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1340)
inline void AgStkGatorLib::IAgVAStateCalcCustomFunction::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcCustomFunction wrapper method implementations
//

#pragma implementation_key(1341)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCustomFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1342)
inline void AgStkGatorLib::_IAgVAStateCalcCustomFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCustomFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1344)
inline void AgStkGatorLib::_IAgVAStateCalcCustomFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCustomFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCustomFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1347)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCustomFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1348)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCustomFunction::GetResetFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResetFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1349)
inline void AgStkGatorLib::_IAgVAStateCalcCustomFunction::PutResetFunctionName ( _bstr_t pVal ) {
    HRESULT _hr = put_ResetFunctionName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1350)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCustomFunction::GetEvalFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvalFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1351)
inline void AgStkGatorLib::_IAgVAStateCalcCustomFunction::PutEvalFunctionName ( _bstr_t pVal ) {
    HRESULT _hr = put_EvalFunctionName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1352)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCustomFunction::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1353)
inline void AgStkGatorLib::_IAgVAStateCalcCustomFunction::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcScript wrapper method implementations
//

#pragma implementation_key(1354)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::IAgVAStateCalcScript::GetCalcArguments ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_CalcArguments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(1355)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcScript::GetInlineFunc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InlineFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1356)
inline void AgStkGatorLib::IAgVAStateCalcScript::PutInlineFunc ( _bstr_t pVal ) {
    HRESULT _hr = put_InlineFunc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1357)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcScript::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1358)
inline void AgStkGatorLib::IAgVAStateCalcScript::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcScript wrapper method implementations
//

#pragma implementation_key(1359)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScript::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1360)
inline void AgStkGatorLib::_IAgVAStateCalcScript::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScript::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1362)
inline void AgStkGatorLib::_IAgVAStateCalcScript::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1363)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScript::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1364)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcScript::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcScript::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1366)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAStateCalcScript::GetCalcArguments ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_CalcArguments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(1367)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScript::GetInlineFunc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InlineFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1368)
inline void AgStkGatorLib::_IAgVAStateCalcScript::PutInlineFunc ( _bstr_t pVal ) {
    HRESULT _hr = put_InlineFunc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1369)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScript::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1370)
inline void AgStkGatorLib::_IAgVAStateCalcScript::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcCd wrapper method implementations
//

#pragma implementation_key(1371)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCd::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1372)
inline void AgStkGatorLib::_IAgVAStateCalcCd::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCd::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1374)
inline void AgStkGatorLib::_IAgVAStateCalcCd::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1375)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCd::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1376)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCd::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCd::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcCr wrapper method implementations
//

#pragma implementation_key(1378)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCr::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1379)
inline void AgStkGatorLib::_IAgVAStateCalcCr::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1380)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCr::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1381)
inline void AgStkGatorLib::_IAgVAStateCalcCr::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCr::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1383)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCr::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1384)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCr::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcDragArea wrapper method implementations
//

#pragma implementation_key(1385)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDragArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1386)
inline void AgStkGatorLib::_IAgVAStateCalcDragArea::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1387)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDragArea::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1388)
inline void AgStkGatorLib::_IAgVAStateCalcDragArea::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1389)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDragArea::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1390)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDragArea::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1391)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDragArea::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcRadiationPressureArea wrapper method implementations
//

#pragma implementation_key(1392)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1393)
inline void AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1394)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1395)
inline void AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1396)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1397)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRadiationPressureArea::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcRadiationPressureCoefficient wrapper method implementations
//

#pragma implementation_key(1399)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1400)
inline void AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1401)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1402)
inline void AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1403)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1404)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1405)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRadiationPressureCoefficient::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateCalcSRPArea wrapper method implementations
//

#pragma implementation_key(1406)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSRPArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1407)
inline void AgStkGatorLib::_IAgVAStateCalcSRPArea::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSRPArea::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1409)
inline void AgStkGatorLib::_IAgVAStateCalcSRPArea::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSRPArea::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1411)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSRPArea::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1412)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSRPArea::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcCosOfVerticalFPA wrapper method implementations
//

#pragma implementation_key(1413)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCosOfVerticalFPA::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1414)
inline void AgStkGatorLib::IAgVAStateCalcCosOfVerticalFPA::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcCosOfVerticalFPA wrapper method implementations
//

#pragma implementation_key(1415)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1416)
inline void AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1417)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1418)
inline void AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1419)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1420)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1421)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1422)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1423)
inline void AgStkGatorLib::_IAgVAStateCalcCosOfVerticalFPA::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDec wrapper method implementations
//

#pragma implementation_key(1424)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDec::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1425)
inline void AgStkGatorLib::IAgVAStateCalcDec::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDec wrapper method implementations
//

#pragma implementation_key(1426)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDec::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1427)
inline void AgStkGatorLib::_IAgVAStateCalcDec::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1428)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDec::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1429)
inline void AgStkGatorLib::_IAgVAStateCalcDec::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1430)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDec::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1431)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDec::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1432)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDec::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1433)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDec::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1434)
inline void AgStkGatorLib::_IAgVAStateCalcDec::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcFPA wrapper method implementations
//

#pragma implementation_key(1435)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcFPA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1436)
inline void AgStkGatorLib::IAgVAStateCalcFPA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcFPA wrapper method implementations
//

#pragma implementation_key(1437)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFPA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1438)
inline void AgStkGatorLib::_IAgVAStateCalcFPA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1439)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFPA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1440)
inline void AgStkGatorLib::_IAgVAStateCalcFPA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1441)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFPA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1442)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcFPA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcFPA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1444)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcFPA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1445)
inline void AgStkGatorLib::_IAgVAStateCalcFPA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRMag wrapper method implementations
//

#pragma implementation_key(1446)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRMag::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1447)
inline void AgStkGatorLib::IAgVAStateCalcRMag::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRMag::GetReferencePointName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferencePointName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1449)
inline void AgStkGatorLib::IAgVAStateCalcRMag::PutReferencePointName ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferencePointName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRMag wrapper method implementations
//

#pragma implementation_key(1450)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRMag::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1451)
inline void AgStkGatorLib::_IAgVAStateCalcRMag::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1452)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRMag::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1453)
inline void AgStkGatorLib::_IAgVAStateCalcRMag::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRMag::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1455)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRMag::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1456)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRMag::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1457)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRMag::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1458)
inline void AgStkGatorLib::_IAgVAStateCalcRMag::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1459)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRMag::GetReferencePointName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferencePointName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1460)
inline void AgStkGatorLib::_IAgVAStateCalcRMag::PutReferencePointName ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferencePointName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcRA wrapper method implementations
//

#pragma implementation_key(1461)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1462)
inline void AgStkGatorLib::IAgVAStateCalcRA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRA wrapper method implementations
//

#pragma implementation_key(1463)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1464)
inline void AgStkGatorLib::_IAgVAStateCalcRA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1465)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1466)
inline void AgStkGatorLib::_IAgVAStateCalcRA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1467)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1468)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1470)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1471)
inline void AgStkGatorLib::_IAgVAStateCalcRA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVMag wrapper method implementations
//

#pragma implementation_key(1472)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVMag::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1473)
inline void AgStkGatorLib::IAgVAStateCalcVMag::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVMag wrapper method implementations
//

#pragma implementation_key(1474)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVMag::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1475)
inline void AgStkGatorLib::_IAgVAStateCalcVMag::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1476)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVMag::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1477)
inline void AgStkGatorLib::_IAgVAStateCalcVMag::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1478)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVMag::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1479)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVMag::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVMag::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1481)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVMag::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1482)
inline void AgStkGatorLib::_IAgVAStateCalcVMag::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVelAz wrapper method implementations
//

#pragma implementation_key(1483)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVelAz::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1484)
inline void AgStkGatorLib::IAgVAStateCalcVelAz::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVelAz wrapper method implementations
//

#pragma implementation_key(1485)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelAz::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1486)
inline void AgStkGatorLib::_IAgVAStateCalcVelAz::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelAz::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1488)
inline void AgStkGatorLib::_IAgVAStateCalcVelAz::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1489)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelAz::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1490)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVelAz::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1491)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVelAz::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1492)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVelAz::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1493)
inline void AgStkGatorLib::_IAgVAStateCalcVelAz::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcC3Energy wrapper method implementations
//

#pragma implementation_key(1494)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcC3Energy::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1495)
inline void AgStkGatorLib::IAgVAStateCalcC3Energy::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1496)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::IAgVAStateCalcC3Energy::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1497)
inline void AgStkGatorLib::IAgVAStateCalcC3Energy::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcC3Energy wrapper method implementations
//

#pragma implementation_key(1498)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcC3Energy::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1499)
inline void AgStkGatorLib::_IAgVAStateCalcC3Energy::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1500)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcC3Energy::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1501)
inline void AgStkGatorLib::_IAgVAStateCalcC3Energy::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1502)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcC3Energy::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1503)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcC3Energy::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1504)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcC3Energy::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1505)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcC3Energy::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1506)
inline void AgStkGatorLib::_IAgVAStateCalcC3Energy::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline enum AgStkGatorLib::AgEVACalcObjectElem AgStkGatorLib::_IAgVAStateCalcC3Energy::GetElementType ( ) {
    enum AgEVACalcObjectElem _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1508)
inline void AgStkGatorLib::_IAgVAStateCalcC3Energy::PutElementType ( enum AgEVACalcObjectElem pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcInAsympDec wrapper method implementations
//

#pragma implementation_key(1509)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInAsympDec::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1510)
inline void AgStkGatorLib::IAgVAStateCalcInAsympDec::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInAsympDec wrapper method implementations
//

#pragma implementation_key(1511)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympDec::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1512)
inline void AgStkGatorLib::_IAgVAStateCalcInAsympDec::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1513)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympDec::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1514)
inline void AgStkGatorLib::_IAgVAStateCalcInAsympDec::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1515)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympDec::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1516)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInAsympDec::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInAsympDec::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1518)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympDec::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1519)
inline void AgStkGatorLib::_IAgVAStateCalcInAsympDec::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcInAsympRA wrapper method implementations
//

#pragma implementation_key(1520)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInAsympRA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1521)
inline void AgStkGatorLib::IAgVAStateCalcInAsympRA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInAsympRA wrapper method implementations
//

#pragma implementation_key(1522)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympRA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1523)
inline void AgStkGatorLib::_IAgVAStateCalcInAsympRA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1524)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympRA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1525)
inline void AgStkGatorLib::_IAgVAStateCalcInAsympRA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1526)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympRA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1527)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInAsympRA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInAsympRA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1529)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInAsympRA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1530)
inline void AgStkGatorLib::_IAgVAStateCalcInAsympRA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcInVelAzAtPeriapsis wrapper method implementations
//

#pragma implementation_key(1531)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcInVelAzAtPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1532)
inline void AgStkGatorLib::IAgVAStateCalcInVelAzAtPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcInVelAzAtPeriapsis wrapper method implementations
//

#pragma implementation_key(1533)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1534)
inline void AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1535)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1536)
inline void AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1537)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1538)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1540)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1541)
inline void AgStkGatorLib::_IAgVAStateCalcInVelAzAtPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOutAsympDec wrapper method implementations
//

#pragma implementation_key(1542)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOutAsympDec::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1543)
inline void AgStkGatorLib::IAgVAStateCalcOutAsympDec::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOutAsympDec wrapper method implementations
//

#pragma implementation_key(1544)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympDec::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1545)
inline void AgStkGatorLib::_IAgVAStateCalcOutAsympDec::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1546)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympDec::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1547)
inline void AgStkGatorLib::_IAgVAStateCalcOutAsympDec::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1548)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympDec::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1549)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOutAsympDec::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1550)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOutAsympDec::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1551)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympDec::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1552)
inline void AgStkGatorLib::_IAgVAStateCalcOutAsympDec::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOutAsympRA wrapper method implementations
//

#pragma implementation_key(1553)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOutAsympRA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1554)
inline void AgStkGatorLib::IAgVAStateCalcOutAsympRA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOutAsympRA wrapper method implementations
//

#pragma implementation_key(1555)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympRA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1556)
inline void AgStkGatorLib::_IAgVAStateCalcOutAsympRA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1557)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympRA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1558)
inline void AgStkGatorLib::_IAgVAStateCalcOutAsympRA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1559)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympRA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1560)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOutAsympRA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOutAsympRA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1562)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutAsympRA::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1563)
inline void AgStkGatorLib::_IAgVAStateCalcOutAsympRA::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOutVelAzAtPeriapsis wrapper method implementations
//

#pragma implementation_key(1564)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcOutVelAzAtPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1565)
inline void AgStkGatorLib::IAgVAStateCalcOutVelAzAtPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOutVelAzAtPeriapsis wrapper method implementations
//

#pragma implementation_key(1566)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1567)
inline void AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1569)
inline void AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1570)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1571)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1572)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1573)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1574)
inline void AgStkGatorLib::_IAgVAStateCalcOutVelAzAtPeriapsis::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDuration wrapper method implementations
//

#pragma implementation_key(1575)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDuration::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1576)
inline void AgStkGatorLib::_IAgVAStateCalcDuration::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1577)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDuration::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1578)
inline void AgStkGatorLib::_IAgVAStateCalcDuration::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1579)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDuration::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1580)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDuration::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDuration::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcUserValue wrapper method implementations
//

#pragma implementation_key(1582)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcUserValue::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1583)
inline void AgStkGatorLib::IAgVAStateCalcUserValue::PutVariableName ( _bstr_t pVal ) {
    HRESULT _hr = put_VariableName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcUserValue wrapper method implementations
//

#pragma implementation_key(1584)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcUserValue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1585)
inline void AgStkGatorLib::_IAgVAStateCalcUserValue::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1586)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcUserValue::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1587)
inline void AgStkGatorLib::_IAgVAStateCalcUserValue::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1588)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcUserValue::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1589)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcUserValue::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcUserValue::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1591)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcUserValue::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1592)
inline void AgStkGatorLib::_IAgVAStateCalcUserValue::PutVariableName ( _bstr_t pVal ) {
    HRESULT _hr = put_VariableName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcCrdnAngle wrapper method implementations
//

#pragma implementation_key(1593)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcCrdnAngle::GetAngleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AngleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1594)
inline void AgStkGatorLib::IAgVAStateCalcCrdnAngle::PutAngleName ( _bstr_t pVal ) {
    HRESULT _hr = put_AngleName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcCrdnAngle wrapper method implementations
//

#pragma implementation_key(1595)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCrdnAngle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1596)
inline void AgStkGatorLib::_IAgVAStateCalcCrdnAngle::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCrdnAngle::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1598)
inline void AgStkGatorLib::_IAgVAStateCalcCrdnAngle::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1599)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCrdnAngle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1600)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcCrdnAngle::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcCrdnAngle::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1602)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcCrdnAngle::GetAngleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AngleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1603)
inline void AgStkGatorLib::_IAgVAStateCalcCrdnAngle::PutAngleName ( _bstr_t pVal ) {
    HRESULT _hr = put_AngleName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcAngle wrapper method implementations
//

#pragma implementation_key(1604)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcAngle::GetVector1Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector1Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1605)
inline void AgStkGatorLib::IAgVAStateCalcAngle::PutVector1Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector1Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1606)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcAngle::GetVector2Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector2Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1607)
inline void AgStkGatorLib::IAgVAStateCalcAngle::PutVector2Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector2Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcAngle wrapper method implementations
//

#pragma implementation_key(1608)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAngle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1609)
inline void AgStkGatorLib::_IAgVAStateCalcAngle::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1610)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAngle::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1611)
inline void AgStkGatorLib::_IAgVAStateCalcAngle::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1612)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAngle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1613)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcAngle::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1614)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcAngle::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1615)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAngle::GetVector1Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector1Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1616)
inline void AgStkGatorLib::_IAgVAStateCalcAngle::PutVector1Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector1Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1617)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcAngle::GetVector2Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector2Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1618)
inline void AgStkGatorLib::_IAgVAStateCalcAngle::PutVector2Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector2Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDotProduct wrapper method implementations
//

#pragma implementation_key(1619)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDotProduct::GetVector1Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector1Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1620)
inline void AgStkGatorLib::IAgVAStateCalcDotProduct::PutVector1Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector1Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1621)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDotProduct::GetVector2Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector2Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1622)
inline void AgStkGatorLib::IAgVAStateCalcDotProduct::PutVector2Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector2Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDotProduct wrapper method implementations
//

#pragma implementation_key(1623)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDotProduct::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1624)
inline void AgStkGatorLib::_IAgVAStateCalcDotProduct::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1625)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDotProduct::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1626)
inline void AgStkGatorLib::_IAgVAStateCalcDotProduct::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1627)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDotProduct::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1628)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDotProduct::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1629)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDotProduct::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1630)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDotProduct::GetVector1Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector1Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1631)
inline void AgStkGatorLib::_IAgVAStateCalcDotProduct::PutVector1Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector1Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1632)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDotProduct::GetVector2Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vector2Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1633)
inline void AgStkGatorLib::_IAgVAStateCalcDotProduct::PutVector2Name ( _bstr_t pVal ) {
    HRESULT _hr = put_Vector2Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVectorDec wrapper method implementations
//

#pragma implementation_key(1634)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorDec::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1635)
inline void AgStkGatorLib::IAgVAStateCalcVectorDec::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1636)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorDec::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1637)
inline void AgStkGatorLib::IAgVAStateCalcVectorDec::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVectorDec wrapper method implementations
//

#pragma implementation_key(1638)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorDec::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1639)
inline void AgStkGatorLib::_IAgVAStateCalcVectorDec::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1640)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorDec::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1641)
inline void AgStkGatorLib::_IAgVAStateCalcVectorDec::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1642)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorDec::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1643)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorDec::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1644)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVectorDec::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1645)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorDec::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1646)
inline void AgStkGatorLib::_IAgVAStateCalcVectorDec::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1647)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorDec::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1648)
inline void AgStkGatorLib::_IAgVAStateCalcVectorDec::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVectorMag wrapper method implementations
//

#pragma implementation_key(1649)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorMag::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1650)
inline void AgStkGatorLib::IAgVAStateCalcVectorMag::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1651)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorMag::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1652)
inline void AgStkGatorLib::IAgVAStateCalcVectorMag::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVectorMag wrapper method implementations
//

#pragma implementation_key(1653)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorMag::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1654)
inline void AgStkGatorLib::_IAgVAStateCalcVectorMag::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1655)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorMag::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1656)
inline void AgStkGatorLib::_IAgVAStateCalcVectorMag::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1657)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorMag::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1658)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorMag::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1659)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVectorMag::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1660)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorMag::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1661)
inline void AgStkGatorLib::_IAgVAStateCalcVectorMag::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1662)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorMag::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1663)
inline void AgStkGatorLib::_IAgVAStateCalcVectorMag::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcVectorRA wrapper method implementations
//

#pragma implementation_key(1664)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorRA::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1665)
inline void AgStkGatorLib::IAgVAStateCalcVectorRA::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1666)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcVectorRA::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1667)
inline void AgStkGatorLib::IAgVAStateCalcVectorRA::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcVectorRA wrapper method implementations
//

#pragma implementation_key(1668)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorRA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1669)
inline void AgStkGatorLib::_IAgVAStateCalcVectorRA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1670)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorRA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1671)
inline void AgStkGatorLib::_IAgVAStateCalcVectorRA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1672)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorRA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1673)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcVectorRA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcVectorRA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1675)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorRA::GetCoordAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1676)
inline void AgStkGatorLib::_IAgVAStateCalcVectorRA::PutCoordAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcVectorRA::GetVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1678)
inline void AgStkGatorLib::_IAgVAStateCalcVectorRA::PutVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_VectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcOnePtAccess wrapper method implementations
//

#pragma implementation_key(1679)
inline enum STKObjects::AgEAberrationType AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetAberrationType ( ) {
    enum STKObjects::AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void AgStkGatorLib::IAgVAStateCalcOnePtAccess::PutAberrationType ( enum STKObjects::AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline HRESULT AgStkGatorLib::IAgVAStateCalcOnePtAccess::SetBaseSelection ( enum AgEVABaseSelection Selection ) {
    HRESULT _hr = raw_SetBaseSelection(Selection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1682)
inline enum AgStkGatorLib::AgEVABaseSelection AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetBaseSelectionType ( ) {
    enum AgEVABaseSelection _result;
    HRESULT _hr = get_BaseSelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1683)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetBaseSelection ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_BaseSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(1684)
inline enum STKObjects::AgEIvClockHost AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetClockHost ( ) {
    enum STKObjects::AgEIvClockHost _result;
    HRESULT _hr = get_ClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1685)
inline void AgStkGatorLib::IAgVAStateCalcOnePtAccess::PutClockHost ( enum STKObjects::AgEIvClockHost pVal ) {
    HRESULT _hr = put_ClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1686)
inline enum STKObjects::AgEIvTimeSense AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetSignalSense ( ) {
    enum STKObjects::AgEIvTimeSense _result;
    HRESULT _hr = get_SignalSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline void AgStkGatorLib::IAgVAStateCalcOnePtAccess::PutSignalSense ( enum STKObjects::AgEIvTimeSense pVal ) {
    HRESULT _hr = put_SignalSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1688)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetTargetObject ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(1689)
inline double AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetTimeDelayConvergenceTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergenceTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void AgStkGatorLib::IAgVAStateCalcOnePtAccess::PutTimeDelayConvergenceTolerance ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergenceTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStateCalcOnePtAccess::GetUseLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline void AgStkGatorLib::IAgVAStateCalcOnePtAccess::PutUseLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcOnePtAccess wrapper method implementations
//

#pragma implementation_key(1693)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1694)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1696)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1697)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1698)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOnePtAccess::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1699)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcOnePtAccess::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1700)
inline enum STKObjects::AgEAberrationType AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetAberrationType ( ) {
    enum STKObjects::AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1701)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutAberrationType ( enum STKObjects::AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1702)
inline HRESULT AgStkGatorLib::_IAgVAStateCalcOnePtAccess::SetBaseSelection ( enum AgEVABaseSelection Selection ) {
    HRESULT _hr = raw_SetBaseSelection(Selection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1703)
inline enum AgStkGatorLib::AgEVABaseSelection AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetBaseSelectionType ( ) {
    enum AgEVABaseSelection _result;
    HRESULT _hr = get_BaseSelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1704)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetBaseSelection ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_BaseSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(1705)
inline enum STKObjects::AgEIvClockHost AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetClockHost ( ) {
    enum STKObjects::AgEIvClockHost _result;
    HRESULT _hr = get_ClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1706)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutClockHost ( enum STKObjects::AgEIvClockHost pVal ) {
    HRESULT _hr = put_ClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1707)
inline enum STKObjects::AgEIvTimeSense AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetSignalSense ( ) {
    enum STKObjects::AgEIvTimeSense _result;
    HRESULT _hr = get_SignalSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutSignalSense ( enum STKObjects::AgEIvTimeSense pVal ) {
    HRESULT _hr = put_SignalSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1709)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetTargetObject ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(1710)
inline double AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetTimeDelayConvergenceTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergenceTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutTimeDelayConvergenceTolerance ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergenceTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1712)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcOnePtAccess::GetUseLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1713)
inline void AgStkGatorLib::_IAgVAStateCalcOnePtAccess::PutUseLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDifferenceAcrossSegmentsOtherSat wrapper method implementations
//

#pragma implementation_key(1714)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1715)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1716)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1717)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1718)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1719)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1720)
inline enum AgStkGatorLib::AgEVASegmentDifferenceOrder AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetDifferenceOrder ( ) {
    enum AgEVASegmentDifferenceOrder _result;
    HRESULT _hr = get_DifferenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1721)
inline void AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutDifferenceOrder ( enum AgEVASegmentDifferenceOrder pVal ) {
    HRESULT _hr = put_DifferenceOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1722)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetReferenceSat ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_ReferenceSat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcDifferenceAcrossSegmentsOtherSat wrapper method implementations
//

#pragma implementation_key(1723)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1724)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1725)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1726)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1727)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1728)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1730)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1731)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1732)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1733)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1734)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline enum AgStkGatorLib::AgEVASegmentDifferenceOrder AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetDifferenceOrder ( ) {
    enum AgEVASegmentDifferenceOrder _result;
    HRESULT _hr = get_DifferenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::PutDifferenceOrder ( enum AgEVASegmentDifferenceOrder pVal ) {
    HRESULT _hr = put_DifferenceOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat::GetReferenceSat ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_ReferenceSat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcValueAtSegmentOtherSat wrapper method implementations
//

#pragma implementation_key(1739)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1740)
inline void AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1741)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1742)
inline void AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1743)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline void AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAStateCalcValueAtSegmentOtherSat::GetReferenceSat ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_ReferenceSat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVAStateCalcValueAtSegmentOtherSat wrapper method implementations
//

#pragma implementation_key(1746)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1747)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1748)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1749)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1750)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1751)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1752)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1753)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1754)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1755)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetOtherSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1756)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::PutOtherSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_OtherSegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1757)
inline enum AgStkGatorLib::AgEVASegmentState AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetSegmentStateToUse ( ) {
    enum AgEVASegmentState _result;
    HRESULT _hr = get_SegmentStateToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1758)
inline void AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::PutSegmentStateToUse ( enum AgEVASegmentState pVal ) {
    HRESULT _hr = put_SegmentStateToUse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAStateCalcValueAtSegmentOtherSat::GetReferenceSat ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_ReferenceSat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVAStateCalcRARate wrapper method implementations
//

#pragma implementation_key(1760)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcRARate::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1761)
inline void AgStkGatorLib::IAgVAStateCalcRARate::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcRARate wrapper method implementations
//

#pragma implementation_key(1762)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRARate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1763)
inline void AgStkGatorLib::_IAgVAStateCalcRARate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1764)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRARate::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1765)
inline void AgStkGatorLib::_IAgVAStateCalcRARate::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1766)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRARate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1767)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcRARate::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcRARate::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1769)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcRARate::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1770)
inline void AgStkGatorLib::_IAgVAStateCalcRARate::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcDecRate wrapper method implementations
//

#pragma implementation_key(1771)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcDecRate::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1772)
inline void AgStkGatorLib::IAgVAStateCalcDecRate::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcDecRate wrapper method implementations
//

#pragma implementation_key(1773)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDecRate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1774)
inline void AgStkGatorLib::_IAgVAStateCalcDecRate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1775)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDecRate::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1776)
inline void AgStkGatorLib::_IAgVAStateCalcDecRate::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1777)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDecRate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1778)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcDecRate::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1779)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcDecRate::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1780)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcDecRate::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1781)
inline void AgStkGatorLib::_IAgVAStateCalcDecRate::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcGravitationalParameter wrapper method implementations
//

#pragma implementation_key(1782)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcGravitationalParameter::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1783)
inline void AgStkGatorLib::IAgVAStateCalcGravitationalParameter::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1784)
inline enum AgStkGatorLib::AgEVAGravitationalParameterSource AgStkGatorLib::IAgVAStateCalcGravitationalParameter::GetGravSource ( ) {
    enum AgEVAGravitationalParameterSource _result;
    HRESULT _hr = get_GravSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1785)
inline void AgStkGatorLib::IAgVAStateCalcGravitationalParameter::PutGravSource ( enum AgEVAGravitationalParameterSource pVal ) {
    HRESULT _hr = put_GravSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1786)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcGravitationalParameter::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1787)
inline void AgStkGatorLib::IAgVAStateCalcGravitationalParameter::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcGravitationalParameter wrapper method implementations
//

#pragma implementation_key(1788)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1789)
inline void AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1790)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1791)
inline void AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1792)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1793)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1794)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1795)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1796)
inline void AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1797)
inline enum AgStkGatorLib::AgEVAGravitationalParameterSource AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::GetGravSource ( ) {
    enum AgEVAGravitationalParameterSource _result;
    HRESULT _hr = get_GravSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline void AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::PutGravSource ( enum AgEVAGravitationalParameterSource pVal ) {
    HRESULT _hr = put_GravSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1799)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1800)
inline void AgStkGatorLib::_IAgVAStateCalcGravitationalParameter::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcReferenceRadius wrapper method implementations
//

#pragma implementation_key(1801)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcReferenceRadius::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1802)
inline void AgStkGatorLib::IAgVAStateCalcReferenceRadius::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1803)
inline enum AgStkGatorLib::AgEVAReferenceRadiusSource AgStkGatorLib::IAgVAStateCalcReferenceRadius::GetReferenceRadiusSource ( ) {
    enum AgEVAReferenceRadiusSource _result;
    HRESULT _hr = get_ReferenceRadiusSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1804)
inline void AgStkGatorLib::IAgVAStateCalcReferenceRadius::PutReferenceRadiusSource ( enum AgEVAReferenceRadiusSource pVal ) {
    HRESULT _hr = put_ReferenceRadiusSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1805)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcReferenceRadius::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1806)
inline void AgStkGatorLib::IAgVAStateCalcReferenceRadius::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcReferenceRadius wrapper method implementations
//

#pragma implementation_key(1807)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcReferenceRadius::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1808)
inline void AgStkGatorLib::_IAgVAStateCalcReferenceRadius::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1809)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcReferenceRadius::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1810)
inline void AgStkGatorLib::_IAgVAStateCalcReferenceRadius::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1811)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcReferenceRadius::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1812)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcReferenceRadius::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1813)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcReferenceRadius::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1814)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcReferenceRadius::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1815)
inline void AgStkGatorLib::_IAgVAStateCalcReferenceRadius::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1816)
inline enum AgStkGatorLib::AgEVAReferenceRadiusSource AgStkGatorLib::_IAgVAStateCalcReferenceRadius::GetReferenceRadiusSource ( ) {
    enum AgEVAReferenceRadiusSource _result;
    HRESULT _hr = get_ReferenceRadiusSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1817)
inline void AgStkGatorLib::_IAgVAStateCalcReferenceRadius::PutReferenceRadiusSource ( enum AgEVAReferenceRadiusSource pVal ) {
    HRESULT _hr = put_ReferenceRadiusSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1818)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcReferenceRadius::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1819)
inline void AgStkGatorLib::_IAgVAStateCalcReferenceRadius::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcGravCoeff wrapper method implementations
//

#pragma implementation_key(1820)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcGravCoeff::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1821)
inline void AgStkGatorLib::IAgVAStateCalcGravCoeff::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1822)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcGravCoeff::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1823)
inline void AgStkGatorLib::IAgVAStateCalcGravCoeff::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1824)
inline enum AgStkGatorLib::AgEVAGravCoeffCoefficientType AgStkGatorLib::IAgVAStateCalcGravCoeff::GetCoefficientType ( ) {
    enum AgEVAGravCoeffCoefficientType _result;
    HRESULT _hr = get_CoefficientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1825)
inline void AgStkGatorLib::IAgVAStateCalcGravCoeff::PutCoefficientType ( enum AgEVAGravCoeffCoefficientType pVal ) {
    HRESULT _hr = put_CoefficientType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1826)
inline int AgStkGatorLib::IAgVAStateCalcGravCoeff::GetDegree ( ) {
    int _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1827)
inline void AgStkGatorLib::IAgVAStateCalcGravCoeff::PutDegree ( int pVal ) {
    HRESULT _hr = put_Degree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1828)
inline int AgStkGatorLib::IAgVAStateCalcGravCoeff::GetOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline void AgStkGatorLib::IAgVAStateCalcGravCoeff::PutOrder ( int pVal ) {
    HRESULT _hr = put_Order(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1830)
inline enum AgStkGatorLib::AgEVAGravCoeffNormalizationType AgStkGatorLib::IAgVAStateCalcGravCoeff::GetNormalizationType ( ) {
    enum AgEVAGravCoeffNormalizationType _result;
    HRESULT _hr = get_NormalizationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1831)
inline void AgStkGatorLib::IAgVAStateCalcGravCoeff::PutNormalizationType ( enum AgEVAGravCoeffNormalizationType pVal ) {
    HRESULT _hr = put_NormalizationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcGravCoeff wrapper method implementations
//

#pragma implementation_key(1832)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1833)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1834)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1835)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1836)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1837)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcGravCoeff::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1838)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcGravCoeff::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1839)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1840)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1841)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1842)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1843)
inline enum AgStkGatorLib::AgEVAGravCoeffCoefficientType AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetCoefficientType ( ) {
    enum AgEVAGravCoeffCoefficientType _result;
    HRESULT _hr = get_CoefficientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutCoefficientType ( enum AgEVAGravCoeffCoefficientType pVal ) {
    HRESULT _hr = put_CoefficientType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1845)
inline int AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetDegree ( ) {
    int _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutDegree ( int pVal ) {
    HRESULT _hr = put_Degree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1847)
inline int AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1848)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutOrder ( int pVal ) {
    HRESULT _hr = put_Order(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1849)
inline enum AgStkGatorLib::AgEVAGravCoeffNormalizationType AgStkGatorLib::_IAgVAStateCalcGravCoeff::GetNormalizationType ( ) {
    enum AgEVAGravCoeffNormalizationType _result;
    HRESULT _hr = get_NormalizationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1850)
inline void AgStkGatorLib::_IAgVAStateCalcGravCoeff::PutNormalizationType ( enum AgEVAGravCoeffNormalizationType pVal ) {
    HRESULT _hr = put_NormalizationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcSpeedOfLight wrapper method implementations
//

#pragma implementation_key(1851)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1852)
inline void AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1853)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1854)
inline void AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1855)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1856)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcSpeedOfLight::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcScalar wrapper method implementations
//

#pragma implementation_key(1858)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcScalar::GetScalarName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScalarName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1859)
inline void AgStkGatorLib::IAgVAStateCalcScalar::PutScalarName ( _bstr_t pVal ) {
    HRESULT _hr = put_ScalarName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1860)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcScalar::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1861)
inline void AgStkGatorLib::IAgVAStateCalcScalar::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcScalar wrapper method implementations
//

#pragma implementation_key(1862)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScalar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1863)
inline void AgStkGatorLib::_IAgVAStateCalcScalar::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1864)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScalar::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1865)
inline void AgStkGatorLib::_IAgVAStateCalcScalar::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1866)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScalar::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1867)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcScalar::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1868)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScalar::GetScalarName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScalarName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1869)
inline void AgStkGatorLib::_IAgVAStateCalcScalar::PutScalarName ( _bstr_t pVal ) {
    HRESULT _hr = put_ScalarName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1870)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcScalar::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1871)
inline void AgStkGatorLib::_IAgVAStateCalcScalar::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1872)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcScalar::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAStateCalcApparentSolarTime wrapper method implementations
//

#pragma implementation_key(1873)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcApparentSolarTime::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1874)
inline void AgStkGatorLib::IAgVAStateCalcApparentSolarTime::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcApparentSolarTime wrapper method implementations
//

#pragma implementation_key(1875)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1876)
inline void AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1877)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1878)
inline void AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1879)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1880)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1881)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1882)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1883)
inline void AgStkGatorLib::_IAgVAStateCalcApparentSolarTime::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEarthMeanSolarTime wrapper method implementations
//

#pragma implementation_key(1884)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEarthMeanSolarTime::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1885)
inline void AgStkGatorLib::IAgVAStateCalcEarthMeanSolarTime::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEarthMeanSolarTime wrapper method implementations
//

#pragma implementation_key(1886)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1887)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1888)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1889)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1890)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1891)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1892)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1893)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1894)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanSolarTime::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStateCalcEarthMeanLocTimeAN wrapper method implementations
//

#pragma implementation_key(1895)
inline _bstr_t AgStkGatorLib::IAgVAStateCalcEarthMeanLocTimeAN::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1896)
inline void AgStkGatorLib::IAgVAStateCalcEarthMeanLocTimeAN::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAStateCalcEarthMeanLocTimeAN wrapper method implementations
//

#pragma implementation_key(1897)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1898)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1899)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1900)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1901)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1902)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1903)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1904)
inline _bstr_t AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1905)
inline void AgStkGatorLib::_IAgVAStateCalcEarthMeanLocTimeAN::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbGravityModel wrapper method implementations
//

#pragma implementation_key(1906)
inline double AgStkGatorLib::IAgVACbGravityModel::GetGravitationalParam ( ) {
    double _result = 0;
    HRESULT _hr = get_GravitationalParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1907)
inline void AgStkGatorLib::IAgVACbGravityModel::PutGravitationalParam ( double pVal ) {
    HRESULT _hr = put_GravitationalParam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1908)
inline double AgStkGatorLib::IAgVACbGravityModel::GetRefDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RefDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline void AgStkGatorLib::IAgVACbGravityModel::PutRefDistance ( double pVal ) {
    HRESULT _hr = put_RefDistance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1910)
inline double AgStkGatorLib::IAgVACbGravityModel::GetJ2 ( ) {
    double _result = 0;
    HRESULT _hr = get_J2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1911)
inline void AgStkGatorLib::IAgVACbGravityModel::PutJ2 ( double pVal ) {
    HRESULT _hr = put_J2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1912)
inline double AgStkGatorLib::IAgVACbGravityModel::GetJ3 ( ) {
    double _result = 0;
    HRESULT _hr = get_J3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1913)
inline void AgStkGatorLib::IAgVACbGravityModel::PutJ3 ( double pVal ) {
    HRESULT _hr = put_J3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1914)
inline double AgStkGatorLib::IAgVACbGravityModel::GetJ4 ( ) {
    double _result = 0;
    HRESULT _hr = get_J4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1915)
inline void AgStkGatorLib::IAgVACbGravityModel::PutJ4 ( double pVal ) {
    HRESULT _hr = put_J4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbGravityModel wrapper method implementations
//

#pragma implementation_key(1916)
inline double AgStkGatorLib::_IAgVACbGravityModel::GetGravitationalParam ( ) {
    double _result = 0;
    HRESULT _hr = get_GravitationalParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1917)
inline void AgStkGatorLib::_IAgVACbGravityModel::PutGravitationalParam ( double pVal ) {
    HRESULT _hr = put_GravitationalParam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1918)
inline double AgStkGatorLib::_IAgVACbGravityModel::GetRefDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RefDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1919)
inline void AgStkGatorLib::_IAgVACbGravityModel::PutRefDistance ( double pVal ) {
    HRESULT _hr = put_RefDistance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1920)
inline double AgStkGatorLib::_IAgVACbGravityModel::GetJ2 ( ) {
    double _result = 0;
    HRESULT _hr = get_J2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1921)
inline void AgStkGatorLib::_IAgVACbGravityModel::PutJ2 ( double pVal ) {
    HRESULT _hr = put_J2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1922)
inline double AgStkGatorLib::_IAgVACbGravityModel::GetJ3 ( ) {
    double _result = 0;
    HRESULT _hr = get_J3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1923)
inline void AgStkGatorLib::_IAgVACbGravityModel::PutJ3 ( double pVal ) {
    HRESULT _hr = put_J3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1924)
inline double AgStkGatorLib::_IAgVACbGravityModel::GetJ4 ( ) {
    double _result = 0;
    HRESULT _hr = get_J4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1925)
inline void AgStkGatorLib::_IAgVACbGravityModel::PutJ4 ( double pVal ) {
    HRESULT _hr = put_J4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbShapeSphere wrapper method implementations
//

#pragma implementation_key(1926)
inline double AgStkGatorLib::IAgVACbShapeSphere::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1927)
inline void AgStkGatorLib::IAgVACbShapeSphere::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbShapeSphere wrapper method implementations
//

#pragma implementation_key(1928)
inline double AgStkGatorLib::_IAgVACbShapeSphere::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline void AgStkGatorLib::_IAgVACbShapeSphere::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbShapeOblateSpheroid wrapper method implementations
//

#pragma implementation_key(1930)
inline double AgStkGatorLib::IAgVACbShapeOblateSpheroid::GetMinRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline void AgStkGatorLib::IAgVACbShapeOblateSpheroid::PutMinRadius ( double pVal ) {
    HRESULT _hr = put_MinRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1932)
inline double AgStkGatorLib::IAgVACbShapeOblateSpheroid::GetMaxRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1933)
inline void AgStkGatorLib::IAgVACbShapeOblateSpheroid::PutMaxRadius ( double pVal ) {
    HRESULT _hr = put_MaxRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1934)
inline double AgStkGatorLib::IAgVACbShapeOblateSpheroid::GetFlatteningCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_FlatteningCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVACbShapeOblateSpheroid wrapper method implementations
//

#pragma implementation_key(1935)
inline double AgStkGatorLib::_IAgVACbShapeOblateSpheroid::GetMinRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1936)
inline void AgStkGatorLib::_IAgVACbShapeOblateSpheroid::PutMinRadius ( double pVal ) {
    HRESULT _hr = put_MinRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1937)
inline double AgStkGatorLib::_IAgVACbShapeOblateSpheroid::GetMaxRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1938)
inline void AgStkGatorLib::_IAgVACbShapeOblateSpheroid::PutMaxRadius ( double pVal ) {
    HRESULT _hr = put_MaxRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1939)
inline double AgStkGatorLib::_IAgVACbShapeOblateSpheroid::GetFlatteningCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_FlatteningCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVACbShapeTriaxialEllipsoid wrapper method implementations
//

#pragma implementation_key(1940)
inline double AgStkGatorLib::IAgVACbShapeTriaxialEllipsoid::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1941)
inline void AgStkGatorLib::IAgVACbShapeTriaxialEllipsoid::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1942)
inline double AgStkGatorLib::IAgVACbShapeTriaxialEllipsoid::GetSemiMidAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMidAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1943)
inline void AgStkGatorLib::IAgVACbShapeTriaxialEllipsoid::PutSemiMidAxis ( double pVal ) {
    HRESULT _hr = put_SemiMidAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1944)
inline double AgStkGatorLib::IAgVACbShapeTriaxialEllipsoid::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline void AgStkGatorLib::IAgVACbShapeTriaxialEllipsoid::PutSemiMinorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMinorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbShapeTriaxialEllipsoid wrapper method implementations
//

#pragma implementation_key(1946)
inline double AgStkGatorLib::_IAgVACbShapeTriaxialEllipsoid::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1947)
inline void AgStkGatorLib::_IAgVACbShapeTriaxialEllipsoid::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1948)
inline double AgStkGatorLib::_IAgVACbShapeTriaxialEllipsoid::GetSemiMidAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMidAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1949)
inline void AgStkGatorLib::_IAgVACbShapeTriaxialEllipsoid::PutSemiMidAxis ( double pVal ) {
    HRESULT _hr = put_SemiMidAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1950)
inline double AgStkGatorLib::_IAgVACbShapeTriaxialEllipsoid::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline void AgStkGatorLib::_IAgVACbShapeTriaxialEllipsoid::PutSemiMinorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMinorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbAttitudeRotationCoefficientsFile wrapper method implementations
//

#pragma implementation_key(1952)
inline _bstr_t AgStkGatorLib::IAgVACbAttitudeRotationCoefficientsFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1953)
inline void AgStkGatorLib::IAgVACbAttitudeRotationCoefficientsFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbAttitudeRotationCoefficientsFile wrapper method implementations
//

#pragma implementation_key(1954)
inline _bstr_t AgStkGatorLib::_IAgVACbAttitudeRotationCoefficientsFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1955)
inline void AgStkGatorLib::_IAgVACbAttitudeRotationCoefficientsFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbAttitudeIAU1994 wrapper method implementations
//

#pragma implementation_key(1956)
inline _variant_t AgStkGatorLib::IAgVACbAttitudeIAU1994::GetRightAscension ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1957)
inline void AgStkGatorLib::IAgVACbAttitudeIAU1994::PutRightAscension ( const _variant_t & pVal ) {
    HRESULT _hr = put_RightAscension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1958)
inline _variant_t AgStkGatorLib::IAgVACbAttitudeIAU1994::GetDeclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Declination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1959)
inline void AgStkGatorLib::IAgVACbAttitudeIAU1994::PutDeclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Declination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1960)
inline double AgStkGatorLib::IAgVACbAttitudeIAU1994::GetRightAscensionRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RightAscensionRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1961)
inline void AgStkGatorLib::IAgVACbAttitudeIAU1994::PutRightAscensionRate ( double pVal ) {
    HRESULT _hr = put_RightAscensionRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1962)
inline double AgStkGatorLib::IAgVACbAttitudeIAU1994::GetDeclinationRate ( ) {
    double _result = 0;
    HRESULT _hr = get_DeclinationRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1963)
inline void AgStkGatorLib::IAgVACbAttitudeIAU1994::PutDeclinationRate ( double pVal ) {
    HRESULT _hr = put_DeclinationRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1964)
inline _variant_t AgStkGatorLib::IAgVACbAttitudeIAU1994::GetRotationOffset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RotationOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1965)
inline void AgStkGatorLib::IAgVACbAttitudeIAU1994::PutRotationOffset ( const _variant_t & pVal ) {
    HRESULT _hr = put_RotationOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1966)
inline double AgStkGatorLib::IAgVACbAttitudeIAU1994::GetRotationRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline void AgStkGatorLib::IAgVACbAttitudeIAU1994::PutRotationRate ( double pVal ) {
    HRESULT _hr = put_RotationRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbAttitudeIAU1994 wrapper method implementations
//

#pragma implementation_key(1968)
inline _variant_t AgStkGatorLib::_IAgVACbAttitudeIAU1994::GetRightAscension ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1969)
inline void AgStkGatorLib::_IAgVACbAttitudeIAU1994::PutRightAscension ( const _variant_t & pVal ) {
    HRESULT _hr = put_RightAscension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1970)
inline _variant_t AgStkGatorLib::_IAgVACbAttitudeIAU1994::GetDeclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Declination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1971)
inline void AgStkGatorLib::_IAgVACbAttitudeIAU1994::PutDeclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Declination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1972)
inline double AgStkGatorLib::_IAgVACbAttitudeIAU1994::GetRightAscensionRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RightAscensionRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1973)
inline void AgStkGatorLib::_IAgVACbAttitudeIAU1994::PutRightAscensionRate ( double pVal ) {
    HRESULT _hr = put_RightAscensionRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1974)
inline double AgStkGatorLib::_IAgVACbAttitudeIAU1994::GetDeclinationRate ( ) {
    double _result = 0;
    HRESULT _hr = get_DeclinationRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1975)
inline void AgStkGatorLib::_IAgVACbAttitudeIAU1994::PutDeclinationRate ( double pVal ) {
    HRESULT _hr = put_DeclinationRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1976)
inline _variant_t AgStkGatorLib::_IAgVACbAttitudeIAU1994::GetRotationOffset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RotationOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1977)
inline void AgStkGatorLib::_IAgVACbAttitudeIAU1994::PutRotationOffset ( const _variant_t & pVal ) {
    HRESULT _hr = put_RotationOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1978)
inline double AgStkGatorLib::_IAgVACbAttitudeIAU1994::GetRotationRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1979)
inline void AgStkGatorLib::_IAgVACbAttitudeIAU1994::PutRotationRate ( double pVal ) {
    HRESULT _hr = put_RotationRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbEphemerisAnalyticOrbit wrapper method implementations
//

#pragma implementation_key(1980)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetEpoch ( ) {
    double _result = 0;
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1981)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutEpoch ( double pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1982)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1984)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetSemiMajorAxisRate ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxisRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1985)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutSemiMajorAxisRate ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxisRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1987)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1988)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetEccentricityRate ( ) {
    double _result = 0;
    HRESULT _hr = get_EccentricityRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1989)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutEccentricityRate ( double pVal ) {
    HRESULT _hr = put_EccentricityRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1990)
inline _variant_t AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1991)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1992)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetInclinationRate ( ) {
    double _result = 0;
    HRESULT _hr = get_InclinationRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1993)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutInclinationRate ( double pVal ) {
    HRESULT _hr = put_InclinationRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1994)
inline _variant_t AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1995)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1996)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetRAANRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RAANRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1997)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutRAANRate ( double pVal ) {
    HRESULT _hr = put_RAANRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1998)
inline _variant_t AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1999)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2000)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetArgOfPeriapsisRate ( ) {
    double _result = 0;
    HRESULT _hr = get_ArgOfPeriapsisRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2001)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutArgOfPeriapsisRate ( double pVal ) {
    HRESULT _hr = put_ArgOfPeriapsisRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2002)
inline _variant_t AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetMeanLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2003)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutMeanLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2004)
inline double AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::GetMeanLongitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanLongitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2005)
inline void AgStkGatorLib::IAgVACbEphemerisAnalyticOrbit::PutMeanLongitudeRate ( double pVal ) {
    HRESULT _hr = put_MeanLongitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbEphemerisAnalyticOrbit wrapper method implementations
//

#pragma implementation_key(2006)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetEpoch ( ) {
    double _result = 0;
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2007)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutEpoch ( double pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2008)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2009)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2010)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetSemiMajorAxisRate ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxisRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2011)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutSemiMajorAxisRate ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxisRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2012)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2014)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetEccentricityRate ( ) {
    double _result = 0;
    HRESULT _hr = get_EccentricityRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2015)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutEccentricityRate ( double pVal ) {
    HRESULT _hr = put_EccentricityRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2016)
inline _variant_t AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2017)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetInclinationRate ( ) {
    double _result = 0;
    HRESULT _hr = get_InclinationRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutInclinationRate ( double pVal ) {
    HRESULT _hr = put_InclinationRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline _variant_t AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2021)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetRAANRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RAANRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutRAANRate ( double pVal ) {
    HRESULT _hr = put_RAANRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2024)
inline _variant_t AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2025)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetArgOfPeriapsisRate ( ) {
    double _result = 0;
    HRESULT _hr = get_ArgOfPeriapsisRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2027)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutArgOfPeriapsisRate ( double pVal ) {
    HRESULT _hr = put_ArgOfPeriapsisRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline _variant_t AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetMeanLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2029)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutMeanLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline double AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::GetMeanLongitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanLongitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline void AgStkGatorLib::_IAgVACbEphemerisAnalyticOrbit::PutMeanLongitudeRate ( double pVal ) {
    HRESULT _hr = put_MeanLongitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbEphemerisJPLSpice wrapper method implementations
//

#pragma implementation_key(2032)
inline _bstr_t AgStkGatorLib::IAgVACbEphemerisJPLSpice::GetJPLSpiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JPLSpiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2033)
inline void AgStkGatorLib::IAgVACbEphemerisJPLSpice::PutJPLSpiceId ( _bstr_t pVal ) {
    HRESULT _hr = put_JPLSpiceId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbEphemerisJPLSpice wrapper method implementations
//

#pragma implementation_key(2034)
inline _bstr_t AgStkGatorLib::_IAgVACbEphemerisJPLSpice::GetJPLSpiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JPLSpiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2035)
inline void AgStkGatorLib::_IAgVACbEphemerisJPLSpice::PutJPLSpiceId ( _bstr_t pVal ) {
    HRESULT _hr = put_JPLSpiceId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbEphemerisFile wrapper method implementations
//

#pragma implementation_key(2036)
inline _bstr_t AgStkGatorLib::IAgVACbEphemerisFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2037)
inline void AgStkGatorLib::IAgVACbEphemerisFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbEphemerisFile wrapper method implementations
//

#pragma implementation_key(2038)
inline _bstr_t AgStkGatorLib::_IAgVACbEphemerisFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2039)
inline void AgStkGatorLib::_IAgVACbEphemerisFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbEphemerisJPLDE wrapper method implementations
//

#pragma implementation_key(2040)
inline _bstr_t AgStkGatorLib::IAgVACbEphemerisJPLDE::GetJPLDEFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JPLDEFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2041)
inline void AgStkGatorLib::IAgVACbEphemerisJPLDE::PutJPLDEFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_JPLDEFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbEphemerisJPLDE wrapper method implementations
//

#pragma implementation_key(2042)
inline _bstr_t AgStkGatorLib::_IAgVACbEphemerisJPLDE::GetJPLDEFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JPLDEFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2043)
inline void AgStkGatorLib::_IAgVACbEphemerisJPLDE::PutJPLDEFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_JPLDEFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACbEphemerisPlanetary wrapper method implementations
//

#pragma implementation_key(2044)
inline _bstr_t AgStkGatorLib::IAgVACbEphemerisPlanetary::GetPlanetaryFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanetaryFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2045)
inline void AgStkGatorLib::IAgVACbEphemerisPlanetary::PutPlanetaryFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanetaryFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACbEphemerisPlanetary wrapper method implementations
//

#pragma implementation_key(2046)
inline _bstr_t AgStkGatorLib::_IAgVACbEphemerisPlanetary::GetPlanetaryFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanetaryFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2047)
inline void AgStkGatorLib::_IAgVACbEphemerisPlanetary::PutPlanetaryFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanetaryFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAPowerInternal wrapper method implementations
//

#pragma implementation_key(2048)
inline double AgStkGatorLib::IAgVAPowerInternal::GetGeneratedPower ( ) {
    double _result = 0;
    HRESULT _hr = get_GeneratedPower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2049)
inline void AgStkGatorLib::IAgVAPowerInternal::PutGeneratedPower ( double pVal ) {
    HRESULT _hr = put_GeneratedPower(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2050)
inline double AgStkGatorLib::IAgVAPowerInternal::GetPercentDegradationPerYear ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentDegradationPerYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2051)
inline void AgStkGatorLib::IAgVAPowerInternal::PutPercentDegradationPerYear ( double pVal ) {
    HRESULT _hr = put_PercentDegradationPerYear(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2052)
inline _variant_t AgStkGatorLib::IAgVAPowerInternal::GetReferenceEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2053)
inline void AgStkGatorLib::IAgVAPowerInternal::PutReferenceEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2054)
inline HRESULT AgStkGatorLib::IAgVAPowerInternal::EnableControlParameter ( enum AgEVAControlPowerInternal Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2055)
inline HRESULT AgStkGatorLib::IAgVAPowerInternal::DisableControlParameter ( enum AgEVAControlPowerInternal Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2056)
inline VARIANT_BOOL AgStkGatorLib::IAgVAPowerInternal::IsControlParameterEnabled ( enum AgEVAControlPowerInternal Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2057)
inline VARIANT_BOOL AgStkGatorLib::IAgVAPowerInternal::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAPowerInternal wrapper method implementations
//

#pragma implementation_key(2058)
inline double AgStkGatorLib::_IAgVAPowerInternal::GetGeneratedPower ( ) {
    double _result = 0;
    HRESULT _hr = get_GeneratedPower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2059)
inline void AgStkGatorLib::_IAgVAPowerInternal::PutGeneratedPower ( double pVal ) {
    HRESULT _hr = put_GeneratedPower(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2060)
inline double AgStkGatorLib::_IAgVAPowerInternal::GetPercentDegradationPerYear ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentDegradationPerYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2061)
inline void AgStkGatorLib::_IAgVAPowerInternal::PutPercentDegradationPerYear ( double pVal ) {
    HRESULT _hr = put_PercentDegradationPerYear(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2062)
inline _variant_t AgStkGatorLib::_IAgVAPowerInternal::GetReferenceEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2063)
inline void AgStkGatorLib::_IAgVAPowerInternal::PutReferenceEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2064)
inline HRESULT AgStkGatorLib::_IAgVAPowerInternal::EnableControlParameter ( enum AgEVAControlPowerInternal Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2065)
inline HRESULT AgStkGatorLib::_IAgVAPowerInternal::DisableControlParameter ( enum AgEVAControlPowerInternal Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2066)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerInternal::IsControlParameterEnabled ( enum AgEVAControlPowerInternal Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2067)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerInternal::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2068)
inline _bstr_t AgStkGatorLib::_IAgVAPowerInternal::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2069)
inline void AgStkGatorLib::_IAgVAPowerInternal::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2070)
inline _bstr_t AgStkGatorLib::_IAgVAPowerInternal::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2071)
inline void AgStkGatorLib::_IAgVAPowerInternal::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2072)
inline _bstr_t AgStkGatorLib::_IAgVAPowerInternal::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2073)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerInternal::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2074)
inline IUnknownPtr AgStkGatorLib::_IAgVAPowerInternal::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAPowerProcessed wrapper method implementations
//

#pragma implementation_key(2075)
inline double AgStkGatorLib::IAgVAPowerProcessed::GetLoad ( ) {
    double _result = 0;
    HRESULT _hr = get_Load(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2076)
inline void AgStkGatorLib::IAgVAPowerProcessed::PutLoad ( double pVal ) {
    HRESULT _hr = put_Load(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2077)
inline double AgStkGatorLib::IAgVAPowerProcessed::GetEfficiency ( ) {
    double _result = 0;
    HRESULT _hr = get_Efficiency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2078)
inline void AgStkGatorLib::IAgVAPowerProcessed::PutEfficiency ( double pVal ) {
    HRESULT _hr = put_Efficiency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2079)
inline _bstr_t AgStkGatorLib::IAgVAPowerProcessed::GetInputPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputPowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2080)
inline void AgStkGatorLib::IAgVAPowerProcessed::PutInputPowerSourceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InputPowerSourceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2081)
inline HRESULT AgStkGatorLib::IAgVAPowerProcessed::EnableControlParameter ( enum AgEVAControlPowerProcessed Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2082)
inline HRESULT AgStkGatorLib::IAgVAPowerProcessed::DisableControlParameter ( enum AgEVAControlPowerProcessed Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2083)
inline VARIANT_BOOL AgStkGatorLib::IAgVAPowerProcessed::IsControlParameterEnabled ( enum AgEVAControlPowerProcessed Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2084)
inline VARIANT_BOOL AgStkGatorLib::IAgVAPowerProcessed::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAPowerProcessed wrapper method implementations
//

#pragma implementation_key(2085)
inline double AgStkGatorLib::_IAgVAPowerProcessed::GetLoad ( ) {
    double _result = 0;
    HRESULT _hr = get_Load(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2086)
inline void AgStkGatorLib::_IAgVAPowerProcessed::PutLoad ( double pVal ) {
    HRESULT _hr = put_Load(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2087)
inline double AgStkGatorLib::_IAgVAPowerProcessed::GetEfficiency ( ) {
    double _result = 0;
    HRESULT _hr = get_Efficiency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2088)
inline void AgStkGatorLib::_IAgVAPowerProcessed::PutEfficiency ( double pVal ) {
    HRESULT _hr = put_Efficiency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2089)
inline _bstr_t AgStkGatorLib::_IAgVAPowerProcessed::GetInputPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputPowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2090)
inline void AgStkGatorLib::_IAgVAPowerProcessed::PutInputPowerSourceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InputPowerSourceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2091)
inline HRESULT AgStkGatorLib::_IAgVAPowerProcessed::EnableControlParameter ( enum AgEVAControlPowerProcessed Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2092)
inline HRESULT AgStkGatorLib::_IAgVAPowerProcessed::DisableControlParameter ( enum AgEVAControlPowerProcessed Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2093)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerProcessed::IsControlParameterEnabled ( enum AgEVAControlPowerProcessed Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2094)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerProcessed::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2095)
inline _bstr_t AgStkGatorLib::_IAgVAPowerProcessed::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2096)
inline void AgStkGatorLib::_IAgVAPowerProcessed::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2097)
inline _bstr_t AgStkGatorLib::_IAgVAPowerProcessed::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2098)
inline void AgStkGatorLib::_IAgVAPowerProcessed::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2099)
inline _bstr_t AgStkGatorLib::_IAgVAPowerProcessed::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2100)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerProcessed::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2101)
inline IUnknownPtr AgStkGatorLib::_IAgVAPowerProcessed::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAPowerSolarArray wrapper method implementations
//

#pragma implementation_key(2102)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2103)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutArea ( double pVal ) {
    HRESULT _hr = put_Area(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2104)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetConcentration ( ) {
    double _result = 0;
    HRESULT _hr = get_Concentration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2105)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutConcentration ( double pVal ) {
    HRESULT _hr = put_Concentration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2106)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetCellEfficiencyPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_CellEfficiencyPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2107)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutCellEfficiencyPercent ( double pVal ) {
    HRESULT _hr = put_CellEfficiencyPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2108)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetArrayEfficiencyPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrayEfficiencyPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2109)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutArrayEfficiencyPercent ( double pVal ) {
    HRESULT _hr = put_ArrayEfficiencyPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2110)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetPercentDegradationPerYear ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentDegradationPerYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2111)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutPercentDegradationPerYear ( double pVal ) {
    HRESULT _hr = put_PercentDegradationPerYear(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2112)
inline _variant_t AgStkGatorLib::IAgVAPowerSolarArray::GetReferenceEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2113)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutReferenceEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2114)
inline _variant_t AgStkGatorLib::IAgVAPowerSolarArray::GetInclinationToSunLine ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InclinationToSunLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2115)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutInclinationToSunLine ( const _variant_t & pVal ) {
    HRESULT _hr = put_InclinationToSunLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2116)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2117)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2118)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2119)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2120)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2121)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2122)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2123)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2124)
inline double AgStkGatorLib::IAgVAPowerSolarArray::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2125)
inline void AgStkGatorLib::IAgVAPowerSolarArray::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2126)
inline _bstr_t AgStkGatorLib::IAgVAPowerSolarArray::GetApproximationFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApproximationFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2127)
inline HRESULT AgStkGatorLib::IAgVAPowerSolarArray::EnableControlParameter ( enum AgEVAControlPowerSolarArray Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2128)
inline HRESULT AgStkGatorLib::IAgVAPowerSolarArray::DisableControlParameter ( enum AgEVAControlPowerSolarArray Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2129)
inline VARIANT_BOOL AgStkGatorLib::IAgVAPowerSolarArray::IsControlParameterEnabled ( enum AgEVAControlPowerSolarArray Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2130)
inline VARIANT_BOOL AgStkGatorLib::IAgVAPowerSolarArray::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAPowerSolarArray wrapper method implementations
//

#pragma implementation_key(2131)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutArea ( double pVal ) {
    HRESULT _hr = put_Area(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2133)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetConcentration ( ) {
    double _result = 0;
    HRESULT _hr = get_Concentration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2134)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutConcentration ( double pVal ) {
    HRESULT _hr = put_Concentration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2135)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetCellEfficiencyPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_CellEfficiencyPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2136)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutCellEfficiencyPercent ( double pVal ) {
    HRESULT _hr = put_CellEfficiencyPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2137)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetArrayEfficiencyPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrayEfficiencyPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2138)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutArrayEfficiencyPercent ( double pVal ) {
    HRESULT _hr = put_ArrayEfficiencyPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2139)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetPercentDegradationPerYear ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentDegradationPerYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2140)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutPercentDegradationPerYear ( double pVal ) {
    HRESULT _hr = put_PercentDegradationPerYear(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2141)
inline _variant_t AgStkGatorLib::_IAgVAPowerSolarArray::GetReferenceEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2142)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutReferenceEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2143)
inline _variant_t AgStkGatorLib::_IAgVAPowerSolarArray::GetInclinationToSunLine ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InclinationToSunLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2144)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutInclinationToSunLine ( const _variant_t & pVal ) {
    HRESULT _hr = put_InclinationToSunLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2145)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2146)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2147)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2148)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2149)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2150)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2151)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2152)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2153)
inline double AgStkGatorLib::_IAgVAPowerSolarArray::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2154)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2155)
inline _bstr_t AgStkGatorLib::_IAgVAPowerSolarArray::GetApproximationFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApproximationFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2156)
inline HRESULT AgStkGatorLib::_IAgVAPowerSolarArray::EnableControlParameter ( enum AgEVAControlPowerSolarArray Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2157)
inline HRESULT AgStkGatorLib::_IAgVAPowerSolarArray::DisableControlParameter ( enum AgEVAControlPowerSolarArray Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2158)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerSolarArray::IsControlParameterEnabled ( enum AgEVAControlPowerSolarArray Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerSolarArray::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2160)
inline _bstr_t AgStkGatorLib::_IAgVAPowerSolarArray::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2161)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2162)
inline _bstr_t AgStkGatorLib::_IAgVAPowerSolarArray::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2163)
inline void AgStkGatorLib::_IAgVAPowerSolarArray::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2164)
inline _bstr_t AgStkGatorLib::_IAgVAPowerSolarArray::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2165)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPowerSolarArray::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2166)
inline IUnknownPtr AgStkGatorLib::_IAgVAPowerSolarArray::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAPluginProperties wrapper method implementations
//

#pragma implementation_key(2167)
inline _variant_t AgStkGatorLib::IAgVAPluginProperties::GetProperty ( _bstr_t Path ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2168)
inline HRESULT AgStkGatorLib::IAgVAPluginProperties::SetProperty ( _bstr_t Path, const _variant_t & PropertyValue ) {
    HRESULT _hr = raw_SetProperty(Path, PropertyValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2169)
inline SAFEARRAY * AgStkGatorLib::IAgVAPluginProperties::GetAvailableProperties ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAGeneralRelativityFunction wrapper method implementations
//

#pragma implementation_key(2170)
inline _bstr_t AgStkGatorLib::_IAgVAGeneralRelativityFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2171)
inline void AgStkGatorLib::_IAgVAGeneralRelativityFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2172)
inline _bstr_t AgStkGatorLib::_IAgVAGeneralRelativityFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2173)
inline void AgStkGatorLib::_IAgVAGeneralRelativityFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2174)
inline _bstr_t AgStkGatorLib::_IAgVAGeneralRelativityFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2175)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAGeneralRelativityFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2176)
inline IUnknownPtr AgStkGatorLib::_IAgVAGeneralRelativityFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVAStateTransFunction wrapper method implementations
//

#pragma implementation_key(2177)
inline _bstr_t AgStkGatorLib::_IAgVAStateTransFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2178)
inline void AgStkGatorLib::_IAgVAStateTransFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2179)
inline _bstr_t AgStkGatorLib::_IAgVAStateTransFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2180)
inline void AgStkGatorLib::_IAgVAStateTransFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2181)
inline _bstr_t AgStkGatorLib::_IAgVAStateTransFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2182)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStateTransFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2183)
inline IUnknownPtr AgStkGatorLib::_IAgVAStateTransFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVARadiationPressureFunction wrapper method implementations
//

#pragma implementation_key(2184)
inline VARIANT_BOOL AgStkGatorLib::IAgVARadiationPressureFunction::GetIncludeAlbedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeAlbedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2185)
inline void AgStkGatorLib::IAgVARadiationPressureFunction::PutIncludeAlbedo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeAlbedo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2186)
inline VARIANT_BOOL AgStkGatorLib::IAgVARadiationPressureFunction::GetIncludeThermalRadiationPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeThermalRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2187)
inline void AgStkGatorLib::IAgVARadiationPressureFunction::PutIncludeThermalRadiationPressure ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeThermalRadiationPressure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2188)
inline _bstr_t AgStkGatorLib::IAgVARadiationPressureFunction::GetGroundReflectionModelFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroundReflectionModelFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2189)
inline void AgStkGatorLib::IAgVARadiationPressureFunction::PutGroundReflectionModelFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GroundReflectionModelFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2190)
inline _bstr_t AgStkGatorLib::IAgVARadiationPressureFunction::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVARadiationPressureFunction wrapper method implementations
//

#pragma implementation_key(2191)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARadiationPressureFunction::GetIncludeAlbedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeAlbedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2192)
inline void AgStkGatorLib::_IAgVARadiationPressureFunction::PutIncludeAlbedo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeAlbedo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2193)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARadiationPressureFunction::GetIncludeThermalRadiationPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeThermalRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2194)
inline void AgStkGatorLib::_IAgVARadiationPressureFunction::PutIncludeThermalRadiationPressure ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeThermalRadiationPressure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2195)
inline _bstr_t AgStkGatorLib::_IAgVARadiationPressureFunction::GetGroundReflectionModelFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroundReflectionModelFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2196)
inline void AgStkGatorLib::_IAgVARadiationPressureFunction::PutGroundReflectionModelFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GroundReflectionModelFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2197)
inline _bstr_t AgStkGatorLib::_IAgVARadiationPressureFunction::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2198)
inline _bstr_t AgStkGatorLib::_IAgVARadiationPressureFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2199)
inline void AgStkGatorLib::_IAgVARadiationPressureFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2200)
inline _bstr_t AgStkGatorLib::_IAgVARadiationPressureFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2201)
inline void AgStkGatorLib::_IAgVARadiationPressureFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2202)
inline _bstr_t AgStkGatorLib::_IAgVARadiationPressureFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2203)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARadiationPressureFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2204)
inline IUnknownPtr AgStkGatorLib::_IAgVARadiationPressureFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAYarkovskyFunc wrapper method implementations
//

#pragma implementation_key(2205)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::Getalpha ( ) {
    double _result = 0;
    HRESULT _hr = get_alpha(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2206)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::Putalpha ( double pVal ) {
    HRESULT _hr = put_alpha(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2207)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetR0 ( ) {
    double _result = 0;
    HRESULT _hr = get_R0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2208)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutR0 ( double pVal ) {
    HRESULT _hr = put_R0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2209)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetNM ( ) {
    double _result = 0;
    HRESULT _hr = get_NM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2210)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutNM ( double pVal ) {
    HRESULT _hr = put_NM(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2211)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetNN ( ) {
    double _result = 0;
    HRESULT _hr = get_NN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2212)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutNN ( double pVal ) {
    HRESULT _hr = put_NN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2213)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetNK ( ) {
    double _result = 0;
    HRESULT _hr = get_NK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2214)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutNK ( double pVal ) {
    HRESULT _hr = put_NK(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2215)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetA1 ( ) {
    double _result = 0;
    HRESULT _hr = get_A1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2216)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutA1 ( double pVal ) {
    HRESULT _hr = put_A1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2217)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetA2 ( ) {
    double _result = 0;
    HRESULT _hr = get_A2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2218)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutA2 ( double pVal ) {
    HRESULT _hr = put_A2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2219)
inline double AgStkGatorLib::IAgVAYarkovskyFunc::GetA3 ( ) {
    double _result = 0;
    HRESULT _hr = get_A3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2220)
inline void AgStkGatorLib::IAgVAYarkovskyFunc::PutA3 ( double pVal ) {
    HRESULT _hr = put_A3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAYarkovskyFunc wrapper method implementations
//

#pragma implementation_key(2221)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::Getalpha ( ) {
    double _result = 0;
    HRESULT _hr = get_alpha(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2222)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::Putalpha ( double pVal ) {
    HRESULT _hr = put_alpha(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2223)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetR0 ( ) {
    double _result = 0;
    HRESULT _hr = get_R0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2224)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutR0 ( double pVal ) {
    HRESULT _hr = put_R0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2225)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetNM ( ) {
    double _result = 0;
    HRESULT _hr = get_NM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2226)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutNM ( double pVal ) {
    HRESULT _hr = put_NM(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2227)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetNN ( ) {
    double _result = 0;
    HRESULT _hr = get_NN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2228)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutNN ( double pVal ) {
    HRESULT _hr = put_NN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2229)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetNK ( ) {
    double _result = 0;
    HRESULT _hr = get_NK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2230)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutNK ( double pVal ) {
    HRESULT _hr = put_NK(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2231)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetA1 ( ) {
    double _result = 0;
    HRESULT _hr = get_A1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2232)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutA1 ( double pVal ) {
    HRESULT _hr = put_A1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2233)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetA2 ( ) {
    double _result = 0;
    HRESULT _hr = get_A2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2234)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutA2 ( double pVal ) {
    HRESULT _hr = put_A2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2235)
inline double AgStkGatorLib::_IAgVAYarkovskyFunc::GetA3 ( ) {
    double _result = 0;
    HRESULT _hr = get_A3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2236)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutA3 ( double pVal ) {
    HRESULT _hr = put_A3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2237)
inline _bstr_t AgStkGatorLib::_IAgVAYarkovskyFunc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2238)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2239)
inline _bstr_t AgStkGatorLib::_IAgVAYarkovskyFunc::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2240)
inline void AgStkGatorLib::_IAgVAYarkovskyFunc::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline _bstr_t AgStkGatorLib::_IAgVAYarkovskyFunc::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2242)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAYarkovskyFunc::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2243)
inline IUnknownPtr AgStkGatorLib::_IAgVAYarkovskyFunc::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVABlendedDensity wrapper method implementations
//

#pragma implementation_key(2244)
inline HRESULT AgStkGatorLib::IAgVABlendedDensity::AtmDensityModel ( struct STKObjects::IAgComponentInfo * pInVal ) {
    HRESULT _hr = raw_AtmDensityModel(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2245)
inline HRESULT AgStkGatorLib::IAgVABlendedDensity::LowAltAtmDensityModel ( struct STKObjects::IAgComponentInfo * pInVal ) {
    HRESULT _hr = raw_LowAltAtmDensityModel(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2246)
inline double AgStkGatorLib::IAgVABlendedDensity::GetDensityBlendingAltRange ( ) {
    double _result = 0;
    HRESULT _hr = get_DensityBlendingAltRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2247)
inline void AgStkGatorLib::IAgVABlendedDensity::PutDensityBlendingAltRange ( double pVal ) {
    HRESULT _hr = put_DensityBlendingAltRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2248)
inline _bstr_t AgStkGatorLib::IAgVABlendedDensity::GetAtmDensityModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmDensityModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2249)
inline _bstr_t AgStkGatorLib::IAgVABlendedDensity::GetLowAltAtmDensityModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LowAltAtmDensityModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2250)
inline VARIANT_BOOL AgStkGatorLib::IAgVABlendedDensity::GetUseApproxAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproxAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2251)
inline void AgStkGatorLib::IAgVABlendedDensity::PutUseApproxAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproxAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2252)
inline double AgStkGatorLib::IAgVABlendedDensity::GetLowerBoundUpperAtmModel ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerBoundUpperAtmModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVABlendedDensity wrapper method implementations
//

#pragma implementation_key(2253)
inline HRESULT AgStkGatorLib::_IAgVABlendedDensity::AtmDensityModel ( struct STKObjects::IAgComponentInfo * pInVal ) {
    HRESULT _hr = raw_AtmDensityModel(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2254)
inline HRESULT AgStkGatorLib::_IAgVABlendedDensity::LowAltAtmDensityModel ( struct STKObjects::IAgComponentInfo * pInVal ) {
    HRESULT _hr = raw_LowAltAtmDensityModel(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2255)
inline double AgStkGatorLib::_IAgVABlendedDensity::GetDensityBlendingAltRange ( ) {
    double _result = 0;
    HRESULT _hr = get_DensityBlendingAltRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2256)
inline void AgStkGatorLib::_IAgVABlendedDensity::PutDensityBlendingAltRange ( double pVal ) {
    HRESULT _hr = put_DensityBlendingAltRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2257)
inline _bstr_t AgStkGatorLib::_IAgVABlendedDensity::GetAtmDensityModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmDensityModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2258)
inline _bstr_t AgStkGatorLib::_IAgVABlendedDensity::GetLowAltAtmDensityModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LowAltAtmDensityModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2259)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABlendedDensity::GetUseApproxAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproxAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2260)
inline void AgStkGatorLib::_IAgVABlendedDensity::PutUseApproxAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproxAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2261)
inline double AgStkGatorLib::_IAgVABlendedDensity::GetLowerBoundUpperAtmModel ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerBoundUpperAtmModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2262)
inline _bstr_t AgStkGatorLib::_IAgVABlendedDensity::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2263)
inline void AgStkGatorLib::_IAgVABlendedDensity::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2264)
inline _bstr_t AgStkGatorLib::_IAgVABlendedDensity::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2265)
inline void AgStkGatorLib::_IAgVABlendedDensity::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2266)
inline _bstr_t AgStkGatorLib::_IAgVABlendedDensity::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2267)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABlendedDensity::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2268)
inline IUnknownPtr AgStkGatorLib::_IAgVABlendedDensity::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVADragModelPlugin wrapper method implementations
//

#pragma implementation_key(2269)
inline _bstr_t AgStkGatorLib::IAgVADragModelPlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2270)
inline void AgStkGatorLib::IAgVADragModelPlugin::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2271)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVADragModelPlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

//
// interface _IAgVADragModelPlugin wrapper method implementations
//

#pragma implementation_key(2272)
inline _bstr_t AgStkGatorLib::_IAgVADragModelPlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2273)
inline void AgStkGatorLib::_IAgVADragModelPlugin::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2274)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVADragModelPlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(2275)
inline _bstr_t AgStkGatorLib::_IAgVADragModelPlugin::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2276)
inline void AgStkGatorLib::_IAgVADragModelPlugin::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2277)
inline _bstr_t AgStkGatorLib::_IAgVADragModelPlugin::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2278)
inline void AgStkGatorLib::_IAgVADragModelPlugin::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2279)
inline _bstr_t AgStkGatorLib::_IAgVADragModelPlugin::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2280)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADragModelPlugin::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2281)
inline IUnknownPtr AgStkGatorLib::_IAgVADragModelPlugin::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVACira72Function wrapper method implementations
//

#pragma implementation_key(2282)
inline VARIANT_BOOL AgStkGatorLib::IAgVACira72Function::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2283)
inline void AgStkGatorLib::IAgVACira72Function::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2284)
inline VARIANT_BOOL AgStkGatorLib::IAgVACira72Function::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2285)
inline VARIANT_BOOL AgStkGatorLib::IAgVACira72Function::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVACira72Function::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2287)
inline void AgStkGatorLib::IAgVACira72Function::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2288)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVACira72Function::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2289)
inline void AgStkGatorLib::IAgVACira72Function::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2290)
inline double AgStkGatorLib::IAgVACira72Function::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2291)
inline void AgStkGatorLib::IAgVACira72Function::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2292)
inline double AgStkGatorLib::IAgVACira72Function::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2293)
inline void AgStkGatorLib::IAgVACira72Function::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2294)
inline double AgStkGatorLib::IAgVACira72Function::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2295)
inline void AgStkGatorLib::IAgVACira72Function::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2296)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVACira72Function::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2297)
inline void AgStkGatorLib::IAgVACira72Function::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2298)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVACira72Function::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2299)
inline void AgStkGatorLib::IAgVACira72Function::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2300)
inline _bstr_t AgStkGatorLib::IAgVACira72Function::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2301)
inline void AgStkGatorLib::IAgVACira72Function::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2302)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVACira72Function::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2303)
inline void AgStkGatorLib::IAgVACira72Function::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2304)
inline _bstr_t AgStkGatorLib::IAgVACira72Function::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2305)
inline void AgStkGatorLib::IAgVACira72Function::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2306)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVACira72Function::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVACira72Function wrapper method implementations
//

#pragma implementation_key(2307)
inline VARIANT_BOOL AgStkGatorLib::_IAgVACira72Function::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2308)
inline void AgStkGatorLib::_IAgVACira72Function::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2309)
inline VARIANT_BOOL AgStkGatorLib::_IAgVACira72Function::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2310)
inline VARIANT_BOOL AgStkGatorLib::_IAgVACira72Function::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2311)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVACira72Function::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline void AgStkGatorLib::_IAgVACira72Function::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2313)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVACira72Function::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2314)
inline void AgStkGatorLib::_IAgVACira72Function::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2315)
inline double AgStkGatorLib::_IAgVACira72Function::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2316)
inline void AgStkGatorLib::_IAgVACira72Function::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2317)
inline double AgStkGatorLib::_IAgVACira72Function::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2318)
inline void AgStkGatorLib::_IAgVACira72Function::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2319)
inline double AgStkGatorLib::_IAgVACira72Function::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2320)
inline void AgStkGatorLib::_IAgVACira72Function::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2321)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVACira72Function::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2322)
inline void AgStkGatorLib::_IAgVACira72Function::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2323)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVACira72Function::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline void AgStkGatorLib::_IAgVACira72Function::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2325)
inline _bstr_t AgStkGatorLib::_IAgVACira72Function::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2326)
inline void AgStkGatorLib::_IAgVACira72Function::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2327)
inline _bstr_t AgStkGatorLib::_IAgVACira72Function::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2328)
inline void AgStkGatorLib::_IAgVACira72Function::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2329)
inline _bstr_t AgStkGatorLib::_IAgVACira72Function::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2330)
inline void AgStkGatorLib::_IAgVACira72Function::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2331)
inline _bstr_t AgStkGatorLib::_IAgVACira72Function::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2332)
inline VARIANT_BOOL AgStkGatorLib::_IAgVACira72Function::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2333)
inline IUnknownPtr AgStkGatorLib::_IAgVACira72Function::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2334)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVACira72Function::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2335)
inline void AgStkGatorLib::_IAgVACira72Function::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline _bstr_t AgStkGatorLib::_IAgVACira72Function::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2337)
inline void AgStkGatorLib::_IAgVACira72Function::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2338)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVACira72Function::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAExponential wrapper method implementations
//

#pragma implementation_key(2339)
inline VARIANT_BOOL AgStkGatorLib::IAgVAExponential::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2340)
inline void AgStkGatorLib::IAgVAExponential::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2341)
inline double AgStkGatorLib::IAgVAExponential::GetReferenceDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2342)
inline void AgStkGatorLib::IAgVAExponential::PutReferenceDensity ( double pVal ) {
    HRESULT _hr = put_ReferenceDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2343)
inline double AgStkGatorLib::IAgVAExponential::GetReferenceAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2344)
inline void AgStkGatorLib::IAgVAExponential::PutReferenceAltitude ( double pVal ) {
    HRESULT _hr = put_ReferenceAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2345)
inline double AgStkGatorLib::IAgVAExponential::GetScaleAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2346)
inline void AgStkGatorLib::IAgVAExponential::PutScaleAltitude ( double pVal ) {
    HRESULT _hr = put_ScaleAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2347)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAExponential::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2348)
inline void AgStkGatorLib::IAgVAExponential::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2349)
inline _bstr_t AgStkGatorLib::IAgVAExponential::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2350)
inline void AgStkGatorLib::IAgVAExponential::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2351)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAExponential::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAExponential wrapper method implementations
//

#pragma implementation_key(2352)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAExponential::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2353)
inline void AgStkGatorLib::_IAgVAExponential::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2354)
inline double AgStkGatorLib::_IAgVAExponential::GetReferenceDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2355)
inline void AgStkGatorLib::_IAgVAExponential::PutReferenceDensity ( double pVal ) {
    HRESULT _hr = put_ReferenceDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2356)
inline double AgStkGatorLib::_IAgVAExponential::GetReferenceAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2357)
inline void AgStkGatorLib::_IAgVAExponential::PutReferenceAltitude ( double pVal ) {
    HRESULT _hr = put_ReferenceAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2358)
inline double AgStkGatorLib::_IAgVAExponential::GetScaleAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2359)
inline void AgStkGatorLib::_IAgVAExponential::PutScaleAltitude ( double pVal ) {
    HRESULT _hr = put_ScaleAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2360)
inline _bstr_t AgStkGatorLib::_IAgVAExponential::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2361)
inline void AgStkGatorLib::_IAgVAExponential::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2362)
inline _bstr_t AgStkGatorLib::_IAgVAExponential::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2363)
inline void AgStkGatorLib::_IAgVAExponential::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2364)
inline _bstr_t AgStkGatorLib::_IAgVAExponential::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2365)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAExponential::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2366)
inline IUnknownPtr AgStkGatorLib::_IAgVAExponential::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2367)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAExponential::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void AgStkGatorLib::_IAgVAExponential::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline _bstr_t AgStkGatorLib::_IAgVAExponential::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2370)
inline void AgStkGatorLib::_IAgVAExponential::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2371)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAExponential::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAHarrisPriester wrapper method implementations
//

#pragma implementation_key(2372)
inline VARIANT_BOOL AgStkGatorLib::IAgVAHarrisPriester::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2373)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2374)
inline VARIANT_BOOL AgStkGatorLib::IAgVAHarrisPriester::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2375)
inline VARIANT_BOOL AgStkGatorLib::IAgVAHarrisPriester::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2376)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAHarrisPriester::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2377)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2378)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAHarrisPriester::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2379)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2380)
inline double AgStkGatorLib::IAgVAHarrisPriester::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2381)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2382)
inline _bstr_t AgStkGatorLib::IAgVAHarrisPriester::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2383)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2384)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAHarrisPriester::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2385)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2386)
inline _bstr_t AgStkGatorLib::IAgVAHarrisPriester::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2387)
inline void AgStkGatorLib::IAgVAHarrisPriester::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2388)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAHarrisPriester::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAHarrisPriester wrapper method implementations
//

#pragma implementation_key(2389)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAHarrisPriester::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2390)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2391)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAHarrisPriester::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2392)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAHarrisPriester::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2393)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAHarrisPriester::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2394)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2395)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAHarrisPriester::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2396)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2397)
inline double AgStkGatorLib::_IAgVAHarrisPriester::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2398)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2399)
inline _bstr_t AgStkGatorLib::_IAgVAHarrisPriester::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2400)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2401)
inline _bstr_t AgStkGatorLib::_IAgVAHarrisPriester::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2402)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2403)
inline _bstr_t AgStkGatorLib::_IAgVAHarrisPriester::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2404)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2405)
inline _bstr_t AgStkGatorLib::_IAgVAHarrisPriester::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2406)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAHarrisPriester::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2407)
inline IUnknownPtr AgStkGatorLib::_IAgVAHarrisPriester::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2408)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAHarrisPriester::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2409)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2410)
inline _bstr_t AgStkGatorLib::_IAgVAHarrisPriester::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2411)
inline void AgStkGatorLib::_IAgVAHarrisPriester::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2412)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAHarrisPriester::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVADensityModelPlugin wrapper method implementations
//

#pragma implementation_key(2413)
inline _bstr_t AgStkGatorLib::IAgVADensityModelPlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2414)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2415)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVADensityModelPlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(2416)
inline VARIANT_BOOL AgStkGatorLib::IAgVADensityModelPlugin::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2417)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2418)
inline VARIANT_BOOL AgStkGatorLib::IAgVADensityModelPlugin::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2419)
inline VARIANT_BOOL AgStkGatorLib::IAgVADensityModelPlugin::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2420)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVADensityModelPlugin::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2421)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2422)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVADensityModelPlugin::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2423)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetF10 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2425)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutF10 ( double pVal ) {
    HRESULT _hr = put_F10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2426)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetF10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2427)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutF10Avg ( double pVal ) {
    HRESULT _hr = put_F10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2428)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetM10 ( ) {
    double _result = 0;
    HRESULT _hr = get_M10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2429)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutM10 ( double pVal ) {
    HRESULT _hr = put_M10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2430)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetM10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_M10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2431)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutM10Avg ( double pVal ) {
    HRESULT _hr = put_M10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2432)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetS10 ( ) {
    double _result = 0;
    HRESULT _hr = get_S10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2433)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutS10 ( double pVal ) {
    HRESULT _hr = put_S10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2434)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetS10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_S10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2435)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutS10Avg ( double pVal ) {
    HRESULT _hr = put_S10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2436)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetY10 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2437)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutY10 ( double pVal ) {
    HRESULT _hr = put_Y10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2438)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetY10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2439)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutY10Avg ( double pVal ) {
    HRESULT _hr = put_Y10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2440)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2441)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2442)
inline double AgStkGatorLib::IAgVADensityModelPlugin::GetDstDTc ( ) {
    double _result = 0;
    HRESULT _hr = get_DstDTc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2443)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutDstDTc ( double pVal ) {
    HRESULT _hr = put_DstDTc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2444)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVADensityModelPlugin::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2445)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2446)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVADensityModelPlugin::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2447)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2448)
inline _bstr_t AgStkGatorLib::IAgVADensityModelPlugin::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2449)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2450)
inline _bstr_t AgStkGatorLib::IAgVADensityModelPlugin::GetAtmosAugDataFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDataFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2451)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutAtmosAugDataFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDataFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2452)
inline _bstr_t AgStkGatorLib::IAgVADensityModelPlugin::GetAtmosAugDTCFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDTCFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2453)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutAtmosAugDTCFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDTCFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2454)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVADensityModelPlugin::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2455)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2456)
inline _bstr_t AgStkGatorLib::IAgVADensityModelPlugin::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2457)
inline void AgStkGatorLib::IAgVADensityModelPlugin::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2458)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVADensityModelPlugin::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

#pragma implementation_key(2459)
inline VARIANT_BOOL AgStkGatorLib::IAgVADensityModelPlugin::GetUsesAugmentedSpaceWeather ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsesAugmentedSpaceWeather(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVADensityModelPlugin wrapper method implementations
//

#pragma implementation_key(2460)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2461)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2462)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVADensityModelPlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(2463)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADensityModelPlugin::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2464)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2465)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADensityModelPlugin::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2466)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADensityModelPlugin::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVADensityModelPlugin::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2468)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2469)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVADensityModelPlugin::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2470)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2471)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetF10 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2472)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutF10 ( double pVal ) {
    HRESULT _hr = put_F10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2473)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetF10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2474)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutF10Avg ( double pVal ) {
    HRESULT _hr = put_F10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2475)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetM10 ( ) {
    double _result = 0;
    HRESULT _hr = get_M10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2476)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutM10 ( double pVal ) {
    HRESULT _hr = put_M10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2477)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetM10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_M10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2478)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutM10Avg ( double pVal ) {
    HRESULT _hr = put_M10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2479)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetS10 ( ) {
    double _result = 0;
    HRESULT _hr = get_S10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2480)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutS10 ( double pVal ) {
    HRESULT _hr = put_S10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2481)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetS10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_S10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2482)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutS10Avg ( double pVal ) {
    HRESULT _hr = put_S10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2483)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetY10 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2484)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutY10 ( double pVal ) {
    HRESULT _hr = put_Y10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2485)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetY10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2486)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutY10Avg ( double pVal ) {
    HRESULT _hr = put_Y10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2487)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2488)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2489)
inline double AgStkGatorLib::_IAgVADensityModelPlugin::GetDstDTc ( ) {
    double _result = 0;
    HRESULT _hr = get_DstDTc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2490)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutDstDTc ( double pVal ) {
    HRESULT _hr = put_DstDTc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2491)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVADensityModelPlugin::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2492)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2493)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVADensityModelPlugin::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2494)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2495)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2496)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2497)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetAtmosAugDataFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDataFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2498)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutAtmosAugDataFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDataFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2499)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetAtmosAugDTCFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDTCFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2500)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutAtmosAugDTCFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDTCFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2501)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVADensityModelPlugin::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2502)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2503)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2504)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2505)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVADensityModelPlugin::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

#pragma implementation_key(2506)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADensityModelPlugin::GetUsesAugmentedSpaceWeather ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsesAugmentedSpaceWeather(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2507)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2508)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2509)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2510)
inline void AgStkGatorLib::_IAgVADensityModelPlugin::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2511)
inline _bstr_t AgStkGatorLib::_IAgVADensityModelPlugin::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2512)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADensityModelPlugin::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2513)
inline IUnknownPtr AgStkGatorLib::_IAgVADensityModelPlugin::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAJacchiaRoberts wrapper method implementations
//

#pragma implementation_key(2514)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchiaRoberts::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2515)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2516)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchiaRoberts::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2517)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchiaRoberts::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2518)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAJacchiaRoberts::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2519)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2520)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAJacchiaRoberts::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2521)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2522)
inline double AgStkGatorLib::IAgVAJacchiaRoberts::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2523)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2524)
inline double AgStkGatorLib::IAgVAJacchiaRoberts::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2526)
inline double AgStkGatorLib::IAgVAJacchiaRoberts::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2527)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2528)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVAJacchiaRoberts::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2529)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2530)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVAJacchiaRoberts::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2531)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2532)
inline _bstr_t AgStkGatorLib::IAgVAJacchiaRoberts::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2533)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2534)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAJacchiaRoberts::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2535)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2536)
inline _bstr_t AgStkGatorLib::IAgVAJacchiaRoberts::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2537)
inline void AgStkGatorLib::IAgVAJacchiaRoberts::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2538)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAJacchiaRoberts::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAJacchiaRoberts wrapper method implementations
//

#pragma implementation_key(2539)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchiaRoberts::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2540)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2541)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchiaRoberts::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2542)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchiaRoberts::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2543)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAJacchiaRoberts::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2544)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2545)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAJacchiaRoberts::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2546)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2547)
inline double AgStkGatorLib::_IAgVAJacchiaRoberts::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2548)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2549)
inline double AgStkGatorLib::_IAgVAJacchiaRoberts::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2550)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2551)
inline double AgStkGatorLib::_IAgVAJacchiaRoberts::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2552)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2553)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVAJacchiaRoberts::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2554)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2555)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVAJacchiaRoberts::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2556)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2557)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaRoberts::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2558)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2559)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaRoberts::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2560)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2561)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaRoberts::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2562)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchiaRoberts::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2563)
inline IUnknownPtr AgStkGatorLib::_IAgVAJacchiaRoberts::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2564)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaRoberts::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2565)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2566)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAJacchiaRoberts::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2567)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2568)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaRoberts::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2569)
inline void AgStkGatorLib::_IAgVAJacchiaRoberts::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2570)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAJacchiaRoberts::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAJacchiaBowman2008 wrapper method implementations
//

#pragma implementation_key(2571)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchiaBowman2008::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2572)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2573)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAJacchiaBowman2008::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2574)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2575)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAJacchiaBowman2008::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2576)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2577)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetF10 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2578)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutF10 ( double pVal ) {
    HRESULT _hr = put_F10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2579)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetF10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2580)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutF10Avg ( double pVal ) {
    HRESULT _hr = put_F10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2581)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetM10 ( ) {
    double _result = 0;
    HRESULT _hr = get_M10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2582)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutM10 ( double pVal ) {
    HRESULT _hr = put_M10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2583)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetM10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_M10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2584)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutM10Avg ( double pVal ) {
    HRESULT _hr = put_M10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2585)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetS10 ( ) {
    double _result = 0;
    HRESULT _hr = get_S10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2586)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutS10 ( double pVal ) {
    HRESULT _hr = put_S10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2587)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetS10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_S10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutS10Avg ( double pVal ) {
    HRESULT _hr = put_S10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2589)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetY10 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2590)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutY10 ( double pVal ) {
    HRESULT _hr = put_Y10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2591)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetY10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2592)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutY10Avg ( double pVal ) {
    HRESULT _hr = put_Y10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2593)
inline double AgStkGatorLib::IAgVAJacchiaBowman2008::GetDstDTc ( ) {
    double _result = 0;
    HRESULT _hr = get_DstDTc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2594)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutDstDTc ( double pVal ) {
    HRESULT _hr = put_DstDTc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2595)
inline _bstr_t AgStkGatorLib::IAgVAJacchiaBowman2008::GetAtmosAugDataFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDataFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2596)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutAtmosAugDataFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDataFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2597)
inline _bstr_t AgStkGatorLib::IAgVAJacchiaBowman2008::GetAtmosAugDTCFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDTCFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2598)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutAtmosAugDTCFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDTCFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2599)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAJacchiaBowman2008::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2600)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2601)
inline _bstr_t AgStkGatorLib::IAgVAJacchiaBowman2008::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2602)
inline void AgStkGatorLib::IAgVAJacchiaBowman2008::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2603)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAJacchiaBowman2008::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAJacchiaBowman2008 wrapper method implementations
//

#pragma implementation_key(2604)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchiaBowman2008::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2605)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2606)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAJacchiaBowman2008::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2607)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2608)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAJacchiaBowman2008::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2609)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2610)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetF10 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2611)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutF10 ( double pVal ) {
    HRESULT _hr = put_F10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2612)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetF10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2613)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutF10Avg ( double pVal ) {
    HRESULT _hr = put_F10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2614)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetM10 ( ) {
    double _result = 0;
    HRESULT _hr = get_M10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2615)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutM10 ( double pVal ) {
    HRESULT _hr = put_M10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2616)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetM10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_M10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2617)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutM10Avg ( double pVal ) {
    HRESULT _hr = put_M10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2618)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetS10 ( ) {
    double _result = 0;
    HRESULT _hr = get_S10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutS10 ( double pVal ) {
    HRESULT _hr = put_S10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2620)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetS10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_S10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2621)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutS10Avg ( double pVal ) {
    HRESULT _hr = put_S10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2622)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetY10 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2623)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutY10 ( double pVal ) {
    HRESULT _hr = put_Y10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2624)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetY10Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_Y10Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2625)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutY10Avg ( double pVal ) {
    HRESULT _hr = put_Y10Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2626)
inline double AgStkGatorLib::_IAgVAJacchiaBowman2008::GetDstDTc ( ) {
    double _result = 0;
    HRESULT _hr = get_DstDTc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2627)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutDstDTc ( double pVal ) {
    HRESULT _hr = put_DstDTc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2628)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaBowman2008::GetAtmosAugDataFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDataFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2629)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutAtmosAugDataFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDataFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2630)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaBowman2008::GetAtmosAugDTCFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosAugDTCFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2631)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutAtmosAugDTCFile ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosAugDTCFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2632)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAJacchiaBowman2008::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2633)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2634)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaBowman2008::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2635)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2636)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAJacchiaBowman2008::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

#pragma implementation_key(2637)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaBowman2008::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2638)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2639)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaBowman2008::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2640)
inline void AgStkGatorLib::_IAgVAJacchiaBowman2008::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2641)
inline _bstr_t AgStkGatorLib::_IAgVAJacchiaBowman2008::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2642)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchiaBowman2008::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2643)
inline IUnknownPtr AgStkGatorLib::_IAgVAJacchiaBowman2008::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAJacchia_1960 wrapper method implementations
//

#pragma implementation_key(2644)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1960::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2645)
inline void AgStkGatorLib::IAgVAJacchia_1960::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2646)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1960::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2647)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1960::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2648)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAJacchia_1960::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2649)
inline void AgStkGatorLib::IAgVAJacchia_1960::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2650)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAJacchia_1960::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2651)
inline void AgStkGatorLib::IAgVAJacchia_1960::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2652)
inline _bstr_t AgStkGatorLib::IAgVAJacchia_1960::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2653)
inline void AgStkGatorLib::IAgVAJacchia_1960::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2654)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAJacchia_1960::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAJacchia_1960 wrapper method implementations
//

#pragma implementation_key(2655)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1960::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2656)
inline void AgStkGatorLib::_IAgVAJacchia_1960::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2657)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1960::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2658)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1960::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2659)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAJacchia_1960::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2660)
inline void AgStkGatorLib::_IAgVAJacchia_1960::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2661)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1960::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2662)
inline void AgStkGatorLib::_IAgVAJacchia_1960::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2663)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1960::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2664)
inline void AgStkGatorLib::_IAgVAJacchia_1960::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2665)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1960::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2666)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1960::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2667)
inline IUnknownPtr AgStkGatorLib::_IAgVAJacchia_1960::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2668)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAJacchia_1960::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2669)
inline void AgStkGatorLib::_IAgVAJacchia_1960::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2670)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1960::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2671)
inline void AgStkGatorLib::_IAgVAJacchia_1960::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2672)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAJacchia_1960::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAJacchia_1970 wrapper method implementations
//

#pragma implementation_key(2673)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1970::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2674)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2675)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1970::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2676)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1970::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2677)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAJacchia_1970::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2678)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2679)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAJacchia_1970::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2680)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2681)
inline double AgStkGatorLib::IAgVAJacchia_1970::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2682)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2683)
inline double AgStkGatorLib::IAgVAJacchia_1970::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2684)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2685)
inline double AgStkGatorLib::IAgVAJacchia_1970::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2686)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2687)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVAJacchia_1970::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2688)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2689)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVAJacchia_1970::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2690)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2691)
inline _bstr_t AgStkGatorLib::IAgVAJacchia_1970::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2692)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2693)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAJacchia_1970::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2694)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2695)
inline _bstr_t AgStkGatorLib::IAgVAJacchia_1970::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2696)
inline void AgStkGatorLib::IAgVAJacchia_1970::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2697)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAJacchia_1970::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAJacchia_1970 wrapper method implementations
//

#pragma implementation_key(2698)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1970::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2699)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2700)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1970::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2701)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1970::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2702)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAJacchia_1970::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2703)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2704)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAJacchia_1970::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2705)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2706)
inline double AgStkGatorLib::_IAgVAJacchia_1970::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2707)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2708)
inline double AgStkGatorLib::_IAgVAJacchia_1970::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2709)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2710)
inline double AgStkGatorLib::_IAgVAJacchia_1970::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2711)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2712)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVAJacchia_1970::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2713)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2714)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVAJacchia_1970::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2715)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2716)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1970::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2717)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2718)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1970::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2719)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2720)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1970::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2721)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1970::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2722)
inline IUnknownPtr AgStkGatorLib::_IAgVAJacchia_1970::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2723)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1970::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2724)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2725)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAJacchia_1970::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2726)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2727)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1970::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2728)
inline void AgStkGatorLib::_IAgVAJacchia_1970::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2729)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAJacchia_1970::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAJacchia_1971 wrapper method implementations
//

#pragma implementation_key(2730)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1971::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2731)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2732)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1971::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2733)
inline VARIANT_BOOL AgStkGatorLib::IAgVAJacchia_1971::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2734)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAJacchia_1971::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2735)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2736)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAJacchia_1971::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2737)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2738)
inline double AgStkGatorLib::IAgVAJacchia_1971::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2739)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2740)
inline double AgStkGatorLib::IAgVAJacchia_1971::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2741)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2742)
inline double AgStkGatorLib::IAgVAJacchia_1971::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2743)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2744)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVAJacchia_1971::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2745)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2746)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVAJacchia_1971::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2747)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2748)
inline _bstr_t AgStkGatorLib::IAgVAJacchia_1971::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2749)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2750)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAJacchia_1971::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2751)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2752)
inline _bstr_t AgStkGatorLib::IAgVAJacchia_1971::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2753)
inline void AgStkGatorLib::IAgVAJacchia_1971::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2754)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAJacchia_1971::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAJacchia_1971 wrapper method implementations
//

#pragma implementation_key(2755)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1971::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2756)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2757)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1971::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1971::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2759)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAJacchia_1971::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2760)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2761)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAJacchia_1971::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2762)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2763)
inline double AgStkGatorLib::_IAgVAJacchia_1971::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2764)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2765)
inline double AgStkGatorLib::_IAgVAJacchia_1971::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2766)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2767)
inline double AgStkGatorLib::_IAgVAJacchia_1971::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2768)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2769)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVAJacchia_1971::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2770)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2771)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVAJacchia_1971::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2772)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2773)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1971::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2774)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2775)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1971::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2776)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2777)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1971::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2778)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAJacchia_1971::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2779)
inline IUnknownPtr AgStkGatorLib::_IAgVAJacchia_1971::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2780)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1971::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2781)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2782)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAJacchia_1971::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2783)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2784)
inline _bstr_t AgStkGatorLib::_IAgVAJacchia_1971::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2785)
inline void AgStkGatorLib::_IAgVAJacchia_1971::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2786)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAJacchia_1971::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMSISE_1990 wrapper method implementations
//

#pragma implementation_key(2787)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMSISE_1990::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2788)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2789)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMSISE_1990::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2790)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMSISE_1990::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2791)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMSISE_1990::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2792)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2793)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMSISE_1990::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2794)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2795)
inline double AgStkGatorLib::IAgVAMSISE_1990::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2796)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2797)
inline double AgStkGatorLib::IAgVAMSISE_1990::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2798)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2799)
inline double AgStkGatorLib::IAgVAMSISE_1990::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2800)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2801)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVAMSISE_1990::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2802)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2803)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVAMSISE_1990::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2804)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2805)
inline _bstr_t AgStkGatorLib::IAgVAMSISE_1990::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2806)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2807)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMSISE_1990::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2808)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2809)
inline _bstr_t AgStkGatorLib::IAgVAMSISE_1990::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2810)
inline void AgStkGatorLib::IAgVAMSISE_1990::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2811)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMSISE_1990::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMSISE_1990 wrapper method implementations
//

#pragma implementation_key(2812)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSISE_1990::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2813)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2814)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSISE_1990::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2815)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSISE_1990::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2816)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMSISE_1990::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2817)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2818)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMSISE_1990::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2819)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2820)
inline double AgStkGatorLib::_IAgVAMSISE_1990::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline double AgStkGatorLib::_IAgVAMSISE_1990::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2823)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2824)
inline double AgStkGatorLib::_IAgVAMSISE_1990::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2825)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2826)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVAMSISE_1990::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2827)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2828)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVAMSISE_1990::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2829)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2830)
inline _bstr_t AgStkGatorLib::_IAgVAMSISE_1990::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2831)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2832)
inline _bstr_t AgStkGatorLib::_IAgVAMSISE_1990::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2833)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline _bstr_t AgStkGatorLib::_IAgVAMSISE_1990::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2835)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2836)
inline _bstr_t AgStkGatorLib::_IAgVAMSISE_1990::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2837)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSISE_1990::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2838)
inline IUnknownPtr AgStkGatorLib::_IAgVAMSISE_1990::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2839)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMSISE_1990::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2840)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2841)
inline _bstr_t AgStkGatorLib::_IAgVAMSISE_1990::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2842)
inline void AgStkGatorLib::_IAgVAMSISE_1990::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2843)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMSISE_1990::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMSIS_1986 wrapper method implementations
//

#pragma implementation_key(2844)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMSIS_1986::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2845)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2846)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMSIS_1986::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2847)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMSIS_1986::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2848)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMSIS_1986::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2849)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2850)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMSIS_1986::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2851)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2852)
inline double AgStkGatorLib::IAgVAMSIS_1986::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2853)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2854)
inline double AgStkGatorLib::IAgVAMSIS_1986::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2855)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2856)
inline double AgStkGatorLib::IAgVAMSIS_1986::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2857)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2858)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVAMSIS_1986::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2859)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2860)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVAMSIS_1986::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2861)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2862)
inline _bstr_t AgStkGatorLib::IAgVAMSIS_1986::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2863)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2864)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMSIS_1986::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2866)
inline _bstr_t AgStkGatorLib::IAgVAMSIS_1986::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2867)
inline void AgStkGatorLib::IAgVAMSIS_1986::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2868)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMSIS_1986::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMSIS_1986 wrapper method implementations
//

#pragma implementation_key(2869)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSIS_1986::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2870)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2871)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSIS_1986::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2872)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSIS_1986::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2873)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMSIS_1986::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2874)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2875)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMSIS_1986::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2876)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2877)
inline double AgStkGatorLib::_IAgVAMSIS_1986::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2878)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline double AgStkGatorLib::_IAgVAMSIS_1986::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2880)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline double AgStkGatorLib::_IAgVAMSIS_1986::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2882)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVAMSIS_1986::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2884)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2885)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVAMSIS_1986::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2886)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2887)
inline _bstr_t AgStkGatorLib::_IAgVAMSIS_1986::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2888)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2889)
inline _bstr_t AgStkGatorLib::_IAgVAMSIS_1986::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2890)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2891)
inline _bstr_t AgStkGatorLib::_IAgVAMSIS_1986::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2892)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2893)
inline _bstr_t AgStkGatorLib::_IAgVAMSIS_1986::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2894)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMSIS_1986::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2895)
inline IUnknownPtr AgStkGatorLib::_IAgVAMSIS_1986::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2896)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMSIS_1986::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2897)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2898)
inline _bstr_t AgStkGatorLib::_IAgVAMSIS_1986::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2899)
inline void AgStkGatorLib::_IAgVAMSIS_1986::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2900)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMSIS_1986::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVANRLMSISE_2000 wrapper method implementations
//

#pragma implementation_key(2901)
inline VARIANT_BOOL AgStkGatorLib::IAgVANRLMSISE_2000::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2902)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2903)
inline VARIANT_BOOL AgStkGatorLib::IAgVANRLMSISE_2000::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2904)
inline VARIANT_BOOL AgStkGatorLib::IAgVANRLMSISE_2000::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2905)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVANRLMSISE_2000::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2906)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2907)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVANRLMSISE_2000::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2908)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2909)
inline double AgStkGatorLib::IAgVANRLMSISE_2000::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2910)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2911)
inline double AgStkGatorLib::IAgVANRLMSISE_2000::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2912)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2913)
inline double AgStkGatorLib::IAgVANRLMSISE_2000::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2914)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2915)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVANRLMSISE_2000::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2916)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2917)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVANRLMSISE_2000::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2918)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2919)
inline _bstr_t AgStkGatorLib::IAgVANRLMSISE_2000::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2920)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2921)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVANRLMSISE_2000::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2922)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2923)
inline _bstr_t AgStkGatorLib::IAgVANRLMSISE_2000::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2924)
inline void AgStkGatorLib::IAgVANRLMSISE_2000::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2925)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVANRLMSISE_2000::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVANRLMSISE_2000 wrapper method implementations
//

#pragma implementation_key(2926)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANRLMSISE_2000::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2927)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2928)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANRLMSISE_2000::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2929)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANRLMSISE_2000::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVANRLMSISE_2000::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2931)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2932)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVANRLMSISE_2000::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2933)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2934)
inline double AgStkGatorLib::_IAgVANRLMSISE_2000::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2935)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2936)
inline double AgStkGatorLib::_IAgVANRLMSISE_2000::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2937)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2938)
inline double AgStkGatorLib::_IAgVANRLMSISE_2000::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2939)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2940)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVANRLMSISE_2000::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2941)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2942)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVANRLMSISE_2000::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2943)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2944)
inline _bstr_t AgStkGatorLib::_IAgVANRLMSISE_2000::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2945)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2946)
inline _bstr_t AgStkGatorLib::_IAgVANRLMSISE_2000::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2947)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2948)
inline _bstr_t AgStkGatorLib::_IAgVANRLMSISE_2000::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2949)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2950)
inline _bstr_t AgStkGatorLib::_IAgVANRLMSISE_2000::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2951)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANRLMSISE_2000::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2952)
inline IUnknownPtr AgStkGatorLib::_IAgVANRLMSISE_2000::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2953)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVANRLMSISE_2000::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2954)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2955)
inline _bstr_t AgStkGatorLib::_IAgVANRLMSISE_2000::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2956)
inline void AgStkGatorLib::_IAgVANRLMSISE_2000::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2957)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVANRLMSISE_2000::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAUS_Standard_Atmosphere wrapper method implementations
//

#pragma implementation_key(2958)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUS_Standard_Atmosphere::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2959)
inline void AgStkGatorLib::IAgVAUS_Standard_Atmosphere::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2960)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUS_Standard_Atmosphere::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2961)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUS_Standard_Atmosphere::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2962)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAUS_Standard_Atmosphere::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2963)
inline void AgStkGatorLib::IAgVAUS_Standard_Atmosphere::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2964)
inline _bstr_t AgStkGatorLib::IAgVAUS_Standard_Atmosphere::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2965)
inline void AgStkGatorLib::IAgVAUS_Standard_Atmosphere::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2966)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAUS_Standard_Atmosphere::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAUS_Standard_Atmosphere wrapper method implementations
//

#pragma implementation_key(2967)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2968)
inline void AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2969)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2970)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2971)
inline _bstr_t AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2972)
inline void AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2973)
inline _bstr_t AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2974)
inline void AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2975)
inline _bstr_t AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2976)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2977)
inline IUnknownPtr AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2978)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2979)
inline void AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2980)
inline _bstr_t AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2981)
inline void AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2982)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAUS_Standard_Atmosphere::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMarsGRAM37 wrapper method implementations
//

#pragma implementation_key(2983)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM37::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2984)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2985)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM37::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2986)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM37::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2987)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMarsGRAM37::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2988)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2989)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM37::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2990)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2991)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM37::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2992)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2993)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::IAgVAMarsGRAM37::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2994)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2995)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMarsGRAM37::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2996)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2997)
inline double AgStkGatorLib::IAgVAMarsGRAM37::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2998)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2999)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM37::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3000)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3001)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMarsGRAM37::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3002)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3003)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM37::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3004)
inline void AgStkGatorLib::IAgVAMarsGRAM37::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3005)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMarsGRAM37::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMarsGRAM37 wrapper method implementations
//

#pragma implementation_key(3006)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM37::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3007)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3008)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM37::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3009)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM37::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3010)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMarsGRAM37::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3011)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3012)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3013)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3014)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3015)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3016)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::_IAgVAMarsGRAM37::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3017)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3018)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMarsGRAM37::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3019)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3020)
inline double AgStkGatorLib::_IAgVAMarsGRAM37::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3021)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3022)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3023)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3024)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3025)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3026)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3027)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3028)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3029)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM37::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3030)
inline IUnknownPtr AgStkGatorLib::_IAgVAMarsGRAM37::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3031)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMarsGRAM37::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3032)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3033)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM37::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3034)
inline void AgStkGatorLib::_IAgVAMarsGRAM37::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3035)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMarsGRAM37::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMarsGRAM2005 wrapper method implementations
//

#pragma implementation_key(3036)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2005::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3037)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3038)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2005::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3039)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2005::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3040)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMarsGRAM2005::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3041)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3042)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2005::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3043)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3044)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2005::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3045)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3046)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::IAgVAMarsGRAM2005::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3047)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3048)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMarsGRAM2005::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3049)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3050)
inline double AgStkGatorLib::IAgVAMarsGRAM2005::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3051)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3052)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2005::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3053)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3054)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMarsGRAM2005::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3055)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3056)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2005::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3057)
inline void AgStkGatorLib::IAgVAMarsGRAM2005::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3058)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMarsGRAM2005::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMarsGRAM2005 wrapper method implementations
//

#pragma implementation_key(3059)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2005::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3060)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3061)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2005::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3062)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2005::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3063)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMarsGRAM2005::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3064)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3065)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3066)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3067)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3068)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3069)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::_IAgVAMarsGRAM2005::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3070)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3071)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMarsGRAM2005::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3072)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3073)
inline double AgStkGatorLib::_IAgVAMarsGRAM2005::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3074)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3075)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3076)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3077)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3078)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3079)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3080)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3081)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3082)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2005::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3083)
inline IUnknownPtr AgStkGatorLib::_IAgVAMarsGRAM2005::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3084)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMarsGRAM2005::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3085)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3086)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2005::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3087)
inline void AgStkGatorLib::_IAgVAMarsGRAM2005::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3088)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMarsGRAM2005::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMarsGRAM2010 wrapper method implementations
//

#pragma implementation_key(3089)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2010::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3090)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3091)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2010::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3092)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2010::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3093)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMarsGRAM2010::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3094)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3095)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2010::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3096)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3097)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2010::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3098)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3099)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::IAgVAMarsGRAM2010::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3100)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3101)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMarsGRAM2010::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3102)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3103)
inline double AgStkGatorLib::IAgVAMarsGRAM2010::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3104)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3105)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2010::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3106)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3107)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMarsGRAM2010::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3108)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3109)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2010::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3110)
inline void AgStkGatorLib::IAgVAMarsGRAM2010::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3111)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMarsGRAM2010::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMarsGRAM2010 wrapper method implementations
//

#pragma implementation_key(3112)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2010::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3113)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3114)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2010::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3115)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2010::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3116)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMarsGRAM2010::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3117)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3118)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3119)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3120)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3121)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3122)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::_IAgVAMarsGRAM2010::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3123)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3124)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMarsGRAM2010::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3125)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3126)
inline double AgStkGatorLib::_IAgVAMarsGRAM2010::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3127)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3128)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3129)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3130)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3131)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3132)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3133)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3134)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3135)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2010::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3136)
inline IUnknownPtr AgStkGatorLib::_IAgVAMarsGRAM2010::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3137)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMarsGRAM2010::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3138)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3139)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2010::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3140)
inline void AgStkGatorLib::_IAgVAMarsGRAM2010::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3141)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMarsGRAM2010::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMarsGRAM2001 wrapper method implementations
//

#pragma implementation_key(3142)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2001::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3143)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3144)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2001::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3145)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2001::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3146)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMarsGRAM2001::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3147)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3148)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2001::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3149)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3150)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2001::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3151)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3152)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::IAgVAMarsGRAM2001::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3153)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3154)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMarsGRAM2001::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3155)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3156)
inline double AgStkGatorLib::IAgVAMarsGRAM2001::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3157)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3158)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2001::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3159)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3160)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMarsGRAM2001::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3161)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3162)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2001::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3163)
inline void AgStkGatorLib::IAgVAMarsGRAM2001::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3164)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMarsGRAM2001::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMarsGRAM2001 wrapper method implementations
//

#pragma implementation_key(3165)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2001::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3166)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3167)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2001::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3168)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2001::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3169)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMarsGRAM2001::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3170)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3171)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3172)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3173)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3174)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3175)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::_IAgVAMarsGRAM2001::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3176)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3177)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMarsGRAM2001::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3178)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3179)
inline double AgStkGatorLib::_IAgVAMarsGRAM2001::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3180)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3181)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3182)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3183)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3184)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3185)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3186)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3187)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3188)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2001::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3189)
inline IUnknownPtr AgStkGatorLib::_IAgVAMarsGRAM2001::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3190)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMarsGRAM2001::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3191)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3192)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2001::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3193)
inline void AgStkGatorLib::_IAgVAMarsGRAM2001::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3194)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMarsGRAM2001::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVAMarsGRAM2000 wrapper method implementations
//

#pragma implementation_key(3195)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2000::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3196)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3197)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2000::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3198)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMarsGRAM2000::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3199)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVAMarsGRAM2000::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3200)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3201)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2000::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3202)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3203)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2000::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3204)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3205)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::IAgVAMarsGRAM2000::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3206)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3207)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVAMarsGRAM2000::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3208)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3209)
inline double AgStkGatorLib::IAgVAMarsGRAM2000::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3210)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3211)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2000::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3212)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3213)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVAMarsGRAM2000::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3214)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3215)
inline _bstr_t AgStkGatorLib::IAgVAMarsGRAM2000::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3216)
inline void AgStkGatorLib::IAgVAMarsGRAM2000::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3217)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVAMarsGRAM2000::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface _IAgVAMarsGRAM2000 wrapper method implementations
//

#pragma implementation_key(3218)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2000::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3219)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3220)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2000::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3221)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2000::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3222)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVAMarsGRAM2000::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3223)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3224)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetDataDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3225)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutDataDirectory ( _bstr_t pVal ) {
    HRESULT _hr = put_DataDirectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3226)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetNamelistFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamelistFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3227)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutNamelistFile ( _bstr_t pVal ) {
    HRESULT _hr = put_NamelistFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3228)
inline enum AgStkGatorLib::AgEVAMarsGRAMDensityType AgStkGatorLib::_IAgVAMarsGRAM2000::GetDensityType ( ) {
    enum AgEVAMarsGRAMDensityType _result;
    HRESULT _hr = get_DensityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3229)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutDensityType ( enum AgEVAMarsGRAMDensityType pVal ) {
    HRESULT _hr = put_DensityType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3230)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVAMarsGRAM2000::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3231)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3232)
inline double AgStkGatorLib::_IAgVAMarsGRAM2000::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3233)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3234)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3235)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3236)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3237)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3238)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3239)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3240)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3241)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMarsGRAM2000::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3242)
inline IUnknownPtr AgStkGatorLib::_IAgVAMarsGRAM2000::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3243)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVAMarsGRAM2000::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3244)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3245)
inline _bstr_t AgStkGatorLib::_IAgVAMarsGRAM2000::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3246)
inline void AgStkGatorLib::_IAgVAMarsGRAM2000::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3247)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVAMarsGRAM2000::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

//
// interface IAgVADTM2012 wrapper method implementations
//

#pragma implementation_key(3248)
inline VARIANT_BOOL AgStkGatorLib::IAgVADTM2012::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3249)
inline void AgStkGatorLib::IAgVADTM2012::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3250)
inline VARIANT_BOOL AgStkGatorLib::IAgVADTM2012::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3251)
inline VARIANT_BOOL AgStkGatorLib::IAgVADTM2012::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3252)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVADTM2012::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3253)
inline void AgStkGatorLib::IAgVADTM2012::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3254)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::IAgVADTM2012::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3255)
inline void AgStkGatorLib::IAgVADTM2012::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3256)
inline double AgStkGatorLib::IAgVADTM2012::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3257)
inline void AgStkGatorLib::IAgVADTM2012::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3258)
inline _bstr_t AgStkGatorLib::IAgVADTM2012::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3259)
inline void AgStkGatorLib::IAgVADTM2012::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3260)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::IAgVADTM2012::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3261)
inline void AgStkGatorLib::IAgVADTM2012::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3262)
inline _bstr_t AgStkGatorLib::IAgVADTM2012::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3263)
inline void AgStkGatorLib::IAgVADTM2012::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3264)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::IAgVADTM2012::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

#pragma implementation_key(3265)
inline double AgStkGatorLib::IAgVADTM2012::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3266)
inline void AgStkGatorLib::IAgVADTM2012::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3267)
inline double AgStkGatorLib::IAgVADTM2012::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3268)
inline void AgStkGatorLib::IAgVADTM2012::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3269)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::IAgVADTM2012::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3270)
inline void AgStkGatorLib::IAgVADTM2012::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3271)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::IAgVADTM2012::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3272)
inline void AgStkGatorLib::IAgVADTM2012::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVADTM2012 wrapper method implementations
//

#pragma implementation_key(3273)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADTM2012::GetUseApproximateAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproximateAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3274)
inline void AgStkGatorLib::_IAgVADTM2012::PutUseApproximateAltitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproximateAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3275)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADTM2012::GetComputesTemperature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3276)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADTM2012::GetComputesPressure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputesPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3277)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVADTM2012::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3278)
inline void AgStkGatorLib::_IAgVADTM2012::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3279)
inline enum AgStkGatorLib::AgEVAAtmosDataSource AgStkGatorLib::_IAgVADTM2012::GetAtmosDataSource ( ) {
    enum AgEVAAtmosDataSource _result;
    HRESULT _hr = get_AtmosDataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3280)
inline void AgStkGatorLib::_IAgVADTM2012::PutAtmosDataSource ( enum AgEVAAtmosDataSource pVal ) {
    HRESULT _hr = put_AtmosDataSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3281)
inline double AgStkGatorLib::_IAgVADTM2012::GetF10p7Avg ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7Avg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3282)
inline void AgStkGatorLib::_IAgVADTM2012::PutF10p7Avg ( double pVal ) {
    HRESULT _hr = put_F10p7Avg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3283)
inline _bstr_t AgStkGatorLib::_IAgVADTM2012::GetAtmosDataFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AtmosDataFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3284)
inline void AgStkGatorLib::_IAgVADTM2012::PutAtmosDataFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_AtmosDataFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3285)
inline _bstr_t AgStkGatorLib::_IAgVADTM2012::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3286)
inline void AgStkGatorLib::_IAgVADTM2012::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3287)
inline _bstr_t AgStkGatorLib::_IAgVADTM2012::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3288)
inline void AgStkGatorLib::_IAgVADTM2012::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3289)
inline _bstr_t AgStkGatorLib::_IAgVADTM2012::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3290)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADTM2012::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3291)
inline IUnknownPtr AgStkGatorLib::_IAgVADTM2012::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3292)
inline enum AgStkGatorLib::AgEVADragModelType AgStkGatorLib::_IAgVADTM2012::GetDragModelType ( ) {
    enum AgEVADragModelType _result;
    HRESULT _hr = get_DragModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3293)
inline void AgStkGatorLib::_IAgVADTM2012::PutDragModelType ( enum AgEVADragModelType pVal ) {
    HRESULT _hr = put_DragModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3294)
inline _bstr_t AgStkGatorLib::_IAgVADTM2012::GetDragModelPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DragModelPluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3295)
inline void AgStkGatorLib::_IAgVADTM2012::PutDragModelPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_DragModelPluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3296)
inline AgStkGatorLib::IAgVADragModelPluginPtr AgStkGatorLib::_IAgVADTM2012::GetDragModelPlugin ( ) {
    struct IAgVADragModelPlugin * _result = 0;
    HRESULT _hr = get_DragModelPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADragModelPluginPtr(_result, false);
}

#pragma implementation_key(3297)
inline double AgStkGatorLib::_IAgVADTM2012::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3298)
inline void AgStkGatorLib::_IAgVADTM2012::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3299)
inline double AgStkGatorLib::_IAgVADTM2012::GetKp ( ) {
    double _result = 0;
    HRESULT _hr = get_Kp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3300)
inline void AgStkGatorLib::_IAgVADTM2012::PutKp ( double pVal ) {
    HRESULT _hr = put_Kp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3301)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxSource AgStkGatorLib::_IAgVADTM2012::GetAtmosDataGeoMagneticFluxSource ( ) {
    enum AgEVAGeoMagneticFluxSource _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3302)
inline void AgStkGatorLib::_IAgVADTM2012::PutAtmosDataGeoMagneticFluxSource ( enum AgEVAGeoMagneticFluxSource pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3303)
inline enum AgStkGatorLib::AgEVAGeoMagneticFluxUpdateRate AgStkGatorLib::_IAgVADTM2012::GetAtmosDataGeoMagneticFluxUpdateRate ( ) {
    enum AgEVAGeoMagneticFluxUpdateRate _result;
    HRESULT _hr = get_AtmosDataGeoMagneticFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3304)
inline void AgStkGatorLib::_IAgVADTM2012::PutAtmosDataGeoMagneticFluxUpdateRate ( enum AgEVAGeoMagneticFluxUpdateRate pVal ) {
    HRESULT _hr = put_AtmosDataGeoMagneticFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAGravityFieldFunction wrapper method implementations
//

#pragma implementation_key(3305)
inline _bstr_t AgStkGatorLib::IAgVAGravityFieldFunction::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3306)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3307)
inline long AgStkGatorLib::IAgVAGravityFieldFunction::GetDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3308)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutDegree ( long pVal ) {
    HRESULT _hr = put_Degree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3309)
inline long AgStkGatorLib::IAgVAGravityFieldFunction::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3310)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutOrder ( long pVal ) {
    HRESULT _hr = put_Order(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3311)
inline _bstr_t AgStkGatorLib::IAgVAGravityFieldFunction::GetMaxDegreeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaxDegreeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3312)
inline _bstr_t AgStkGatorLib::IAgVAGravityFieldFunction::GetMaxOrderText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaxOrderText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3313)
inline VARIANT_BOOL AgStkGatorLib::IAgVAGravityFieldFunction::GetIncludeTimeDependentSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeTimeDependentSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3314)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutIncludeTimeDependentSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeTimeDependentSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3315)
inline double AgStkGatorLib::IAgVAGravityFieldFunction::GetSolidTideMinAmp ( ) {
    double _result = 0;
    HRESULT _hr = get_SolidTideMinAmp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3316)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutSolidTideMinAmp ( double pVal ) {
    HRESULT _hr = put_SolidTideMinAmp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3317)
inline VARIANT_BOOL AgStkGatorLib::IAgVAGravityFieldFunction::GetUseOceanTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOceanTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3318)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutUseOceanTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseOceanTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3319)
inline double AgStkGatorLib::IAgVAGravityFieldFunction::GetOceanTideMinAmp ( ) {
    double _result = 0;
    HRESULT _hr = get_OceanTideMinAmp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3320)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutOceanTideMinAmp ( double pVal ) {
    HRESULT _hr = put_OceanTideMinAmp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3321)
inline double AgStkGatorLib::IAgVAGravityFieldFunction::GetMinRadiusPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRadiusPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3322)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutMinRadiusPercent ( double pVal ) {
    HRESULT _hr = put_MinRadiusPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3323)
inline _bstr_t AgStkGatorLib::IAgVAGravityFieldFunction::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3324)
inline long AgStkGatorLib::IAgVAGravityFieldFunction::GetOceanTideMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_OceanTideMaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3325)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutOceanTideMaxDegree ( long pVal ) {
    HRESULT _hr = put_OceanTideMaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3326)
inline long AgStkGatorLib::IAgVAGravityFieldFunction::GetOceanTideMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_OceanTideMaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3327)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutOceanTideMaxOrder ( long pVal ) {
    HRESULT _hr = put_OceanTideMaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3328)
inline enum STKObjects::AgESolidTide AgStkGatorLib::IAgVAGravityFieldFunction::GetSolidTideType ( ) {
    enum STKObjects::AgESolidTide _result;
    HRESULT _hr = get_SolidTideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3329)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutSolidTideType ( enum STKObjects::AgESolidTide pSolidTide ) {
    HRESULT _hr = put_SolidTideType(pSolidTide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3330)
inline VARIANT_BOOL AgStkGatorLib::IAgVAGravityFieldFunction::GetTruncateSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TruncateSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3331)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutTruncateSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TruncateSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3332)
inline VARIANT_BOOL AgStkGatorLib::IAgVAGravityFieldFunction::GetUseSecularVariations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSecularVariations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3333)
inline void AgStkGatorLib::IAgVAGravityFieldFunction::PutUseSecularVariations ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSecularVariations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAGravityFieldFunction wrapper method implementations
//

#pragma implementation_key(3334)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetGravityFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GravityFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3335)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutGravityFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_GravityFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3336)
inline long AgStkGatorLib::_IAgVAGravityFieldFunction::GetDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3337)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutDegree ( long pVal ) {
    HRESULT _hr = put_Degree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3338)
inline long AgStkGatorLib::_IAgVAGravityFieldFunction::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3339)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutOrder ( long pVal ) {
    HRESULT _hr = put_Order(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3340)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetMaxDegreeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaxDegreeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3341)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetMaxOrderText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaxOrderText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3342)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAGravityFieldFunction::GetIncludeTimeDependentSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeTimeDependentSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3343)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutIncludeTimeDependentSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeTimeDependentSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3344)
inline double AgStkGatorLib::_IAgVAGravityFieldFunction::GetSolidTideMinAmp ( ) {
    double _result = 0;
    HRESULT _hr = get_SolidTideMinAmp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3345)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutSolidTideMinAmp ( double pVal ) {
    HRESULT _hr = put_SolidTideMinAmp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3346)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAGravityFieldFunction::GetUseOceanTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOceanTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3347)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutUseOceanTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseOceanTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3348)
inline double AgStkGatorLib::_IAgVAGravityFieldFunction::GetOceanTideMinAmp ( ) {
    double _result = 0;
    HRESULT _hr = get_OceanTideMinAmp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3349)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutOceanTideMinAmp ( double pVal ) {
    HRESULT _hr = put_OceanTideMinAmp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3350)
inline double AgStkGatorLib::_IAgVAGravityFieldFunction::GetMinRadiusPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRadiusPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3351)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutMinRadiusPercent ( double pVal ) {
    HRESULT _hr = put_MinRadiusPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3352)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3353)
inline long AgStkGatorLib::_IAgVAGravityFieldFunction::GetOceanTideMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_OceanTideMaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3354)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutOceanTideMaxDegree ( long pVal ) {
    HRESULT _hr = put_OceanTideMaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3355)
inline long AgStkGatorLib::_IAgVAGravityFieldFunction::GetOceanTideMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_OceanTideMaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3356)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutOceanTideMaxOrder ( long pVal ) {
    HRESULT _hr = put_OceanTideMaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3357)
inline enum STKObjects::AgESolidTide AgStkGatorLib::_IAgVAGravityFieldFunction::GetSolidTideType ( ) {
    enum STKObjects::AgESolidTide _result;
    HRESULT _hr = get_SolidTideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3358)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutSolidTideType ( enum STKObjects::AgESolidTide pSolidTide ) {
    HRESULT _hr = put_SolidTideType(pSolidTide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3359)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3360)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3361)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3362)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3363)
inline _bstr_t AgStkGatorLib::_IAgVAGravityFieldFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3364)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAGravityFieldFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3365)
inline IUnknownPtr AgStkGatorLib::_IAgVAGravityFieldFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3366)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAGravityFieldFunction::GetTruncateSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TruncateSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3367)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutTruncateSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TruncateSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3368)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAGravityFieldFunction::GetUseSecularVariations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSecularVariations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3369)
inline void AgStkGatorLib::_IAgVAGravityFieldFunction::PutUseSecularVariations ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSecularVariations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAPointMassFunction wrapper method implementations
//

#pragma implementation_key(3370)
inline enum AgStkGatorLib::AgEVAGravParamSource AgStkGatorLib::IAgVAPointMassFunction::GetGravSource ( ) {
    enum AgEVAGravParamSource _result;
    HRESULT _hr = get_GravSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3371)
inline void AgStkGatorLib::IAgVAPointMassFunction::PutGravSource ( enum AgEVAGravParamSource pVal ) {
    HRESULT _hr = put_GravSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3372)
inline double AgStkGatorLib::IAgVAPointMassFunction::GetMu ( ) {
    double _result = 0;
    HRESULT _hr = get_Mu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3373)
inline void AgStkGatorLib::IAgVAPointMassFunction::PutMu ( double pVal ) {
    HRESULT _hr = put_Mu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAPointMassFunction wrapper method implementations
//

#pragma implementation_key(3374)
inline enum AgStkGatorLib::AgEVAGravParamSource AgStkGatorLib::_IAgVAPointMassFunction::GetGravSource ( ) {
    enum AgEVAGravParamSource _result;
    HRESULT _hr = get_GravSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3375)
inline void AgStkGatorLib::_IAgVAPointMassFunction::PutGravSource ( enum AgEVAGravParamSource pVal ) {
    HRESULT _hr = put_GravSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3376)
inline double AgStkGatorLib::_IAgVAPointMassFunction::GetMu ( ) {
    double _result = 0;
    HRESULT _hr = get_Mu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3377)
inline void AgStkGatorLib::_IAgVAPointMassFunction::PutMu ( double pVal ) {
    HRESULT _hr = put_Mu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3378)
inline _bstr_t AgStkGatorLib::_IAgVAPointMassFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3379)
inline void AgStkGatorLib::_IAgVAPointMassFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3380)
inline _bstr_t AgStkGatorLib::_IAgVAPointMassFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3381)
inline void AgStkGatorLib::_IAgVAPointMassFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3382)
inline _bstr_t AgStkGatorLib::_IAgVAPointMassFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3383)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAPointMassFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3384)
inline IUnknownPtr AgStkGatorLib::_IAgVAPointMassFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVATwoBodyFunction wrapper method implementations
//

#pragma implementation_key(3385)
inline enum AgStkGatorLib::AgEVAGravParamSource AgStkGatorLib::IAgVATwoBodyFunction::GetGravSource ( ) {
    enum AgEVAGravParamSource _result;
    HRESULT _hr = get_GravSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3386)
inline void AgStkGatorLib::IAgVATwoBodyFunction::PutGravSource ( enum AgEVAGravParamSource pVal ) {
    HRESULT _hr = put_GravSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3387)
inline double AgStkGatorLib::IAgVATwoBodyFunction::GetMu ( ) {
    double _result = 0;
    HRESULT _hr = get_Mu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3388)
inline void AgStkGatorLib::IAgVATwoBodyFunction::PutMu ( double pVal ) {
    HRESULT _hr = put_Mu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3389)
inline double AgStkGatorLib::IAgVATwoBodyFunction::GetMinRadiusPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRadiusPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3390)
inline void AgStkGatorLib::IAgVATwoBodyFunction::PutMinRadiusPercent ( double pVal ) {
    HRESULT _hr = put_MinRadiusPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVATwoBodyFunction wrapper method implementations
//

#pragma implementation_key(3391)
inline enum AgStkGatorLib::AgEVAGravParamSource AgStkGatorLib::_IAgVATwoBodyFunction::GetGravSource ( ) {
    enum AgEVAGravParamSource _result;
    HRESULT _hr = get_GravSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3392)
inline void AgStkGatorLib::_IAgVATwoBodyFunction::PutGravSource ( enum AgEVAGravParamSource pVal ) {
    HRESULT _hr = put_GravSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3393)
inline double AgStkGatorLib::_IAgVATwoBodyFunction::GetMu ( ) {
    double _result = 0;
    HRESULT _hr = get_Mu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3394)
inline void AgStkGatorLib::_IAgVATwoBodyFunction::PutMu ( double pVal ) {
    HRESULT _hr = put_Mu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3395)
inline double AgStkGatorLib::_IAgVATwoBodyFunction::GetMinRadiusPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRadiusPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3396)
inline void AgStkGatorLib::_IAgVATwoBodyFunction::PutMinRadiusPercent ( double pVal ) {
    HRESULT _hr = put_MinRadiusPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3397)
inline _bstr_t AgStkGatorLib::_IAgVATwoBodyFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3398)
inline void AgStkGatorLib::_IAgVATwoBodyFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3399)
inline _bstr_t AgStkGatorLib::_IAgVATwoBodyFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3400)
inline void AgStkGatorLib::_IAgVATwoBodyFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3401)
inline _bstr_t AgStkGatorLib::_IAgVATwoBodyFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3402)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATwoBodyFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3403)
inline IUnknownPtr AgStkGatorLib::_IAgVATwoBodyFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAHPOPPluginFunction wrapper method implementations
//

#pragma implementation_key(3404)
inline _bstr_t AgStkGatorLib::IAgVAHPOPPluginFunction::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3405)
inline void AgStkGatorLib::IAgVAHPOPPluginFunction::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3406)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVAHPOPPluginFunction::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

//
// interface _IAgVAHPOPPluginFunction wrapper method implementations
//

#pragma implementation_key(3407)
inline _bstr_t AgStkGatorLib::_IAgVAHPOPPluginFunction::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3408)
inline void AgStkGatorLib::_IAgVAHPOPPluginFunction::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3409)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVAHPOPPluginFunction::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(3410)
inline _bstr_t AgStkGatorLib::_IAgVAHPOPPluginFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3411)
inline void AgStkGatorLib::_IAgVAHPOPPluginFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3412)
inline _bstr_t AgStkGatorLib::_IAgVAHPOPPluginFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3413)
inline void AgStkGatorLib::_IAgVAHPOPPluginFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3414)
inline _bstr_t AgStkGatorLib::_IAgVAHPOPPluginFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3415)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAHPOPPluginFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3416)
inline IUnknownPtr AgStkGatorLib::_IAgVAHPOPPluginFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEOMFuncPluginFunction wrapper method implementations
//

#pragma implementation_key(3417)
inline _bstr_t AgStkGatorLib::IAgVAEOMFuncPluginFunction::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3418)
inline void AgStkGatorLib::IAgVAEOMFuncPluginFunction::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3419)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVAEOMFuncPluginFunction::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

//
// interface _IAgVAEOMFuncPluginFunction wrapper method implementations
//

#pragma implementation_key(3420)
inline _bstr_t AgStkGatorLib::_IAgVAEOMFuncPluginFunction::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3421)
inline void AgStkGatorLib::_IAgVAEOMFuncPluginFunction::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3422)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVAEOMFuncPluginFunction::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(3423)
inline _bstr_t AgStkGatorLib::_IAgVAEOMFuncPluginFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3424)
inline void AgStkGatorLib::_IAgVAEOMFuncPluginFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3425)
inline _bstr_t AgStkGatorLib::_IAgVAEOMFuncPluginFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3426)
inline void AgStkGatorLib::_IAgVAEOMFuncPluginFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3427)
inline _bstr_t AgStkGatorLib::_IAgVAEOMFuncPluginFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3428)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEOMFuncPluginFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3429)
inline IUnknownPtr AgStkGatorLib::_IAgVAEOMFuncPluginFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAThirdBodyFunction wrapper method implementations
//

#pragma implementation_key(3430)
inline _bstr_t AgStkGatorLib::IAgVAThirdBodyFunction::GetThirdBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThirdBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3431)
inline void AgStkGatorLib::IAgVAThirdBodyFunction::PutThirdBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThirdBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3432)
inline enum AgStkGatorLib::AgEVAEphemSource AgStkGatorLib::IAgVAThirdBodyFunction::GetEphemSource ( ) {
    enum AgEVAEphemSource _result;
    HRESULT _hr = get_EphemSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3433)
inline void AgStkGatorLib::IAgVAThirdBodyFunction::PutEphemSource ( enum AgEVAEphemSource pVal ) {
    HRESULT _hr = put_EphemSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3434)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAThirdBodyFunction::GetMode ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3435)
inline HRESULT AgStkGatorLib::IAgVAThirdBodyFunction::SetModeType ( enum AgEVAThirdBodyMode Mode ) {
    HRESULT _hr = raw_SetModeType(Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3436)
inline enum AgStkGatorLib::AgEVAThirdBodyMode AgStkGatorLib::IAgVAThirdBodyFunction::GetModeType ( ) {
    enum AgEVAThirdBodyMode _result;
    HRESULT _hr = get_ModeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3437)
inline _bstr_t AgStkGatorLib::IAgVAThirdBodyFunction::GetEphemerisSourceWarning ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EphemerisSourceWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVAThirdBodyFunction wrapper method implementations
//

#pragma implementation_key(3438)
inline _bstr_t AgStkGatorLib::_IAgVAThirdBodyFunction::GetThirdBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThirdBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3439)
inline void AgStkGatorLib::_IAgVAThirdBodyFunction::PutThirdBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThirdBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3440)
inline enum AgStkGatorLib::AgEVAEphemSource AgStkGatorLib::_IAgVAThirdBodyFunction::GetEphemSource ( ) {
    enum AgEVAEphemSource _result;
    HRESULT _hr = get_EphemSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3441)
inline void AgStkGatorLib::_IAgVAThirdBodyFunction::PutEphemSource ( enum AgEVAEphemSource pVal ) {
    HRESULT _hr = put_EphemSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3442)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::_IAgVAThirdBodyFunction::GetMode ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3443)
inline HRESULT AgStkGatorLib::_IAgVAThirdBodyFunction::SetModeType ( enum AgEVAThirdBodyMode Mode ) {
    HRESULT _hr = raw_SetModeType(Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3444)
inline enum AgStkGatorLib::AgEVAThirdBodyMode AgStkGatorLib::_IAgVAThirdBodyFunction::GetModeType ( ) {
    enum AgEVAThirdBodyMode _result;
    HRESULT _hr = get_ModeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3445)
inline _bstr_t AgStkGatorLib::_IAgVAThirdBodyFunction::GetEphemerisSourceWarning ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EphemerisSourceWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3446)
inline _bstr_t AgStkGatorLib::_IAgVAThirdBodyFunction::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3447)
inline void AgStkGatorLib::_IAgVAThirdBodyFunction::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3448)
inline _bstr_t AgStkGatorLib::_IAgVAThirdBodyFunction::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3449)
inline void AgStkGatorLib::_IAgVAThirdBodyFunction::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3450)
inline _bstr_t AgStkGatorLib::_IAgVAThirdBodyFunction::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3451)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAThirdBodyFunction::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3452)
inline IUnknownPtr AgStkGatorLib::_IAgVAThirdBodyFunction::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEngineModelThrustCoefficients wrapper method implementations
//

#pragma implementation_key(3453)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3454)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3455)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3456)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3457)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3458)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3459)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3460)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3461)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3462)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3463)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC5 ( ) {
    double _result = 0;
    HRESULT _hr = get_C5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3464)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC5 ( double pVal ) {
    HRESULT _hr = put_C5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3465)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC6 ( ) {
    double _result = 0;
    HRESULT _hr = get_C6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3466)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC6 ( double pVal ) {
    HRESULT _hr = put_C6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3467)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetC7 ( ) {
    double _result = 0;
    HRESULT _hr = get_C7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3468)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutC7 ( double pVal ) {
    HRESULT _hr = put_C7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3469)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetE4 ( ) {
    double _result = 0;
    HRESULT _hr = get_E4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3470)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutE4 ( double pVal ) {
    HRESULT _hr = put_E4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3471)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetE5 ( ) {
    double _result = 0;
    HRESULT _hr = get_E5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3472)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutE5 ( double pVal ) {
    HRESULT _hr = put_E5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3473)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetE6 ( ) {
    double _result = 0;
    HRESULT _hr = get_E6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3474)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutE6 ( double pVal ) {
    HRESULT _hr = put_E6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3475)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetE7 ( ) {
    double _result = 0;
    HRESULT _hr = get_E7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3476)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutE7 ( double pVal ) {
    HRESULT _hr = put_E7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3477)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetB7 ( ) {
    double _result = 0;
    HRESULT _hr = get_B7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3478)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutB7 ( double pVal ) {
    HRESULT _hr = put_B7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3479)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetK0 ( ) {
    double _result = 0;
    HRESULT _hr = get_K0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3480)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutK0 ( double pVal ) {
    HRESULT _hr = put_K0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3481)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3482)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutK1 ( double pVal ) {
    HRESULT _hr = put_K1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3483)
inline double AgStkGatorLib::IAgVAEngineModelThrustCoefficients::GetReferenceTemp ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceTemp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3484)
inline void AgStkGatorLib::IAgVAEngineModelThrustCoefficients::PutReferenceTemp ( double pVal ) {
    HRESULT _hr = put_ReferenceTemp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAEngineModelThrustCoefficients wrapper method implementations
//

#pragma implementation_key(3485)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3486)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3487)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3488)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3489)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3490)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3491)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3492)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3493)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3494)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3495)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC5 ( ) {
    double _result = 0;
    HRESULT _hr = get_C5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3496)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC5 ( double pVal ) {
    HRESULT _hr = put_C5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3497)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC6 ( ) {
    double _result = 0;
    HRESULT _hr = get_C6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3498)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC6 ( double pVal ) {
    HRESULT _hr = put_C6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3499)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetC7 ( ) {
    double _result = 0;
    HRESULT _hr = get_C7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3500)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutC7 ( double pVal ) {
    HRESULT _hr = put_C7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3501)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetE4 ( ) {
    double _result = 0;
    HRESULT _hr = get_E4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3502)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutE4 ( double pVal ) {
    HRESULT _hr = put_E4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3503)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetE5 ( ) {
    double _result = 0;
    HRESULT _hr = get_E5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3504)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutE5 ( double pVal ) {
    HRESULT _hr = put_E5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3505)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetE6 ( ) {
    double _result = 0;
    HRESULT _hr = get_E6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3506)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutE6 ( double pVal ) {
    HRESULT _hr = put_E6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3507)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetE7 ( ) {
    double _result = 0;
    HRESULT _hr = get_E7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3508)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutE7 ( double pVal ) {
    HRESULT _hr = put_E7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3509)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetB7 ( ) {
    double _result = 0;
    HRESULT _hr = get_B7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3510)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutB7 ( double pVal ) {
    HRESULT _hr = put_B7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3511)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetK0 ( ) {
    double _result = 0;
    HRESULT _hr = get_K0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3512)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutK0 ( double pVal ) {
    HRESULT _hr = put_K0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3513)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3514)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutK1 ( double pVal ) {
    HRESULT _hr = put_K1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3515)
inline double AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::GetReferenceTemp ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceTemp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3516)
inline void AgStkGatorLib::_IAgVAEngineModelThrustCoefficients::PutReferenceTemp ( double pVal ) {
    HRESULT _hr = put_ReferenceTemp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAEngineModelIspCoefficients wrapper method implementations
//

#pragma implementation_key(3517)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3518)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3519)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3520)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3521)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3522)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3523)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3524)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3525)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3526)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3527)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC5 ( ) {
    double _result = 0;
    HRESULT _hr = get_C5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3528)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC5 ( double pVal ) {
    HRESULT _hr = put_C5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3529)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC6 ( ) {
    double _result = 0;
    HRESULT _hr = get_C6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3530)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC6 ( double pVal ) {
    HRESULT _hr = put_C6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3531)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetC7 ( ) {
    double _result = 0;
    HRESULT _hr = get_C7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3532)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutC7 ( double pVal ) {
    HRESULT _hr = put_C7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3533)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetE4 ( ) {
    double _result = 0;
    HRESULT _hr = get_E4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3534)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutE4 ( double pVal ) {
    HRESULT _hr = put_E4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3535)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetE5 ( ) {
    double _result = 0;
    HRESULT _hr = get_E5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3536)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutE5 ( double pVal ) {
    HRESULT _hr = put_E5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3537)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetE6 ( ) {
    double _result = 0;
    HRESULT _hr = get_E6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3538)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutE6 ( double pVal ) {
    HRESULT _hr = put_E6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3539)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetE7 ( ) {
    double _result = 0;
    HRESULT _hr = get_E7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3540)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutE7 ( double pVal ) {
    HRESULT _hr = put_E7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3541)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetB7 ( ) {
    double _result = 0;
    HRESULT _hr = get_B7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3542)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutB7 ( double pVal ) {
    HRESULT _hr = put_B7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3543)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetK0 ( ) {
    double _result = 0;
    HRESULT _hr = get_K0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3544)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutK0 ( double pVal ) {
    HRESULT _hr = put_K0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3545)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3546)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutK1 ( double pVal ) {
    HRESULT _hr = put_K1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3547)
inline double AgStkGatorLib::IAgVAEngineModelIspCoefficients::GetReferenceTemp ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceTemp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3548)
inline void AgStkGatorLib::IAgVAEngineModelIspCoefficients::PutReferenceTemp ( double pVal ) {
    HRESULT _hr = put_ReferenceTemp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAEngineModelIspCoefficients wrapper method implementations
//

#pragma implementation_key(3549)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3550)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3551)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3552)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3553)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3554)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3555)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3556)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3557)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3558)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3559)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC5 ( ) {
    double _result = 0;
    HRESULT _hr = get_C5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3560)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC5 ( double pVal ) {
    HRESULT _hr = put_C5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3561)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC6 ( ) {
    double _result = 0;
    HRESULT _hr = get_C6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3562)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC6 ( double pVal ) {
    HRESULT _hr = put_C6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3563)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetC7 ( ) {
    double _result = 0;
    HRESULT _hr = get_C7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3564)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutC7 ( double pVal ) {
    HRESULT _hr = put_C7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3565)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetE4 ( ) {
    double _result = 0;
    HRESULT _hr = get_E4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3566)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutE4 ( double pVal ) {
    HRESULT _hr = put_E4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3567)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetE5 ( ) {
    double _result = 0;
    HRESULT _hr = get_E5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3568)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutE5 ( double pVal ) {
    HRESULT _hr = put_E5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3569)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetE6 ( ) {
    double _result = 0;
    HRESULT _hr = get_E6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3570)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutE6 ( double pVal ) {
    HRESULT _hr = put_E6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3571)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetE7 ( ) {
    double _result = 0;
    HRESULT _hr = get_E7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutE7 ( double pVal ) {
    HRESULT _hr = put_E7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3573)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetB7 ( ) {
    double _result = 0;
    HRESULT _hr = get_B7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3574)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutB7 ( double pVal ) {
    HRESULT _hr = put_B7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3575)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetK0 ( ) {
    double _result = 0;
    HRESULT _hr = get_K0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3576)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutK0 ( double pVal ) {
    HRESULT _hr = put_K0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3577)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3578)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutK1 ( double pVal ) {
    HRESULT _hr = put_K1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3579)
inline double AgStkGatorLib::_IAgVAEngineModelIspCoefficients::GetReferenceTemp ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceTemp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3580)
inline void AgStkGatorLib::_IAgVAEngineModelIspCoefficients::PutReferenceTemp ( double pVal ) {
    HRESULT _hr = put_ReferenceTemp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAEngineConstAcc wrapper method implementations
//

#pragma implementation_key(3581)
inline double AgStkGatorLib::IAgVAEngineConstAcc::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3582)
inline void AgStkGatorLib::IAgVAEngineConstAcc::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3583)
inline double AgStkGatorLib::IAgVAEngineConstAcc::GetAcceleration ( ) {
    double _result = 0;
    HRESULT _hr = get_Acceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3584)
inline void AgStkGatorLib::IAgVAEngineConstAcc::PutAcceleration ( double pVal ) {
    HRESULT _hr = put_Acceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3585)
inline double AgStkGatorLib::IAgVAEngineConstAcc::GetIsp ( ) {
    double _result = 0;
    HRESULT _hr = get_Isp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3586)
inline void AgStkGatorLib::IAgVAEngineConstAcc::PutIsp ( double pVal ) {
    HRESULT _hr = put_Isp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3587)
inline HRESULT AgStkGatorLib::IAgVAEngineConstAcc::EnableControlParameter ( enum AgEVAControlEngineConstAcc Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3588)
inline HRESULT AgStkGatorLib::IAgVAEngineConstAcc::DisableControlParameter ( enum AgEVAControlEngineConstAcc Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3589)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineConstAcc::IsControlParameterEnabled ( enum AgEVAControlEngineConstAcc Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3590)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineConstAcc::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAEngineConstAcc wrapper method implementations
//

#pragma implementation_key(3591)
inline double AgStkGatorLib::_IAgVAEngineConstAcc::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3592)
inline void AgStkGatorLib::_IAgVAEngineConstAcc::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3593)
inline double AgStkGatorLib::_IAgVAEngineConstAcc::GetAcceleration ( ) {
    double _result = 0;
    HRESULT _hr = get_Acceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3594)
inline void AgStkGatorLib::_IAgVAEngineConstAcc::PutAcceleration ( double pVal ) {
    HRESULT _hr = put_Acceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3595)
inline double AgStkGatorLib::_IAgVAEngineConstAcc::GetIsp ( ) {
    double _result = 0;
    HRESULT _hr = get_Isp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3596)
inline void AgStkGatorLib::_IAgVAEngineConstAcc::PutIsp ( double pVal ) {
    HRESULT _hr = put_Isp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3597)
inline HRESULT AgStkGatorLib::_IAgVAEngineConstAcc::EnableControlParameter ( enum AgEVAControlEngineConstAcc Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3598)
inline HRESULT AgStkGatorLib::_IAgVAEngineConstAcc::DisableControlParameter ( enum AgEVAControlEngineConstAcc Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3599)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineConstAcc::IsControlParameterEnabled ( enum AgEVAControlEngineConstAcc Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3600)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineConstAcc::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3601)
inline _bstr_t AgStkGatorLib::_IAgVAEngineConstAcc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3602)
inline void AgStkGatorLib::_IAgVAEngineConstAcc::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3603)
inline _bstr_t AgStkGatorLib::_IAgVAEngineConstAcc::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3604)
inline void AgStkGatorLib::_IAgVAEngineConstAcc::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3605)
inline _bstr_t AgStkGatorLib::_IAgVAEngineConstAcc::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3606)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineConstAcc::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3607)
inline IUnknownPtr AgStkGatorLib::_IAgVAEngineConstAcc::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEngineConstant wrapper method implementations
//

#pragma implementation_key(3608)
inline double AgStkGatorLib::IAgVAEngineConstant::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3609)
inline void AgStkGatorLib::IAgVAEngineConstant::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3610)
inline double AgStkGatorLib::IAgVAEngineConstant::GetThrust ( ) {
    double _result = 0;
    HRESULT _hr = get_Thrust(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3611)
inline void AgStkGatorLib::IAgVAEngineConstant::PutThrust ( double pVal ) {
    HRESULT _hr = put_Thrust(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3612)
inline double AgStkGatorLib::IAgVAEngineConstant::GetIsp ( ) {
    double _result = 0;
    HRESULT _hr = get_Isp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3613)
inline void AgStkGatorLib::IAgVAEngineConstant::PutIsp ( double pVal ) {
    HRESULT _hr = put_Isp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3614)
inline HRESULT AgStkGatorLib::IAgVAEngineConstant::EnableControlParameter ( enum AgEVAControlEngineConstant Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3615)
inline HRESULT AgStkGatorLib::IAgVAEngineConstant::DisableControlParameter ( enum AgEVAControlEngineConstant Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3616)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineConstant::IsControlParameterEnabled ( enum AgEVAControlEngineConstant Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3617)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineConstant::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAEngineConstant wrapper method implementations
//

#pragma implementation_key(3618)
inline double AgStkGatorLib::_IAgVAEngineConstant::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3619)
inline void AgStkGatorLib::_IAgVAEngineConstant::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3620)
inline double AgStkGatorLib::_IAgVAEngineConstant::GetThrust ( ) {
    double _result = 0;
    HRESULT _hr = get_Thrust(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3621)
inline void AgStkGatorLib::_IAgVAEngineConstant::PutThrust ( double pVal ) {
    HRESULT _hr = put_Thrust(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3622)
inline double AgStkGatorLib::_IAgVAEngineConstant::GetIsp ( ) {
    double _result = 0;
    HRESULT _hr = get_Isp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3623)
inline void AgStkGatorLib::_IAgVAEngineConstant::PutIsp ( double pVal ) {
    HRESULT _hr = put_Isp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3624)
inline HRESULT AgStkGatorLib::_IAgVAEngineConstant::EnableControlParameter ( enum AgEVAControlEngineConstant Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3625)
inline HRESULT AgStkGatorLib::_IAgVAEngineConstant::DisableControlParameter ( enum AgEVAControlEngineConstant Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3626)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineConstant::IsControlParameterEnabled ( enum AgEVAControlEngineConstant Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3627)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineConstant::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3628)
inline _bstr_t AgStkGatorLib::_IAgVAEngineConstant::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3629)
inline void AgStkGatorLib::_IAgVAEngineConstant::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3630)
inline _bstr_t AgStkGatorLib::_IAgVAEngineConstant::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3631)
inline void AgStkGatorLib::_IAgVAEngineConstant::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3632)
inline _bstr_t AgStkGatorLib::_IAgVAEngineConstant::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3633)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineConstant::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3634)
inline IUnknownPtr AgStkGatorLib::_IAgVAEngineConstant::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEngineDefinition wrapper method implementations
//

#pragma implementation_key(3635)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetIspC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3636)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutIspC0 ( double pVal ) {
    HRESULT _hr = put_IspC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3637)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetIspC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3638)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutIspC1 ( double pVal ) {
    HRESULT _hr = put_IspC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3639)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetIspC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3640)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutIspC2 ( double pVal ) {
    HRESULT _hr = put_IspC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3641)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetIspC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3642)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutIspC3 ( double pVal ) {
    HRESULT _hr = put_IspC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3643)
inline enum AgStkGatorLib::AgEVAEngineModelFunction AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowRateEquationType ( ) {
    enum AgEVAEngineModelFunction _result;
    HRESULT _hr = get_MassFlowRateEquationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3644)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowRateEquationType ( enum AgEVAEngineModelFunction pVal ) {
    HRESULT _hr = put_MassFlowRateEquationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3645)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowRateC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3646)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowRateC0 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3647)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowRateC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3648)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowRateC1 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3649)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowRateC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3650)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowRateC2 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3651)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowRateC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3652)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowRateC3 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3653)
inline _bstr_t AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowRateEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MassFlowRateEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3654)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowEfficiencyC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3655)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowEfficiencyC0 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3656)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowEfficiencyC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3657)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowEfficiencyC1 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3658)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowEfficiencyC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3659)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowEfficiencyC2 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3660)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowEfficiencyC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3661)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowEfficiencyC3 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3662)
inline enum AgStkGatorLib::AgEVAEngineModelFunction AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowEfficiencyIndependentVar ( ) {
    enum AgEVAEngineModelFunction _result;
    HRESULT _hr = get_MassFlowEfficiencyIndependentVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3663)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutMassFlowEfficiencyIndependentVar ( enum AgEVAEngineModelFunction pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyIndependentVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3664)
inline _bstr_t AgStkGatorLib::IAgVAEngineDefinition::GetMassFlowEfficiencyEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3665)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetPowerEfficiencyC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3666)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutPowerEfficiencyC0 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3667)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetPowerEfficiencyC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3668)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutPowerEfficiencyC1 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3669)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetPowerEfficiencyC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3670)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutPowerEfficiencyC2 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3671)
inline double AgStkGatorLib::IAgVAEngineDefinition::GetPowerEfficiencyC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3672)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutPowerEfficiencyC3 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3673)
inline enum AgStkGatorLib::AgEVAEngineModelFunction AgStkGatorLib::IAgVAEngineDefinition::GetPowerEfficiencyIndependentVar ( ) {
    enum AgEVAEngineModelFunction _result;
    HRESULT _hr = get_PowerEfficiencyIndependentVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3674)
inline void AgStkGatorLib::IAgVAEngineDefinition::PutPowerEfficiencyIndependentVar ( enum AgEVAEngineModelFunction pVal ) {
    HRESULT _hr = put_PowerEfficiencyIndependentVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3675)
inline _bstr_t AgStkGatorLib::IAgVAEngineDefinition::GetPowerEfficiencyEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PowerEfficiencyEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3676)
inline _bstr_t AgStkGatorLib::IAgVAEngineDefinition::GetInputPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputPowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVAEngineDefinition wrapper method implementations
//

#pragma implementation_key(3677)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetIspC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3678)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutIspC0 ( double pVal ) {
    HRESULT _hr = put_IspC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3679)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetIspC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3680)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutIspC1 ( double pVal ) {
    HRESULT _hr = put_IspC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3681)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetIspC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3682)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutIspC2 ( double pVal ) {
    HRESULT _hr = put_IspC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3683)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetIspC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_IspC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3684)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutIspC3 ( double pVal ) {
    HRESULT _hr = put_IspC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3685)
inline enum AgStkGatorLib::AgEVAEngineModelFunction AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowRateEquationType ( ) {
    enum AgEVAEngineModelFunction _result;
    HRESULT _hr = get_MassFlowRateEquationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3686)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowRateEquationType ( enum AgEVAEngineModelFunction pVal ) {
    HRESULT _hr = put_MassFlowRateEquationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3687)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowRateC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3688)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowRateC0 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3689)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowRateC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3690)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowRateC1 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3691)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowRateC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3692)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowRateC2 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3693)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowRateC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowRateC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3694)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowRateC3 ( double pVal ) {
    HRESULT _hr = put_MassFlowRateC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3695)
inline _bstr_t AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowRateEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MassFlowRateEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3696)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowEfficiencyC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3697)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowEfficiencyC0 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3698)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowEfficiencyC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3699)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowEfficiencyC1 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3700)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowEfficiencyC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3701)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowEfficiencyC2 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3702)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowEfficiencyC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3703)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowEfficiencyC3 ( double pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3704)
inline enum AgStkGatorLib::AgEVAEngineModelFunction AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowEfficiencyIndependentVar ( ) {
    enum AgEVAEngineModelFunction _result;
    HRESULT _hr = get_MassFlowEfficiencyIndependentVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3705)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutMassFlowEfficiencyIndependentVar ( enum AgEVAEngineModelFunction pVal ) {
    HRESULT _hr = put_MassFlowEfficiencyIndependentVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3706)
inline _bstr_t AgStkGatorLib::_IAgVAEngineDefinition::GetMassFlowEfficiencyEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MassFlowEfficiencyEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3707)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetPowerEfficiencyC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3708)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutPowerEfficiencyC0 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3709)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetPowerEfficiencyC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3710)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutPowerEfficiencyC1 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3711)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetPowerEfficiencyC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3712)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutPowerEfficiencyC2 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3713)
inline double AgStkGatorLib::_IAgVAEngineDefinition::GetPowerEfficiencyC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_PowerEfficiencyC3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3714)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutPowerEfficiencyC3 ( double pVal ) {
    HRESULT _hr = put_PowerEfficiencyC3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3715)
inline enum AgStkGatorLib::AgEVAEngineModelFunction AgStkGatorLib::_IAgVAEngineDefinition::GetPowerEfficiencyIndependentVar ( ) {
    enum AgEVAEngineModelFunction _result;
    HRESULT _hr = get_PowerEfficiencyIndependentVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3716)
inline void AgStkGatorLib::_IAgVAEngineDefinition::PutPowerEfficiencyIndependentVar ( enum AgEVAEngineModelFunction pVal ) {
    HRESULT _hr = put_PowerEfficiencyIndependentVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3717)
inline _bstr_t AgStkGatorLib::_IAgVAEngineDefinition::GetPowerEfficiencyEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PowerEfficiencyEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3718)
inline _bstr_t AgStkGatorLib::_IAgVAEngineDefinition::GetInputPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputPowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVAEngineIon wrapper method implementations
//

#pragma implementation_key(3719)
inline double AgStkGatorLib::IAgVAEngineIon::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3720)
inline void AgStkGatorLib::IAgVAEngineIon::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3721)
inline _bstr_t AgStkGatorLib::IAgVAEngineIon::GetInputPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputPowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3722)
inline void AgStkGatorLib::IAgVAEngineIon::PutInputPowerSourceName ( _bstr_t pPowerSource ) {
    HRESULT _hr = put_InputPowerSourceName(pPowerSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3723)
inline double AgStkGatorLib::IAgVAEngineIon::GetMinRequiredPower ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRequiredPower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3724)
inline void AgStkGatorLib::IAgVAEngineIon::PutMinRequiredPower ( double pVal ) {
    HRESULT _hr = put_MinRequiredPower(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3725)
inline double AgStkGatorLib::IAgVAEngineIon::GetMaxInputPower ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxInputPower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3726)
inline void AgStkGatorLib::IAgVAEngineIon::PutMaxInputPower ( double pVal ) {
    HRESULT _hr = put_MaxInputPower(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3727)
inline double AgStkGatorLib::IAgVAEngineIon::GetPercentDegradationPerYear ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentDegradationPerYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3728)
inline void AgStkGatorLib::IAgVAEngineIon::PutPercentDegradationPerYear ( double pVal ) {
    HRESULT _hr = put_PercentDegradationPerYear(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3729)
inline _variant_t AgStkGatorLib::IAgVAEngineIon::GetReferenceEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3730)
inline void AgStkGatorLib::IAgVAEngineIon::PutReferenceEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3731)
inline double AgStkGatorLib::IAgVAEngineIon::GetPercentThrottle ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentThrottle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3732)
inline void AgStkGatorLib::IAgVAEngineIon::PutPercentThrottle ( double pVal ) {
    HRESULT _hr = put_PercentThrottle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3733)
inline AgStkGatorLib::IAgVAEngineDefinitionPtr AgStkGatorLib::IAgVAEngineIon::GetEngineDefinition ( ) {
    struct IAgVAEngineDefinition * _result = 0;
    HRESULT _hr = get_EngineDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAEngineDefinitionPtr(_result, false);
}

#pragma implementation_key(3734)
inline HRESULT AgStkGatorLib::IAgVAEngineIon::EnableControlParameter ( enum AgEVAControlEngineIon Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3735)
inline HRESULT AgStkGatorLib::IAgVAEngineIon::DisableControlParameter ( enum AgEVAControlEngineIon Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3736)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineIon::IsControlParameterEnabled ( enum AgEVAControlEngineIon Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3737)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineIon::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAEngineIon wrapper method implementations
//

#pragma implementation_key(3738)
inline double AgStkGatorLib::_IAgVAEngineIon::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3739)
inline void AgStkGatorLib::_IAgVAEngineIon::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3740)
inline _bstr_t AgStkGatorLib::_IAgVAEngineIon::GetInputPowerSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputPowerSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3741)
inline void AgStkGatorLib::_IAgVAEngineIon::PutInputPowerSourceName ( _bstr_t pPowerSource ) {
    HRESULT _hr = put_InputPowerSourceName(pPowerSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3742)
inline double AgStkGatorLib::_IAgVAEngineIon::GetMinRequiredPower ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRequiredPower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3743)
inline void AgStkGatorLib::_IAgVAEngineIon::PutMinRequiredPower ( double pVal ) {
    HRESULT _hr = put_MinRequiredPower(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3744)
inline double AgStkGatorLib::_IAgVAEngineIon::GetMaxInputPower ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxInputPower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3745)
inline void AgStkGatorLib::_IAgVAEngineIon::PutMaxInputPower ( double pVal ) {
    HRESULT _hr = put_MaxInputPower(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3746)
inline double AgStkGatorLib::_IAgVAEngineIon::GetPercentDegradationPerYear ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentDegradationPerYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3747)
inline void AgStkGatorLib::_IAgVAEngineIon::PutPercentDegradationPerYear ( double pVal ) {
    HRESULT _hr = put_PercentDegradationPerYear(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3748)
inline _variant_t AgStkGatorLib::_IAgVAEngineIon::GetReferenceEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3749)
inline void AgStkGatorLib::_IAgVAEngineIon::PutReferenceEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_ReferenceEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3750)
inline double AgStkGatorLib::_IAgVAEngineIon::GetPercentThrottle ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentThrottle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3751)
inline void AgStkGatorLib::_IAgVAEngineIon::PutPercentThrottle ( double pVal ) {
    HRESULT _hr = put_PercentThrottle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3752)
inline AgStkGatorLib::IAgVAEngineDefinitionPtr AgStkGatorLib::_IAgVAEngineIon::GetEngineDefinition ( ) {
    struct IAgVAEngineDefinition * _result = 0;
    HRESULT _hr = get_EngineDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAEngineDefinitionPtr(_result, false);
}

#pragma implementation_key(3753)
inline HRESULT AgStkGatorLib::_IAgVAEngineIon::EnableControlParameter ( enum AgEVAControlEngineIon Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3754)
inline HRESULT AgStkGatorLib::_IAgVAEngineIon::DisableControlParameter ( enum AgEVAControlEngineIon Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3755)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineIon::IsControlParameterEnabled ( enum AgEVAControlEngineIon Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3756)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineIon::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3757)
inline _bstr_t AgStkGatorLib::_IAgVAEngineIon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3758)
inline void AgStkGatorLib::_IAgVAEngineIon::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3759)
inline _bstr_t AgStkGatorLib::_IAgVAEngineIon::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3760)
inline void AgStkGatorLib::_IAgVAEngineIon::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3761)
inline _bstr_t AgStkGatorLib::_IAgVAEngineIon::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3762)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineIon::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3763)
inline IUnknownPtr AgStkGatorLib::_IAgVAEngineIon::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEngineCustom wrapper method implementations
//

#pragma implementation_key(3764)
inline double AgStkGatorLib::IAgVAEngineCustom::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3765)
inline void AgStkGatorLib::IAgVAEngineCustom::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3766)
inline _bstr_t AgStkGatorLib::IAgVAEngineCustom::GetEvalFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvalFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3767)
inline void AgStkGatorLib::IAgVAEngineCustom::PutEvalFunctionName ( _bstr_t pEvalFunction ) {
    HRESULT _hr = put_EvalFunctionName(pEvalFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3768)
inline _bstr_t AgStkGatorLib::IAgVAEngineCustom::GetPostFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PostFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3769)
inline void AgStkGatorLib::IAgVAEngineCustom::PutPostFunctionName ( _bstr_t pPostFunction ) {
    HRESULT _hr = put_PostFunctionName(pPostFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3770)
inline _bstr_t AgStkGatorLib::IAgVAEngineCustom::GetPreFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3771)
inline void AgStkGatorLib::IAgVAEngineCustom::PutPreFunctionName ( _bstr_t pPreFunction ) {
    HRESULT _hr = put_PreFunctionName(pPreFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3772)
inline _bstr_t AgStkGatorLib::IAgVAEngineCustom::GetSegStartFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegStartFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3773)
inline void AgStkGatorLib::IAgVAEngineCustom::PutSegStartFunctionName ( _bstr_t pSegStartFunction ) {
    HRESULT _hr = put_SegStartFunctionName(pSegStartFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3774)
inline _bstr_t AgStkGatorLib::IAgVAEngineCustom::GetUpdateFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpdateFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3775)
inline void AgStkGatorLib::IAgVAEngineCustom::PutUpdateFunctionName ( _bstr_t pUpdateFunction ) {
    HRESULT _hr = put_UpdateFunctionName(pUpdateFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3776)
inline HRESULT AgStkGatorLib::IAgVAEngineCustom::EnableControlParameter ( enum AgEVAControlEngineCustom Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3777)
inline HRESULT AgStkGatorLib::IAgVAEngineCustom::DisableControlParameter ( enum AgEVAControlEngineCustom Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3778)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineCustom::IsControlParameterEnabled ( enum AgEVAControlEngineCustom Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3779)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineCustom::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAEngineCustom wrapper method implementations
//

#pragma implementation_key(3780)
inline double AgStkGatorLib::_IAgVAEngineCustom::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3781)
inline void AgStkGatorLib::_IAgVAEngineCustom::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3782)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetEvalFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvalFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3783)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutEvalFunctionName ( _bstr_t pEvalFunction ) {
    HRESULT _hr = put_EvalFunctionName(pEvalFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3784)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetPostFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PostFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3785)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutPostFunctionName ( _bstr_t pPostFunction ) {
    HRESULT _hr = put_PostFunctionName(pPostFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3786)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetPreFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3787)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutPreFunctionName ( _bstr_t pPreFunction ) {
    HRESULT _hr = put_PreFunctionName(pPreFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3788)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetSegStartFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegStartFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3789)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutSegStartFunctionName ( _bstr_t pSegStartFunction ) {
    HRESULT _hr = put_SegStartFunctionName(pSegStartFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3790)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetUpdateFunctionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpdateFunctionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3791)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutUpdateFunctionName ( _bstr_t pUpdateFunction ) {
    HRESULT _hr = put_UpdateFunctionName(pUpdateFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3792)
inline HRESULT AgStkGatorLib::_IAgVAEngineCustom::EnableControlParameter ( enum AgEVAControlEngineCustom Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3793)
inline HRESULT AgStkGatorLib::_IAgVAEngineCustom::DisableControlParameter ( enum AgEVAControlEngineCustom Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3794)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineCustom::IsControlParameterEnabled ( enum AgEVAControlEngineCustom Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3795)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineCustom::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3796)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3797)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3798)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3799)
inline void AgStkGatorLib::_IAgVAEngineCustom::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3800)
inline _bstr_t AgStkGatorLib::_IAgVAEngineCustom::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3801)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineCustom::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3802)
inline IUnknownPtr AgStkGatorLib::_IAgVAEngineCustom::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEnginePlugin wrapper method implementations
//

#pragma implementation_key(3803)
inline double AgStkGatorLib::IAgVAEnginePlugin::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3804)
inline void AgStkGatorLib::IAgVAEnginePlugin::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3805)
inline _bstr_t AgStkGatorLib::IAgVAEnginePlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3806)
inline void AgStkGatorLib::IAgVAEnginePlugin::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3807)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVAEnginePlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

//
// interface _IAgVAEnginePlugin wrapper method implementations
//

#pragma implementation_key(3808)
inline double AgStkGatorLib::_IAgVAEnginePlugin::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3809)
inline void AgStkGatorLib::_IAgVAEnginePlugin::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3810)
inline _bstr_t AgStkGatorLib::_IAgVAEnginePlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3811)
inline void AgStkGatorLib::_IAgVAEnginePlugin::PutPluginIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3812)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVAEnginePlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(3813)
inline _bstr_t AgStkGatorLib::_IAgVAEnginePlugin::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3814)
inline void AgStkGatorLib::_IAgVAEnginePlugin::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3815)
inline _bstr_t AgStkGatorLib::_IAgVAEnginePlugin::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3816)
inline void AgStkGatorLib::_IAgVAEnginePlugin::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3817)
inline _bstr_t AgStkGatorLib::_IAgVAEnginePlugin::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3818)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEnginePlugin::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3819)
inline IUnknownPtr AgStkGatorLib::_IAgVAEnginePlugin::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAEngineModelPoly wrapper method implementations
//

#pragma implementation_key(3820)
inline double AgStkGatorLib::IAgVAEngineModelPoly::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3821)
inline void AgStkGatorLib::IAgVAEngineModelPoly::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3822)
inline AgStkGatorLib::IAgVAEngineModelThrustCoefficientsPtr AgStkGatorLib::IAgVAEngineModelPoly::GetThrustCoefficients ( ) {
    struct IAgVAEngineModelThrustCoefficients * _result = 0;
    HRESULT _hr = get_ThrustCoefficients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAEngineModelThrustCoefficientsPtr(_result, false);
}

#pragma implementation_key(3823)
inline AgStkGatorLib::IAgVAEngineModelIspCoefficientsPtr AgStkGatorLib::IAgVAEngineModelPoly::GetIspCoefficients ( ) {
    struct IAgVAEngineModelIspCoefficients * _result = 0;
    HRESULT _hr = get_IspCoefficients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAEngineModelIspCoefficientsPtr(_result, false);
}

#pragma implementation_key(3824)
inline HRESULT AgStkGatorLib::IAgVAEngineModelPoly::EnableControlParameter ( enum AgEVAControlEngineModelPoly Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3825)
inline HRESULT AgStkGatorLib::IAgVAEngineModelPoly::DisableControlParameter ( enum AgEVAControlEngineModelPoly Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3826)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineModelPoly::IsControlParameterEnabled ( enum AgEVAControlEngineModelPoly Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3827)
inline VARIANT_BOOL AgStkGatorLib::IAgVAEngineModelPoly::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAEngineModelPoly wrapper method implementations
//

#pragma implementation_key(3828)
inline double AgStkGatorLib::_IAgVAEngineModelPoly::Getg ( ) {
    double _result = 0;
    HRESULT _hr = get_g(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3829)
inline void AgStkGatorLib::_IAgVAEngineModelPoly::Putg ( double pVal ) {
    HRESULT _hr = put_g(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3830)
inline AgStkGatorLib::IAgVAEngineModelThrustCoefficientsPtr AgStkGatorLib::_IAgVAEngineModelPoly::GetThrustCoefficients ( ) {
    struct IAgVAEngineModelThrustCoefficients * _result = 0;
    HRESULT _hr = get_ThrustCoefficients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAEngineModelThrustCoefficientsPtr(_result, false);
}

#pragma implementation_key(3831)
inline AgStkGatorLib::IAgVAEngineModelIspCoefficientsPtr AgStkGatorLib::_IAgVAEngineModelPoly::GetIspCoefficients ( ) {
    struct IAgVAEngineModelIspCoefficients * _result = 0;
    HRESULT _hr = get_IspCoefficients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAEngineModelIspCoefficientsPtr(_result, false);
}

#pragma implementation_key(3832)
inline HRESULT AgStkGatorLib::_IAgVAEngineModelPoly::EnableControlParameter ( enum AgEVAControlEngineModelPoly Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3833)
inline HRESULT AgStkGatorLib::_IAgVAEngineModelPoly::DisableControlParameter ( enum AgEVAControlEngineModelPoly Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3834)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineModelPoly::IsControlParameterEnabled ( enum AgEVAControlEngineModelPoly Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3835)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineModelPoly::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3836)
inline _bstr_t AgStkGatorLib::_IAgVAEngineModelPoly::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3837)
inline void AgStkGatorLib::_IAgVAEngineModelPoly::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3838)
inline _bstr_t AgStkGatorLib::_IAgVAEngineModelPoly::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3839)
inline void AgStkGatorLib::_IAgVAEngineModelPoly::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3840)
inline _bstr_t AgStkGatorLib::_IAgVAEngineModelPoly::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3841)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAEngineModelPoly::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3842)
inline IUnknownPtr AgStkGatorLib::_IAgVAEngineModelPoly::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAThruster wrapper method implementations
//

#pragma implementation_key(3843)
inline _bstr_t AgStkGatorLib::IAgVAThruster::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3844)
inline void AgStkGatorLib::IAgVAThruster::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3845)
inline _bstr_t AgStkGatorLib::IAgVAThruster::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3846)
inline void AgStkGatorLib::IAgVAThruster::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3847)
inline AgStkGatorLib::IAgVAThrusterPtr AgStkGatorLib::IAgVAThruster::Copy ( ) {
    struct IAgVAThruster * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterPtr(_result, false);
}

#pragma implementation_key(3848)
inline _bstr_t AgStkGatorLib::IAgVAThruster::GetEngineModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EngineModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3849)
inline void AgStkGatorLib::IAgVAThruster::PutEngineModelName ( _bstr_t pVal ) {
    HRESULT _hr = put_EngineModelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3850)
inline double AgStkGatorLib::IAgVAThruster::GetThrusterEfficiency ( ) {
    double _result = 0;
    HRESULT _hr = get_ThrusterEfficiency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3851)
inline void AgStkGatorLib::IAgVAThruster::PutThrusterEfficiency ( double pVal ) {
    HRESULT _hr = put_ThrusterEfficiency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3852)
inline double AgStkGatorLib::IAgVAThruster::GetEquivalentOnTime ( ) {
    double _result = 0;
    HRESULT _hr = get_EquivalentOnTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3853)
inline void AgStkGatorLib::IAgVAThruster::PutEquivalentOnTime ( double pVal ) {
    HRESULT _hr = put_EquivalentOnTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3854)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAThruster::GetThrusterDirection ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_ThrusterDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(3855)
inline HRESULT AgStkGatorLib::IAgVAThruster::EnableControlParameter ( enum AgEVAControlThrusters Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3856)
inline HRESULT AgStkGatorLib::IAgVAThruster::DisableControlParameter ( enum AgEVAControlThrusters Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3857)
inline VARIANT_BOOL AgStkGatorLib::IAgVAThruster::IsControlParameterEnabled ( enum AgEVAControlThrusters Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3858)
inline VARIANT_BOOL AgStkGatorLib::IAgVAThruster::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAThruster wrapper method implementations
//

#pragma implementation_key(3859)
inline _bstr_t AgStkGatorLib::_IAgVAThruster::GetEngineModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EngineModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3860)
inline void AgStkGatorLib::_IAgVAThruster::PutEngineModelName ( _bstr_t pVal ) {
    HRESULT _hr = put_EngineModelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3861)
inline double AgStkGatorLib::_IAgVAThruster::GetThrusterEfficiency ( ) {
    double _result = 0;
    HRESULT _hr = get_ThrusterEfficiency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3862)
inline void AgStkGatorLib::_IAgVAThruster::PutThrusterEfficiency ( double pVal ) {
    HRESULT _hr = put_ThrusterEfficiency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3863)
inline double AgStkGatorLib::_IAgVAThruster::GetEquivalentOnTime ( ) {
    double _result = 0;
    HRESULT _hr = get_EquivalentOnTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3864)
inline void AgStkGatorLib::_IAgVAThruster::PutEquivalentOnTime ( double pVal ) {
    HRESULT _hr = put_EquivalentOnTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3865)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAThruster::GetThrusterDirection ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_ThrusterDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(3866)
inline _bstr_t AgStkGatorLib::_IAgVAThruster::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3867)
inline void AgStkGatorLib::_IAgVAThruster::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3868)
inline _bstr_t AgStkGatorLib::_IAgVAThruster::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3869)
inline void AgStkGatorLib::_IAgVAThruster::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3870)
inline AgStkGatorLib::IAgVAThrusterPtr AgStkGatorLib::_IAgVAThruster::Copy ( ) {
    struct IAgVAThruster * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterPtr(_result, false);
}

#pragma implementation_key(3871)
inline HRESULT AgStkGatorLib::_IAgVAThruster::EnableControlParameter ( enum AgEVAControlThrusters Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3872)
inline HRESULT AgStkGatorLib::_IAgVAThruster::DisableControlParameter ( enum AgEVAControlThrusters Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3873)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAThruster::IsControlParameterEnabled ( enum AgEVAControlThrusters Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3874)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAThruster::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAThrusterSetCollection wrapper method implementations
//

#pragma implementation_key(3875)
inline AgStkGatorLib::IAgVAThrusterPtr AgStkGatorLib::IAgVAThrusterSetCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAThruster * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterPtr(_result, false);
}

#pragma implementation_key(3876)
inline IUnknownPtr AgStkGatorLib::IAgVAThrusterSetCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3877)
inline long AgStkGatorLib::IAgVAThrusterSetCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3878)
inline AgStkGatorLib::IAgVAThrusterPtr AgStkGatorLib::IAgVAThrusterSetCollection::Add ( _bstr_t ThrusterName ) {
    struct IAgVAThruster * _result = 0;
    HRESULT _hr = raw_Add(ThrusterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterPtr(_result, false);
}

#pragma implementation_key(3879)
inline HRESULT AgStkGatorLib::IAgVAThrusterSetCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3880)
inline HRESULT AgStkGatorLib::IAgVAThrusterSetCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3881)
inline HRESULT AgStkGatorLib::IAgVAThrusterSetCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3882)
inline AgStkGatorLib::IAgVAThrusterPtr AgStkGatorLib::IAgVAThrusterSetCollection::Paste ( ) {
    struct IAgVAThruster * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterPtr(_result, false);
}

#pragma implementation_key(3883)
inline AgStkGatorLib::IAgVAThrusterPtr AgStkGatorLib::IAgVAThrusterSetCollection::InsertCopy ( struct IAgVAThruster * Thruster ) {
    struct IAgVAThruster * _result = 0;
    HRESULT _hr = raw_InsertCopy(Thruster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterPtr(_result, false);
}

//
// interface IAgVAThrusterSet wrapper method implementations
//

#pragma implementation_key(3884)
inline enum AgStkGatorLib::AgEVAThrusterDirection AgStkGatorLib::IAgVAThrusterSet::GetDirectionDefinition ( ) {
    enum AgEVAThrusterDirection _result;
    HRESULT _hr = get_DirectionDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3885)
inline void AgStkGatorLib::IAgVAThrusterSet::PutDirectionDefinition ( enum AgEVAThrusterDirection pVal ) {
    HRESULT _hr = put_DirectionDefinition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3886)
inline AgStkGatorLib::IAgVAThrusterSetCollectionPtr AgStkGatorLib::IAgVAThrusterSet::GetThrusters ( ) {
    struct IAgVAThrusterSetCollection * _result = 0;
    HRESULT _hr = get_Thrusters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterSetCollectionPtr(_result, false);
}

//
// interface _IAgVAThrusterSet wrapper method implementations
//

#pragma implementation_key(3887)
inline enum AgStkGatorLib::AgEVAThrusterDirection AgStkGatorLib::_IAgVAThrusterSet::GetDirectionDefinition ( ) {
    enum AgEVAThrusterDirection _result;
    HRESULT _hr = get_DirectionDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3888)
inline void AgStkGatorLib::_IAgVAThrusterSet::PutDirectionDefinition ( enum AgEVAThrusterDirection pVal ) {
    HRESULT _hr = put_DirectionDefinition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3889)
inline AgStkGatorLib::IAgVAThrusterSetCollectionPtr AgStkGatorLib::_IAgVAThrusterSet::GetThrusters ( ) {
    struct IAgVAThrusterSetCollection * _result = 0;
    HRESULT _hr = get_Thrusters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAThrusterSetCollectionPtr(_result, false);
}

#pragma implementation_key(3890)
inline _bstr_t AgStkGatorLib::_IAgVAThrusterSet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3891)
inline void AgStkGatorLib::_IAgVAThrusterSet::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3892)
inline _bstr_t AgStkGatorLib::_IAgVAThrusterSet::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3893)
inline void AgStkGatorLib::_IAgVAThrusterSet::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3894)
inline _bstr_t AgStkGatorLib::_IAgVAThrusterSet::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3895)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAThrusterSet::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3896)
inline IUnknownPtr AgStkGatorLib::_IAgVAThrusterSet::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAAsTriggerCondition wrapper method implementations
//

#pragma implementation_key(3897)
inline enum AgStkGatorLib::AgEVACriteria AgStkGatorLib::IAgVAAsTriggerCondition::GetCriteria ( ) {
    enum AgEVACriteria _result;
    HRESULT _hr = get_Criteria(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3898)
inline void AgStkGatorLib::IAgVAAsTriggerCondition::PutCriteria ( enum AgEVACriteria pVal ) {
    HRESULT _hr = put_Criteria(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3899)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAAsTriggerCondition::GetCalcObject ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_CalcObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3900)
inline void AgStkGatorLib::IAgVAAsTriggerCondition::PutCalcObject ( struct STKObjects::IAgComponentInfo * ppComponent ) {
    HRESULT _hr = put_CalcObject(ppComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3901)
inline _bstr_t AgStkGatorLib::IAgVAAsTriggerCondition::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3902)
inline void AgStkGatorLib::IAgVAAsTriggerCondition::PutCalcObjectName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CalcObjectName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3903)
inline _variant_t AgStkGatorLib::IAgVAAsTriggerCondition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3904)
inline void AgStkGatorLib::IAgVAAsTriggerCondition::PutValue ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3905)
inline _variant_t AgStkGatorLib::IAgVAAsTriggerCondition::GetTolerance ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3906)
inline void AgStkGatorLib::IAgVAAsTriggerCondition::PutTolerance ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tolerance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3907)
inline VARIANT_BOOL AgStkGatorLib::IAgVAAsTriggerCondition::GetUseAbsoluteValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAbsoluteValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3908)
inline void AgStkGatorLib::IAgVAAsTriggerCondition::PutUseAbsoluteValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAbsoluteValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3909)
inline HRESULT AgStkGatorLib::IAgVAAsTriggerCondition::CopyCalcObjectToClipboard ( ) {
    HRESULT _hr = raw_CopyCalcObjectToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3910)
inline HRESULT AgStkGatorLib::IAgVAAsTriggerCondition::PasteCalcObjectFromClipboard ( ) {
    HRESULT _hr = raw_PasteCalcObjectFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVAConstraintCollection wrapper method implementations
//

#pragma implementation_key(3911)
inline AgStkGatorLib::IAgVAAsTriggerConditionPtr AgStkGatorLib::IAgVAConstraintCollection::Add ( _bstr_t ResultName ) {
    struct IAgVAAsTriggerCondition * _result = 0;
    HRESULT _hr = raw_Add(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAsTriggerConditionPtr(_result, false);
}

#pragma implementation_key(3912)
inline AgStkGatorLib::IAgVAAsTriggerConditionPtr AgStkGatorLib::IAgVAConstraintCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAAsTriggerCondition * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAsTriggerConditionPtr(_result, false);
}

#pragma implementation_key(3913)
inline HRESULT AgStkGatorLib::IAgVAConstraintCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3914)
inline IUnknownPtr AgStkGatorLib::IAgVAConstraintCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3915)
inline long AgStkGatorLib::IAgVAConstraintCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3916)
inline HRESULT AgStkGatorLib::IAgVAConstraintCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3917)
inline AgStkGatorLib::IAgVAAsTriggerConditionPtr AgStkGatorLib::IAgVAConstraintCollection::Paste ( ) {
    struct IAgVAAsTriggerCondition * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAsTriggerConditionPtr(_result, false);
}

#pragma implementation_key(3918)
inline AgStkGatorLib::IAgVAAsTriggerConditionPtr AgStkGatorLib::IAgVAConstraintCollection::InsertCopy ( struct IAgVAAsTriggerCondition * Cond ) {
    struct IAgVAAsTriggerCondition * _result = 0;
    HRESULT _hr = raw_InsertCopy(Cond, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAsTriggerConditionPtr(_result, false);
}

//
// interface _IAgVAAsTriggerCondition wrapper method implementations
//

#pragma implementation_key(3919)
inline enum AgStkGatorLib::AgEVACriteria AgStkGatorLib::_IAgVAAsTriggerCondition::GetCriteria ( ) {
    enum AgEVACriteria _result;
    HRESULT _hr = get_Criteria(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3920)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutCriteria ( enum AgEVACriteria pVal ) {
    HRESULT _hr = put_Criteria(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3921)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::_IAgVAAsTriggerCondition::GetCalcObject ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_CalcObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3922)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutCalcObject ( struct STKObjects::IAgComponentInfo * ppComponent ) {
    HRESULT _hr = put_CalcObject(ppComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3923)
inline _bstr_t AgStkGatorLib::_IAgVAAsTriggerCondition::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3924)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutCalcObjectName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CalcObjectName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3925)
inline _variant_t AgStkGatorLib::_IAgVAAsTriggerCondition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3926)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutValue ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3927)
inline _variant_t AgStkGatorLib::_IAgVAAsTriggerCondition::GetTolerance ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3928)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutTolerance ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tolerance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3929)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAAsTriggerCondition::GetUseAbsoluteValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAbsoluteValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3930)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutUseAbsoluteValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAbsoluteValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3931)
inline _bstr_t AgStkGatorLib::_IAgVAAsTriggerCondition::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3932)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3933)
inline _bstr_t AgStkGatorLib::_IAgVAAsTriggerCondition::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3934)
inline void AgStkGatorLib::_IAgVAAsTriggerCondition::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3935)
inline _bstr_t AgStkGatorLib::_IAgVAAsTriggerCondition::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3936)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAAsTriggerCondition::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3937)
inline IUnknownPtr AgStkGatorLib::_IAgVAAsTriggerCondition::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3938)
inline HRESULT AgStkGatorLib::_IAgVAAsTriggerCondition::CopyCalcObjectToClipboard ( ) {
    HRESULT _hr = raw_CopyCalcObjectToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3939)
inline HRESULT AgStkGatorLib::_IAgVAAsTriggerCondition::PasteCalcObjectFromClipboard ( ) {
    HRESULT _hr = raw_PasteCalcObjectFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVACustomFunctionScriptEngine wrapper method implementations
//

#pragma implementation_key(3940)
inline _bstr_t AgStkGatorLib::IAgVACustomFunctionScriptEngine::GetScriptFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScriptFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3941)
inline void AgStkGatorLib::IAgVACustomFunctionScriptEngine::PutScriptFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_ScriptFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3942)
inline _bstr_t AgStkGatorLib::IAgVACustomFunctionScriptEngine::GetFileExtensionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileExtensionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3943)
inline void AgStkGatorLib::IAgVACustomFunctionScriptEngine::PutFileExtensionName ( _bstr_t pVal ) {
    HRESULT _hr = put_FileExtensionName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVACustomFunctionScriptEngine wrapper method implementations
//

#pragma implementation_key(3944)
inline _bstr_t AgStkGatorLib::_IAgVACustomFunctionScriptEngine::GetScriptFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScriptFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3945)
inline void AgStkGatorLib::_IAgVACustomFunctionScriptEngine::PutScriptFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_ScriptFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3946)
inline _bstr_t AgStkGatorLib::_IAgVACustomFunctionScriptEngine::GetFileExtensionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileExtensionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3947)
inline void AgStkGatorLib::_IAgVACustomFunctionScriptEngine::PutFileExtensionName ( _bstr_t pVal ) {
    HRESULT _hr = put_FileExtensionName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3948)
inline _bstr_t AgStkGatorLib::_IAgVACustomFunctionScriptEngine::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3949)
inline void AgStkGatorLib::_IAgVACustomFunctionScriptEngine::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3950)
inline _bstr_t AgStkGatorLib::_IAgVACustomFunctionScriptEngine::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3951)
inline void AgStkGatorLib::_IAgVACustomFunctionScriptEngine::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3952)
inline _bstr_t AgStkGatorLib::_IAgVACustomFunctionScriptEngine::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3953)
inline VARIANT_BOOL AgStkGatorLib::_IAgVACustomFunctionScriptEngine::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3954)
inline IUnknownPtr AgStkGatorLib::_IAgVACustomFunctionScriptEngine::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVAPropagatorFunctionCollection wrapper method implementations
//

#pragma implementation_key(3955)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAPropagatorFunctionCollection::Add ( _bstr_t ResultName ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = raw_Add(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3956)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAPropagatorFunctionCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3957)
inline HRESULT AgStkGatorLib::IAgVAPropagatorFunctionCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3958)
inline IUnknownPtr AgStkGatorLib::IAgVAPropagatorFunctionCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3959)
inline long AgStkGatorLib::IAgVAPropagatorFunctionCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3960)
inline HRESULT AgStkGatorLib::IAgVAPropagatorFunctionCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3961)
inline HRESULT AgStkGatorLib::IAgVAPropagatorFunctionCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3962)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAPropagatorFunctionCollection::Paste ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(3963)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAPropagatorFunctionCollection::InsertCopy ( struct STKObjects::IAgComponentInfo * PropFunc ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = raw_InsertCopy(PropFunc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

//
// interface IAgVANumericalPropagatorWrapper wrapper method implementations
//

#pragma implementation_key(3964)
inline _bstr_t AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3965)
inline void AgStkGatorLib::IAgVANumericalPropagatorWrapper::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3966)
inline VARIANT_BOOL AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetUseVariationOfParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVariationOfParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3967)
inline void AgStkGatorLib::IAgVANumericalPropagatorWrapper::PutUseVariationOfParameters ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVariationOfParameters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3968)
inline VARIANT_BOOL AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetUseRegularizedTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseRegularizedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3969)
inline void AgStkGatorLib::IAgVANumericalPropagatorWrapper::PutUseRegularizedTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseRegularizedTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3970)
inline double AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetRegularizedTimeExponent ( ) {
    double _result = 0;
    HRESULT _hr = get_RegularizedTimeExponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3971)
inline void AgStkGatorLib::IAgVANumericalPropagatorWrapper::PutRegularizedTimeExponent ( double pVal ) {
    HRESULT _hr = put_RegularizedTimeExponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3972)
inline long AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetRegularizedTimeStepsPerOrbit ( ) {
    long _result = 0;
    HRESULT _hr = get_RegularizedTimeStepsPerOrbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3973)
inline void AgStkGatorLib::IAgVANumericalPropagatorWrapper::PutRegularizedTimeStepsPerOrbit ( long pVal ) {
    HRESULT _hr = put_RegularizedTimeStepsPerOrbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3974)
inline AgStkGatorLib::IAgVAPropagatorFunctionCollectionPtr AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetPropagatorFunctions ( ) {
    struct IAgVAPropagatorFunctionCollection * _result = 0;
    HRESULT _hr = get_PropagatorFunctions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPropagatorFunctionCollectionPtr(_result, false);
}

#pragma implementation_key(3975)
inline AgStkGatorLib::IAgVANumericalIntegratorPtr AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetNumericalIntegrator ( ) {
    struct IAgVANumericalIntegrator * _result = 0;
    HRESULT _hr = get_NumericalIntegrator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVANumericalIntegratorPtr(_result, false);
}

#pragma implementation_key(3976)
inline enum AgStkGatorLib::AgEVANumericalIntegrator AgStkGatorLib::IAgVANumericalPropagatorWrapper::GetNumericalIntegratorType ( ) {
    enum AgEVANumericalIntegrator _result;
    HRESULT _hr = get_NumericalIntegratorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3977)
inline HRESULT AgStkGatorLib::IAgVANumericalPropagatorWrapper::SetNumericalIntegrator ( enum AgEVANumericalIntegrator Integrator ) {
    HRESULT _hr = raw_SetNumericalIntegrator(Integrator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVANumericalPropagatorWrapper wrapper method implementations
//

#pragma implementation_key(3978)
inline _bstr_t AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3979)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3980)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetUseVariationOfParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVariationOfParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3981)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutUseVariationOfParameters ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVariationOfParameters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3982)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetUseRegularizedTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseRegularizedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3983)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutUseRegularizedTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseRegularizedTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3984)
inline double AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetRegularizedTimeExponent ( ) {
    double _result = 0;
    HRESULT _hr = get_RegularizedTimeExponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3985)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutRegularizedTimeExponent ( double pVal ) {
    HRESULT _hr = put_RegularizedTimeExponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3986)
inline long AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetRegularizedTimeStepsPerOrbit ( ) {
    long _result = 0;
    HRESULT _hr = get_RegularizedTimeStepsPerOrbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3987)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutRegularizedTimeStepsPerOrbit ( long pVal ) {
    HRESULT _hr = put_RegularizedTimeStepsPerOrbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3988)
inline AgStkGatorLib::IAgVAPropagatorFunctionCollectionPtr AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetPropagatorFunctions ( ) {
    struct IAgVAPropagatorFunctionCollection * _result = 0;
    HRESULT _hr = get_PropagatorFunctions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPropagatorFunctionCollectionPtr(_result, false);
}

#pragma implementation_key(3989)
inline AgStkGatorLib::IAgVANumericalIntegratorPtr AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetNumericalIntegrator ( ) {
    struct IAgVANumericalIntegrator * _result = 0;
    HRESULT _hr = get_NumericalIntegrator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVANumericalIntegratorPtr(_result, false);
}

#pragma implementation_key(3990)
inline enum AgStkGatorLib::AgEVANumericalIntegrator AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetNumericalIntegratorType ( ) {
    enum AgEVANumericalIntegrator _result;
    HRESULT _hr = get_NumericalIntegratorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3991)
inline HRESULT AgStkGatorLib::_IAgVANumericalPropagatorWrapper::SetNumericalIntegrator ( enum AgEVANumericalIntegrator Integrator ) {
    HRESULT _hr = raw_SetNumericalIntegrator(Integrator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3992)
inline _bstr_t AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3993)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3994)
inline _bstr_t AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3995)
inline void AgStkGatorLib::_IAgVANumericalPropagatorWrapper::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3996)
inline _bstr_t AgStkGatorLib::_IAgVANumericalPropagatorWrapper::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3997)
inline VARIANT_BOOL AgStkGatorLib::_IAgVANumericalPropagatorWrapper::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3998)
inline IUnknownPtr AgStkGatorLib::_IAgVANumericalPropagatorWrapper::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVABulirschStoerIntegrator wrapper method implementations
//

#pragma implementation_key(3999)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4000)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4001)
inline VARIANT_BOOL AgStkGatorLib::IAgVABulirschStoerIntegrator::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4002)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4003)
inline VARIANT_BOOL AgStkGatorLib::IAgVABulirschStoerIntegrator::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4004)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4005)
inline VARIANT_BOOL AgStkGatorLib::IAgVABulirschStoerIntegrator::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4006)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4007)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4008)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4009)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4010)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4011)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4012)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4013)
inline long AgStkGatorLib::IAgVABulirschStoerIntegrator::GetMaxSequences ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSequences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4014)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutMaxSequences ( long pVal ) {
    HRESULT _hr = put_MaxSequences(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4015)
inline long AgStkGatorLib::IAgVABulirschStoerIntegrator::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4016)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4017)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4018)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutTolerance ( double pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4019)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetFirstSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_FirstSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4020)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutFirstSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_FirstSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4021)
inline double AgStkGatorLib::IAgVABulirschStoerIntegrator::GetSecondSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_SecondSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4022)
inline void AgStkGatorLib::IAgVABulirschStoerIntegrator::PutSecondSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_SecondSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABulirschStoerIntegrator wrapper method implementations
//

#pragma implementation_key(4023)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4024)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4025)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4026)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4027)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4028)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4029)
inline VARIANT_BOOL AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4030)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4031)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4032)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4033)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4034)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4035)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4036)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4037)
inline long AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetMaxSequences ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSequences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4038)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutMaxSequences ( long pVal ) {
    HRESULT _hr = put_MaxSequences(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4039)
inline long AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4040)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4041)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4042)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutTolerance ( double pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4043)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetFirstSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_FirstSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4044)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutFirstSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_FirstSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4045)
inline double AgStkGatorLib::_IAgVABulirschStoerIntegrator::GetSecondSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_SecondSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4046)
inline void AgStkGatorLib::_IAgVABulirschStoerIntegrator::PutSecondSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_SecondSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAGaussJacksonIntegrator wrapper method implementations
//

#pragma implementation_key(4047)
inline double AgStkGatorLib::IAgVAGaussJacksonIntegrator::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4048)
inline void AgStkGatorLib::IAgVAGaussJacksonIntegrator::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4049)
inline double AgStkGatorLib::IAgVAGaussJacksonIntegrator::GetMaxCorrectorRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxCorrectorRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4050)
inline void AgStkGatorLib::IAgVAGaussJacksonIntegrator::PutMaxCorrectorRelErr ( double pVal ) {
    HRESULT _hr = put_MaxCorrectorRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4051)
inline enum AgStkGatorLib::AgEVAPredictorCorrector AgStkGatorLib::IAgVAGaussJacksonIntegrator::GetCorrectorMode ( ) {
    enum AgEVAPredictorCorrector _result;
    HRESULT _hr = get_CorrectorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4052)
inline void AgStkGatorLib::IAgVAGaussJacksonIntegrator::PutCorrectorMode ( enum AgEVAPredictorCorrector pVal ) {
    HRESULT _hr = put_CorrectorMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4053)
inline long AgStkGatorLib::IAgVAGaussJacksonIntegrator::GetMaxCorrectorIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxCorrectorIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4054)
inline void AgStkGatorLib::IAgVAGaussJacksonIntegrator::PutMaxCorrectorIterations ( long pVal ) {
    HRESULT _hr = put_MaxCorrectorIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4055)
inline AgStkGatorLib::IAgVANumericalIntegratorPtr AgStkGatorLib::IAgVAGaussJacksonIntegrator::GetSingleStepIntegrator ( ) {
    struct IAgVANumericalIntegrator * _result = 0;
    HRESULT _hr = get_SingleStepIntegrator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVANumericalIntegratorPtr(_result, false);
}

#pragma implementation_key(4056)
inline enum AgStkGatorLib::AgEVANumericalIntegrator AgStkGatorLib::IAgVAGaussJacksonIntegrator::GetSingleStepIntegratorType ( ) {
    enum AgEVANumericalIntegrator _result;
    HRESULT _hr = get_SingleStepIntegratorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4057)
inline HRESULT AgStkGatorLib::IAgVAGaussJacksonIntegrator::SetSingleStepIntegrator ( enum AgEVANumericalIntegrator Integrator ) {
    HRESULT _hr = raw_SetSingleStepIntegrator(Integrator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVAGaussJacksonIntegrator wrapper method implementations
//

#pragma implementation_key(4058)
inline double AgStkGatorLib::_IAgVAGaussJacksonIntegrator::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4059)
inline void AgStkGatorLib::_IAgVAGaussJacksonIntegrator::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4060)
inline double AgStkGatorLib::_IAgVAGaussJacksonIntegrator::GetMaxCorrectorRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxCorrectorRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4061)
inline void AgStkGatorLib::_IAgVAGaussJacksonIntegrator::PutMaxCorrectorRelErr ( double pVal ) {
    HRESULT _hr = put_MaxCorrectorRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4062)
inline enum AgStkGatorLib::AgEVAPredictorCorrector AgStkGatorLib::_IAgVAGaussJacksonIntegrator::GetCorrectorMode ( ) {
    enum AgEVAPredictorCorrector _result;
    HRESULT _hr = get_CorrectorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4063)
inline void AgStkGatorLib::_IAgVAGaussJacksonIntegrator::PutCorrectorMode ( enum AgEVAPredictorCorrector pVal ) {
    HRESULT _hr = put_CorrectorMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4064)
inline long AgStkGatorLib::_IAgVAGaussJacksonIntegrator::GetMaxCorrectorIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxCorrectorIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4065)
inline void AgStkGatorLib::_IAgVAGaussJacksonIntegrator::PutMaxCorrectorIterations ( long pVal ) {
    HRESULT _hr = put_MaxCorrectorIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4066)
inline AgStkGatorLib::IAgVANumericalIntegratorPtr AgStkGatorLib::_IAgVAGaussJacksonIntegrator::GetSingleStepIntegrator ( ) {
    struct IAgVANumericalIntegrator * _result = 0;
    HRESULT _hr = get_SingleStepIntegrator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVANumericalIntegratorPtr(_result, false);
}

#pragma implementation_key(4067)
inline enum AgStkGatorLib::AgEVANumericalIntegrator AgStkGatorLib::_IAgVAGaussJacksonIntegrator::GetSingleStepIntegratorType ( ) {
    enum AgEVANumericalIntegrator _result;
    HRESULT _hr = get_SingleStepIntegratorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4068)
inline HRESULT AgStkGatorLib::_IAgVAGaussJacksonIntegrator::SetSingleStepIntegrator ( enum AgEVANumericalIntegrator Integrator ) {
    HRESULT _hr = raw_SetSingleStepIntegrator(Integrator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVARK2nd3rd wrapper method implementations
//

#pragma implementation_key(4069)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4070)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4071)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK2nd3rd::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4072)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4073)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK2nd3rd::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4074)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4075)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK2nd3rd::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4076)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4077)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4078)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4079)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4080)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4081)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4082)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4083)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4084)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4085)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4086)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4087)
inline double AgStkGatorLib::IAgVARK2nd3rd::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4088)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4089)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::IAgVARK2nd3rd::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4090)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4091)
inline long AgStkGatorLib::IAgVARK2nd3rd::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4092)
inline void AgStkGatorLib::IAgVARK2nd3rd::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVARK2nd3rd wrapper method implementations
//

#pragma implementation_key(4093)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4094)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4095)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK2nd3rd::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4096)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4097)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK2nd3rd::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4098)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4099)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK2nd3rd::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4100)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4101)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4102)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4103)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4104)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4105)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4106)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4107)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4108)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4109)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4110)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4111)
inline double AgStkGatorLib::_IAgVARK2nd3rd::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4112)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4113)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::_IAgVARK2nd3rd::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4114)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4115)
inline long AgStkGatorLib::_IAgVARK2nd3rd::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4116)
inline void AgStkGatorLib::_IAgVARK2nd3rd::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVARK4th wrapper method implementations
//

#pragma implementation_key(4117)
inline double AgStkGatorLib::IAgVARK4th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4118)
inline void AgStkGatorLib::IAgVARK4th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVARK4th wrapper method implementations
//

#pragma implementation_key(4119)
inline double AgStkGatorLib::_IAgVARK4th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4120)
inline void AgStkGatorLib::_IAgVARK4th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVARK4th5th wrapper method implementations
//

#pragma implementation_key(4121)
inline double AgStkGatorLib::IAgVARK4th5th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4122)
inline void AgStkGatorLib::IAgVARK4th5th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4123)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK4th5th::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4124)
inline void AgStkGatorLib::IAgVARK4th5th::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4125)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK4th5th::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4126)
inline void AgStkGatorLib::IAgVARK4th5th::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4127)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK4th5th::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4128)
inline void AgStkGatorLib::IAgVARK4th5th::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4129)
inline double AgStkGatorLib::IAgVARK4th5th::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4130)
inline void AgStkGatorLib::IAgVARK4th5th::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4131)
inline double AgStkGatorLib::IAgVARK4th5th::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4132)
inline void AgStkGatorLib::IAgVARK4th5th::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4133)
inline double AgStkGatorLib::IAgVARK4th5th::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4134)
inline void AgStkGatorLib::IAgVARK4th5th::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4135)
inline double AgStkGatorLib::IAgVARK4th5th::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4136)
inline void AgStkGatorLib::IAgVARK4th5th::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4137)
inline double AgStkGatorLib::IAgVARK4th5th::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4138)
inline void AgStkGatorLib::IAgVARK4th5th::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4139)
inline double AgStkGatorLib::IAgVARK4th5th::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4140)
inline void AgStkGatorLib::IAgVARK4th5th::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4141)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::IAgVARK4th5th::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4142)
inline void AgStkGatorLib::IAgVARK4th5th::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4143)
inline long AgStkGatorLib::IAgVARK4th5th::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4144)
inline void AgStkGatorLib::IAgVARK4th5th::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVARK4th5th wrapper method implementations
//

#pragma implementation_key(4145)
inline double AgStkGatorLib::_IAgVARK4th5th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4146)
inline void AgStkGatorLib::_IAgVARK4th5th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4147)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK4th5th::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4148)
inline void AgStkGatorLib::_IAgVARK4th5th::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4149)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK4th5th::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4150)
inline void AgStkGatorLib::_IAgVARK4th5th::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4151)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK4th5th::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4152)
inline void AgStkGatorLib::_IAgVARK4th5th::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4153)
inline double AgStkGatorLib::_IAgVARK4th5th::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4154)
inline void AgStkGatorLib::_IAgVARK4th5th::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4155)
inline double AgStkGatorLib::_IAgVARK4th5th::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4156)
inline void AgStkGatorLib::_IAgVARK4th5th::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4157)
inline double AgStkGatorLib::_IAgVARK4th5th::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4158)
inline void AgStkGatorLib::_IAgVARK4th5th::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4159)
inline double AgStkGatorLib::_IAgVARK4th5th::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4160)
inline void AgStkGatorLib::_IAgVARK4th5th::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4161)
inline double AgStkGatorLib::_IAgVARK4th5th::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4162)
inline void AgStkGatorLib::_IAgVARK4th5th::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4163)
inline double AgStkGatorLib::_IAgVARK4th5th::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4164)
inline void AgStkGatorLib::_IAgVARK4th5th::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4165)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::_IAgVARK4th5th::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4166)
inline void AgStkGatorLib::_IAgVARK4th5th::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4167)
inline long AgStkGatorLib::_IAgVARK4th5th::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4168)
inline void AgStkGatorLib::_IAgVARK4th5th::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVARK4thAdapt wrapper method implementations
//

#pragma implementation_key(4169)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4170)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4171)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK4thAdapt::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4172)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4173)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK4thAdapt::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4174)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4175)
inline VARIANT_BOOL AgStkGatorLib::IAgVARK4thAdapt::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4176)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4177)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4178)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4179)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4180)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4181)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4182)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4183)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4184)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4185)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4186)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4187)
inline double AgStkGatorLib::IAgVARK4thAdapt::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4188)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4189)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::IAgVARK4thAdapt::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4190)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4191)
inline long AgStkGatorLib::IAgVARK4thAdapt::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4192)
inline void AgStkGatorLib::IAgVARK4thAdapt::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVARK4thAdapt wrapper method implementations
//

#pragma implementation_key(4193)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4194)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4195)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK4thAdapt::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4196)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4197)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK4thAdapt::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4198)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4199)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARK4thAdapt::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4200)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4201)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4202)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4203)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4204)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4205)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4206)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4207)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4208)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4209)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4210)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4211)
inline double AgStkGatorLib::_IAgVARK4thAdapt::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4212)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4213)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::_IAgVARK4thAdapt::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4214)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4215)
inline long AgStkGatorLib::_IAgVARK4thAdapt::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4216)
inline void AgStkGatorLib::_IAgVARK4thAdapt::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVARKF7th8th wrapper method implementations
//

#pragma implementation_key(4217)
inline double AgStkGatorLib::IAgVARKF7th8th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4218)
inline void AgStkGatorLib::IAgVARKF7th8th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4219)
inline VARIANT_BOOL AgStkGatorLib::IAgVARKF7th8th::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4220)
inline void AgStkGatorLib::IAgVARKF7th8th::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4221)
inline VARIANT_BOOL AgStkGatorLib::IAgVARKF7th8th::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4222)
inline void AgStkGatorLib::IAgVARKF7th8th::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4223)
inline VARIANT_BOOL AgStkGatorLib::IAgVARKF7th8th::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4224)
inline void AgStkGatorLib::IAgVARKF7th8th::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4225)
inline double AgStkGatorLib::IAgVARKF7th8th::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4226)
inline void AgStkGatorLib::IAgVARKF7th8th::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4227)
inline double AgStkGatorLib::IAgVARKF7th8th::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4228)
inline void AgStkGatorLib::IAgVARKF7th8th::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4229)
inline double AgStkGatorLib::IAgVARKF7th8th::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4230)
inline void AgStkGatorLib::IAgVARKF7th8th::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4231)
inline double AgStkGatorLib::IAgVARKF7th8th::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4232)
inline void AgStkGatorLib::IAgVARKF7th8th::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4233)
inline double AgStkGatorLib::IAgVARKF7th8th::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4234)
inline void AgStkGatorLib::IAgVARKF7th8th::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4235)
inline double AgStkGatorLib::IAgVARKF7th8th::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4236)
inline void AgStkGatorLib::IAgVARKF7th8th::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4237)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::IAgVARKF7th8th::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4238)
inline void AgStkGatorLib::IAgVARKF7th8th::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4239)
inline long AgStkGatorLib::IAgVARKF7th8th::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4240)
inline void AgStkGatorLib::IAgVARKF7th8th::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVARKF7th8th wrapper method implementations
//

#pragma implementation_key(4241)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4242)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4243)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARKF7th8th::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4244)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4245)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARKF7th8th::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4246)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4247)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARKF7th8th::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4248)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4249)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4250)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4251)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4252)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4253)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4254)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4255)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4256)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4257)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4258)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4259)
inline double AgStkGatorLib::_IAgVARKF7th8th::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4260)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4261)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::_IAgVARKF7th8th::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4262)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4263)
inline long AgStkGatorLib::_IAgVARKF7th8th::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4264)
inline void AgStkGatorLib::_IAgVARKF7th8th::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVARKV8th9th wrapper method implementations
//

#pragma implementation_key(4265)
inline double AgStkGatorLib::IAgVARKV8th9th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4266)
inline void AgStkGatorLib::IAgVARKV8th9th::PutInitialStep ( double pVal ) {
    HRESULT _hr = put_InitialStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4267)
inline VARIANT_BOOL AgStkGatorLib::IAgVARKV8th9th::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4268)
inline void AgStkGatorLib::IAgVARKV8th9th::PutUseFixedStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4269)
inline VARIANT_BOOL AgStkGatorLib::IAgVARKV8th9th::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4270)
inline void AgStkGatorLib::IAgVARKV8th9th::PutUseMaxStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4271)
inline VARIANT_BOOL AgStkGatorLib::IAgVARKV8th9th::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4272)
inline void AgStkGatorLib::IAgVARKV8th9th::PutUseMinStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4273)
inline double AgStkGatorLib::IAgVARKV8th9th::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4274)
inline void AgStkGatorLib::IAgVARKV8th9th::PutMaxStep ( double pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4275)
inline double AgStkGatorLib::IAgVARKV8th9th::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4276)
inline void AgStkGatorLib::IAgVARKV8th9th::PutMinStep ( double pVal ) {
    HRESULT _hr = put_MinStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4277)
inline double AgStkGatorLib::IAgVARKV8th9th::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4278)
inline void AgStkGatorLib::IAgVARKV8th9th::PutMaxRelErr ( double pVal ) {
    HRESULT _hr = put_MaxRelErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4279)
inline double AgStkGatorLib::IAgVARKV8th9th::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4280)
inline void AgStkGatorLib::IAgVARKV8th9th::PutMaxAbsErr ( double pVal ) {
    HRESULT _hr = put_MaxAbsErr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4281)
inline double AgStkGatorLib::IAgVARKV8th9th::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4282)
inline void AgStkGatorLib::IAgVARKV8th9th::PutHighSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4283)
inline double AgStkGatorLib::IAgVARKV8th9th::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4284)
inline void AgStkGatorLib::IAgVARKV8th9th::PutLowSafetyCoefficient ( double pVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4285)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::IAgVARKV8th9th::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4286)
inline void AgStkGatorLib::IAgVARKV8th9th::PutErrorControl ( enum AgEVAErrorControl pVal ) {
    HRESULT _hr = put_ErrorControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4287)
inline long AgStkGatorLib::IAgVARKV8th9th::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4288)
inline void AgStkGatorLib::IAgVARKV8th9th::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4289)
inline enum AgStkGatorLib::AgEVACoeffRKV8th9th AgStkGatorLib::IAgVARKV8th9th::GetCoeffType ( ) {
    enum AgEVACoeffRKV8th9th _result;
    HRESULT _hr = get_CoeffType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4290)
inline void AgStkGatorLib::IAgVARKV8th9th::PutCoeffType ( enum AgEVACoeffRKV8th9th pVal ) {
    HRESULT _hr = put_CoeffType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVARKV8th9th wrapper method implementations
//

#pragma implementation_key(4291)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetInitialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4292)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutInitialStep ( double pRetVal ) {
    HRESULT _hr = put_InitialStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4293)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARKV8th9th::GetUseFixedStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4294)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutUseFixedStep ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseFixedStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4295)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARKV8th9th::GetUseMaxStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4296)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutUseMaxStep ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseMaxStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4297)
inline VARIANT_BOOL AgStkGatorLib::_IAgVARKV8th9th::GetUseMinStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4298)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutUseMinStep ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseMinStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4299)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetMaxStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4300)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutMaxStep ( double pRetVal ) {
    HRESULT _hr = put_MaxStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4301)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetMinStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4302)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutMinStep ( double pRetVal ) {
    HRESULT _hr = put_MinStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4303)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetMaxRelErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4304)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutMaxRelErr ( double pRetVal ) {
    HRESULT _hr = put_MaxRelErr(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4305)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetMaxAbsErr ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAbsErr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4306)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutMaxAbsErr ( double pRetVal ) {
    HRESULT _hr = put_MaxAbsErr(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4307)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetHighSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_HighSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4308)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutHighSafetyCoefficient ( double pRetVal ) {
    HRESULT _hr = put_HighSafetyCoefficient(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4309)
inline double AgStkGatorLib::_IAgVARKV8th9th::GetLowSafetyCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_LowSafetyCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4310)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutLowSafetyCoefficient ( double pRetVal ) {
    HRESULT _hr = put_LowSafetyCoefficient(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4311)
inline enum AgStkGatorLib::AgEVAErrorControl AgStkGatorLib::_IAgVARKV8th9th::GetErrorControl ( ) {
    enum AgEVAErrorControl _result;
    HRESULT _hr = get_ErrorControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4312)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutErrorControl ( enum AgEVAErrorControl pRetVal ) {
    HRESULT _hr = put_ErrorControl(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4313)
inline long AgStkGatorLib::_IAgVARKV8th9th::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4314)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutMaxIterations ( long pRetVal ) {
    HRESULT _hr = put_MaxIterations(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4315)
inline enum AgStkGatorLib::AgEVACoeffRKV8th9th AgStkGatorLib::_IAgVARKV8th9th::GetCoeffType ( ) {
    enum AgEVACoeffRKV8th9th _result;
    HRESULT _hr = get_CoeffType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4316)
inline void AgStkGatorLib::_IAgVARKV8th9th::PutCoeffType ( enum AgEVACoeffRKV8th9th pRetVal ) {
    HRESULT _hr = put_CoeffType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABPlaneCollection wrapper method implementations
//

#pragma implementation_key(4317)
inline HRESULT AgStkGatorLib::IAgVABPlaneCollection::Add ( _bstr_t BPlaneName ) {
    HRESULT _hr = raw_Add(BPlaneName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4318)
inline HRESULT AgStkGatorLib::IAgVABPlaneCollection::Remove ( _bstr_t BPlaneName ) {
    HRESULT _hr = raw_Remove(BPlaneName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4319)
inline HRESULT AgStkGatorLib::IAgVABPlaneCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4320)
inline _bstr_t AgStkGatorLib::IAgVABPlaneCollection::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4321)
inline IUnknownPtr AgStkGatorLib::IAgVABPlaneCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4322)
inline long AgStkGatorLib::IAgVABPlaneCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAMCSSegmentProperties wrapper method implementations
//

#pragma implementation_key(4323)
inline _bstr_t AgStkGatorLib::IAgVAMCSSegmentProperties::GetDisplayCoordinateSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayCoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4324)
inline void AgStkGatorLib::IAgVAMCSSegmentProperties::PutDisplayCoordinateSystem ( _bstr_t pDisplayCoordinateSystem ) {
    HRESULT _hr = put_DisplayCoordinateSystem(pDisplayCoordinateSystem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4325)
inline OLE_COLOR AgStkGatorLib::IAgVAMCSSegmentProperties::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4326)
inline void AgStkGatorLib::IAgVAMCSSegmentProperties::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4327)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSSegmentProperties::GetUpdateAnimationTimeAfterRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateAnimationTimeAfterRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4328)
inline void AgStkGatorLib::IAgVAMCSSegmentProperties::PutUpdateAnimationTimeAfterRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateAnimationTimeAfterRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4329)
inline HRESULT AgStkGatorLib::IAgVAMCSSegmentProperties::ApplyFinalStateToBPlanes ( ) {
    HRESULT _hr = raw_ApplyFinalStateToBPlanes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4330)
inline AgStkGatorLib::IAgVABPlaneCollectionPtr AgStkGatorLib::IAgVAMCSSegmentProperties::GetBPlanes ( ) {
    struct IAgVABPlaneCollection * _result = 0;
    HRESULT _hr = get_BPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVABPlaneCollectionPtr(_result, false);
}

#pragma implementation_key(4331)
inline enum AgStkGatorLib::AgEVARunCode AgStkGatorLib::IAgVAMCSSegmentProperties::GetLastRunCode ( ) {
    enum AgEVARunCode _result;
    HRESULT _hr = get_LastRunCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAState wrapper method implementations
//

#pragma implementation_key(4332)
inline enum AgStkGatorLib::AgEVAElementType AgStkGatorLib::IAgVAState::GetElementType ( ) {
    enum AgEVAElementType _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4333)
inline HRESULT AgStkGatorLib::IAgVAState::SetElementType ( enum AgEVAElementType ElementType ) {
    HRESULT _hr = raw_SetElementType(ElementType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4334)
inline AgStkGatorLib::IAgVAElementPtr AgStkGatorLib::IAgVAState::GetElement ( ) {
    struct IAgVAElement * _result = 0;
    HRESULT _hr = get_Element(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAElementPtr(_result, false);
}

#pragma implementation_key(4335)
inline _variant_t AgStkGatorLib::IAgVAState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4336)
inline void AgStkGatorLib::IAgVAState::PutEpoch ( const _variant_t & pEpoch ) {
    HRESULT _hr = put_Epoch(pEpoch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4337)
inline _bstr_t AgStkGatorLib::IAgVAState::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4338)
inline double AgStkGatorLib::IAgVAState::GetDryMass ( ) {
    double _result = 0;
    HRESULT _hr = get_DryMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4339)
inline void AgStkGatorLib::IAgVAState::PutDryMass ( double pDryMass ) {
    HRESULT _hr = put_DryMass(pDryMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4340)
inline double AgStkGatorLib::IAgVAState::GetFuelMass ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4341)
inline void AgStkGatorLib::IAgVAState::PutFuelMass ( double pFuelMass ) {
    HRESULT _hr = put_FuelMass(pFuelMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4342)
inline double AgStkGatorLib::IAgVAState::GetDragArea ( ) {
    double _result = 0;
    HRESULT _hr = get_DragArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4343)
inline void AgStkGatorLib::IAgVAState::PutDragArea ( double pFuelMass ) {
    HRESULT _hr = put_DragArea(pFuelMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4344)
inline double AgStkGatorLib::IAgVAState::GetSRPArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SRPArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4345)
inline void AgStkGatorLib::IAgVAState::PutSRPArea ( double pSRPArea ) {
    HRESULT _hr = put_SRPArea(pSRPArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4346)
inline double AgStkGatorLib::IAgVAState::GetTankPressure ( ) {
    double _result = 0;
    HRESULT _hr = get_TankPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4347)
inline void AgStkGatorLib::IAgVAState::PutTankPressure ( double pTankPressure ) {
    HRESULT _hr = put_TankPressure(pTankPressure);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4348)
inline double AgStkGatorLib::IAgVAState::GetTankTemperature ( ) {
    double _result = 0;
    HRESULT _hr = get_TankTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4349)
inline void AgStkGatorLib::IAgVAState::PutTankTemperature ( double pTankTemperature ) {
    HRESULT _hr = put_TankTemperature(pTankTemperature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4350)
inline double AgStkGatorLib::IAgVAState::GetFuelDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4351)
inline void AgStkGatorLib::IAgVAState::PutFuelDensity ( double pFuelDensity ) {
    HRESULT _hr = put_FuelDensity(pFuelDensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4352)
inline double AgStkGatorLib::IAgVAState::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4353)
inline void AgStkGatorLib::IAgVAState::PutCr ( double pCr ) {
    HRESULT _hr = put_Cr(pCr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4354)
inline double AgStkGatorLib::IAgVAState::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4355)
inline void AgStkGatorLib::IAgVAState::PutCd ( double pCd ) {
    HRESULT _hr = put_Cd(pCd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4356)
inline double AgStkGatorLib::IAgVAState::GetRadiationPressureCoeff ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiationPressureCoeff(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4357)
inline void AgStkGatorLib::IAgVAState::PutRadiationPressureCoeff ( double pRadiationPressureCoeff ) {
    HRESULT _hr = put_RadiationPressureCoeff(pRadiationPressureCoeff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4358)
inline double AgStkGatorLib::IAgVAState::GetRadiationPressureArea ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiationPressureArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4359)
inline void AgStkGatorLib::IAgVAState::PutRadiationPressureArea ( double pRadiationPressureArea ) {
    HRESULT _hr = put_RadiationPressureArea(pRadiationPressureArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4360)
inline double AgStkGatorLib::IAgVAState::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4361)
inline void AgStkGatorLib::IAgVAState::PutK1 ( double pK1 ) {
    HRESULT _hr = put_K1(pK1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4362)
inline double AgStkGatorLib::IAgVAState::GetK2 ( ) {
    double _result = 0;
    HRESULT _hr = get_K2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4363)
inline void AgStkGatorLib::IAgVAState::PutK2 ( double pK2 ) {
    HRESULT _hr = put_K2(pK2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4364)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::IAgVAState::GetInFrameName ( _bstr_t FrameName ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_GetInFrameName(FrameName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

//
// interface IAgVAMCSSegment wrapper method implementations
//

#pragma implementation_key(4365)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::IAgVAMCSSegment::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4366)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::IAgVAMCSSegment::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(4367)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::IAgVAMCSSegment::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4368)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::IAgVAMCSSegment::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4369)
inline _variant_t AgStkGatorLib::IAgVAMCSSegment::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4370)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::IAgVAMCSSegment::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4371)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::IAgVAMCSSegment::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(4372)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::IAgVAMCSSegment::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

//
// interface IAgVAMCSSegmentCollection wrapper method implementations
//

#pragma implementation_key(4373)
inline AgStkGatorLib::IAgVAMCSSegmentPtr AgStkGatorLib::IAgVAMCSSegmentCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAMCSSegment * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPtr(_result, false);
}

#pragma implementation_key(4374)
inline AgStkGatorLib::IAgVAMCSSegmentPtr AgStkGatorLib::IAgVAMCSSegmentCollection::Insert ( enum AgEVASegmentType SegmentType, _bstr_t SegmentName, _bstr_t SegmentToInsertBefore ) {
    struct IAgVAMCSSegment * _result = 0;
    HRESULT _hr = raw_Insert(SegmentType, SegmentName, SegmentToInsertBefore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPtr(_result, false);
}

#pragma implementation_key(4375)
inline HRESULT AgStkGatorLib::IAgVAMCSSegmentCollection::Remove ( _bstr_t SegmentNameToRemove ) {
    HRESULT _hr = raw_Remove(SegmentNameToRemove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4376)
inline HRESULT AgStkGatorLib::IAgVAMCSSegmentCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4377)
inline IUnknownPtr AgStkGatorLib::IAgVAMCSSegmentCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4378)
inline long AgStkGatorLib::IAgVAMCSSegmentCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4379)
inline HRESULT AgStkGatorLib::IAgVAMCSSegmentCollection::Cut ( _bstr_t SegmentNameToCut ) {
    HRESULT _hr = raw_Cut(SegmentNameToCut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4380)
inline AgStkGatorLib::IAgVAMCSSegmentPtr AgStkGatorLib::IAgVAMCSSegmentCollection::Paste ( _bstr_t SegmentToPasteBefore ) {
    struct IAgVAMCSSegment * _result = 0;
    HRESULT _hr = raw_Paste(SegmentToPasteBefore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPtr(_result, false);
}

#pragma implementation_key(4381)
inline AgStkGatorLib::IAgVAMCSSegmentPtr AgStkGatorLib::IAgVAMCSSegmentCollection::InsertCopy ( struct IAgVAMCSSegment * Segment, _bstr_t SegmentToInsertBefore ) {
    struct IAgVAMCSSegment * _result = 0;
    HRESULT _hr = raw_InsertCopy(Segment, SegmentToInsertBefore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPtr(_result, false);
}

#pragma implementation_key(4382)
inline AgStkGatorLib::IAgVAMCSSegmentPtr AgStkGatorLib::IAgVAMCSSegmentCollection::InsertByName ( _bstr_t SegmentName, _bstr_t SegmentToInsertBefore ) {
    struct IAgVAMCSSegment * _result = 0;
    HRESULT _hr = raw_InsertByName(SegmentName, SegmentToInsertBefore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPtr(_result, false);
}

#pragma implementation_key(4383)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVAMCSSegmentCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAUserVariableDefinition wrapper method implementations
//

#pragma implementation_key(4384)
inline _bstr_t AgStkGatorLib::IAgVAUserVariableDefinition::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4385)
inline void AgStkGatorLib::IAgVAUserVariableDefinition::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4386)
inline _bstr_t AgStkGatorLib::IAgVAUserVariableDefinition::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4387)
inline void AgStkGatorLib::IAgVAUserVariableDefinition::PutVariableName ( _bstr_t pVal ) {
    HRESULT _hr = put_VariableName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAUserVariableDefinitionCollection wrapper method implementations
//

#pragma implementation_key(4388)
inline AgStkGatorLib::IAgVAUserVariableDefinitionPtr AgStkGatorLib::IAgVAUserVariableDefinitionCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAUserVariableDefinition * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableDefinitionPtr(_result, false);
}

#pragma implementation_key(4389)
inline AgStkGatorLib::IAgVAUserVariableDefinitionPtr AgStkGatorLib::IAgVAUserVariableDefinitionCollection::Add ( _bstr_t ParameterName ) {
    struct IAgVAUserVariableDefinition * _result = 0;
    HRESULT _hr = raw_Add(ParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableDefinitionPtr(_result, false);
}

#pragma implementation_key(4390)
inline HRESULT AgStkGatorLib::IAgVAUserVariableDefinitionCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4391)
inline HRESULT AgStkGatorLib::IAgVAUserVariableDefinitionCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4392)
inline IUnknownPtr AgStkGatorLib::IAgVAUserVariableDefinitionCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4393)
inline long AgStkGatorLib::IAgVAUserVariableDefinitionCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAMCSOptions wrapper method implementations
//

#pragma implementation_key(4394)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetDrawTrajectoryIn2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawTrajectoryIn2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4395)
inline void AgStkGatorLib::IAgVAMCSOptions::PutDrawTrajectoryIn2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawTrajectoryIn2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4396)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetDrawTrajectoryIn3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawTrajectoryIn3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4397)
inline void AgStkGatorLib::IAgVAMCSOptions::PutDrawTrajectoryIn3D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawTrajectoryIn3D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4398)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetUpdateAnimationTimeForAllObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateAnimationTimeForAllObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4399)
inline void AgStkGatorLib::IAgVAMCSOptions::PutUpdateAnimationTimeForAllObjects ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateAnimationTimeForAllObjects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4400)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetClearDWCGraphicsBeforeEachRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearDWCGraphicsBeforeEachRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4401)
inline void AgStkGatorLib::IAgVAMCSOptions::PutClearDWCGraphicsBeforeEachRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ClearDWCGraphicsBeforeEachRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4402)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetClearAdditionalBPlanePoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearAdditionalBPlanePoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4403)
inline void AgStkGatorLib::IAgVAMCSOptions::PutClearAdditionalBPlanePoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ClearAdditionalBPlanePoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4404)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetPropagateOnApply ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PropagateOnApply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4405)
inline void AgStkGatorLib::IAgVAMCSOptions::PutPropagateOnApply ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PropagateOnApply(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4406)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetEnableTrajectorySegmentColors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTrajectorySegmentColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4407)
inline void AgStkGatorLib::IAgVAMCSOptions::PutEnableTrajectorySegmentColors ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableTrajectorySegmentColors(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4408)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetSaveNumbersInRawFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveNumbersInRawFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4409)
inline void AgStkGatorLib::IAgVAMCSOptions::PutSaveNumbersInRawFormat ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SaveNumbersInRawFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4410)
inline double AgStkGatorLib::IAgVAMCSOptions::GetStoppingConditionTimeTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_StoppingConditionTimeTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4411)
inline void AgStkGatorLib::IAgVAMCSOptions::PutStoppingConditionTimeTolerance ( double pVal ) {
    HRESULT _hr = put_StoppingConditionTimeTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4412)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetEnableSegmentControls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSegmentControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4413)
inline void AgStkGatorLib::IAgVAMCSOptions::PutEnableSegmentControls ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSegmentControls(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4414)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetEnableSegmentResults ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSegmentResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4415)
inline void AgStkGatorLib::IAgVAMCSOptions::PutEnableSegmentResults ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSegmentResults(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4416)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetEnableLogging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLogging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4417)
inline void AgStkGatorLib::IAgVAMCSOptions::PutEnableLogging ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLogging(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4418)
inline double AgStkGatorLib::IAgVAMCSOptions::GetGraphicsUpdateRate ( ) {
    double _result = 0;
    HRESULT _hr = get_GraphicsUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4419)
inline void AgStkGatorLib::IAgVAMCSOptions::PutGraphicsUpdateRate ( double pVal ) {
    HRESULT _hr = put_GraphicsUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4420)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetPromoteControls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PromoteControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4421)
inline void AgStkGatorLib::IAgVAMCSOptions::PutPromoteControls ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PromoteControls(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4422)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetUseNominalSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseNominalSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4423)
inline void AgStkGatorLib::IAgVAMCSOptions::PutUseNominalSettings ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseNominalSettings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4424)
inline double AgStkGatorLib::IAgVAMCSOptions::GetMinEphemStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinEphemStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4425)
inline void AgStkGatorLib::IAgVAMCSOptions::PutMinEphemStep ( double pVal ) {
    HRESULT _hr = put_MinEphemStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4426)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSOptions::GetGenerateEphemeris ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4427)
inline void AgStkGatorLib::IAgVAMCSOptions::PutGenerateEphemeris ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateEphemeris(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4428)
inline AgStkGatorLib::IAgVAUserVariableDefinitionCollectionPtr AgStkGatorLib::IAgVAMCSOptions::GetUserVariables ( ) {
    struct IAgVAUserVariableDefinitionCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableDefinitionCollectionPtr(_result, false);
}

#pragma implementation_key(4429)
inline enum AgStkGatorLib::AgEVASmartRunMode AgStkGatorLib::IAgVAMCSOptions::GetSmartRunMode ( ) {
    enum AgEVASmartRunMode _result;
    HRESULT _hr = get_SmartRunMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4430)
inline void AgStkGatorLib::IAgVAMCSOptions::PutSmartRunMode ( enum AgEVASmartRunMode pVal ) {
    HRESULT _hr = put_SmartRunMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAAutomaticSequence wrapper method implementations
//

#pragma implementation_key(4431)
inline AgStkGatorLib::IAgVAAutomaticSequencePtr AgStkGatorLib::IAgVAAutomaticSequence::MakeCopy ( _bstr_t UniqueName ) {
    struct IAgVAAutomaticSequence * _result = 0;
    HRESULT _hr = raw_MakeCopy(UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAutomaticSequencePtr(_result, false);
}

#pragma implementation_key(4432)
inline _bstr_t AgStkGatorLib::IAgVAAutomaticSequence::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4433)
inline void AgStkGatorLib::IAgVAAutomaticSequence::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4434)
inline _bstr_t AgStkGatorLib::IAgVAAutomaticSequence::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4435)
inline void AgStkGatorLib::IAgVAAutomaticSequence::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4436)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::IAgVAAutomaticSequence::GetSequence ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

//
// interface IAgVAAutomaticSequenceCollection wrapper method implementations
//

#pragma implementation_key(4437)
inline AgStkGatorLib::IAgVAAutomaticSequencePtr AgStkGatorLib::IAgVAAutomaticSequenceCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAAutomaticSequence * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAutomaticSequencePtr(_result, false);
}

#pragma implementation_key(4438)
inline AgStkGatorLib::IAgVAAutomaticSequencePtr AgStkGatorLib::IAgVAAutomaticSequenceCollection::Add ( _bstr_t Name ) {
    struct IAgVAAutomaticSequence * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAutomaticSequencePtr(_result, false);
}

#pragma implementation_key(4439)
inline HRESULT AgStkGatorLib::IAgVAAutomaticSequenceCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4440)
inline IUnknownPtr AgStkGatorLib::IAgVAAutomaticSequenceCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4441)
inline long AgStkGatorLib::IAgVAAutomaticSequenceCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVACalculationGraphCollection wrapper method implementations
//

#pragma implementation_key(4442)
inline _bstr_t AgStkGatorLib::IAgVACalculationGraphCollection::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4443)
inline IUnknownPtr AgStkGatorLib::IAgVACalculationGraphCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4444)
inline HRESULT AgStkGatorLib::IAgVACalculationGraphCollection::Add ( _bstr_t GraphName ) {
    HRESULT _hr = raw_Add(GraphName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4445)
inline HRESULT AgStkGatorLib::IAgVACalculationGraphCollection::Remove ( _bstr_t GraphName ) {
    HRESULT _hr = raw_Remove(GraphName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4446)
inline HRESULT AgStkGatorLib::IAgVACalculationGraphCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4447)
inline long AgStkGatorLib::IAgVACalculationGraphCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVADriverMCS wrapper method implementations
//

#pragma implementation_key(4448)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::_IAgVADriverMCS::GetMainSequence ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_MainSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(4449)
inline AgStkGatorLib::IAgVAMCSOptionsPtr AgStkGatorLib::_IAgVADriverMCS::GetOptions ( ) {
    struct IAgVAMCSOptions * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSOptionsPtr(_result, false);
}

#pragma implementation_key(4450)
inline AgStkGatorLib::IAgVAAutomaticSequenceCollectionPtr AgStkGatorLib::_IAgVADriverMCS::GetAutoSequence ( ) {
    struct IAgVAAutomaticSequenceCollection * _result = 0;
    HRESULT _hr = get_AutoSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAutomaticSequenceCollectionPtr(_result, false);
}

#pragma implementation_key(4451)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::RunMCS ( ) {
    HRESULT _hr = raw_RunMCS();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4452)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::BeginRun ( ) {
    HRESULT _hr = raw_BeginRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4453)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::EndRun ( ) {
    HRESULT _hr = raw_EndRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4454)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::ClearDWCGraphics ( ) {
    HRESULT _hr = raw_ClearDWCGraphics();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4455)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::ResetAllProfiles ( ) {
    HRESULT _hr = raw_ResetAllProfiles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4456)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::ApplyAllProfileChanges ( ) {
    HRESULT _hr = raw_ApplyAllProfileChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4457)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::AppendRun ( ) {
    HRESULT _hr = raw_AppendRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4458)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::AppendRunFromTime ( const _variant_t & Epoch, enum AgEVAClearEphemerisDirection ClearEphemerisDirection ) {
    HRESULT _hr = raw_AppendRunFromTime(Epoch, ClearEphemerisDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4459)
inline HRESULT AgStkGatorLib::_IAgVADriverMCS::AppendRunFromState ( struct IAgVAState * AppendState, enum AgEVAClearEphemerisDirection ClearEphemerisDirection ) {
    HRESULT _hr = raw_AppendRunFromState(AppendState, ClearEphemerisDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4460)
inline enum AgStkGatorLib::AgEVARunCode AgStkGatorLib::_IAgVADriverMCS::RunMCS2 ( ) {
    enum AgEVARunCode _result;
    HRESULT _hr = raw_RunMCS2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4461)
inline AgStkGatorLib::IAgVACalculationGraphCollectionPtr AgStkGatorLib::_IAgVADriverMCS::GetCalculationGraphs ( ) {
    struct IAgVACalculationGraphCollection * _result = 0;
    HRESULT _hr = get_CalculationGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalculationGraphCollectionPtr(_result, false);
}

//
// interface IAgVADriverMCS wrapper method implementations
//

#pragma implementation_key(4462)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::IAgVADriverMCS::GetMainSequence ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_MainSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(4463)
inline AgStkGatorLib::IAgVAMCSOptionsPtr AgStkGatorLib::IAgVADriverMCS::GetOptions ( ) {
    struct IAgVAMCSOptions * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSOptionsPtr(_result, false);
}

#pragma implementation_key(4464)
inline AgStkGatorLib::IAgVAAutomaticSequenceCollectionPtr AgStkGatorLib::IAgVADriverMCS::GetAutoSequence ( ) {
    struct IAgVAAutomaticSequenceCollection * _result = 0;
    HRESULT _hr = get_AutoSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAutomaticSequenceCollectionPtr(_result, false);
}

#pragma implementation_key(4465)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::RunMCS ( ) {
    HRESULT _hr = raw_RunMCS();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4466)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::BeginRun ( ) {
    HRESULT _hr = raw_BeginRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4467)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::EndRun ( ) {
    HRESULT _hr = raw_EndRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4468)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::ClearDWCGraphics ( ) {
    HRESULT _hr = raw_ClearDWCGraphics();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4469)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::ResetAllProfiles ( ) {
    HRESULT _hr = raw_ResetAllProfiles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4470)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::ApplyAllProfileChanges ( ) {
    HRESULT _hr = raw_ApplyAllProfileChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4471)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::AppendRun ( ) {
    HRESULT _hr = raw_AppendRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4472)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::AppendRunFromTime ( const _variant_t & Epoch, enum AgEVAClearEphemerisDirection ClearEphemerisDirection ) {
    HRESULT _hr = raw_AppendRunFromTime(Epoch, ClearEphemerisDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4473)
inline HRESULT AgStkGatorLib::IAgVADriverMCS::AppendRunFromState ( struct IAgVAState * AppendState, enum AgEVAClearEphemerisDirection ClearEphemerisDirection ) {
    HRESULT _hr = raw_AppendRunFromState(AppendState, ClearEphemerisDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4474)
inline enum AgStkGatorLib::AgEVARunCode AgStkGatorLib::IAgVADriverMCS::RunMCS2 ( ) {
    enum AgEVARunCode _result;
    HRESULT _hr = raw_RunMCS2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4475)
inline AgStkGatorLib::IAgVACalculationGraphCollectionPtr AgStkGatorLib::IAgVADriverMCS::GetCalculationGraphs ( ) {
    struct IAgVACalculationGraphCollection * _result = 0;
    HRESULT _hr = get_CalculationGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalculationGraphCollectionPtr(_result, false);
}

//
// interface IAgRuntimeTypeInfoProvider wrapper method implementations
//

#pragma implementation_key(4476)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgRuntimeTypeInfoProvider::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAMCSEnd wrapper method implementations
//

#pragma implementation_key(4477)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSEnd::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4478)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSEnd::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(4479)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSEnd::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4480)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSEnd::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4481)
inline _variant_t AgStkGatorLib::_IAgVAMCSEnd::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4482)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSEnd::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4483)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSEnd::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(4484)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSEnd::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(4485)
inline _bstr_t AgStkGatorLib::_IAgVAMCSEnd::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4486)
inline void AgStkGatorLib::_IAgVAMCSEnd::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4487)
inline _bstr_t AgStkGatorLib::_IAgVAMCSEnd::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4488)
inline void AgStkGatorLib::_IAgVAMCSEnd::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4489)
inline _bstr_t AgStkGatorLib::_IAgVAMCSEnd::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4490)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSEnd::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4491)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSEnd::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVASpacecraftParameters wrapper method implementations
//

#pragma implementation_key(4492)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetDryMass ( ) {
    double _result = 0;
    HRESULT _hr = get_DryMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4493)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutDryMass ( double pVal ) {
    HRESULT _hr = put_DryMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4494)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4495)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutCd ( double pVal ) {
    HRESULT _hr = put_Cd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4496)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetDragArea ( ) {
    double _result = 0;
    HRESULT _hr = get_DragArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4497)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutDragArea ( double pVal ) {
    HRESULT _hr = put_DragArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4498)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4499)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutCr ( double pVal ) {
    HRESULT _hr = put_Cr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4500)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetSolarRadiationPressureArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadiationPressureArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4501)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutSolarRadiationPressureArea ( double pVal ) {
    HRESULT _hr = put_SolarRadiationPressureArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4502)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetCk ( ) {
    double _result = 0;
    HRESULT _hr = get_Ck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4503)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutCk ( double pVal ) {
    HRESULT _hr = put_Ck(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4504)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetRadiationPressureArea ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiationPressureArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4505)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutRadiationPressureArea ( double pVal ) {
    HRESULT _hr = put_RadiationPressureArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4506)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4507)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutK1 ( double pVal ) {
    HRESULT _hr = put_K1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4508)
inline double AgStkGatorLib::IAgVASpacecraftParameters::GetK2 ( ) {
    double _result = 0;
    HRESULT _hr = get_K2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4509)
inline void AgStkGatorLib::IAgVASpacecraftParameters::PutK2 ( double pVal ) {
    HRESULT _hr = put_K2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAFuelTank wrapper method implementations
//

#pragma implementation_key(4510)
inline double AgStkGatorLib::IAgVAFuelTank::GetTankPressure ( ) {
    double _result = 0;
    HRESULT _hr = get_TankPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4511)
inline void AgStkGatorLib::IAgVAFuelTank::PutTankPressure ( double pVal ) {
    HRESULT _hr = put_TankPressure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4512)
inline double AgStkGatorLib::IAgVAFuelTank::GetTankVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_TankVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4513)
inline void AgStkGatorLib::IAgVAFuelTank::PutTankVolume ( double pVal ) {
    HRESULT _hr = put_TankVolume(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4514)
inline double AgStkGatorLib::IAgVAFuelTank::GetTankTemperature ( ) {
    double _result = 0;
    HRESULT _hr = get_TankTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4515)
inline void AgStkGatorLib::IAgVAFuelTank::PutTankTemperature ( double pVal ) {
    HRESULT _hr = put_TankTemperature(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4516)
inline double AgStkGatorLib::IAgVAFuelTank::GetFuelDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4517)
inline void AgStkGatorLib::IAgVAFuelTank::PutFuelDensity ( double pVal ) {
    HRESULT _hr = put_FuelDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4518)
inline double AgStkGatorLib::IAgVAFuelTank::GetFuelMass ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4519)
inline void AgStkGatorLib::IAgVAFuelTank::PutFuelMass ( double pVal ) {
    HRESULT _hr = put_FuelMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4520)
inline double AgStkGatorLib::IAgVAFuelTank::GetMaximumFuelMass ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumFuelMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4521)
inline void AgStkGatorLib::IAgVAFuelTank::PutMaximumFuelMass ( double pVal ) {
    HRESULT _hr = put_MaximumFuelMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAUserVariable wrapper method implementations
//

#pragma implementation_key(4522)
inline _bstr_t AgStkGatorLib::IAgVAUserVariable::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4523)
inline _bstr_t AgStkGatorLib::IAgVAUserVariable::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4524)
inline _variant_t AgStkGatorLib::IAgVAUserVariable::GetVariableValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VariableValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4525)
inline void AgStkGatorLib::IAgVAUserVariable::PutVariableValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_VariableValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4526)
inline HRESULT AgStkGatorLib::IAgVAUserVariable::EnableControlParameter ( ) {
    HRESULT _hr = raw_EnableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4527)
inline HRESULT AgStkGatorLib::IAgVAUserVariable::DisableControlParameter ( ) {
    HRESULT _hr = raw_DisableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4528)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUserVariable::IsControlParameterEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4529)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUserVariable::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAUserVariableCollection wrapper method implementations
//

#pragma implementation_key(4530)
inline AgStkGatorLib::IAgVAUserVariablePtr AgStkGatorLib::IAgVAUserVariableCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAUserVariable * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariablePtr(_result, false);
}

#pragma implementation_key(4531)
inline IUnknownPtr AgStkGatorLib::IAgVAUserVariableCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4532)
inline long AgStkGatorLib::IAgVAUserVariableCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAMCSInitialState wrapper method implementations
//

#pragma implementation_key(4533)
inline _bstr_t AgStkGatorLib::_IAgVAMCSInitialState::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4534)
inline void AgStkGatorLib::_IAgVAMCSInitialState::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4535)
inline _variant_t AgStkGatorLib::_IAgVAMCSInitialState::GetOrbitEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OrbitEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4536)
inline void AgStkGatorLib::_IAgVAMCSInitialState::PutOrbitEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_OrbitEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4537)
inline AgStkGatorLib::IAgVASpacecraftParametersPtr AgStkGatorLib::_IAgVAMCSInitialState::GetSpacecraftParameters ( ) {
    struct IAgVASpacecraftParameters * _result = 0;
    HRESULT _hr = get_SpacecraftParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASpacecraftParametersPtr(_result, false);
}

#pragma implementation_key(4538)
inline AgStkGatorLib::IAgVAFuelTankPtr AgStkGatorLib::_IAgVAMCSInitialState::GetFuelTank ( ) {
    struct IAgVAFuelTank * _result = 0;
    HRESULT _hr = get_FuelTank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAFuelTankPtr(_result, false);
}

#pragma implementation_key(4539)
inline enum AgStkGatorLib::AgEVAElementType AgStkGatorLib::_IAgVAMCSInitialState::GetElementType ( ) {
    enum AgEVAElementType _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4540)
inline HRESULT AgStkGatorLib::_IAgVAMCSInitialState::SetElementType ( enum AgEVAElementType ElementType ) {
    HRESULT _hr = raw_SetElementType(ElementType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4541)
inline AgStkGatorLib::IAgVAElementPtr AgStkGatorLib::_IAgVAMCSInitialState::GetElement ( ) {
    struct IAgVAElement * _result = 0;
    HRESULT _hr = get_Element(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAElementPtr(_result, false);
}

#pragma implementation_key(4542)
inline HRESULT AgStkGatorLib::_IAgVAMCSInitialState::EnableControlParameter ( enum AgEVAControlInitState Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4543)
inline HRESULT AgStkGatorLib::_IAgVAMCSInitialState::DisableControlParameter ( enum AgEVAControlInitState Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4544)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSInitialState::IsControlParameterEnabled ( enum AgEVAControlInitState Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4545)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSInitialState::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4546)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSInitialState::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4547)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSInitialState::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(4548)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSInitialState::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4549)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSInitialState::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4550)
inline _variant_t AgStkGatorLib::_IAgVAMCSInitialState::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4551)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSInitialState::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4552)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSInitialState::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(4553)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSInitialState::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(4554)
inline _bstr_t AgStkGatorLib::_IAgVAMCSInitialState::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4555)
inline void AgStkGatorLib::_IAgVAMCSInitialState::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4556)
inline _bstr_t AgStkGatorLib::_IAgVAMCSInitialState::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4557)
inline void AgStkGatorLib::_IAgVAMCSInitialState::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4558)
inline _bstr_t AgStkGatorLib::_IAgVAMCSInitialState::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4559)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSInitialState::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4560)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSInitialState::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4561)
inline AgStkGatorLib::IAgVAUserVariableCollectionPtr AgStkGatorLib::_IAgVAMCSInitialState::GetUserVariables ( ) {
    struct IAgVAUserVariableCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableCollectionPtr(_result, false);
}

#pragma implementation_key(4562)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSInitialState::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSInitialState wrapper method implementations
//

#pragma implementation_key(4563)
inline _bstr_t AgStkGatorLib::IAgVAMCSInitialState::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4564)
inline void AgStkGatorLib::IAgVAMCSInitialState::PutCoordSystemName ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystemName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4565)
inline _variant_t AgStkGatorLib::IAgVAMCSInitialState::GetOrbitEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OrbitEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4566)
inline void AgStkGatorLib::IAgVAMCSInitialState::PutOrbitEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_OrbitEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4567)
inline AgStkGatorLib::IAgVASpacecraftParametersPtr AgStkGatorLib::IAgVAMCSInitialState::GetSpacecraftParameters ( ) {
    struct IAgVASpacecraftParameters * _result = 0;
    HRESULT _hr = get_SpacecraftParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASpacecraftParametersPtr(_result, false);
}

#pragma implementation_key(4568)
inline AgStkGatorLib::IAgVAFuelTankPtr AgStkGatorLib::IAgVAMCSInitialState::GetFuelTank ( ) {
    struct IAgVAFuelTank * _result = 0;
    HRESULT _hr = get_FuelTank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAFuelTankPtr(_result, false);
}

#pragma implementation_key(4569)
inline enum AgStkGatorLib::AgEVAElementType AgStkGatorLib::IAgVAMCSInitialState::GetElementType ( ) {
    enum AgEVAElementType _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4570)
inline HRESULT AgStkGatorLib::IAgVAMCSInitialState::SetElementType ( enum AgEVAElementType ElementType ) {
    HRESULT _hr = raw_SetElementType(ElementType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4571)
inline AgStkGatorLib::IAgVAElementPtr AgStkGatorLib::IAgVAMCSInitialState::GetElement ( ) {
    struct IAgVAElement * _result = 0;
    HRESULT _hr = get_Element(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAElementPtr(_result, false);
}

#pragma implementation_key(4572)
inline HRESULT AgStkGatorLib::IAgVAMCSInitialState::EnableControlParameter ( enum AgEVAControlInitState Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4573)
inline HRESULT AgStkGatorLib::IAgVAMCSInitialState::DisableControlParameter ( enum AgEVAControlInitState Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4574)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSInitialState::IsControlParameterEnabled ( enum AgEVAControlInitState Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4575)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSInitialState::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4576)
inline AgStkGatorLib::IAgVAUserVariableCollectionPtr AgStkGatorLib::IAgVAMCSInitialState::GetUserVariables ( ) {
    struct IAgVAUserVariableCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableCollectionPtr(_result, false);
}

//
// interface _IAgVASpacecraftParameters wrapper method implementations
//

#pragma implementation_key(4577)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetDryMass ( ) {
    double _result = 0;
    HRESULT _hr = get_DryMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4578)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutDryMass ( double pVal ) {
    HRESULT _hr = put_DryMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4579)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4580)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutCd ( double pVal ) {
    HRESULT _hr = put_Cd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4581)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetDragArea ( ) {
    double _result = 0;
    HRESULT _hr = get_DragArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4582)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutDragArea ( double pVal ) {
    HRESULT _hr = put_DragArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4583)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4584)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutCr ( double pVal ) {
    HRESULT _hr = put_Cr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4585)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetSolarRadiationPressureArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadiationPressureArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4586)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutSolarRadiationPressureArea ( double pVal ) {
    HRESULT _hr = put_SolarRadiationPressureArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4587)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetCk ( ) {
    double _result = 0;
    HRESULT _hr = get_Ck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4588)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutCk ( double pVal ) {
    HRESULT _hr = put_Ck(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4589)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetRadiationPressureArea ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiationPressureArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4590)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutRadiationPressureArea ( double pVal ) {
    HRESULT _hr = put_RadiationPressureArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4591)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4592)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutK1 ( double pVal ) {
    HRESULT _hr = put_K1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4593)
inline double AgStkGatorLib::_IAgVASpacecraftParameters::GetK2 ( ) {
    double _result = 0;
    HRESULT _hr = get_K2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4594)
inline void AgStkGatorLib::_IAgVASpacecraftParameters::PutK2 ( double pVal ) {
    HRESULT _hr = put_K2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4595)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVASpacecraftParameters::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAFuelTank wrapper method implementations
//

#pragma implementation_key(4596)
inline double AgStkGatorLib::_IAgVAFuelTank::GetTankPressure ( ) {
    double _result = 0;
    HRESULT _hr = get_TankPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4597)
inline void AgStkGatorLib::_IAgVAFuelTank::PutTankPressure ( double pVal ) {
    HRESULT _hr = put_TankPressure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4598)
inline double AgStkGatorLib::_IAgVAFuelTank::GetTankVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_TankVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4599)
inline void AgStkGatorLib::_IAgVAFuelTank::PutTankVolume ( double pVal ) {
    HRESULT _hr = put_TankVolume(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4600)
inline double AgStkGatorLib::_IAgVAFuelTank::GetTankTemperature ( ) {
    double _result = 0;
    HRESULT _hr = get_TankTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4601)
inline void AgStkGatorLib::_IAgVAFuelTank::PutTankTemperature ( double pVal ) {
    HRESULT _hr = put_TankTemperature(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4602)
inline double AgStkGatorLib::_IAgVAFuelTank::GetFuelDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4603)
inline void AgStkGatorLib::_IAgVAFuelTank::PutFuelDensity ( double pVal ) {
    HRESULT _hr = put_FuelDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4604)
inline double AgStkGatorLib::_IAgVAFuelTank::GetFuelMass ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4605)
inline void AgStkGatorLib::_IAgVAFuelTank::PutFuelMass ( double pVal ) {
    HRESULT _hr = put_FuelMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4606)
inline double AgStkGatorLib::_IAgVAFuelTank::GetMaximumFuelMass ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumFuelMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4607)
inline void AgStkGatorLib::_IAgVAFuelTank::PutMaximumFuelMass ( double pVal ) {
    HRESULT _hr = put_MaximumFuelMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4608)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAFuelTank::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAElementCartesian wrapper method implementations
//

#pragma implementation_key(4609)
inline double AgStkGatorLib::_IAgVAElementCartesian::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4610)
inline void AgStkGatorLib::_IAgVAElementCartesian::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4611)
inline double AgStkGatorLib::_IAgVAElementCartesian::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4612)
inline void AgStkGatorLib::_IAgVAElementCartesian::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4613)
inline double AgStkGatorLib::_IAgVAElementCartesian::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4614)
inline void AgStkGatorLib::_IAgVAElementCartesian::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4615)
inline double AgStkGatorLib::_IAgVAElementCartesian::GetVx ( ) {
    double _result = 0;
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4616)
inline void AgStkGatorLib::_IAgVAElementCartesian::PutVx ( double pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4617)
inline double AgStkGatorLib::_IAgVAElementCartesian::GetVy ( ) {
    double _result = 0;
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4618)
inline void AgStkGatorLib::_IAgVAElementCartesian::PutVy ( double pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4619)
inline double AgStkGatorLib::_IAgVAElementCartesian::GetVz ( ) {
    double _result = 0;
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4620)
inline void AgStkGatorLib::_IAgVAElementCartesian::PutVz ( double pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4621)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAElementCartesian::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAElementCartesian wrapper method implementations
//

#pragma implementation_key(4622)
inline double AgStkGatorLib::IAgVAElementCartesian::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4623)
inline void AgStkGatorLib::IAgVAElementCartesian::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4624)
inline double AgStkGatorLib::IAgVAElementCartesian::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4625)
inline void AgStkGatorLib::IAgVAElementCartesian::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4626)
inline double AgStkGatorLib::IAgVAElementCartesian::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4627)
inline void AgStkGatorLib::IAgVAElementCartesian::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4628)
inline double AgStkGatorLib::IAgVAElementCartesian::GetVx ( ) {
    double _result = 0;
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4629)
inline void AgStkGatorLib::IAgVAElementCartesian::PutVx ( double pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4630)
inline double AgStkGatorLib::IAgVAElementCartesian::GetVy ( ) {
    double _result = 0;
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4631)
inline void AgStkGatorLib::IAgVAElementCartesian::PutVy ( double pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4632)
inline double AgStkGatorLib::IAgVAElementCartesian::GetVz ( ) {
    double _result = 0;
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4633)
inline void AgStkGatorLib::IAgVAElementCartesian::PutVz ( double pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementKeplerian wrapper method implementations
//

#pragma implementation_key(4634)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4635)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4636)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4637)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4638)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4639)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4640)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4641)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4642)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4643)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4644)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4645)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4646)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetApoapsisAltitudeSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisAltitudeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4647)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutApoapsisAltitudeSize ( double pVal ) {
    HRESULT _hr = put_ApoapsisAltitudeSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4648)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetApoapsisRadiusSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisRadiusSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4649)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutApoapsisRadiusSize ( double pVal ) {
    HRESULT _hr = put_ApoapsisRadiusSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4650)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetMeanMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4651)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutMeanMotion ( double pVal ) {
    HRESULT _hr = put_MeanMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4652)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetPeriapsisAltitudeSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisAltitudeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4653)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutPeriapsisAltitudeSize ( double pVal ) {
    HRESULT _hr = put_PeriapsisAltitudeSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4654)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetPeriapsisRadiusSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisRadiusSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4655)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutPeriapsisRadiusSize ( double pVal ) {
    HRESULT _hr = put_PeriapsisRadiusSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4656)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4657)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutPeriod ( double pVal ) {
    HRESULT _hr = put_Period(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4658)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetLAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4659)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutLAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_LAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4660)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetArgOfLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4661)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutArgOfLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4662)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetEccentricAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EccentricAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4663)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutEccentricAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_EccentricAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4664)
inline _variant_t AgStkGatorLib::_IAgVAElementKeplerian::GetMeanAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4665)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutMeanAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4666)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetTimePastAscNode ( ) {
    double _result = 0;
    HRESULT _hr = get_TimePastAscNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4667)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutTimePastAscNode ( double pVal ) {
    HRESULT _hr = put_TimePastAscNode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4668)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetTimePastPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_TimePastPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4669)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutTimePastPeriapsis ( double pVal ) {
    HRESULT _hr = put_TimePastPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4670)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::_IAgVAElementKeplerian::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4671)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4672)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetApoapsisAltitudeShape ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisAltitudeShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4673)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutApoapsisAltitudeShape ( double pVal ) {
    HRESULT _hr = put_ApoapsisAltitudeShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4674)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetApoapsisRadiusShape ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisRadiusShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4675)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutApoapsisRadiusShape ( double pVal ) {
    HRESULT _hr = put_ApoapsisRadiusShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4676)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetPeriapsisAltitudeShape ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisAltitudeShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4677)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutPeriapsisAltitudeShape ( double pVal ) {
    HRESULT _hr = put_PeriapsisAltitudeShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4678)
inline double AgStkGatorLib::_IAgVAElementKeplerian::GetPeriapsisRadiusShape ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisRadiusShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4679)
inline void AgStkGatorLib::_IAgVAElementKeplerian::PutPeriapsisRadiusShape ( double pVal ) {
    HRESULT _hr = put_PeriapsisRadiusShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementKeplerian wrapper method implementations
//

#pragma implementation_key(4680)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4681)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4682)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4683)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4684)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4685)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4686)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4687)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4688)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4689)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4690)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4691)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4692)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetApoapsisAltitudeSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisAltitudeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4693)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutApoapsisAltitudeSize ( double pVal ) {
    HRESULT _hr = put_ApoapsisAltitudeSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4694)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetApoapsisRadiusSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisRadiusSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4695)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutApoapsisRadiusSize ( double pVal ) {
    HRESULT _hr = put_ApoapsisRadiusSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4696)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetMeanMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4697)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutMeanMotion ( double pVal ) {
    HRESULT _hr = put_MeanMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4698)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetPeriapsisAltitudeSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisAltitudeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4699)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutPeriapsisAltitudeSize ( double pVal ) {
    HRESULT _hr = put_PeriapsisAltitudeSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4700)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetPeriapsisRadiusSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisRadiusSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4701)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutPeriapsisRadiusSize ( double pVal ) {
    HRESULT _hr = put_PeriapsisRadiusSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4702)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4703)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutPeriod ( double pVal ) {
    HRESULT _hr = put_Period(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4704)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetLAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4705)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutLAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_LAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4706)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetArgOfLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4707)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutArgOfLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4708)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetEccentricAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EccentricAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4709)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutEccentricAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_EccentricAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4710)
inline _variant_t AgStkGatorLib::IAgVAElementKeplerian::GetMeanAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4711)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutMeanAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4712)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetTimePastAscNode ( ) {
    double _result = 0;
    HRESULT _hr = get_TimePastAscNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4713)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutTimePastAscNode ( double pVal ) {
    HRESULT _hr = put_TimePastAscNode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4714)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetTimePastPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_TimePastPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4715)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutTimePastPeriapsis ( double pVal ) {
    HRESULT _hr = put_TimePastPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4716)
inline enum AgStkGatorLib::AgEVAElement AgStkGatorLib::IAgVAElementKeplerian::GetElementType ( ) {
    enum AgEVAElement _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4717)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutElementType ( enum AgEVAElement pVal ) {
    HRESULT _hr = put_ElementType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4718)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetApoapsisAltitudeShape ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisAltitudeShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4719)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutApoapsisAltitudeShape ( double pVal ) {
    HRESULT _hr = put_ApoapsisAltitudeShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4720)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetApoapsisRadiusShape ( ) {
    double _result = 0;
    HRESULT _hr = get_ApoapsisRadiusShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4721)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutApoapsisRadiusShape ( double pVal ) {
    HRESULT _hr = put_ApoapsisRadiusShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4722)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetPeriapsisAltitudeShape ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisAltitudeShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4723)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutPeriapsisAltitudeShape ( double pVal ) {
    HRESULT _hr = put_PeriapsisAltitudeShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4724)
inline double AgStkGatorLib::IAgVAElementKeplerian::GetPeriapsisRadiusShape ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriapsisRadiusShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4725)
inline void AgStkGatorLib::IAgVAElementKeplerian::PutPeriapsisRadiusShape ( double pVal ) {
    HRESULT _hr = put_PeriapsisRadiusShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementModifiedKeplerian wrapper method implementations
//

#pragma implementation_key(4726)
inline double AgStkGatorLib::_IAgVAElementModifiedKeplerian::GetRadiusOfPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4727)
inline void AgStkGatorLib::_IAgVAElementModifiedKeplerian::PutRadiusOfPeriapsis ( double pVal ) {
    HRESULT _hr = put_RadiusOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4728)
inline double AgStkGatorLib::_IAgVAElementModifiedKeplerian::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4729)
inline void AgStkGatorLib::_IAgVAElementModifiedKeplerian::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4730)
inline _variant_t AgStkGatorLib::_IAgVAElementModifiedKeplerian::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4731)
inline void AgStkGatorLib::_IAgVAElementModifiedKeplerian::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4732)
inline _variant_t AgStkGatorLib::_IAgVAElementModifiedKeplerian::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4733)
inline void AgStkGatorLib::_IAgVAElementModifiedKeplerian::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4734)
inline _variant_t AgStkGatorLib::_IAgVAElementModifiedKeplerian::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4735)
inline void AgStkGatorLib::_IAgVAElementModifiedKeplerian::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4736)
inline _variant_t AgStkGatorLib::_IAgVAElementModifiedKeplerian::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4737)
inline void AgStkGatorLib::_IAgVAElementModifiedKeplerian::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementModifiedKeplerian wrapper method implementations
//

#pragma implementation_key(4738)
inline double AgStkGatorLib::IAgVAElementModifiedKeplerian::GetRadiusOfPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4739)
inline void AgStkGatorLib::IAgVAElementModifiedKeplerian::PutRadiusOfPeriapsis ( double pVal ) {
    HRESULT _hr = put_RadiusOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4740)
inline double AgStkGatorLib::IAgVAElementModifiedKeplerian::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4741)
inline void AgStkGatorLib::IAgVAElementModifiedKeplerian::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4742)
inline _variant_t AgStkGatorLib::IAgVAElementModifiedKeplerian::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4743)
inline void AgStkGatorLib::IAgVAElementModifiedKeplerian::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4744)
inline _variant_t AgStkGatorLib::IAgVAElementModifiedKeplerian::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4745)
inline void AgStkGatorLib::IAgVAElementModifiedKeplerian::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4746)
inline _variant_t AgStkGatorLib::IAgVAElementModifiedKeplerian::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4747)
inline void AgStkGatorLib::IAgVAElementModifiedKeplerian::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4748)
inline _variant_t AgStkGatorLib::IAgVAElementModifiedKeplerian::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4749)
inline void AgStkGatorLib::IAgVAElementModifiedKeplerian::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementEquinoctial wrapper method implementations
//

#pragma implementation_key(4750)
inline double AgStkGatorLib::_IAgVAElementEquinoctial::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4751)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4752)
inline double AgStkGatorLib::_IAgVAElementEquinoctial::GetMeanMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4753)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::PutMeanMotion ( double pVal ) {
    HRESULT _hr = put_MeanMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4754)
inline double AgStkGatorLib::_IAgVAElementEquinoctial::Geth ( ) {
    double _result = 0;
    HRESULT _hr = get_h(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4755)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::Puth ( double pVal ) {
    HRESULT _hr = put_h(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4756)
inline double AgStkGatorLib::_IAgVAElementEquinoctial::Getk ( ) {
    double _result = 0;
    HRESULT _hr = get_k(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4757)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::Putk ( double pVal ) {
    HRESULT _hr = put_k(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4758)
inline double AgStkGatorLib::_IAgVAElementEquinoctial::Getp ( ) {
    double _result = 0;
    HRESULT _hr = get_p(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4759)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::Putp ( double pVal ) {
    HRESULT _hr = put_p(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4760)
inline double AgStkGatorLib::_IAgVAElementEquinoctial::Getq ( ) {
    double _result = 0;
    HRESULT _hr = get_q(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4761)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::Putq ( double pVal ) {
    HRESULT _hr = put_q(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4762)
inline _variant_t AgStkGatorLib::_IAgVAElementEquinoctial::GetMeanLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4763)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::PutMeanLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4764)
inline enum AgStkGatorLib::AgEVAFormulation AgStkGatorLib::_IAgVAElementEquinoctial::GetFormulation ( ) {
    enum AgEVAFormulation _result;
    HRESULT _hr = get_Formulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4765)
inline void AgStkGatorLib::_IAgVAElementEquinoctial::PutFormulation ( enum AgEVAFormulation pVal ) {
    HRESULT _hr = put_Formulation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementEquinoctial wrapper method implementations
//

#pragma implementation_key(4766)
inline double AgStkGatorLib::IAgVAElementEquinoctial::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4767)
inline void AgStkGatorLib::IAgVAElementEquinoctial::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4768)
inline double AgStkGatorLib::IAgVAElementEquinoctial::GetMeanMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4769)
inline void AgStkGatorLib::IAgVAElementEquinoctial::PutMeanMotion ( double pVal ) {
    HRESULT _hr = put_MeanMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4770)
inline double AgStkGatorLib::IAgVAElementEquinoctial::Geth ( ) {
    double _result = 0;
    HRESULT _hr = get_h(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4771)
inline void AgStkGatorLib::IAgVAElementEquinoctial::Puth ( double pVal ) {
    HRESULT _hr = put_h(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4772)
inline double AgStkGatorLib::IAgVAElementEquinoctial::Getk ( ) {
    double _result = 0;
    HRESULT _hr = get_k(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4773)
inline void AgStkGatorLib::IAgVAElementEquinoctial::Putk ( double pVal ) {
    HRESULT _hr = put_k(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4774)
inline double AgStkGatorLib::IAgVAElementEquinoctial::Getp ( ) {
    double _result = 0;
    HRESULT _hr = get_p(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4775)
inline void AgStkGatorLib::IAgVAElementEquinoctial::Putp ( double pVal ) {
    HRESULT _hr = put_p(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4776)
inline double AgStkGatorLib::IAgVAElementEquinoctial::Getq ( ) {
    double _result = 0;
    HRESULT _hr = get_q(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4777)
inline void AgStkGatorLib::IAgVAElementEquinoctial::Putq ( double pVal ) {
    HRESULT _hr = put_q(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4778)
inline _variant_t AgStkGatorLib::IAgVAElementEquinoctial::GetMeanLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4779)
inline void AgStkGatorLib::IAgVAElementEquinoctial::PutMeanLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4780)
inline enum AgStkGatorLib::AgEVAFormulation AgStkGatorLib::IAgVAElementEquinoctial::GetFormulation ( ) {
    enum AgEVAFormulation _result;
    HRESULT _hr = get_Formulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4781)
inline void AgStkGatorLib::IAgVAElementEquinoctial::PutFormulation ( enum AgEVAFormulation pVal ) {
    HRESULT _hr = put_Formulation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementDelaunay wrapper method implementations
//

#pragma implementation_key(4782)
inline _variant_t AgStkGatorLib::_IAgVAElementDelaunay::GetMeanAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4783)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutMeanAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4784)
inline _variant_t AgStkGatorLib::_IAgVAElementDelaunay::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4785)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4786)
inline _variant_t AgStkGatorLib::_IAgVAElementDelaunay::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4787)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4788)
inline double AgStkGatorLib::_IAgVAElementDelaunay::GetDelaunayL ( ) {
    double _result = 0;
    HRESULT _hr = get_DelaunayL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4789)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutDelaunayL ( double pVal ) {
    HRESULT _hr = put_DelaunayL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4790)
inline double AgStkGatorLib::_IAgVAElementDelaunay::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4791)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4792)
inline double AgStkGatorLib::_IAgVAElementDelaunay::GetDelaunayG ( ) {
    double _result = 0;
    HRESULT _hr = get_DelaunayG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4793)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutDelaunayG ( double pVal ) {
    HRESULT _hr = put_DelaunayG(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4794)
inline double AgStkGatorLib::_IAgVAElementDelaunay::GetSemilatusRectum ( ) {
    double _result = 0;
    HRESULT _hr = get_SemilatusRectum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4795)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutSemilatusRectum ( double pVal ) {
    HRESULT _hr = put_SemilatusRectum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4796)
inline double AgStkGatorLib::_IAgVAElementDelaunay::GetDelaunayH ( ) {
    double _result = 0;
    HRESULT _hr = get_DelaunayH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4797)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutDelaunayH ( double pVal ) {
    HRESULT _hr = put_DelaunayH(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4798)
inline _variant_t AgStkGatorLib::_IAgVAElementDelaunay::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4799)
inline void AgStkGatorLib::_IAgVAElementDelaunay::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementDelaunay wrapper method implementations
//

#pragma implementation_key(4800)
inline _variant_t AgStkGatorLib::IAgVAElementDelaunay::GetMeanAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4801)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutMeanAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4802)
inline _variant_t AgStkGatorLib::IAgVAElementDelaunay::GetArgOfPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4803)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutArgOfPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4804)
inline _variant_t AgStkGatorLib::IAgVAElementDelaunay::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4805)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4806)
inline double AgStkGatorLib::IAgVAElementDelaunay::GetDelaunayL ( ) {
    double _result = 0;
    HRESULT _hr = get_DelaunayL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4807)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutDelaunayL ( double pVal ) {
    HRESULT _hr = put_DelaunayL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4808)
inline double AgStkGatorLib::IAgVAElementDelaunay::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4809)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4810)
inline double AgStkGatorLib::IAgVAElementDelaunay::GetDelaunayG ( ) {
    double _result = 0;
    HRESULT _hr = get_DelaunayG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4811)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutDelaunayG ( double pVal ) {
    HRESULT _hr = put_DelaunayG(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4812)
inline double AgStkGatorLib::IAgVAElementDelaunay::GetSemilatusRectum ( ) {
    double _result = 0;
    HRESULT _hr = get_SemilatusRectum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4813)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutSemilatusRectum ( double pVal ) {
    HRESULT _hr = put_SemilatusRectum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4814)
inline double AgStkGatorLib::IAgVAElementDelaunay::GetDelaunayH ( ) {
    double _result = 0;
    HRESULT _hr = get_DelaunayH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4815)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutDelaunayH ( double pVal ) {
    HRESULT _hr = put_DelaunayH(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4816)
inline _variant_t AgStkGatorLib::IAgVAElementDelaunay::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4817)
inline void AgStkGatorLib::IAgVAElementDelaunay::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementMixedSpherical wrapper method implementations
//

#pragma implementation_key(4818)
inline _variant_t AgStkGatorLib::_IAgVAElementMixedSpherical::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4819)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4820)
inline _variant_t AgStkGatorLib::_IAgVAElementMixedSpherical::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4821)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4822)
inline double AgStkGatorLib::_IAgVAElementMixedSpherical::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4823)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4824)
inline _variant_t AgStkGatorLib::_IAgVAElementMixedSpherical::GetHorizontalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4825)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutHorizontalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_HorizontalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4826)
inline _variant_t AgStkGatorLib::_IAgVAElementMixedSpherical::GetVelocityAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4827)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutVelocityAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4828)
inline double AgStkGatorLib::_IAgVAElementMixedSpherical::GetVelocityMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_VelocityMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4829)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutVelocityMagnitude ( double pVal ) {
    HRESULT _hr = put_VelocityMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4830)
inline _variant_t AgStkGatorLib::_IAgVAElementMixedSpherical::GetVerticalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4831)
inline void AgStkGatorLib::_IAgVAElementMixedSpherical::PutVerticalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementMixedSpherical wrapper method implementations
//

#pragma implementation_key(4832)
inline _variant_t AgStkGatorLib::IAgVAElementMixedSpherical::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4833)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4834)
inline _variant_t AgStkGatorLib::IAgVAElementMixedSpherical::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4835)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4836)
inline double AgStkGatorLib::IAgVAElementMixedSpherical::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4837)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4838)
inline _variant_t AgStkGatorLib::IAgVAElementMixedSpherical::GetHorizontalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4839)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutHorizontalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_HorizontalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4840)
inline _variant_t AgStkGatorLib::IAgVAElementMixedSpherical::GetVelocityAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4841)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutVelocityAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4842)
inline double AgStkGatorLib::IAgVAElementMixedSpherical::GetVelocityMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_VelocityMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4843)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutVelocityMagnitude ( double pVal ) {
    HRESULT _hr = put_VelocityMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4844)
inline _variant_t AgStkGatorLib::IAgVAElementMixedSpherical::GetVerticalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4845)
inline void AgStkGatorLib::IAgVAElementMixedSpherical::PutVerticalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementSpherical wrapper method implementations
//

#pragma implementation_key(4846)
inline _variant_t AgStkGatorLib::_IAgVAElementSpherical::GetRightAscension ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4847)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutRightAscension ( const _variant_t & pVal ) {
    HRESULT _hr = put_RightAscension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4848)
inline _variant_t AgStkGatorLib::_IAgVAElementSpherical::GetDeclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Declination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4849)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutDeclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Declination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4850)
inline double AgStkGatorLib::_IAgVAElementSpherical::GetRadiusMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4851)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutRadiusMagnitude ( double pVal ) {
    HRESULT _hr = put_RadiusMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4852)
inline _variant_t AgStkGatorLib::_IAgVAElementSpherical::GetHorizontalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4853)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutHorizontalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_HorizontalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4854)
inline _variant_t AgStkGatorLib::_IAgVAElementSpherical::GetVelocityAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4855)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutVelocityAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4856)
inline double AgStkGatorLib::_IAgVAElementSpherical::GetVelocityMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_VelocityMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4857)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutVelocityMagnitude ( double pVal ) {
    HRESULT _hr = put_VelocityMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4858)
inline _variant_t AgStkGatorLib::_IAgVAElementSpherical::GetVerticalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4859)
inline void AgStkGatorLib::_IAgVAElementSpherical::PutVerticalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementSpherical wrapper method implementations
//

#pragma implementation_key(4860)
inline _variant_t AgStkGatorLib::IAgVAElementSpherical::GetRightAscension ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4861)
inline void AgStkGatorLib::IAgVAElementSpherical::PutRightAscension ( const _variant_t & pVal ) {
    HRESULT _hr = put_RightAscension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4862)
inline _variant_t AgStkGatorLib::IAgVAElementSpherical::GetDeclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Declination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4863)
inline void AgStkGatorLib::IAgVAElementSpherical::PutDeclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Declination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4864)
inline double AgStkGatorLib::IAgVAElementSpherical::GetRadiusMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4865)
inline void AgStkGatorLib::IAgVAElementSpherical::PutRadiusMagnitude ( double pVal ) {
    HRESULT _hr = put_RadiusMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4866)
inline _variant_t AgStkGatorLib::IAgVAElementSpherical::GetHorizontalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4867)
inline void AgStkGatorLib::IAgVAElementSpherical::PutHorizontalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_HorizontalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4868)
inline _variant_t AgStkGatorLib::IAgVAElementSpherical::GetVelocityAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4869)
inline void AgStkGatorLib::IAgVAElementSpherical::PutVelocityAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4870)
inline double AgStkGatorLib::IAgVAElementSpherical::GetVelocityMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_VelocityMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4871)
inline void AgStkGatorLib::IAgVAElementSpherical::PutVelocityMagnitude ( double pVal ) {
    HRESULT _hr = put_VelocityMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4872)
inline _variant_t AgStkGatorLib::IAgVAElementSpherical::GetVerticalFlightPathAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalFlightPathAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4873)
inline void AgStkGatorLib::IAgVAElementSpherical::PutVerticalFlightPathAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalFlightPathAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementTargetVectorIncomingAsymptote wrapper method implementations
//

#pragma implementation_key(4874)
inline double AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::GetRadiusOfPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4875)
inline void AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::PutRadiusOfPeriapsis ( double pVal ) {
    HRESULT _hr = put_RadiusOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4876)
inline double AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::GetC3Energy ( ) {
    double _result = 0;
    HRESULT _hr = get_C3Energy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4877)
inline void AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::PutC3Energy ( double pVal ) {
    HRESULT _hr = put_C3Energy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4878)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::GetRAIncomingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAIncomingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4879)
inline void AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::PutRAIncomingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAIncomingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4880)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::GetDeclinationIncomingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DeclinationIncomingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4881)
inline void AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::PutDeclinationIncomingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_DeclinationIncomingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4882)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::GetVelocityAzimuthPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuthPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4883)
inline void AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::PutVelocityAzimuthPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuthPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4884)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4885)
inline void AgStkGatorLib::_IAgVAElementTargetVectorIncomingAsymptote::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementTargetVectorIncomingAsymptote wrapper method implementations
//

#pragma implementation_key(4886)
inline double AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::GetRadiusOfPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4887)
inline void AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::PutRadiusOfPeriapsis ( double pVal ) {
    HRESULT _hr = put_RadiusOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4888)
inline double AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::GetC3Energy ( ) {
    double _result = 0;
    HRESULT _hr = get_C3Energy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4889)
inline void AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::PutC3Energy ( double pVal ) {
    HRESULT _hr = put_C3Energy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4890)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::GetRAIncomingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAIncomingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4891)
inline void AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::PutRAIncomingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAIncomingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4892)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::GetDeclinationIncomingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DeclinationIncomingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4893)
inline void AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::PutDeclinationIncomingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_DeclinationIncomingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4894)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::GetVelocityAzimuthPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuthPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4895)
inline void AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::PutVelocityAzimuthPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuthPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4896)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4897)
inline void AgStkGatorLib::IAgVAElementTargetVectorIncomingAsymptote::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementTargetVectorOutgoingAsymptote wrapper method implementations
//

#pragma implementation_key(4898)
inline double AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::GetRadiusOfPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4899)
inline void AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::PutRadiusOfPeriapsis ( double pVal ) {
    HRESULT _hr = put_RadiusOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4900)
inline double AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::GetC3Energy ( ) {
    double _result = 0;
    HRESULT _hr = get_C3Energy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4901)
inline void AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::PutC3Energy ( double pVal ) {
    HRESULT _hr = put_C3Energy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4902)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::GetRAOutgoingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAOutgoingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4903)
inline void AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::PutRAOutgoingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAOutgoingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4904)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::GetDeclinationOutgoingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DeclinationOutgoingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4905)
inline void AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::PutDeclinationOutgoingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_DeclinationOutgoingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4906)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::GetVelocityAzimuthPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuthPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4907)
inline void AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::PutVelocityAzimuthPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuthPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4908)
inline _variant_t AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4909)
inline void AgStkGatorLib::_IAgVAElementTargetVectorOutgoingAsymptote::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementTargetVectorOutgoingAsymptote wrapper method implementations
//

#pragma implementation_key(4910)
inline double AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::GetRadiusOfPeriapsis ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOfPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4911)
inline void AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::PutRadiusOfPeriapsis ( double pVal ) {
    HRESULT _hr = put_RadiusOfPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4912)
inline double AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::GetC3Energy ( ) {
    double _result = 0;
    HRESULT _hr = get_C3Energy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4913)
inline void AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::PutC3Energy ( double pVal ) {
    HRESULT _hr = put_C3Energy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4914)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::GetRAOutgoingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAOutgoingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4915)
inline void AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::PutRAOutgoingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAOutgoingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4916)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::GetDeclinationOutgoingAsymptote ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DeclinationOutgoingAsymptote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4917)
inline void AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::PutDeclinationOutgoingAsymptote ( const _variant_t & pVal ) {
    HRESULT _hr = put_DeclinationOutgoingAsymptote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4918)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::GetVelocityAzimuthPeriapsis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VelocityAzimuthPeriapsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4919)
inline void AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::PutVelocityAzimuthPeriapsis ( const _variant_t & pVal ) {
    HRESULT _hr = put_VelocityAzimuthPeriapsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4920)
inline _variant_t AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::GetTrueAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TrueAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4921)
inline void AgStkGatorLib::IAgVAElementTargetVectorOutgoingAsymptote::PutTrueAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_TrueAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAElementGeodetic wrapper method implementations
//

#pragma implementation_key(4922)
inline _variant_t AgStkGatorLib::_IAgVAElementGeodetic::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4923)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4924)
inline _variant_t AgStkGatorLib::_IAgVAElementGeodetic::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4925)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4926)
inline double AgStkGatorLib::_IAgVAElementGeodetic::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4927)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4928)
inline double AgStkGatorLib::_IAgVAElementGeodetic::GetRadiusMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4929)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutRadiusMagnitude ( double pVal ) {
    HRESULT _hr = put_RadiusMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4930)
inline double AgStkGatorLib::_IAgVAElementGeodetic::GetLatitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_LatitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4931)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutLatitudeRate ( double pVal ) {
    HRESULT _hr = put_LatitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4932)
inline double AgStkGatorLib::_IAgVAElementGeodetic::GetLongitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_LongitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4933)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutLongitudeRate ( double pVal ) {
    HRESULT _hr = put_LongitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4934)
inline double AgStkGatorLib::_IAgVAElementGeodetic::GetAltitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4935)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutAltitudeRate ( double pVal ) {
    HRESULT _hr = put_AltitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4936)
inline double AgStkGatorLib::_IAgVAElementGeodetic::GetRadiusRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4937)
inline void AgStkGatorLib::_IAgVAElementGeodetic::PutRadiusRate ( double pVal ) {
    HRESULT _hr = put_RadiusRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAElementGeodetic wrapper method implementations
//

#pragma implementation_key(4938)
inline _variant_t AgStkGatorLib::IAgVAElementGeodetic::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4939)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4940)
inline _variant_t AgStkGatorLib::IAgVAElementGeodetic::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4941)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4942)
inline double AgStkGatorLib::IAgVAElementGeodetic::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4943)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4944)
inline double AgStkGatorLib::IAgVAElementGeodetic::GetRadiusMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4945)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutRadiusMagnitude ( double pVal ) {
    HRESULT _hr = put_RadiusMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4946)
inline double AgStkGatorLib::IAgVAElementGeodetic::GetLatitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_LatitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4947)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutLatitudeRate ( double pVal ) {
    HRESULT _hr = put_LatitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4948)
inline double AgStkGatorLib::IAgVAElementGeodetic::GetLongitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_LongitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4949)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutLongitudeRate ( double pVal ) {
    HRESULT _hr = put_LongitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4950)
inline double AgStkGatorLib::IAgVAElementGeodetic::GetAltitudeRate ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4951)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutAltitudeRate ( double pVal ) {
    HRESULT _hr = put_AltitudeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4952)
inline double AgStkGatorLib::IAgVAElementGeodetic::GetRadiusRate ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4953)
inline void AgStkGatorLib::IAgVAElementGeodetic::PutRadiusRate ( double pVal ) {
    HRESULT _hr = put_RadiusRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAStoppingConditionComponent wrapper method implementations
//

#pragma implementation_key(4954)
inline enum AgStkGatorLib::AgEVAStoppingCondition AgStkGatorLib::IAgVAStoppingConditionComponent::GetStoppingConditionType ( ) {
    enum AgEVAStoppingCondition _result;
    HRESULT _hr = get_StoppingConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAStoppingConditionElement wrapper method implementations
//

#pragma implementation_key(4955)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStoppingConditionElement::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4956)
inline void AgStkGatorLib::IAgVAStoppingConditionElement::PutActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4957)
inline HRESULT AgStkGatorLib::IAgVAStoppingConditionElement::EnableControlParameter ( enum AgEVAControlStoppingCondition Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4958)
inline HRESULT AgStkGatorLib::IAgVAStoppingConditionElement::DisableControlParameter ( enum AgEVAControlStoppingCondition Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4959)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStoppingConditionElement::IsControlParameterEnabled ( enum AgEVAControlStoppingCondition Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4960)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStoppingConditionElement::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4961)
inline AgStkGatorLib::IAgVAStoppingConditionComponentPtr AgStkGatorLib::IAgVAStoppingConditionElement::GetProperties ( ) {
    struct IAgVAStoppingConditionComponent * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionComponentPtr(_result, false);
}

//
// interface IAgVAStoppingConditionCollection wrapper method implementations
//

#pragma implementation_key(4962)
inline AgStkGatorLib::IAgVAStoppingConditionElementPtr AgStkGatorLib::IAgVAStoppingConditionCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAStoppingConditionElement * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionElementPtr(_result, false);
}

#pragma implementation_key(4963)
inline AgStkGatorLib::IAgVAStoppingConditionElementPtr AgStkGatorLib::IAgVAStoppingConditionCollection::Add ( _bstr_t ConditionName ) {
    struct IAgVAStoppingConditionElement * _result = 0;
    HRESULT _hr = raw_Add(ConditionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionElementPtr(_result, false);
}

#pragma implementation_key(4964)
inline HRESULT AgStkGatorLib::IAgVAStoppingConditionCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4965)
inline IUnknownPtr AgStkGatorLib::IAgVAStoppingConditionCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4966)
inline long AgStkGatorLib::IAgVAStoppingConditionCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4967)
inline HRESULT AgStkGatorLib::IAgVAStoppingConditionCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4968)
inline AgStkGatorLib::IAgVAStoppingConditionElementPtr AgStkGatorLib::IAgVAStoppingConditionCollection::Paste ( ) {
    struct IAgVAStoppingConditionElement * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionElementPtr(_result, false);
}

#pragma implementation_key(4969)
inline AgStkGatorLib::IAgVAStoppingConditionElementPtr AgStkGatorLib::IAgVAStoppingConditionCollection::InsertCopy ( struct IAgVAStoppingConditionElement * StopCond ) {
    struct IAgVAStoppingConditionElement * _result = 0;
    HRESULT _hr = raw_InsertCopy(StopCond, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionElementPtr(_result, false);
}

//
// interface _IAgVAMCSPropagate wrapper method implementations
//

#pragma implementation_key(4970)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSPropagate::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4971)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSPropagate::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(4972)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSPropagate::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4973)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSPropagate::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4974)
inline _variant_t AgStkGatorLib::_IAgVAMCSPropagate::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4975)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSPropagate::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(4976)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSPropagate::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(4977)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSPropagate::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(4978)
inline _bstr_t AgStkGatorLib::_IAgVAMCSPropagate::GetPropagatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropagatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4979)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutPropagatorName ( _bstr_t pVal ) {
    HRESULT _hr = put_PropagatorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4980)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAMCSPropagate::GetStoppingConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_StoppingConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(4981)
inline double AgStkGatorLib::_IAgVAMCSPropagate::GetMinPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4982)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutMinPropagationTime ( double pVal ) {
    HRESULT _hr = put_MinPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4983)
inline double AgStkGatorLib::_IAgVAMCSPropagate::GetMaxPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4984)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutMaxPropagationTime ( double pVal ) {
    HRESULT _hr = put_MaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4985)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSPropagate::GetEnableMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4986)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutEnableMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4987)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSPropagate::GetEnableWarningMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWarningMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4988)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutEnableWarningMessage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWarningMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4989)
inline HRESULT AgStkGatorLib::_IAgVAMCSPropagate::EnableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4990)
inline HRESULT AgStkGatorLib::_IAgVAMCSPropagate::DisableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4991)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSPropagate::IsControlParameterEnabled ( enum AgEVAControlAdvanced Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4992)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSPropagate::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4993)
inline _bstr_t AgStkGatorLib::_IAgVAMCSPropagate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4994)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4995)
inline _bstr_t AgStkGatorLib::_IAgVAMCSPropagate::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4996)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4997)
inline _bstr_t AgStkGatorLib::_IAgVAMCSPropagate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4998)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSPropagate::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4999)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSPropagate::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5000)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSPropagate::GetOverrideMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5001)
inline void AgStkGatorLib::_IAgVAMCSPropagate::PutOverrideMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OverrideMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5002)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSPropagate::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSPropagate wrapper method implementations
//

#pragma implementation_key(5003)
inline _bstr_t AgStkGatorLib::IAgVAMCSPropagate::GetPropagatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropagatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5004)
inline void AgStkGatorLib::IAgVAMCSPropagate::PutPropagatorName ( _bstr_t pVal ) {
    HRESULT _hr = put_PropagatorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5005)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAMCSPropagate::GetStoppingConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_StoppingConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5006)
inline double AgStkGatorLib::IAgVAMCSPropagate::GetMinPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5007)
inline void AgStkGatorLib::IAgVAMCSPropagate::PutMinPropagationTime ( double pVal ) {
    HRESULT _hr = put_MinPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5008)
inline double AgStkGatorLib::IAgVAMCSPropagate::GetMaxPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5009)
inline void AgStkGatorLib::IAgVAMCSPropagate::PutMaxPropagationTime ( double pVal ) {
    HRESULT _hr = put_MaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5010)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSPropagate::GetEnableMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5011)
inline void AgStkGatorLib::IAgVAMCSPropagate::PutEnableMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5012)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSPropagate::GetEnableWarningMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWarningMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5013)
inline void AgStkGatorLib::IAgVAMCSPropagate::PutEnableWarningMessage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWarningMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5014)
inline HRESULT AgStkGatorLib::IAgVAMCSPropagate::EnableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5015)
inline HRESULT AgStkGatorLib::IAgVAMCSPropagate::DisableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5016)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSPropagate::IsControlParameterEnabled ( enum AgEVAControlAdvanced Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5017)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSPropagate::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5018)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSPropagate::GetOverrideMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5019)
inline void AgStkGatorLib::IAgVAMCSPropagate::PutOverrideMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OverrideMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAState wrapper method implementations
//

#pragma implementation_key(5020)
inline enum AgStkGatorLib::AgEVAElementType AgStkGatorLib::_IAgVAState::GetElementType ( ) {
    enum AgEVAElementType _result;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5021)
inline HRESULT AgStkGatorLib::_IAgVAState::SetElementType ( enum AgEVAElementType ElementType ) {
    HRESULT _hr = raw_SetElementType(ElementType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5022)
inline AgStkGatorLib::IAgVAElementPtr AgStkGatorLib::_IAgVAState::GetElement ( ) {
    struct IAgVAElement * _result = 0;
    HRESULT _hr = get_Element(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAElementPtr(_result, false);
}

#pragma implementation_key(5023)
inline _variant_t AgStkGatorLib::_IAgVAState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5024)
inline void AgStkGatorLib::_IAgVAState::PutEpoch ( const _variant_t & pEpoch ) {
    HRESULT _hr = put_Epoch(pEpoch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5025)
inline _bstr_t AgStkGatorLib::_IAgVAState::GetCoordSystemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5026)
inline double AgStkGatorLib::_IAgVAState::GetDryMass ( ) {
    double _result = 0;
    HRESULT _hr = get_DryMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5027)
inline void AgStkGatorLib::_IAgVAState::PutDryMass ( double pDryMass ) {
    HRESULT _hr = put_DryMass(pDryMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5028)
inline double AgStkGatorLib::_IAgVAState::GetFuelMass ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5029)
inline void AgStkGatorLib::_IAgVAState::PutFuelMass ( double pFuelMass ) {
    HRESULT _hr = put_FuelMass(pFuelMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5030)
inline double AgStkGatorLib::_IAgVAState::GetDragArea ( ) {
    double _result = 0;
    HRESULT _hr = get_DragArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5031)
inline void AgStkGatorLib::_IAgVAState::PutDragArea ( double pFuelMass ) {
    HRESULT _hr = put_DragArea(pFuelMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5032)
inline double AgStkGatorLib::_IAgVAState::GetSRPArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SRPArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5033)
inline void AgStkGatorLib::_IAgVAState::PutSRPArea ( double pSRPArea ) {
    HRESULT _hr = put_SRPArea(pSRPArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5034)
inline double AgStkGatorLib::_IAgVAState::GetTankPressure ( ) {
    double _result = 0;
    HRESULT _hr = get_TankPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5035)
inline void AgStkGatorLib::_IAgVAState::PutTankPressure ( double pTankPressure ) {
    HRESULT _hr = put_TankPressure(pTankPressure);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5036)
inline double AgStkGatorLib::_IAgVAState::GetTankTemperature ( ) {
    double _result = 0;
    HRESULT _hr = get_TankTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5037)
inline void AgStkGatorLib::_IAgVAState::PutTankTemperature ( double pTankTemperature ) {
    HRESULT _hr = put_TankTemperature(pTankTemperature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5038)
inline double AgStkGatorLib::_IAgVAState::GetFuelDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_FuelDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5039)
inline void AgStkGatorLib::_IAgVAState::PutFuelDensity ( double pFuelDensity ) {
    HRESULT _hr = put_FuelDensity(pFuelDensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5040)
inline double AgStkGatorLib::_IAgVAState::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5041)
inline void AgStkGatorLib::_IAgVAState::PutCr ( double pCr ) {
    HRESULT _hr = put_Cr(pCr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5042)
inline double AgStkGatorLib::_IAgVAState::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5043)
inline void AgStkGatorLib::_IAgVAState::PutCd ( double pCd ) {
    HRESULT _hr = put_Cd(pCd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5044)
inline double AgStkGatorLib::_IAgVAState::GetRadiationPressureCoeff ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiationPressureCoeff(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5045)
inline void AgStkGatorLib::_IAgVAState::PutRadiationPressureCoeff ( double pRadiationPressureCoeff ) {
    HRESULT _hr = put_RadiationPressureCoeff(pRadiationPressureCoeff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5046)
inline double AgStkGatorLib::_IAgVAState::GetRadiationPressureArea ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiationPressureArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5047)
inline void AgStkGatorLib::_IAgVAState::PutRadiationPressureArea ( double pRadiationPressureArea ) {
    HRESULT _hr = put_RadiationPressureArea(pRadiationPressureArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5048)
inline double AgStkGatorLib::_IAgVAState::GetK1 ( ) {
    double _result = 0;
    HRESULT _hr = get_K1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5049)
inline void AgStkGatorLib::_IAgVAState::PutK1 ( double pK1 ) {
    HRESULT _hr = put_K1(pK1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5050)
inline double AgStkGatorLib::_IAgVAState::GetK2 ( ) {
    double _result = 0;
    HRESULT _hr = get_K2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5051)
inline void AgStkGatorLib::_IAgVAState::PutK2 ( double pK2 ) {
    HRESULT _hr = put_K2(pK2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5052)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAState::GetInFrameName ( _bstr_t FrameName ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_GetInFrameName(FrameName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5053)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAState::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAAccessStoppingCondition wrapper method implementations
//

#pragma implementation_key(5054)
inline _bstr_t AgStkGatorLib::_IAgVAAccessStoppingCondition::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5055)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5056)
inline _bstr_t AgStkGatorLib::_IAgVAAccessStoppingCondition::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5057)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5058)
inline _bstr_t AgStkGatorLib::_IAgVAAccessStoppingCondition::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5059)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAAccessStoppingCondition::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5060)
inline IUnknownPtr AgStkGatorLib::_IAgVAAccessStoppingCondition::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5061)
inline enum AgStkGatorLib::AgEVAStoppingCondition AgStkGatorLib::_IAgVAAccessStoppingCondition::GetStoppingConditionType ( ) {
    enum AgEVAStoppingCondition _result;
    HRESULT _hr = get_StoppingConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5062)
inline double AgStkGatorLib::_IAgVAAccessStoppingCondition::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5063)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5064)
inline double AgStkGatorLib::_IAgVAAccessStoppingCondition::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5065)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5066)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAAccessStoppingCondition::GetInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5067)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutInherited ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherited(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5068)
inline double AgStkGatorLib::_IAgVAAccessStoppingCondition::GetMaxTripTimes ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTripTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5069)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutMaxTripTimes ( double pVal ) {
    HRESULT _hr = put_MaxTripTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5070)
inline _bstr_t AgStkGatorLib::_IAgVAAccessStoppingCondition::GetSequence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5071)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutSequence ( _bstr_t pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5072)
inline AgStkGatorLib::IAgVAConstraintCollectionPtr AgStkGatorLib::_IAgVAAccessStoppingCondition::GetConstraints ( ) {
    struct IAgVAConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAConstraintCollectionPtr(_result, false);
}

#pragma implementation_key(5073)
inline enum AgStkGatorLib::AgEVAAccessCriterion AgStkGatorLib::_IAgVAAccessStoppingCondition::GetCriterion ( ) {
    enum AgEVAAccessCriterion _result;
    HRESULT _hr = get_Criterion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5074)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutCriterion ( enum AgEVAAccessCriterion pVal ) {
    HRESULT _hr = put_Criterion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5075)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAAccessStoppingCondition::GetBeforeConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_BeforeConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5076)
inline enum STKObjects::AgEAberrationType AgStkGatorLib::_IAgVAAccessStoppingCondition::GetAberrationType ( ) {
    enum STKObjects::AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5077)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutAberrationType ( enum STKObjects::AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5078)
inline HRESULT AgStkGatorLib::_IAgVAAccessStoppingCondition::SetBaseSelection ( enum AgEVABaseSelection Selection ) {
    HRESULT _hr = raw_SetBaseSelection(Selection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5079)
inline enum AgStkGatorLib::AgEVABaseSelection AgStkGatorLib::_IAgVAAccessStoppingCondition::GetBaseSelectionType ( ) {
    enum AgEVABaseSelection _result;
    HRESULT _hr = get_BaseSelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5080)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAAccessStoppingCondition::GetBaseSelection ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_BaseSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(5081)
inline enum STKObjects::AgEIvClockHost AgStkGatorLib::_IAgVAAccessStoppingCondition::GetClockHost ( ) {
    enum STKObjects::AgEIvClockHost _result;
    HRESULT _hr = get_ClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5082)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutClockHost ( enum STKObjects::AgEIvClockHost pVal ) {
    HRESULT _hr = put_ClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5083)
inline enum STKObjects::AgEIvTimeSense AgStkGatorLib::_IAgVAAccessStoppingCondition::GetSignalSense ( ) {
    enum STKObjects::AgEIvTimeSense _result;
    HRESULT _hr = get_SignalSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5084)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutSignalSense ( enum STKObjects::AgEIvTimeSense pVal ) {
    HRESULT _hr = put_SignalSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5085)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAAccessStoppingCondition::GetTargetObject ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(5086)
inline double AgStkGatorLib::_IAgVAAccessStoppingCondition::GetTimeDelayConvergenceTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergenceTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5087)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutTimeDelayConvergenceTolerance ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergenceTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5088)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAAccessStoppingCondition::GetUseLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5089)
inline void AgStkGatorLib::_IAgVAAccessStoppingCondition::PutUseLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5090)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAccessStoppingCondition::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAAccessStoppingCondition wrapper method implementations
//

#pragma implementation_key(5091)
inline double AgStkGatorLib::IAgVAAccessStoppingCondition::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5092)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5093)
inline double AgStkGatorLib::IAgVAAccessStoppingCondition::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5094)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5095)
inline VARIANT_BOOL AgStkGatorLib::IAgVAAccessStoppingCondition::GetInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5096)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutInherited ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherited(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5097)
inline double AgStkGatorLib::IAgVAAccessStoppingCondition::GetMaxTripTimes ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTripTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5098)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutMaxTripTimes ( double pVal ) {
    HRESULT _hr = put_MaxTripTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5099)
inline _bstr_t AgStkGatorLib::IAgVAAccessStoppingCondition::GetSequence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5100)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutSequence ( _bstr_t pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5101)
inline AgStkGatorLib::IAgVAConstraintCollectionPtr AgStkGatorLib::IAgVAAccessStoppingCondition::GetConstraints ( ) {
    struct IAgVAConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAConstraintCollectionPtr(_result, false);
}

#pragma implementation_key(5102)
inline enum AgStkGatorLib::AgEVAAccessCriterion AgStkGatorLib::IAgVAAccessStoppingCondition::GetCriterion ( ) {
    enum AgEVAAccessCriterion _result;
    HRESULT _hr = get_Criterion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5103)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutCriterion ( enum AgEVAAccessCriterion pVal ) {
    HRESULT _hr = put_Criterion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5104)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAAccessStoppingCondition::GetBeforeConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_BeforeConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5105)
inline enum STKObjects::AgEAberrationType AgStkGatorLib::IAgVAAccessStoppingCondition::GetAberrationType ( ) {
    enum STKObjects::AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5106)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutAberrationType ( enum STKObjects::AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5107)
inline HRESULT AgStkGatorLib::IAgVAAccessStoppingCondition::SetBaseSelection ( enum AgEVABaseSelection Selection ) {
    HRESULT _hr = raw_SetBaseSelection(Selection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5108)
inline enum AgStkGatorLib::AgEVABaseSelection AgStkGatorLib::IAgVAAccessStoppingCondition::GetBaseSelectionType ( ) {
    enum AgEVABaseSelection _result;
    HRESULT _hr = get_BaseSelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5109)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAAccessStoppingCondition::GetBaseSelection ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_BaseSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(5110)
inline enum STKObjects::AgEIvClockHost AgStkGatorLib::IAgVAAccessStoppingCondition::GetClockHost ( ) {
    enum STKObjects::AgEIvClockHost _result;
    HRESULT _hr = get_ClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5111)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutClockHost ( enum STKObjects::AgEIvClockHost pVal ) {
    HRESULT _hr = put_ClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5112)
inline enum STKObjects::AgEIvTimeSense AgStkGatorLib::IAgVAAccessStoppingCondition::GetSignalSense ( ) {
    enum STKObjects::AgEIvTimeSense _result;
    HRESULT _hr = get_SignalSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5113)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutSignalSense ( enum STKObjects::AgEIvTimeSense pVal ) {
    HRESULT _hr = put_SignalSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5114)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAAccessStoppingCondition::GetTargetObject ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(5115)
inline double AgStkGatorLib::IAgVAAccessStoppingCondition::GetTimeDelayConvergenceTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergenceTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5116)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutTimeDelayConvergenceTolerance ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergenceTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5117)
inline VARIANT_BOOL AgStkGatorLib::IAgVAAccessStoppingCondition::GetUseLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5118)
inline void AgStkGatorLib::IAgVAAccessStoppingCondition::PutUseLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVALightingStoppingCondition wrapper method implementations
//

#pragma implementation_key(5119)
inline _bstr_t AgStkGatorLib::_IAgVALightingStoppingCondition::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5120)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5121)
inline _bstr_t AgStkGatorLib::_IAgVALightingStoppingCondition::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5122)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5123)
inline _bstr_t AgStkGatorLib::_IAgVALightingStoppingCondition::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5124)
inline VARIANT_BOOL AgStkGatorLib::_IAgVALightingStoppingCondition::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5125)
inline IUnknownPtr AgStkGatorLib::_IAgVALightingStoppingCondition::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5126)
inline enum AgStkGatorLib::AgEVAStoppingCondition AgStkGatorLib::_IAgVALightingStoppingCondition::GetStoppingConditionType ( ) {
    enum AgEVAStoppingCondition _result;
    HRESULT _hr = get_StoppingConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5127)
inline double AgStkGatorLib::_IAgVALightingStoppingCondition::GetMaxTripTimes ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTripTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5128)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutMaxTripTimes ( double pVal ) {
    HRESULT _hr = put_MaxTripTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5129)
inline double AgStkGatorLib::_IAgVALightingStoppingCondition::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5130)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5131)
inline AgStkGatorLib::IAgVAConstraintCollectionPtr AgStkGatorLib::_IAgVALightingStoppingCondition::GetConstraints ( ) {
    struct IAgVAConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAConstraintCollectionPtr(_result, false);
}

#pragma implementation_key(5132)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVALightingStoppingCondition::GetBeforeConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_BeforeConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5133)
inline VARIANT_BOOL AgStkGatorLib::_IAgVALightingStoppingCondition::GetInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5134)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutInherited ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherited(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5135)
inline _bstr_t AgStkGatorLib::_IAgVALightingStoppingCondition::GetSequence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5136)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutSequence ( _bstr_t pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5137)
inline enum AgStkGatorLib::AgEVALightingCondition AgStkGatorLib::_IAgVALightingStoppingCondition::GetCondition ( ) {
    enum AgEVALightingCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5138)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutCondition ( enum AgEVALightingCondition pVal ) {
    HRESULT _hr = put_Condition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5139)
inline enum AgStkGatorLib::AgEVAEclipsingBodiesSource AgStkGatorLib::_IAgVALightingStoppingCondition::GetEclipsingBodiesListSource ( ) {
    enum AgEVAEclipsingBodiesSource _result;
    HRESULT _hr = get_EclipsingBodiesListSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5140)
inline void AgStkGatorLib::_IAgVALightingStoppingCondition::PutEclipsingBodiesListSource ( enum AgEVAEclipsingBodiesSource pVal ) {
    HRESULT _hr = put_EclipsingBodiesListSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5141)
inline HRESULT AgStkGatorLib::_IAgVALightingStoppingCondition::AddEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_AddEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5142)
inline HRESULT AgStkGatorLib::_IAgVALightingStoppingCondition::RemoveEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_RemoveEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5143)
inline SAFEARRAY * AgStkGatorLib::_IAgVALightingStoppingCondition::GetEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5144)
inline SAFEARRAY * AgStkGatorLib::_IAgVALightingStoppingCondition::GetAvailableEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableEclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5145)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVALightingStoppingCondition::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVALightingStoppingCondition wrapper method implementations
//

#pragma implementation_key(5146)
inline double AgStkGatorLib::IAgVALightingStoppingCondition::GetMaxTripTimes ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTripTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5147)
inline void AgStkGatorLib::IAgVALightingStoppingCondition::PutMaxTripTimes ( double pVal ) {
    HRESULT _hr = put_MaxTripTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5148)
inline double AgStkGatorLib::IAgVALightingStoppingCondition::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5149)
inline void AgStkGatorLib::IAgVALightingStoppingCondition::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5150)
inline AgStkGatorLib::IAgVAConstraintCollectionPtr AgStkGatorLib::IAgVALightingStoppingCondition::GetConstraints ( ) {
    struct IAgVAConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAConstraintCollectionPtr(_result, false);
}

#pragma implementation_key(5151)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVALightingStoppingCondition::GetBeforeConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_BeforeConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5152)
inline VARIANT_BOOL AgStkGatorLib::IAgVALightingStoppingCondition::GetInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5153)
inline void AgStkGatorLib::IAgVALightingStoppingCondition::PutInherited ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherited(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5154)
inline _bstr_t AgStkGatorLib::IAgVALightingStoppingCondition::GetSequence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5155)
inline void AgStkGatorLib::IAgVALightingStoppingCondition::PutSequence ( _bstr_t pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5156)
inline enum AgStkGatorLib::AgEVALightingCondition AgStkGatorLib::IAgVALightingStoppingCondition::GetCondition ( ) {
    enum AgEVALightingCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5157)
inline void AgStkGatorLib::IAgVALightingStoppingCondition::PutCondition ( enum AgEVALightingCondition pVal ) {
    HRESULT _hr = put_Condition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5158)
inline enum AgStkGatorLib::AgEVAEclipsingBodiesSource AgStkGatorLib::IAgVALightingStoppingCondition::GetEclipsingBodiesListSource ( ) {
    enum AgEVAEclipsingBodiesSource _result;
    HRESULT _hr = get_EclipsingBodiesListSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5159)
inline void AgStkGatorLib::IAgVALightingStoppingCondition::PutEclipsingBodiesListSource ( enum AgEVAEclipsingBodiesSource pVal ) {
    HRESULT _hr = put_EclipsingBodiesListSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5160)
inline HRESULT AgStkGatorLib::IAgVALightingStoppingCondition::AddEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_AddEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5161)
inline HRESULT AgStkGatorLib::IAgVALightingStoppingCondition::RemoveEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_RemoveEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5162)
inline SAFEARRAY * AgStkGatorLib::IAgVALightingStoppingCondition::GetEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5163)
inline SAFEARRAY * AgStkGatorLib::IAgVALightingStoppingCondition::GetAvailableEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableEclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAStoppingCondition wrapper method implementations
//

#pragma implementation_key(5164)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5165)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5166)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5167)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5168)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5169)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStoppingCondition::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5170)
inline IUnknownPtr AgStkGatorLib::_IAgVAStoppingCondition::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5171)
inline enum AgStkGatorLib::AgEVAStoppingCondition AgStkGatorLib::_IAgVAStoppingCondition::GetStoppingConditionType ( ) {
    enum AgEVAStoppingCondition _result;
    HRESULT _hr = get_StoppingConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5172)
inline _variant_t AgStkGatorLib::_IAgVAStoppingCondition::GetTrip ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Trip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5173)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutTrip ( const _variant_t & pVal ) {
    HRESULT _hr = put_Trip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5174)
inline double AgStkGatorLib::_IAgVAStoppingCondition::GetTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5175)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutTolerance ( double pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5176)
inline double AgStkGatorLib::_IAgVAStoppingCondition::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5177)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5178)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStoppingCondition::GetInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5179)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutInherited ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherited(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5180)
inline double AgStkGatorLib::_IAgVAStoppingCondition::GetMaxTripTimes ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTripTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5181)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutMaxTripTimes ( double pVal ) {
    HRESULT _hr = put_MaxTripTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5182)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetCoordSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5183)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutCoordSystem ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5184)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetSequence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5185)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutSequence ( _bstr_t pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5186)
inline AgStkGatorLib::IAgVAConstraintCollectionPtr AgStkGatorLib::_IAgVAStoppingCondition::GetConstraints ( ) {
    struct IAgVAConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAConstraintCollectionPtr(_result, false);
}

#pragma implementation_key(5187)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetUserCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5188)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutUserCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_UserCalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5189)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::_IAgVAStoppingCondition::GetUserCalcObject ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_UserCalcObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(5190)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutUserCalcObject ( struct STKObjects::IAgComponentInfo * ppComponentInfo ) {
    HRESULT _hr = put_UserCalcObject(ppComponentInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5191)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5192)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5193)
inline enum AgStkGatorLib::AgEVACriterion AgStkGatorLib::_IAgVAStoppingCondition::GetCriterion ( ) {
    enum AgEVACriterion _result;
    HRESULT _hr = get_Criterion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5194)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutCriterion ( enum AgEVACriterion pVal ) {
    HRESULT _hr = put_Criterion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5195)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAStoppingCondition::GetBeforeConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_BeforeConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5196)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5197)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAStoppingCondition::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5198)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingCondition::GetReferencePoint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferencePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5199)
inline void AgStkGatorLib::_IAgVAStoppingCondition::PutReferencePoint ( _bstr_t pRetVal ) {
    HRESULT _hr = put_ReferencePoint(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5200)
inline HRESULT AgStkGatorLib::_IAgVAStoppingCondition::CopyUserCalcObjectToClipboard ( ) {
    HRESULT _hr = raw_CopyUserCalcObjectToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5201)
inline HRESULT AgStkGatorLib::_IAgVAStoppingCondition::PasteUserCalcObjectFromClipboard ( ) {
    HRESULT _hr = raw_PasteUserCalcObjectFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVAStoppingCondition wrapper method implementations
//

#pragma implementation_key(5202)
inline _variant_t AgStkGatorLib::IAgVAStoppingCondition::GetTrip ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Trip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5203)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutTrip ( const _variant_t & pVal ) {
    HRESULT _hr = put_Trip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5204)
inline double AgStkGatorLib::IAgVAStoppingCondition::GetTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5205)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutTolerance ( double pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5206)
inline double AgStkGatorLib::IAgVAStoppingCondition::GetRepeatCount ( ) {
    double _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5207)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutRepeatCount ( double pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5208)
inline VARIANT_BOOL AgStkGatorLib::IAgVAStoppingCondition::GetInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5209)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutInherited ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherited(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5210)
inline double AgStkGatorLib::IAgVAStoppingCondition::GetMaxTripTimes ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTripTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5211)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutMaxTripTimes ( double pVal ) {
    HRESULT _hr = put_MaxTripTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5212)
inline _bstr_t AgStkGatorLib::IAgVAStoppingCondition::GetCoordSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5213)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutCoordSystem ( _bstr_t pVal ) {
    HRESULT _hr = put_CoordSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5214)
inline _bstr_t AgStkGatorLib::IAgVAStoppingCondition::GetSequence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5215)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutSequence ( _bstr_t pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5216)
inline AgStkGatorLib::IAgVAConstraintCollectionPtr AgStkGatorLib::IAgVAStoppingCondition::GetConstraints ( ) {
    struct IAgVAConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAConstraintCollectionPtr(_result, false);
}

#pragma implementation_key(5217)
inline _bstr_t AgStkGatorLib::IAgVAStoppingCondition::GetUserCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5218)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutUserCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_UserCalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5219)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAStoppingCondition::GetUserCalcObject ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_UserCalcObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(5220)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutUserCalcObject ( struct STKObjects::IAgComponentInfo * ppComponentInfo ) {
    HRESULT _hr = put_UserCalcObject(ppComponentInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5221)
inline _bstr_t AgStkGatorLib::IAgVAStoppingCondition::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5222)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5223)
inline enum AgStkGatorLib::AgEVACriterion AgStkGatorLib::IAgVAStoppingCondition::GetCriterion ( ) {
    enum AgEVACriterion _result;
    HRESULT _hr = get_Criterion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5224)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutCriterion ( enum AgEVACriterion pVal ) {
    HRESULT _hr = put_Criterion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5225)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAStoppingCondition::GetBeforeConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_BeforeConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5226)
inline _bstr_t AgStkGatorLib::IAgVAStoppingCondition::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5227)
inline _bstr_t AgStkGatorLib::IAgVAStoppingCondition::GetReferencePoint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferencePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5228)
inline void AgStkGatorLib::IAgVAStoppingCondition::PutReferencePoint ( _bstr_t pRetVal ) {
    HRESULT _hr = put_ReferencePoint(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5229)
inline HRESULT AgStkGatorLib::IAgVAStoppingCondition::CopyUserCalcObjectToClipboard ( ) {
    HRESULT _hr = raw_CopyUserCalcObjectToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5230)
inline HRESULT AgStkGatorLib::IAgVAStoppingCondition::PasteUserCalcObjectFromClipboard ( ) {
    HRESULT _hr = raw_PasteUserCalcObjectFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVAStoppingConditionElement wrapper method implementations
//

#pragma implementation_key(5231)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStoppingConditionElement::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5232)
inline void AgStkGatorLib::_IAgVAStoppingConditionElement::PutActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5233)
inline HRESULT AgStkGatorLib::_IAgVAStoppingConditionElement::EnableControlParameter ( enum AgEVAControlStoppingCondition Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5234)
inline HRESULT AgStkGatorLib::_IAgVAStoppingConditionElement::DisableControlParameter ( enum AgEVAControlStoppingCondition Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5235)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStoppingConditionElement::IsControlParameterEnabled ( enum AgEVAControlStoppingCondition Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5236)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStoppingConditionElement::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5237)
inline AgStkGatorLib::IAgVAStoppingConditionComponentPtr AgStkGatorLib::_IAgVAStoppingConditionElement::GetProperties ( ) {
    struct IAgVAStoppingConditionComponent * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionComponentPtr(_result, false);
}

#pragma implementation_key(5238)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingConditionElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5239)
inline void AgStkGatorLib::_IAgVAStoppingConditionElement::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5240)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingConditionElement::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5241)
inline void AgStkGatorLib::_IAgVAStoppingConditionElement::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5242)
inline _bstr_t AgStkGatorLib::_IAgVAStoppingConditionElement::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5243)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAStoppingConditionElement::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5244)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAStoppingConditionElement::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAScriptingSegment wrapper method implementations
//

#pragma implementation_key(5245)
inline _bstr_t AgStkGatorLib::IAgVAScriptingSegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5246)
inline void AgStkGatorLib::IAgVAScriptingSegment::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5247)
inline _bstr_t AgStkGatorLib::IAgVAScriptingSegment::GetComponentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5248)
inline void AgStkGatorLib::IAgVAScriptingSegment::PutComponentName ( _bstr_t pVal ) {
    HRESULT _hr = put_ComponentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5249)
inline _bstr_t AgStkGatorLib::IAgVAScriptingSegment::GetAttribute ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Attribute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5250)
inline void AgStkGatorLib::IAgVAScriptingSegment::PutAttribute ( _bstr_t pVal ) {
    HRESULT _hr = put_Attribute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5251)
inline _bstr_t AgStkGatorLib::IAgVAScriptingSegment::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5252)
inline void AgStkGatorLib::IAgVAScriptingSegment::PutUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5253)
inline SAFEARRAY * AgStkGatorLib::IAgVAScriptingSegment::GetAvailableSegmentNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableSegmentNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5254)
inline SAFEARRAY * AgStkGatorLib::IAgVAScriptingSegment::GetAvailableAttributeValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttributeValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5255)
inline VARIANT_BOOL AgStkGatorLib::IAgVAScriptingSegment::GetReadOnlyProperty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnlyProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5256)
inline void AgStkGatorLib::IAgVAScriptingSegment::PutReadOnlyProperty ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ReadOnlyProperty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5257)
inline _bstr_t AgStkGatorLib::IAgVAScriptingSegment::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5258)
inline void AgStkGatorLib::IAgVAScriptingSegment::PutObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5259)
inline SAFEARRAY * AgStkGatorLib::IAgVAScriptingSegment::GetAvailableObjectNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjectNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAScriptingSegmentCollection wrapper method implementations
//

#pragma implementation_key(5260)
inline AgStkGatorLib::IAgVAScriptingSegmentPtr AgStkGatorLib::IAgVAScriptingSegmentCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAScriptingSegment * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentPtr(_result, false);
}

#pragma implementation_key(5261)
inline AgStkGatorLib::IAgVAScriptingSegmentPtr AgStkGatorLib::IAgVAScriptingSegmentCollection::Add ( _bstr_t ComponentName ) {
    struct IAgVAScriptingSegment * _result = 0;
    HRESULT _hr = raw_Add(ComponentName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentPtr(_result, false);
}

#pragma implementation_key(5262)
inline HRESULT AgStkGatorLib::IAgVAScriptingSegmentCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5263)
inline HRESULT AgStkGatorLib::IAgVAScriptingSegmentCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5264)
inline IUnknownPtr AgStkGatorLib::IAgVAScriptingSegmentCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5265)
inline long AgStkGatorLib::IAgVAScriptingSegmentCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5266)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVAScriptingSegmentCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5267)
inline HRESULT AgStkGatorLib::IAgVAScriptingSegmentCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5268)
inline AgStkGatorLib::IAgVAScriptingSegmentPtr AgStkGatorLib::IAgVAScriptingSegmentCollection::Paste ( ) {
    struct IAgVAScriptingSegment * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentPtr(_result, false);
}

#pragma implementation_key(5269)
inline AgStkGatorLib::IAgVAScriptingSegmentPtr AgStkGatorLib::IAgVAScriptingSegmentCollection::InsertCopy ( struct IAgVAScriptingSegment * ObjProperty ) {
    struct IAgVAScriptingSegment * _result = 0;
    HRESULT _hr = raw_InsertCopy(ObjProperty, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentPtr(_result, false);
}

//
// interface IAgVAScriptingCalcObject wrapper method implementations
//

#pragma implementation_key(5270)
inline _bstr_t AgStkGatorLib::IAgVAScriptingCalcObject::GetComponentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5271)
inline void AgStkGatorLib::IAgVAScriptingCalcObject::PutComponentName ( _bstr_t pVal ) {
    HRESULT _hr = put_ComponentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5272)
inline _bstr_t AgStkGatorLib::IAgVAScriptingCalcObject::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5273)
inline void AgStkGatorLib::IAgVAScriptingCalcObject::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5274)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::IAgVAScriptingCalcObject::GetCalcObject ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_CalcObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(5275)
inline void AgStkGatorLib::IAgVAScriptingCalcObject::PutCalcObject ( struct STKObjects::IAgComponentInfo * ppRetVal ) {
    HRESULT _hr = put_CalcObject(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5276)
inline _bstr_t AgStkGatorLib::IAgVAScriptingCalcObject::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5277)
inline void AgStkGatorLib::IAgVAScriptingCalcObject::PutUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5278)
inline HRESULT AgStkGatorLib::IAgVAScriptingCalcObject::CopyCalcObjectToClipboard ( ) {
    HRESULT _hr = raw_CopyCalcObjectToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5279)
inline HRESULT AgStkGatorLib::IAgVAScriptingCalcObject::PasteCalcObjectFromClipboard ( ) {
    HRESULT _hr = raw_PasteCalcObjectFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVAScriptingCalcObjectCollection wrapper method implementations
//

#pragma implementation_key(5280)
inline AgStkGatorLib::IAgVAScriptingCalcObjectPtr AgStkGatorLib::IAgVAScriptingCalcObjectCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAScriptingCalcObject * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectPtr(_result, false);
}

#pragma implementation_key(5281)
inline AgStkGatorLib::IAgVAScriptingCalcObjectPtr AgStkGatorLib::IAgVAScriptingCalcObjectCollection::Add ( _bstr_t ComponentName ) {
    struct IAgVAScriptingCalcObject * _result = 0;
    HRESULT _hr = raw_Add(ComponentName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectPtr(_result, false);
}

#pragma implementation_key(5282)
inline HRESULT AgStkGatorLib::IAgVAScriptingCalcObjectCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5283)
inline HRESULT AgStkGatorLib::IAgVAScriptingCalcObjectCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5284)
inline IUnknownPtr AgStkGatorLib::IAgVAScriptingCalcObjectCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5285)
inline long AgStkGatorLib::IAgVAScriptingCalcObjectCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5286)
inline HRESULT AgStkGatorLib::IAgVAScriptingCalcObjectCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5287)
inline AgStkGatorLib::IAgVAScriptingCalcObjectPtr AgStkGatorLib::IAgVAScriptingCalcObjectCollection::Paste ( ) {
    struct IAgVAScriptingCalcObject * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectPtr(_result, false);
}

#pragma implementation_key(5288)
inline AgStkGatorLib::IAgVAScriptingCalcObjectPtr AgStkGatorLib::IAgVAScriptingCalcObjectCollection::InsertCopy ( struct IAgVAScriptingCalcObject * CalcObj ) {
    struct IAgVAScriptingCalcObject * _result = 0;
    HRESULT _hr = raw_InsertCopy(CalcObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectPtr(_result, false);
}

//
// interface IAgVAScriptingParameterEnumerationChoice wrapper method implementations
//

#pragma implementation_key(5289)
inline _bstr_t AgStkGatorLib::IAgVAScriptingParameterEnumerationChoice::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5290)
inline void AgStkGatorLib::IAgVAScriptingParameterEnumerationChoice::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5291)
inline long AgStkGatorLib::IAgVAScriptingParameterEnumerationChoice::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5292)
inline void AgStkGatorLib::IAgVAScriptingParameterEnumerationChoice::PutValue ( long pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAScriptingParameterEnumerationChoiceCollection wrapper method implementations
//

#pragma implementation_key(5293)
inline AgStkGatorLib::IAgVAScriptingParameterEnumerationChoicePtr AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAScriptingParameterEnumerationChoice * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterEnumerationChoicePtr(_result, false);
}

#pragma implementation_key(5294)
inline AgStkGatorLib::IAgVAScriptingParameterEnumerationChoicePtr AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::Add ( _bstr_t ChoiceName ) {
    struct IAgVAScriptingParameterEnumerationChoice * _result = 0;
    HRESULT _hr = raw_Add(ChoiceName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterEnumerationChoicePtr(_result, false);
}

#pragma implementation_key(5295)
inline HRESULT AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5296)
inline IUnknownPtr AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5297)
inline long AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5298)
inline HRESULT AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5299)
inline AgStkGatorLib::IAgVAScriptingParameterEnumerationChoicePtr AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::Paste ( ) {
    struct IAgVAScriptingParameterEnumerationChoice * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterEnumerationChoicePtr(_result, false);
}

#pragma implementation_key(5300)
inline AgStkGatorLib::IAgVAScriptingParameterEnumerationChoicePtr AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::InsertCopy ( struct IAgVAScriptingParameterEnumerationChoice * Choice ) {
    struct IAgVAScriptingParameterEnumerationChoice * _result = 0;
    HRESULT _hr = raw_InsertCopy(Choice, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterEnumerationChoicePtr(_result, false);
}

#pragma implementation_key(5301)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAScriptingParameter wrapper method implementations
//

#pragma implementation_key(5302)
inline _bstr_t AgStkGatorLib::IAgVAScriptingParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5303)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5304)
inline double AgStkGatorLib::IAgVAScriptingParameter::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5305)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5306)
inline _variant_t AgStkGatorLib::IAgVAScriptingParameter::GetParamValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ParamValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5307)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutParamValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ParamValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5308)
inline _bstr_t AgStkGatorLib::IAgVAScriptingParameter::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5309)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5310)
inline enum AgStkGatorLib::AgEVAScriptingParameterType AgStkGatorLib::IAgVAScriptingParameter::GetType ( ) {
    enum AgEVAScriptingParameterType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5311)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutType ( enum AgEVAScriptingParameterType pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5312)
inline VARIANT_BOOL AgStkGatorLib::IAgVAScriptingParameter::GetInheritValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5313)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutInheritValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5314)
inline _bstr_t AgStkGatorLib::IAgVAScriptingParameter::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5315)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5316)
inline _bstr_t AgStkGatorLib::IAgVAScriptingParameter::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5317)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_Dimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5318)
inline AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollectionPtr AgStkGatorLib::IAgVAScriptingParameter::GetEnumerationChoices ( ) {
    struct IAgVAScriptingParameterEnumerationChoiceCollection * _result = 0;
    HRESULT _hr = get_EnumerationChoices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterEnumerationChoiceCollectionPtr(_result, false);
}

#pragma implementation_key(5319)
inline VARIANT_BOOL AgStkGatorLib::IAgVAScriptingParameter::GetUseMinValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5320)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutUseMinValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5321)
inline _variant_t AgStkGatorLib::IAgVAScriptingParameter::GetMinValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5322)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutMinValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5323)
inline VARIANT_BOOL AgStkGatorLib::IAgVAScriptingParameter::GetUseMaxValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5324)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutUseMaxValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5325)
inline _variant_t AgStkGatorLib::IAgVAScriptingParameter::GetMaxValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5326)
inline void AgStkGatorLib::IAgVAScriptingParameter::PutMaxValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAScriptingParameterCollection wrapper method implementations
//

#pragma implementation_key(5327)
inline AgStkGatorLib::IAgVAScriptingParameterPtr AgStkGatorLib::IAgVAScriptingParameterCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAScriptingParameter * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterPtr(_result, false);
}

#pragma implementation_key(5328)
inline AgStkGatorLib::IAgVAScriptingParameterPtr AgStkGatorLib::IAgVAScriptingParameterCollection::Add ( _bstr_t ParameterName ) {
    struct IAgVAScriptingParameter * _result = 0;
    HRESULT _hr = raw_Add(ParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterPtr(_result, false);
}

#pragma implementation_key(5329)
inline HRESULT AgStkGatorLib::IAgVAScriptingParameterCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5330)
inline HRESULT AgStkGatorLib::IAgVAScriptingParameterCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5331)
inline IUnknownPtr AgStkGatorLib::IAgVAScriptingParameterCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5332)
inline long AgStkGatorLib::IAgVAScriptingParameterCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5333)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVAScriptingParameterCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5334)
inline HRESULT AgStkGatorLib::IAgVAScriptingParameterCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5335)
inline AgStkGatorLib::IAgVAScriptingParameterPtr AgStkGatorLib::IAgVAScriptingParameterCollection::Paste ( ) {
    struct IAgVAScriptingParameter * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterPtr(_result, false);
}

#pragma implementation_key(5336)
inline AgStkGatorLib::IAgVAScriptingParameterPtr AgStkGatorLib::IAgVAScriptingParameterCollection::InsertCopy ( struct IAgVAScriptingParameter * Parameter ) {
    struct IAgVAScriptingParameter * _result = 0;
    HRESULT _hr = raw_InsertCopy(Parameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterPtr(_result, false);
}

//
// interface IAgVAScriptingTool wrapper method implementations
//

#pragma implementation_key(5337)
inline VARIANT_BOOL AgStkGatorLib::IAgVAScriptingTool::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5338)
inline void AgStkGatorLib::IAgVAScriptingTool::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5339)
inline AgStkGatorLib::IAgVAScriptingSegmentCollectionPtr AgStkGatorLib::IAgVAScriptingTool::GetSegmentProperties ( ) {
    struct IAgVAScriptingSegmentCollection * _result = 0;
    HRESULT _hr = get_SegmentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(5340)
inline AgStkGatorLib::IAgVAScriptingCalcObjectCollectionPtr AgStkGatorLib::IAgVAScriptingTool::GetCalcObjects ( ) {
    struct IAgVAScriptingCalcObjectCollection * _result = 0;
    HRESULT _hr = get_CalcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(5341)
inline AgStkGatorLib::IAgVAScriptingParameterCollectionPtr AgStkGatorLib::IAgVAScriptingTool::GetParameters ( ) {
    struct IAgVAScriptingParameterCollection * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterCollectionPtr(_result, false);
}

#pragma implementation_key(5342)
inline enum AgStkGatorLib::AgEVALanguage AgStkGatorLib::IAgVAScriptingTool::GetLanguageType ( ) {
    enum AgEVALanguage _result;
    HRESULT _hr = get_LanguageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5343)
inline void AgStkGatorLib::IAgVAScriptingTool::PutLanguageType ( enum AgEVALanguage pVal ) {
    HRESULT _hr = put_LanguageType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5344)
inline HRESULT AgStkGatorLib::IAgVAScriptingTool::ScriptText ( _bstr_t Script ) {
    HRESULT _hr = raw_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5345)
inline HRESULT AgStkGatorLib::IAgVAScriptingTool::CopyToClipboard ( ) {
    HRESULT _hr = raw_CopyToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5346)
inline HRESULT AgStkGatorLib::IAgVAScriptingTool::PasteFromClipboard ( ) {
    HRESULT _hr = raw_PasteFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5347)
inline VARIANT_BOOL AgStkGatorLib::IAgVAScriptingTool::GetPreIterate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreIterate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5348)
inline void AgStkGatorLib::IAgVAScriptingTool::PutPreIterate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PreIterate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAMCSSequence wrapper method implementations
//

#pragma implementation_key(5349)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSSequence::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5350)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSSequence::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(5351)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSSequence::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5352)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSSequence::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5353)
inline _variant_t AgStkGatorLib::_IAgVAMCSSequence::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5354)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSSequence::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5355)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSSequence::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(5356)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSSequence::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(5357)
inline long AgStkGatorLib::_IAgVAMCSSequence::GetRepeatCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5358)
inline void AgStkGatorLib::_IAgVAMCSSequence::PutRepeatCount ( long pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5359)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSSequence::GetGenerateEphemeris ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5360)
inline void AgStkGatorLib::_IAgVAMCSSequence::PutGenerateEphemeris ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateEphemeris(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5361)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::_IAgVAMCSSequence::GetSegments ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(5362)
inline enum AgStkGatorLib::AgEVASequenceStateToPass AgStkGatorLib::_IAgVAMCSSequence::GetSequenceStateToPass ( ) {
    enum AgEVASequenceStateToPass _result;
    HRESULT _hr = get_SequenceStateToPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5363)
inline void AgStkGatorLib::_IAgVAMCSSequence::PutSequenceStateToPass ( enum AgEVASequenceStateToPass pVal ) {
    HRESULT _hr = put_SequenceStateToPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5364)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAMCSSequence::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(5365)
inline HRESULT AgStkGatorLib::_IAgVAMCSSequence::ApplyScript ( ) {
    HRESULT _hr = raw_ApplyScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5366)
inline _bstr_t AgStkGatorLib::_IAgVAMCSSequence::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5367)
inline void AgStkGatorLib::_IAgVAMCSSequence::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5368)
inline _bstr_t AgStkGatorLib::_IAgVAMCSSequence::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5369)
inline void AgStkGatorLib::_IAgVAMCSSequence::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5370)
inline _bstr_t AgStkGatorLib::_IAgVAMCSSequence::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5371)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSSequence::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5372)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSSequence::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5373)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSSequence::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSSequence wrapper method implementations
//

#pragma implementation_key(5374)
inline long AgStkGatorLib::IAgVAMCSSequence::GetRepeatCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5375)
inline void AgStkGatorLib::IAgVAMCSSequence::PutRepeatCount ( long pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5376)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSSequence::GetGenerateEphemeris ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5377)
inline void AgStkGatorLib::IAgVAMCSSequence::PutGenerateEphemeris ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateEphemeris(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5378)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::IAgVAMCSSequence::GetSegments ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(5379)
inline enum AgStkGatorLib::AgEVASequenceStateToPass AgStkGatorLib::IAgVAMCSSequence::GetSequenceStateToPass ( ) {
    enum AgEVASequenceStateToPass _result;
    HRESULT _hr = get_SequenceStateToPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5380)
inline void AgStkGatorLib::IAgVAMCSSequence::PutSequenceStateToPass ( enum AgEVASequenceStateToPass pVal ) {
    HRESULT _hr = put_SequenceStateToPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5381)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::IAgVAMCSSequence::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(5382)
inline HRESULT AgStkGatorLib::IAgVAMCSSequence::ApplyScript ( ) {
    HRESULT _hr = raw_ApplyScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVAMCSBackwardSequence wrapper method implementations
//

#pragma implementation_key(5383)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSBackwardSequence::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5384)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(5385)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5386)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5387)
inline _variant_t AgStkGatorLib::_IAgVAMCSBackwardSequence::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5388)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSBackwardSequence::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5389)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(5390)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(5391)
inline long AgStkGatorLib::_IAgVAMCSBackwardSequence::GetRepeatCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5392)
inline void AgStkGatorLib::_IAgVAMCSBackwardSequence::PutRepeatCount ( long pVal ) {
    HRESULT _hr = put_RepeatCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5393)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSBackwardSequence::GetGenerateEphemeris ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5394)
inline void AgStkGatorLib::_IAgVAMCSBackwardSequence::PutGenerateEphemeris ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateEphemeris(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5395)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetSegments ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(5396)
inline enum AgStkGatorLib::AgEVASequenceStateToPass AgStkGatorLib::_IAgVAMCSBackwardSequence::GetSequenceStateToPass ( ) {
    enum AgEVASequenceStateToPass _result;
    HRESULT _hr = get_SequenceStateToPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5397)
inline void AgStkGatorLib::_IAgVAMCSBackwardSequence::PutSequenceStateToPass ( enum AgEVASequenceStateToPass pVal ) {
    HRESULT _hr = put_SequenceStateToPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5398)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(5399)
inline HRESULT AgStkGatorLib::_IAgVAMCSBackwardSequence::ApplyScript ( ) {
    HRESULT _hr = raw_ApplyScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5400)
inline _bstr_t AgStkGatorLib::_IAgVAMCSBackwardSequence::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5401)
inline void AgStkGatorLib::_IAgVAMCSBackwardSequence::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5402)
inline _bstr_t AgStkGatorLib::_IAgVAMCSBackwardSequence::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5403)
inline void AgStkGatorLib::_IAgVAMCSBackwardSequence::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5404)
inline _bstr_t AgStkGatorLib::_IAgVAMCSBackwardSequence::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5405)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSBackwardSequence::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5406)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5407)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSBackwardSequence::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVABurnoutVelocity wrapper method implementations
//

#pragma implementation_key(5408)
inline enum AgStkGatorLib::AgEVABurnoutOptions AgStkGatorLib::IAgVABurnoutVelocity::GetBurnoutOption ( ) {
    enum AgEVABurnoutOptions _result;
    HRESULT _hr = get_BurnoutOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5409)
inline void AgStkGatorLib::IAgVABurnoutVelocity::PutBurnoutOption ( enum AgEVABurnoutOptions pVal ) {
    HRESULT _hr = put_BurnoutOption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5410)
inline double AgStkGatorLib::IAgVABurnoutVelocity::GetFixedVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5411)
inline void AgStkGatorLib::IAgVABurnoutVelocity::PutFixedVelocity ( double pVal ) {
    HRESULT _hr = put_FixedVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5412)
inline double AgStkGatorLib::IAgVABurnoutVelocity::GetInertialVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_InertialVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5413)
inline void AgStkGatorLib::IAgVABurnoutVelocity::PutInertialVelocity ( double pVal ) {
    HRESULT _hr = put_InertialVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5414)
inline _variant_t AgStkGatorLib::IAgVABurnoutVelocity::GetInertialVelocityAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InertialVelocityAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5415)
inline void AgStkGatorLib::IAgVABurnoutVelocity::PutInertialVelocityAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_InertialVelocityAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5416)
inline _variant_t AgStkGatorLib::IAgVABurnoutVelocity::GetInertialHorizontalFPA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InertialHorizontalFPA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5417)
inline void AgStkGatorLib::IAgVABurnoutVelocity::PutInertialHorizontalFPA ( const _variant_t & pVal ) {
    HRESULT _hr = put_InertialHorizontalFPA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAMCSLaunch wrapper method implementations
//

#pragma implementation_key(5418)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSLaunch::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5419)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSLaunch::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(5420)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSLaunch::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5421)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSLaunch::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5422)
inline _variant_t AgStkGatorLib::_IAgVAMCSLaunch::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5423)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSLaunch::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5424)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSLaunch::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(5425)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSLaunch::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(5426)
inline _bstr_t AgStkGatorLib::_IAgVAMCSLaunch::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5427)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5428)
inline double AgStkGatorLib::_IAgVAMCSLaunch::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5429)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutStepSize ( double pVal ) {
    HRESULT _hr = put_StepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5430)
inline double AgStkGatorLib::_IAgVAMCSLaunch::GetPreLaunchTime ( ) {
    double _result = 0;
    HRESULT _hr = get_PreLaunchTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5431)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutPreLaunchTime ( double pVal ) {
    HRESULT _hr = put_PreLaunchTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5432)
inline _variant_t AgStkGatorLib::_IAgVAMCSLaunch::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5433)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5434)
inline HRESULT AgStkGatorLib::_IAgVAMCSLaunch::EnableControlParameter ( enum AgEVAControlLaunch Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5435)
inline HRESULT AgStkGatorLib::_IAgVAMCSLaunch::DisableControlParameter ( enum AgEVAControlLaunch Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5436)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSLaunch::IsControlParameterEnabled ( enum AgEVAControlLaunch Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5437)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSLaunch::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5438)
inline double AgStkGatorLib::_IAgVAMCSLaunch::GetInitialAcceleration ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5439)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutInitialAcceleration ( double pVal ) {
    HRESULT _hr = put_InitialAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5440)
inline AgStkGatorLib::IAgVASpacecraftParametersPtr AgStkGatorLib::_IAgVAMCSLaunch::GetSpacecraftParameters ( ) {
    struct IAgVASpacecraftParameters * _result = 0;
    HRESULT _hr = get_SpacecraftParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASpacecraftParametersPtr(_result, false);
}

#pragma implementation_key(5441)
inline AgStkGatorLib::IAgVAFuelTankPtr AgStkGatorLib::_IAgVAMCSLaunch::GetFuelTank ( ) {
    struct IAgVAFuelTank * _result = 0;
    HRESULT _hr = get_FuelTank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAFuelTankPtr(_result, false);
}

#pragma implementation_key(5442)
inline enum AgStkGatorLib::AgEVALaunchDisplaySystem AgStkGatorLib::_IAgVAMCSLaunch::GetDisplaySystemType ( ) {
    enum AgEVALaunchDisplaySystem _result;
    HRESULT _hr = get_DisplaySystemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5443)
inline HRESULT AgStkGatorLib::_IAgVAMCSLaunch::SetDisplaySystemType ( enum AgEVALaunchDisplaySystem DisplaySystemType ) {
    HRESULT _hr = raw_SetDisplaySystemType(DisplaySystemType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5444)
inline AgStkGatorLib::IAgVADisplaySystemPtr AgStkGatorLib::_IAgVAMCSLaunch::GetDisplaySystem ( ) {
    struct IAgVADisplaySystem * _result = 0;
    HRESULT _hr = get_DisplaySystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADisplaySystemPtr(_result, false);
}

#pragma implementation_key(5445)
inline enum AgStkGatorLib::AgEVAAscentType AgStkGatorLib::_IAgVAMCSLaunch::GetAscentType ( ) {
    enum AgEVAAscentType _result;
    HRESULT _hr = get_AscentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5446)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutAscentType ( enum AgEVAAscentType pVal ) {
    HRESULT _hr = put_AscentType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5447)
inline double AgStkGatorLib::_IAgVAMCSLaunch::GetTimeOfFlight ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfFlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5448)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutTimeOfFlight ( double pVal ) {
    HRESULT _hr = put_TimeOfFlight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5449)
inline enum AgStkGatorLib::AgEVABurnoutType AgStkGatorLib::_IAgVAMCSLaunch::GetBurnoutType ( ) {
    enum AgEVABurnoutType _result;
    HRESULT _hr = get_BurnoutType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5450)
inline HRESULT AgStkGatorLib::_IAgVAMCSLaunch::SetBurnoutType ( enum AgEVABurnoutType BurnoutType ) {
    HRESULT _hr = raw_SetBurnoutType(BurnoutType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5451)
inline AgStkGatorLib::IAgVABurnoutPtr AgStkGatorLib::_IAgVAMCSLaunch::GetBurnout ( ) {
    struct IAgVABurnout * _result = 0;
    HRESULT _hr = get_Burnout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVABurnoutPtr(_result, false);
}

#pragma implementation_key(5452)
inline AgStkGatorLib::IAgVABurnoutVelocityPtr AgStkGatorLib::_IAgVAMCSLaunch::GetBurnoutVelocity ( ) {
    struct IAgVABurnoutVelocity * _result = 0;
    HRESULT _hr = get_BurnoutVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVABurnoutVelocityPtr(_result, false);
}

#pragma implementation_key(5453)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSLaunch::GetUsePreviousSegmentState ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePreviousSegmentState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5454)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutUsePreviousSegmentState ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePreviousSegmentState(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5455)
inline _bstr_t AgStkGatorLib::_IAgVAMCSLaunch::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5456)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5457)
inline _bstr_t AgStkGatorLib::_IAgVAMCSLaunch::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5458)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5459)
inline _bstr_t AgStkGatorLib::_IAgVAMCSLaunch::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5460)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSLaunch::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5461)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSLaunch::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5462)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSLaunch::GetSetMetEpoch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SetMetEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5463)
inline void AgStkGatorLib::_IAgVAMCSLaunch::PutSetMetEpoch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SetMetEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5464)
inline AgStkGatorLib::IAgVAUserVariableCollectionPtr AgStkGatorLib::_IAgVAMCSLaunch::GetUserVariables ( ) {
    struct IAgVAUserVariableCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableCollectionPtr(_result, false);
}

#pragma implementation_key(5465)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSLaunch::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSLaunch wrapper method implementations
//

#pragma implementation_key(5466)
inline _bstr_t AgStkGatorLib::IAgVAMCSLaunch::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5467)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5468)
inline double AgStkGatorLib::IAgVAMCSLaunch::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5469)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutStepSize ( double pVal ) {
    HRESULT _hr = put_StepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5470)
inline double AgStkGatorLib::IAgVAMCSLaunch::GetPreLaunchTime ( ) {
    double _result = 0;
    HRESULT _hr = get_PreLaunchTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5471)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutPreLaunchTime ( double pVal ) {
    HRESULT _hr = put_PreLaunchTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5472)
inline _variant_t AgStkGatorLib::IAgVAMCSLaunch::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5473)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5474)
inline HRESULT AgStkGatorLib::IAgVAMCSLaunch::EnableControlParameter ( enum AgEVAControlLaunch Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5475)
inline HRESULT AgStkGatorLib::IAgVAMCSLaunch::DisableControlParameter ( enum AgEVAControlLaunch Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5476)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSLaunch::IsControlParameterEnabled ( enum AgEVAControlLaunch Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5477)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSLaunch::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5478)
inline double AgStkGatorLib::IAgVAMCSLaunch::GetInitialAcceleration ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5479)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutInitialAcceleration ( double pVal ) {
    HRESULT _hr = put_InitialAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5480)
inline AgStkGatorLib::IAgVASpacecraftParametersPtr AgStkGatorLib::IAgVAMCSLaunch::GetSpacecraftParameters ( ) {
    struct IAgVASpacecraftParameters * _result = 0;
    HRESULT _hr = get_SpacecraftParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASpacecraftParametersPtr(_result, false);
}

#pragma implementation_key(5481)
inline AgStkGatorLib::IAgVAFuelTankPtr AgStkGatorLib::IAgVAMCSLaunch::GetFuelTank ( ) {
    struct IAgVAFuelTank * _result = 0;
    HRESULT _hr = get_FuelTank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAFuelTankPtr(_result, false);
}

#pragma implementation_key(5482)
inline enum AgStkGatorLib::AgEVALaunchDisplaySystem AgStkGatorLib::IAgVAMCSLaunch::GetDisplaySystemType ( ) {
    enum AgEVALaunchDisplaySystem _result;
    HRESULT _hr = get_DisplaySystemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5483)
inline HRESULT AgStkGatorLib::IAgVAMCSLaunch::SetDisplaySystemType ( enum AgEVALaunchDisplaySystem DisplaySystemType ) {
    HRESULT _hr = raw_SetDisplaySystemType(DisplaySystemType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5484)
inline AgStkGatorLib::IAgVADisplaySystemPtr AgStkGatorLib::IAgVAMCSLaunch::GetDisplaySystem ( ) {
    struct IAgVADisplaySystem * _result = 0;
    HRESULT _hr = get_DisplaySystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADisplaySystemPtr(_result, false);
}

#pragma implementation_key(5485)
inline enum AgStkGatorLib::AgEVAAscentType AgStkGatorLib::IAgVAMCSLaunch::GetAscentType ( ) {
    enum AgEVAAscentType _result;
    HRESULT _hr = get_AscentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5486)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutAscentType ( enum AgEVAAscentType pVal ) {
    HRESULT _hr = put_AscentType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5487)
inline double AgStkGatorLib::IAgVAMCSLaunch::GetTimeOfFlight ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfFlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5488)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutTimeOfFlight ( double pVal ) {
    HRESULT _hr = put_TimeOfFlight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5489)
inline enum AgStkGatorLib::AgEVABurnoutType AgStkGatorLib::IAgVAMCSLaunch::GetBurnoutType ( ) {
    enum AgEVABurnoutType _result;
    HRESULT _hr = get_BurnoutType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5490)
inline HRESULT AgStkGatorLib::IAgVAMCSLaunch::SetBurnoutType ( enum AgEVABurnoutType BurnoutType ) {
    HRESULT _hr = raw_SetBurnoutType(BurnoutType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5491)
inline AgStkGatorLib::IAgVABurnoutPtr AgStkGatorLib::IAgVAMCSLaunch::GetBurnout ( ) {
    struct IAgVABurnout * _result = 0;
    HRESULT _hr = get_Burnout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVABurnoutPtr(_result, false);
}

#pragma implementation_key(5492)
inline AgStkGatorLib::IAgVABurnoutVelocityPtr AgStkGatorLib::IAgVAMCSLaunch::GetBurnoutVelocity ( ) {
    struct IAgVABurnoutVelocity * _result = 0;
    HRESULT _hr = get_BurnoutVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVABurnoutVelocityPtr(_result, false);
}

#pragma implementation_key(5493)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSLaunch::GetUsePreviousSegmentState ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePreviousSegmentState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5494)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutUsePreviousSegmentState ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePreviousSegmentState(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5495)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSLaunch::GetSetMetEpoch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SetMetEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5496)
inline void AgStkGatorLib::IAgVAMCSLaunch::PutSetMetEpoch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SetMetEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5497)
inline AgStkGatorLib::IAgVAUserVariableCollectionPtr AgStkGatorLib::IAgVAMCSLaunch::GetUserVariables ( ) {
    struct IAgVAUserVariableCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableCollectionPtr(_result, false);
}

//
// interface _IAgVADisplaySystemGeodetic wrapper method implementations
//

#pragma implementation_key(5498)
inline _variant_t AgStkGatorLib::_IAgVADisplaySystemGeodetic::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5499)
inline void AgStkGatorLib::_IAgVADisplaySystemGeodetic::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5500)
inline _variant_t AgStkGatorLib::_IAgVADisplaySystemGeodetic::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5501)
inline void AgStkGatorLib::_IAgVADisplaySystemGeodetic::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5502)
inline double AgStkGatorLib::_IAgVADisplaySystemGeodetic::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5503)
inline void AgStkGatorLib::_IAgVADisplaySystemGeodetic::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVADisplaySystemGeodetic wrapper method implementations
//

#pragma implementation_key(5504)
inline _variant_t AgStkGatorLib::IAgVADisplaySystemGeodetic::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5505)
inline void AgStkGatorLib::IAgVADisplaySystemGeodetic::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5506)
inline _variant_t AgStkGatorLib::IAgVADisplaySystemGeodetic::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5507)
inline void AgStkGatorLib::IAgVADisplaySystemGeodetic::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5508)
inline double AgStkGatorLib::IAgVADisplaySystemGeodetic::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5509)
inline void AgStkGatorLib::IAgVADisplaySystemGeodetic::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVADisplaySystemGeocentric wrapper method implementations
//

#pragma implementation_key(5510)
inline _variant_t AgStkGatorLib::_IAgVADisplaySystemGeocentric::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5511)
inline void AgStkGatorLib::_IAgVADisplaySystemGeocentric::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5512)
inline _variant_t AgStkGatorLib::_IAgVADisplaySystemGeocentric::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5513)
inline void AgStkGatorLib::_IAgVADisplaySystemGeocentric::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5514)
inline double AgStkGatorLib::_IAgVADisplaySystemGeocentric::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5515)
inline void AgStkGatorLib::_IAgVADisplaySystemGeocentric::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVADisplaySystemGeocentric wrapper method implementations
//

#pragma implementation_key(5516)
inline _variant_t AgStkGatorLib::IAgVADisplaySystemGeocentric::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5517)
inline void AgStkGatorLib::IAgVADisplaySystemGeocentric::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5518)
inline _variant_t AgStkGatorLib::IAgVADisplaySystemGeocentric::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5519)
inline void AgStkGatorLib::IAgVADisplaySystemGeocentric::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5520)
inline double AgStkGatorLib::IAgVADisplaySystemGeocentric::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5521)
inline void AgStkGatorLib::IAgVADisplaySystemGeocentric::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABurnoutGeodetic wrapper method implementations
//

#pragma implementation_key(5522)
inline _variant_t AgStkGatorLib::_IAgVABurnoutGeodetic::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5523)
inline void AgStkGatorLib::_IAgVABurnoutGeodetic::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5524)
inline _variant_t AgStkGatorLib::_IAgVABurnoutGeodetic::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5525)
inline void AgStkGatorLib::_IAgVABurnoutGeodetic::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5526)
inline double AgStkGatorLib::_IAgVABurnoutGeodetic::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5527)
inline void AgStkGatorLib::_IAgVABurnoutGeodetic::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABurnoutGeodetic wrapper method implementations
//

#pragma implementation_key(5528)
inline _variant_t AgStkGatorLib::IAgVABurnoutGeodetic::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5529)
inline void AgStkGatorLib::IAgVABurnoutGeodetic::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5530)
inline _variant_t AgStkGatorLib::IAgVABurnoutGeodetic::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5531)
inline void AgStkGatorLib::IAgVABurnoutGeodetic::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5532)
inline double AgStkGatorLib::IAgVABurnoutGeodetic::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5533)
inline void AgStkGatorLib::IAgVABurnoutGeodetic::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABurnoutGeocentric wrapper method implementations
//

#pragma implementation_key(5534)
inline _variant_t AgStkGatorLib::_IAgVABurnoutGeocentric::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5535)
inline void AgStkGatorLib::_IAgVABurnoutGeocentric::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5536)
inline _variant_t AgStkGatorLib::_IAgVABurnoutGeocentric::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5537)
inline void AgStkGatorLib::_IAgVABurnoutGeocentric::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5538)
inline double AgStkGatorLib::_IAgVABurnoutGeocentric::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5539)
inline void AgStkGatorLib::_IAgVABurnoutGeocentric::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABurnoutGeocentric wrapper method implementations
//

#pragma implementation_key(5540)
inline _variant_t AgStkGatorLib::IAgVABurnoutGeocentric::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5541)
inline void AgStkGatorLib::IAgVABurnoutGeocentric::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5542)
inline _variant_t AgStkGatorLib::IAgVABurnoutGeocentric::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5543)
inline void AgStkGatorLib::IAgVABurnoutGeocentric::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5544)
inline double AgStkGatorLib::IAgVABurnoutGeocentric::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5545)
inline void AgStkGatorLib::IAgVABurnoutGeocentric::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABurnoutLaunchAzAlt wrapper method implementations
//

#pragma implementation_key(5546)
inline _variant_t AgStkGatorLib::_IAgVABurnoutLaunchAzAlt::GetAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5547)
inline void AgStkGatorLib::_IAgVABurnoutLaunchAzAlt::PutAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5548)
inline double AgStkGatorLib::_IAgVABurnoutLaunchAzAlt::GetDownRangeDist ( ) {
    double _result = 0;
    HRESULT _hr = get_DownRangeDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5549)
inline void AgStkGatorLib::_IAgVABurnoutLaunchAzAlt::PutDownRangeDist ( double pVal ) {
    HRESULT _hr = put_DownRangeDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5550)
inline double AgStkGatorLib::_IAgVABurnoutLaunchAzAlt::GetAltitudeRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5551)
inline void AgStkGatorLib::_IAgVABurnoutLaunchAzAlt::PutAltitudeRadius ( double pVal ) {
    HRESULT _hr = put_AltitudeRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABurnoutLaunchAzAlt wrapper method implementations
//

#pragma implementation_key(5552)
inline _variant_t AgStkGatorLib::IAgVABurnoutLaunchAzAlt::GetAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5553)
inline void AgStkGatorLib::IAgVABurnoutLaunchAzAlt::PutAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5554)
inline double AgStkGatorLib::IAgVABurnoutLaunchAzAlt::GetDownRangeDist ( ) {
    double _result = 0;
    HRESULT _hr = get_DownRangeDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5555)
inline void AgStkGatorLib::IAgVABurnoutLaunchAzAlt::PutDownRangeDist ( double pVal ) {
    HRESULT _hr = put_DownRangeDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5556)
inline double AgStkGatorLib::IAgVABurnoutLaunchAzAlt::GetAltitudeRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5557)
inline void AgStkGatorLib::IAgVABurnoutLaunchAzAlt::PutAltitudeRadius ( double pVal ) {
    HRESULT _hr = put_AltitudeRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABurnoutLaunchAzRadius wrapper method implementations
//

#pragma implementation_key(5558)
inline _variant_t AgStkGatorLib::_IAgVABurnoutLaunchAzRadius::GetAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5559)
inline void AgStkGatorLib::_IAgVABurnoutLaunchAzRadius::PutAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5560)
inline double AgStkGatorLib::_IAgVABurnoutLaunchAzRadius::GetDownRangeDist ( ) {
    double _result = 0;
    HRESULT _hr = get_DownRangeDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5561)
inline void AgStkGatorLib::_IAgVABurnoutLaunchAzRadius::PutDownRangeDist ( double pVal ) {
    HRESULT _hr = put_DownRangeDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5562)
inline double AgStkGatorLib::_IAgVABurnoutLaunchAzRadius::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5563)
inline void AgStkGatorLib::_IAgVABurnoutLaunchAzRadius::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVABurnoutLaunchAzRadius wrapper method implementations
//

#pragma implementation_key(5564)
inline _variant_t AgStkGatorLib::IAgVABurnoutLaunchAzRadius::GetAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5565)
inline void AgStkGatorLib::IAgVABurnoutLaunchAzRadius::PutAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5566)
inline double AgStkGatorLib::IAgVABurnoutLaunchAzRadius::GetDownRangeDist ( ) {
    double _result = 0;
    HRESULT _hr = get_DownRangeDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5567)
inline void AgStkGatorLib::IAgVABurnoutLaunchAzRadius::PutDownRangeDist ( double pVal ) {
    HRESULT _hr = put_DownRangeDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5568)
inline double AgStkGatorLib::IAgVABurnoutLaunchAzRadius::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5569)
inline void AgStkGatorLib::IAgVABurnoutLaunchAzRadius::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVABurnoutVelocity wrapper method implementations
//

#pragma implementation_key(5570)
inline enum AgStkGatorLib::AgEVABurnoutOptions AgStkGatorLib::_IAgVABurnoutVelocity::GetBurnoutOption ( ) {
    enum AgEVABurnoutOptions _result;
    HRESULT _hr = get_BurnoutOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5571)
inline void AgStkGatorLib::_IAgVABurnoutVelocity::PutBurnoutOption ( enum AgEVABurnoutOptions pVal ) {
    HRESULT _hr = put_BurnoutOption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5572)
inline double AgStkGatorLib::_IAgVABurnoutVelocity::GetFixedVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5573)
inline void AgStkGatorLib::_IAgVABurnoutVelocity::PutFixedVelocity ( double pVal ) {
    HRESULT _hr = put_FixedVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5574)
inline double AgStkGatorLib::_IAgVABurnoutVelocity::GetInertialVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_InertialVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5575)
inline void AgStkGatorLib::_IAgVABurnoutVelocity::PutInertialVelocity ( double pVal ) {
    HRESULT _hr = put_InertialVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5576)
inline _variant_t AgStkGatorLib::_IAgVABurnoutVelocity::GetInertialVelocityAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InertialVelocityAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5577)
inline void AgStkGatorLib::_IAgVABurnoutVelocity::PutInertialVelocityAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_InertialVelocityAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5578)
inline _variant_t AgStkGatorLib::_IAgVABurnoutVelocity::GetInertialHorizontalFPA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InertialHorizontalFPA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5579)
inline void AgStkGatorLib::_IAgVABurnoutVelocity::PutInertialHorizontalFPA ( const _variant_t & pVal ) {
    HRESULT _hr = put_InertialHorizontalFPA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAMCSFollow wrapper method implementations
//

#pragma implementation_key(5580)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSFollow::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5581)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSFollow::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(5582)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSFollow::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5583)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSFollow::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5584)
inline _variant_t AgStkGatorLib::_IAgVAMCSFollow::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5585)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSFollow::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5586)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSFollow::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(5587)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSFollow::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(5588)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::_IAgVAMCSFollow::GetLeader ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Leader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(5589)
inline double AgStkGatorLib::_IAgVAMCSFollow::GetXOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_XOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5590)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutXOffset ( double pVal ) {
    HRESULT _hr = put_XOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5591)
inline double AgStkGatorLib::_IAgVAMCSFollow::GetYOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_YOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5592)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutYOffset ( double pVal ) {
    HRESULT _hr = put_YOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5593)
inline double AgStkGatorLib::_IAgVAMCSFollow::GetZOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ZOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5594)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutZOffset ( double pVal ) {
    HRESULT _hr = put_ZOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5595)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAMCSFollow::GetSeparationConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_SeparationConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5596)
inline AgStkGatorLib::IAgVASpacecraftParametersPtr AgStkGatorLib::_IAgVAMCSFollow::GetSpacecraftParameters ( ) {
    struct IAgVASpacecraftParameters * _result = 0;
    HRESULT _hr = get_SpacecraftParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASpacecraftParametersPtr(_result, false);
}

#pragma implementation_key(5597)
inline AgStkGatorLib::IAgVAFuelTankPtr AgStkGatorLib::_IAgVAMCSFollow::GetFuelTank ( ) {
    struct IAgVAFuelTank * _result = 0;
    HRESULT _hr = get_FuelTank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAFuelTankPtr(_result, false);
}

#pragma implementation_key(5598)
inline enum AgStkGatorLib::AgEVAFollowJoin AgStkGatorLib::_IAgVAMCSFollow::GetJoiningType ( ) {
    enum AgEVAFollowJoin _result;
    HRESULT _hr = get_JoiningType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5599)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutJoiningType ( enum AgEVAFollowJoin pVal ) {
    HRESULT _hr = put_JoiningType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5600)
inline enum AgStkGatorLib::AgEVAFollowSeparation AgStkGatorLib::_IAgVAMCSFollow::GetSeparationType ( ) {
    enum AgEVAFollowSeparation _result;
    HRESULT _hr = get_SeparationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5601)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutSeparationType ( enum AgEVAFollowSeparation pVal ) {
    HRESULT _hr = put_SeparationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5602)
inline enum AgStkGatorLib::AgEVAFollowSpacecraftAndFuelTank AgStkGatorLib::_IAgVAMCSFollow::GetSpacecraftAndFuelTankType ( ) {
    enum AgEVAFollowSpacecraftAndFuelTank _result;
    HRESULT _hr = get_SpacecraftAndFuelTankType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5603)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutSpacecraftAndFuelTankType ( enum AgEVAFollowSpacecraftAndFuelTank pVal ) {
    HRESULT _hr = put_SpacecraftAndFuelTankType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5604)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAMCSFollow::GetJoiningConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_JoiningConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5605)
inline HRESULT AgStkGatorLib::_IAgVAMCSFollow::EnableControlParameter ( enum AgEVAControlFollow Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5606)
inline HRESULT AgStkGatorLib::_IAgVAMCSFollow::DisableControlParameter ( enum AgEVAControlFollow Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5607)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSFollow::IsControlParameterEnabled ( enum AgEVAControlFollow Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5608)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSFollow::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5609)
inline _bstr_t AgStkGatorLib::_IAgVAMCSFollow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5610)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5611)
inline _bstr_t AgStkGatorLib::_IAgVAMCSFollow::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5612)
inline void AgStkGatorLib::_IAgVAMCSFollow::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5613)
inline _bstr_t AgStkGatorLib::_IAgVAMCSFollow::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5614)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSFollow::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5615)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSFollow::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5616)
inline AgStkGatorLib::IAgVAUserVariableCollectionPtr AgStkGatorLib::_IAgVAMCSFollow::GetUserVariables ( ) {
    struct IAgVAUserVariableCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableCollectionPtr(_result, false);
}

#pragma implementation_key(5617)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSFollow::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSFollow wrapper method implementations
//

#pragma implementation_key(5618)
inline STKObjects::IAgLinkToObjectPtr AgStkGatorLib::IAgVAMCSFollow::GetLeader ( ) {
    struct STKObjects::IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Leader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgLinkToObjectPtr(_result, false);
}

#pragma implementation_key(5619)
inline double AgStkGatorLib::IAgVAMCSFollow::GetXOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_XOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5620)
inline void AgStkGatorLib::IAgVAMCSFollow::PutXOffset ( double pVal ) {
    HRESULT _hr = put_XOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5621)
inline double AgStkGatorLib::IAgVAMCSFollow::GetYOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_YOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5622)
inline void AgStkGatorLib::IAgVAMCSFollow::PutYOffset ( double pVal ) {
    HRESULT _hr = put_YOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5623)
inline double AgStkGatorLib::IAgVAMCSFollow::GetZOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ZOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5624)
inline void AgStkGatorLib::IAgVAMCSFollow::PutZOffset ( double pVal ) {
    HRESULT _hr = put_ZOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5625)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAMCSFollow::GetSeparationConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_SeparationConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5626)
inline AgStkGatorLib::IAgVASpacecraftParametersPtr AgStkGatorLib::IAgVAMCSFollow::GetSpacecraftParameters ( ) {
    struct IAgVASpacecraftParameters * _result = 0;
    HRESULT _hr = get_SpacecraftParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASpacecraftParametersPtr(_result, false);
}

#pragma implementation_key(5627)
inline AgStkGatorLib::IAgVAFuelTankPtr AgStkGatorLib::IAgVAMCSFollow::GetFuelTank ( ) {
    struct IAgVAFuelTank * _result = 0;
    HRESULT _hr = get_FuelTank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAFuelTankPtr(_result, false);
}

#pragma implementation_key(5628)
inline enum AgStkGatorLib::AgEVAFollowJoin AgStkGatorLib::IAgVAMCSFollow::GetJoiningType ( ) {
    enum AgEVAFollowJoin _result;
    HRESULT _hr = get_JoiningType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5629)
inline void AgStkGatorLib::IAgVAMCSFollow::PutJoiningType ( enum AgEVAFollowJoin pVal ) {
    HRESULT _hr = put_JoiningType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5630)
inline enum AgStkGatorLib::AgEVAFollowSeparation AgStkGatorLib::IAgVAMCSFollow::GetSeparationType ( ) {
    enum AgEVAFollowSeparation _result;
    HRESULT _hr = get_SeparationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5631)
inline void AgStkGatorLib::IAgVAMCSFollow::PutSeparationType ( enum AgEVAFollowSeparation pVal ) {
    HRESULT _hr = put_SeparationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5632)
inline enum AgStkGatorLib::AgEVAFollowSpacecraftAndFuelTank AgStkGatorLib::IAgVAMCSFollow::GetSpacecraftAndFuelTankType ( ) {
    enum AgEVAFollowSpacecraftAndFuelTank _result;
    HRESULT _hr = get_SpacecraftAndFuelTankType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5633)
inline void AgStkGatorLib::IAgVAMCSFollow::PutSpacecraftAndFuelTankType ( enum AgEVAFollowSpacecraftAndFuelTank pVal ) {
    HRESULT _hr = put_SpacecraftAndFuelTankType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5634)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAMCSFollow::GetJoiningConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_JoiningConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5635)
inline HRESULT AgStkGatorLib::IAgVAMCSFollow::EnableControlParameter ( enum AgEVAControlFollow Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5636)
inline HRESULT AgStkGatorLib::IAgVAMCSFollow::DisableControlParameter ( enum AgEVAControlFollow Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5637)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSFollow::IsControlParameterEnabled ( enum AgEVAControlFollow Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5638)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSFollow::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5639)
inline AgStkGatorLib::IAgVAUserVariableCollectionPtr AgStkGatorLib::IAgVAMCSFollow::GetUserVariables ( ) {
    struct IAgVAUserVariableCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableCollectionPtr(_result, false);
}

//
// interface IAgVAAttitudeControl wrapper method implementations
//

#pragma implementation_key(5640)
inline double AgStkGatorLib::IAgVAAttitudeControl::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5641)
inline void AgStkGatorLib::IAgVAAttitudeControl::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5642)
inline double AgStkGatorLib::IAgVAAttitudeControl::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5643)
inline void AgStkGatorLib::IAgVAAttitudeControl::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5644)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::IAgVAAttitudeControl::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5645)
inline void AgStkGatorLib::IAgVAAttitudeControl::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5646)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::IAgVAAttitudeControl::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5647)
inline void AgStkGatorLib::IAgVAAttitudeControl::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5648)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControl::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5649)
inline void AgStkGatorLib::IAgVAAttitudeControl::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5650)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::IAgVAAttitudeControl::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5651)
inline void AgStkGatorLib::IAgVAAttitudeControl::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAManeuver wrapper method implementations
//

#pragma implementation_key(5652)
inline enum AgStkGatorLib::AgEVAAttitudeControl AgStkGatorLib::IAgVAManeuver::GetAttitudeControlType ( ) {
    enum AgEVAAttitudeControl _result;
    HRESULT _hr = get_AttitudeControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5653)
inline HRESULT AgStkGatorLib::IAgVAManeuver::SetAttitudeControlType ( enum AgEVAAttitudeControl AttitudeControlType ) {
    HRESULT _hr = raw_SetAttitudeControlType(AttitudeControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5654)
inline AgStkGatorLib::IAgVAAttitudeControlPtr AgStkGatorLib::IAgVAManeuver::GetAttitudeControl ( ) {
    struct IAgVAAttitudeControl * _result = 0;
    HRESULT _hr = get_AttitudeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAttitudeControlPtr(_result, false);
}

#pragma implementation_key(5655)
inline VARIANT_BOOL AgStkGatorLib::IAgVAManeuver::GetUpdateMass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5656)
inline void AgStkGatorLib::IAgVAManeuver::PutUpdateMass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5657)
inline enum AgStkGatorLib::AgEVAPropulsionMethod AgStkGatorLib::IAgVAManeuver::GetPropulsionMethod ( ) {
    enum AgEVAPropulsionMethod _result;
    HRESULT _hr = get_PropulsionMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5658)
inline HRESULT AgStkGatorLib::IAgVAManeuver::SetPropulsionMethod ( enum AgEVAPropulsionMethod PropulsionMethod, _bstr_t Value ) {
    HRESULT _hr = raw_SetPropulsionMethod(PropulsionMethod, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5659)
inline _bstr_t AgStkGatorLib::IAgVAManeuver::GetPropulsionMethodValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropulsionMethodValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVAMCSManeuver wrapper method implementations
//

#pragma implementation_key(5660)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSManeuver::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5661)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSManeuver::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(5662)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSManeuver::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5663)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSManeuver::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5664)
inline _variant_t AgStkGatorLib::_IAgVAMCSManeuver::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5665)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSManeuver::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(5666)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSManeuver::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(5667)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSManeuver::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(5668)
inline enum AgStkGatorLib::AgEVAManeuverType AgStkGatorLib::_IAgVAMCSManeuver::GetManeuverType ( ) {
    enum AgEVAManeuverType _result;
    HRESULT _hr = get_ManeuverType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5669)
inline HRESULT AgStkGatorLib::_IAgVAMCSManeuver::SetManeuverType ( enum AgEVAManeuverType ManeuverType ) {
    HRESULT _hr = raw_SetManeuverType(ManeuverType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5670)
inline AgStkGatorLib::IAgVAManeuverPtr AgStkGatorLib::_IAgVAMCSManeuver::GetManeuver ( ) {
    struct IAgVAManeuver * _result = 0;
    HRESULT _hr = get_Maneuver(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAManeuverPtr(_result, false);
}

#pragma implementation_key(5671)
inline HRESULT AgStkGatorLib::_IAgVAMCSManeuver::EnableControlParameter ( enum AgEVAControlManeuver Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5672)
inline HRESULT AgStkGatorLib::_IAgVAMCSManeuver::DisableControlParameter ( enum AgEVAControlManeuver Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5673)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSManeuver::IsControlParameterEnabled ( enum AgEVAControlManeuver Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5674)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSManeuver::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5675)
inline _bstr_t AgStkGatorLib::_IAgVAMCSManeuver::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5676)
inline void AgStkGatorLib::_IAgVAMCSManeuver::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5677)
inline _bstr_t AgStkGatorLib::_IAgVAMCSManeuver::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5678)
inline void AgStkGatorLib::_IAgVAMCSManeuver::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5679)
inline _bstr_t AgStkGatorLib::_IAgVAMCSManeuver::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5680)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSManeuver::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5681)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSManeuver::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5682)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSManeuver::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSManeuver wrapper method implementations
//

#pragma implementation_key(5683)
inline enum AgStkGatorLib::AgEVAManeuverType AgStkGatorLib::IAgVAMCSManeuver::GetManeuverType ( ) {
    enum AgEVAManeuverType _result;
    HRESULT _hr = get_ManeuverType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5684)
inline HRESULT AgStkGatorLib::IAgVAMCSManeuver::SetManeuverType ( enum AgEVAManeuverType ManeuverType ) {
    HRESULT _hr = raw_SetManeuverType(ManeuverType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5685)
inline AgStkGatorLib::IAgVAManeuverPtr AgStkGatorLib::IAgVAMCSManeuver::GetManeuver ( ) {
    struct IAgVAManeuver * _result = 0;
    HRESULT _hr = get_Maneuver(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAManeuverPtr(_result, false);
}

#pragma implementation_key(5686)
inline HRESULT AgStkGatorLib::IAgVAMCSManeuver::EnableControlParameter ( enum AgEVAControlManeuver Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5687)
inline HRESULT AgStkGatorLib::IAgVAMCSManeuver::DisableControlParameter ( enum AgEVAControlManeuver Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5688)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSManeuver::IsControlParameterEnabled ( enum AgEVAControlManeuver Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5689)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSManeuver::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAManeuverFinitePropagator wrapper method implementations
//

#pragma implementation_key(5690)
inline _bstr_t AgStkGatorLib::IAgVAManeuverFinitePropagator::GetPropagatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropagatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5691)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutPropagatorName ( _bstr_t pVal ) {
    HRESULT _hr = put_PropagatorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5692)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAManeuverFinitePropagator::GetStoppingConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_StoppingConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(5693)
inline double AgStkGatorLib::IAgVAManeuverFinitePropagator::GetMinPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5694)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutMinPropagationTime ( double pVal ) {
    HRESULT _hr = put_MinPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5695)
inline double AgStkGatorLib::IAgVAManeuverFinitePropagator::GetMaxPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5696)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutMaxPropagationTime ( double pVal ) {
    HRESULT _hr = put_MaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5697)
inline VARIANT_BOOL AgStkGatorLib::IAgVAManeuverFinitePropagator::GetEnableMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5698)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutEnableMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5699)
inline VARIANT_BOOL AgStkGatorLib::IAgVAManeuverFinitePropagator::GetEnableWarningMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWarningMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5700)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutEnableWarningMessage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWarningMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5701)
inline VARIANT_BOOL AgStkGatorLib::IAgVAManeuverFinitePropagator::GetEnableCenterBurn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableCenterBurn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5702)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutEnableCenterBurn ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableCenterBurn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5703)
inline double AgStkGatorLib::IAgVAManeuverFinitePropagator::GetBias ( ) {
    double _result = 0;
    HRESULT _hr = get_Bias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5704)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutBias ( double pVal ) {
    HRESULT _hr = put_Bias(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5705)
inline VARIANT_BOOL AgStkGatorLib::IAgVAManeuverFinitePropagator::GetOverrideMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5706)
inline void AgStkGatorLib::IAgVAManeuverFinitePropagator::PutOverrideMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OverrideMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAManeuverFinite wrapper method implementations
//

#pragma implementation_key(5707)
inline enum AgStkGatorLib::AgEVAAttitudeControl AgStkGatorLib::_IAgVAManeuverFinite::GetAttitudeControlType ( ) {
    enum AgEVAAttitudeControl _result;
    HRESULT _hr = get_AttitudeControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5708)
inline HRESULT AgStkGatorLib::_IAgVAManeuverFinite::SetAttitudeControlType ( enum AgEVAAttitudeControl AttitudeControlType ) {
    HRESULT _hr = raw_SetAttitudeControlType(AttitudeControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5709)
inline AgStkGatorLib::IAgVAAttitudeControlPtr AgStkGatorLib::_IAgVAManeuverFinite::GetAttitudeControl ( ) {
    struct IAgVAAttitudeControl * _result = 0;
    HRESULT _hr = get_AttitudeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAttitudeControlPtr(_result, false);
}

#pragma implementation_key(5710)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAManeuverFinite::GetUpdateMass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5711)
inline void AgStkGatorLib::_IAgVAManeuverFinite::PutUpdateMass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5712)
inline enum AgStkGatorLib::AgEVAPropulsionMethod AgStkGatorLib::_IAgVAManeuverFinite::GetPropulsionMethod ( ) {
    enum AgEVAPropulsionMethod _result;
    HRESULT _hr = get_PropulsionMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5713)
inline HRESULT AgStkGatorLib::_IAgVAManeuverFinite::SetPropulsionMethod ( enum AgEVAPropulsionMethod PropulsionMethod, _bstr_t Value ) {
    HRESULT _hr = raw_SetPropulsionMethod(PropulsionMethod, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5714)
inline _bstr_t AgStkGatorLib::_IAgVAManeuverFinite::GetPropulsionMethodValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropulsionMethodValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5715)
inline enum AgStkGatorLib::AgEVAPressureMode AgStkGatorLib::_IAgVAManeuverFinite::GetPressureMode ( ) {
    enum AgEVAPressureMode _result;
    HRESULT _hr = get_PressureMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5716)
inline void AgStkGatorLib::_IAgVAManeuverFinite::PutPressureMode ( enum AgEVAPressureMode pVal ) {
    HRESULT _hr = put_PressureMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5717)
inline double AgStkGatorLib::_IAgVAManeuverFinite::GetThrustEfficiency ( ) {
    double _result = 0;
    HRESULT _hr = get_ThrustEfficiency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5718)
inline void AgStkGatorLib::_IAgVAManeuverFinite::PutThrustEfficiency ( double pVal ) {
    HRESULT _hr = put_ThrustEfficiency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5719)
inline enum AgStkGatorLib::AgEVAThrustType AgStkGatorLib::_IAgVAManeuverFinite::GetThrustEfficiencyMode ( ) {
    enum AgEVAThrustType _result;
    HRESULT _hr = get_ThrustEfficiencyMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5720)
inline void AgStkGatorLib::_IAgVAManeuverFinite::PutThrustEfficiencyMode ( enum AgEVAThrustType pVal ) {
    HRESULT _hr = put_ThrustEfficiencyMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5721)
inline AgStkGatorLib::IAgVAManeuverFinitePropagatorPtr AgStkGatorLib::_IAgVAManeuverFinite::GetPropagator ( ) {
    struct IAgVAManeuverFinitePropagator * _result = 0;
    HRESULT _hr = get_Propagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAManeuverFinitePropagatorPtr(_result, false);
}

#pragma implementation_key(5722)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAManeuverFinite::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAManeuverFinite wrapper method implementations
//

#pragma implementation_key(5723)
inline enum AgStkGatorLib::AgEVAPressureMode AgStkGatorLib::IAgVAManeuverFinite::GetPressureMode ( ) {
    enum AgEVAPressureMode _result;
    HRESULT _hr = get_PressureMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5724)
inline void AgStkGatorLib::IAgVAManeuverFinite::PutPressureMode ( enum AgEVAPressureMode pVal ) {
    HRESULT _hr = put_PressureMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5725)
inline double AgStkGatorLib::IAgVAManeuverFinite::GetThrustEfficiency ( ) {
    double _result = 0;
    HRESULT _hr = get_ThrustEfficiency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5726)
inline void AgStkGatorLib::IAgVAManeuverFinite::PutThrustEfficiency ( double pVal ) {
    HRESULT _hr = put_ThrustEfficiency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5727)
inline enum AgStkGatorLib::AgEVAThrustType AgStkGatorLib::IAgVAManeuverFinite::GetThrustEfficiencyMode ( ) {
    enum AgEVAThrustType _result;
    HRESULT _hr = get_ThrustEfficiencyMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5728)
inline void AgStkGatorLib::IAgVAManeuverFinite::PutThrustEfficiencyMode ( enum AgEVAThrustType pVal ) {
    HRESULT _hr = put_ThrustEfficiencyMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5729)
inline AgStkGatorLib::IAgVAManeuverFinitePropagatorPtr AgStkGatorLib::IAgVAManeuverFinite::GetPropagator ( ) {
    struct IAgVAManeuverFinitePropagator * _result = 0;
    HRESULT _hr = get_Propagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAManeuverFinitePropagatorPtr(_result, false);
}

//
// interface _IAgVAManeuverImpulsive wrapper method implementations
//

#pragma implementation_key(5730)
inline enum AgStkGatorLib::AgEVAAttitudeControl AgStkGatorLib::_IAgVAManeuverImpulsive::GetAttitudeControlType ( ) {
    enum AgEVAAttitudeControl _result;
    HRESULT _hr = get_AttitudeControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5731)
inline HRESULT AgStkGatorLib::_IAgVAManeuverImpulsive::SetAttitudeControlType ( enum AgEVAAttitudeControl AttitudeControlType ) {
    HRESULT _hr = raw_SetAttitudeControlType(AttitudeControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5732)
inline AgStkGatorLib::IAgVAAttitudeControlPtr AgStkGatorLib::_IAgVAManeuverImpulsive::GetAttitudeControl ( ) {
    struct IAgVAAttitudeControl * _result = 0;
    HRESULT _hr = get_AttitudeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAttitudeControlPtr(_result, false);
}

#pragma implementation_key(5733)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAManeuverImpulsive::GetUpdateMass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5734)
inline void AgStkGatorLib::_IAgVAManeuverImpulsive::PutUpdateMass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5735)
inline enum AgStkGatorLib::AgEVAPropulsionMethod AgStkGatorLib::_IAgVAManeuverImpulsive::GetPropulsionMethod ( ) {
    enum AgEVAPropulsionMethod _result;
    HRESULT _hr = get_PropulsionMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5736)
inline HRESULT AgStkGatorLib::_IAgVAManeuverImpulsive::SetPropulsionMethod ( enum AgEVAPropulsionMethod PropulsionMethod, _bstr_t Value ) {
    HRESULT _hr = raw_SetPropulsionMethod(PropulsionMethod, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5737)
inline _bstr_t AgStkGatorLib::_IAgVAManeuverImpulsive::GetPropulsionMethodValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropulsionMethodValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5738)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAManeuverImpulsive::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlImpulsiveVelocityVector wrapper method implementations
//

#pragma implementation_key(5739)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5740)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5741)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5742)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5743)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5744)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5745)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5746)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5747)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5748)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5749)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5750)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5751)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5752)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5753)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5754)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface IAgVAAttitudeControlImpulsiveVelocityVector wrapper method implementations
//

#pragma implementation_key(5755)
inline double AgStkGatorLib::IAgVAAttitudeControlImpulsiveVelocityVector::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5756)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveVelocityVector::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5757)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlImpulsiveVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlImpulsiveAntiVelocityVector wrapper method implementations
//

#pragma implementation_key(5758)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5759)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5760)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5761)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5762)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5763)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5764)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5765)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5766)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5767)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5768)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5769)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5770)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5771)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5772)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5773)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface IAgVAAttitudeControlImpulsiveAntiVelocityVector wrapper method implementations
//

#pragma implementation_key(5774)
inline double AgStkGatorLib::IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5775)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveAntiVelocityVector::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5776)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlImpulsiveAntiVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlImpulsiveAttitude wrapper method implementations
//

#pragma implementation_key(5777)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5778)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5779)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5780)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5781)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5782)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5783)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5784)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5785)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5786)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5787)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5788)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5789)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5790)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5791)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetRefAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5792)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::PutRefAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5793)
inline STKUtil::IAgOrientationPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

#pragma implementation_key(5794)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveAttitude::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAAttitudeControlImpulsiveAttitude wrapper method implementations
//

#pragma implementation_key(5795)
inline double AgStkGatorLib::IAgVAAttitudeControlImpulsiveAttitude::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5796)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveAttitude::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5797)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlImpulsiveAttitude::GetRefAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5798)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveAttitude::PutRefAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5799)
inline STKUtil::IAgOrientationPtr AgStkGatorLib::IAgVAAttitudeControlImpulsiveAttitude::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlImpulsiveFile wrapper method implementations
//

#pragma implementation_key(5800)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5801)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5802)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5803)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5804)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5805)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5806)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5807)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5808)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5809)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5810)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5811)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5812)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5813)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5814)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5815)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5816)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetFileTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_FileTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5817)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::PutFileTimeOffset ( double pVal ) {
    HRESULT _hr = put_FileTimeOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5818)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5819)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveFile::GetFullFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVAAttitudeControlImpulsiveFile wrapper method implementations
//

#pragma implementation_key(5820)
inline double AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::GetDeltaVMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5821)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::PutDeltaVMagnitude ( double pVal ) {
    HRESULT _hr = put_DeltaVMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5822)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5823)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5824)
inline double AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::GetFileTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_FileTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5825)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::PutFileTimeOffset ( double pVal ) {
    HRESULT _hr = put_FileTimeOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5826)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlImpulsiveFile::GetFullFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVAAttitudeControlImpulsiveThrustVector wrapper method implementations
//

#pragma implementation_key(5827)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5828)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5829)
inline double AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5830)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5831)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5832)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5833)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5834)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5835)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5836)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5837)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5838)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5839)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetThrustAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThrustAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5840)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutThrustAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThrustAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5841)
inline STKUtil::IAgPositionPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

#pragma implementation_key(5842)
inline STKUtil::IAgPositionPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetDeltaVVector ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_DeltaVVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

#pragma implementation_key(5843)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5844)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5845)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::GetAllowNegativeSphericalMagnitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowNegativeSphericalMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5846)
inline void AgStkGatorLib::_IAgVAAttitudeControlImpulsiveThrustVector::PutAllowNegativeSphericalMagnitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowNegativeSphericalMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAAttitudeControlImpulsiveThrustVector wrapper method implementations
//

#pragma implementation_key(5847)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::GetThrustAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThrustAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5848)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::PutThrustAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThrustAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5849)
inline STKUtil::IAgPositionPtr AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

#pragma implementation_key(5850)
inline STKUtil::IAgPositionPtr AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::GetDeltaVVector ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_DeltaVVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

#pragma implementation_key(5851)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5852)
inline VARIANT_BOOL AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::GetAllowNegativeSphericalMagnitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowNegativeSphericalMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5853)
inline void AgStkGatorLib::IAgVAAttitudeControlImpulsiveThrustVector::PutAllowNegativeSphericalMagnitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowNegativeSphericalMagnitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAAttitudeControlFiniteAntiVelocityVector wrapper method implementations
//

#pragma implementation_key(5854)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5855)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5856)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5857)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5858)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5859)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5860)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5861)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5862)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5863)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5864)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5865)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5866)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5867)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5868)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5869)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteAntiVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface IAgVAAttitudeControlFiniteAntiVelocityVector wrapper method implementations
//

#pragma implementation_key(5870)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::IAgVAAttitudeControlFiniteAntiVelocityVector::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5871)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteAntiVelocityVector::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5872)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlFiniteAntiVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlFiniteAttitude wrapper method implementations
//

#pragma implementation_key(5873)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5874)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5875)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5876)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5877)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5878)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5879)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5880)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5881)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5882)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5883)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5884)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5885)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5886)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5887)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetRefAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5888)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::PutRefAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5889)
inline STKUtil::IAgOrientationPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

#pragma implementation_key(5890)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteAttitude::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAAttitudeControlFiniteAttitude wrapper method implementations
//

#pragma implementation_key(5891)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::IAgVAAttitudeControlFiniteAttitude::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5892)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteAttitude::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5893)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlFiniteAttitude::GetRefAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5894)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteAttitude::PutRefAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5895)
inline STKUtil::IAgOrientationPtr AgStkGatorLib::IAgVAAttitudeControlFiniteAttitude::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlFiniteFile wrapper method implementations
//

#pragma implementation_key(5896)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5897)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5898)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5899)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5900)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5901)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5902)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5903)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5904)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5905)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5906)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5907)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5908)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5909)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5910)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetFileTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_FileTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5911)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::PutFileTimeOffset ( double pVal ) {
    HRESULT _hr = put_FileTimeOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5912)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(5913)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteFile::GetFullFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVAAttitudeControlFiniteFile wrapper method implementations
//

#pragma implementation_key(5914)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlFiniteFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5915)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5916)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteFile::GetFileTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_FileTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5917)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteFile::PutFileTimeOffset ( double pVal ) {
    HRESULT _hr = put_FileTimeOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5918)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlFiniteFile::GetFullFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVAAttitudeControlFiniteThrustVector wrapper method implementations
//

#pragma implementation_key(5919)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5920)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5921)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5922)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5923)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5924)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5925)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5926)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5927)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5928)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5929)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5930)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5931)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5932)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5933)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetThrustAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThrustAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5934)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::PutThrustAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThrustAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5935)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5936)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetThrustVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_ThrustVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5937)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteThrustVector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAAttitudeControlFiniteThrustVector wrapper method implementations
//

#pragma implementation_key(5938)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::IAgVAAttitudeControlFiniteThrustVector::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5939)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteThrustVector::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5940)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlFiniteThrustVector::GetThrustAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThrustAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5941)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteThrustVector::PutThrustAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThrustAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5942)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlFiniteThrustVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5943)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlFiniteThrustVector::GetThrustVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_ThrustVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlFiniteTimeVarying wrapper method implementations
//

#pragma implementation_key(5944)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5945)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5946)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5947)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5948)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5949)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5950)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5951)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5952)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5953)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5954)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5955)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5956)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetThrustAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThrustAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5957)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutThrustAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThrustAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5958)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5959)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAz0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5960)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAz0 ( double pVal ) {
    HRESULT _hr = put_Az0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5961)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAz1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5962)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAz1 ( double pVal ) {
    HRESULT _hr = put_Az1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5963)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAz2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5964)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAz2 ( double pVal ) {
    HRESULT _hr = put_Az2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5965)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAz3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5966)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAz3 ( double pVal ) {
    HRESULT _hr = put_Az3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5967)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAz4 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5968)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAz4 ( double pVal ) {
    HRESULT _hr = put_Az4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5969)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAzA ( ) {
    double _result = 0;
    HRESULT _hr = get_AzA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5970)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAzA ( double pVal ) {
    HRESULT _hr = put_AzA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5971)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAzF ( ) {
    double _result = 0;
    HRESULT _hr = get_AzF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5972)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAzF ( double pVal ) {
    HRESULT _hr = put_AzF(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5973)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetAzP ( ) {
    double _result = 0;
    HRESULT _hr = get_AzP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5974)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutAzP ( double pVal ) {
    HRESULT _hr = put_AzP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5975)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetEl0 ( ) {
    double _result = 0;
    HRESULT _hr = get_El0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5976)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutEl0 ( double pVal ) {
    HRESULT _hr = put_El0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5977)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetEl1 ( ) {
    double _result = 0;
    HRESULT _hr = get_El1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5978)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutEl1 ( double pVal ) {
    HRESULT _hr = put_El1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5979)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetEl2 ( ) {
    double _result = 0;
    HRESULT _hr = get_El2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5980)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutEl2 ( double pVal ) {
    HRESULT _hr = put_El2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5981)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetEl3 ( ) {
    double _result = 0;
    HRESULT _hr = get_El3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5982)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutEl3 ( double pVal ) {
    HRESULT _hr = put_El3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5983)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetEl4 ( ) {
    double _result = 0;
    HRESULT _hr = get_El4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5984)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutEl4 ( double pVal ) {
    HRESULT _hr = put_El4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5985)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetElA ( ) {
    double _result = 0;
    HRESULT _hr = get_ElA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5986)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutElA ( double pVal ) {
    HRESULT _hr = put_ElA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5987)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetElF ( ) {
    double _result = 0;
    HRESULT _hr = get_ElF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5988)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutElF ( double pVal ) {
    HRESULT _hr = put_ElF(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5989)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetElP ( ) {
    double _result = 0;
    HRESULT _hr = get_ElP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5990)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::PutElP ( double pVal ) {
    HRESULT _hr = put_ElP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5991)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteTimeVarying::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAAttitudeControlFiniteTimeVarying wrapper method implementations
//

#pragma implementation_key(5992)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetThrustAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThrustAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5993)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutThrustAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ThrustAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5994)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

#pragma implementation_key(5995)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAz0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5996)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAz0 ( double pVal ) {
    HRESULT _hr = put_Az0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5997)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAz1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5998)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAz1 ( double pVal ) {
    HRESULT _hr = put_Az1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5999)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAz2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6000)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAz2 ( double pVal ) {
    HRESULT _hr = put_Az2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6001)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAz3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6002)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAz3 ( double pVal ) {
    HRESULT _hr = put_Az3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6003)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAz4 ( ) {
    double _result = 0;
    HRESULT _hr = get_Az4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6004)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAz4 ( double pVal ) {
    HRESULT _hr = put_Az4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6005)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAzA ( ) {
    double _result = 0;
    HRESULT _hr = get_AzA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6006)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAzA ( double pVal ) {
    HRESULT _hr = put_AzA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6007)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAzF ( ) {
    double _result = 0;
    HRESULT _hr = get_AzF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6008)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAzF ( double pVal ) {
    HRESULT _hr = put_AzF(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6009)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetAzP ( ) {
    double _result = 0;
    HRESULT _hr = get_AzP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6010)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutAzP ( double pVal ) {
    HRESULT _hr = put_AzP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6011)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetEl0 ( ) {
    double _result = 0;
    HRESULT _hr = get_El0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6012)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutEl0 ( double pVal ) {
    HRESULT _hr = put_El0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6013)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetEl1 ( ) {
    double _result = 0;
    HRESULT _hr = get_El1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6014)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutEl1 ( double pVal ) {
    HRESULT _hr = put_El1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6015)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetEl2 ( ) {
    double _result = 0;
    HRESULT _hr = get_El2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6016)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutEl2 ( double pVal ) {
    HRESULT _hr = put_El2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6017)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetEl3 ( ) {
    double _result = 0;
    HRESULT _hr = get_El3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6018)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutEl3 ( double pVal ) {
    HRESULT _hr = put_El3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6019)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetEl4 ( ) {
    double _result = 0;
    HRESULT _hr = get_El4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6020)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutEl4 ( double pVal ) {
    HRESULT _hr = put_El4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6021)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetElA ( ) {
    double _result = 0;
    HRESULT _hr = get_ElA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6022)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutElA ( double pVal ) {
    HRESULT _hr = put_ElA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6023)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetElF ( ) {
    double _result = 0;
    HRESULT _hr = get_ElF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6024)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutElF ( double pVal ) {
    HRESULT _hr = put_ElF(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6025)
inline double AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::GetElP ( ) {
    double _result = 0;
    HRESULT _hr = get_ElP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6026)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteTimeVarying::PutElP ( double pVal ) {
    HRESULT _hr = put_ElP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAAttitudeControlFiniteVelocityVector wrapper method implementations
//

#pragma implementation_key(6027)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6028)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6029)
inline double AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6030)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6031)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6032)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6033)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6034)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6035)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6036)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6037)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6038)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6039)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6040)
inline void AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6041)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6042)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::_IAgVAAttitudeControlFiniteVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface IAgVAAttitudeControlFiniteVelocityVector wrapper method implementations
//

#pragma implementation_key(6043)
inline enum AgStkGatorLib::AgEVAAttitudeUpdate AgStkGatorLib::IAgVAAttitudeControlFiniteVelocityVector::GetAttitudeUpdate ( ) {
    enum AgEVAAttitudeUpdate _result;
    HRESULT _hr = get_AttitudeUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6044)
inline void AgStkGatorLib::IAgVAAttitudeControlFiniteVelocityVector::PutAttitudeUpdate ( enum AgEVAAttitudeUpdate pVal ) {
    HRESULT _hr = put_AttitudeUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6045)
inline STKUtil::IAgDirectionPtr AgStkGatorLib::IAgVAAttitudeControlFiniteVelocityVector::GetBodyConstraintVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_BodyConstraintVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface _IAgVAAttitudeControlFinitePlugin wrapper method implementations
//

#pragma implementation_key(6046)
inline double AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetLeadDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6047)
inline void AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::PutLeadDuration ( double pVal ) {
    HRESULT _hr = put_LeadDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6048)
inline double AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetTrailDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6049)
inline void AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::PutTrailDuration ( double pVal ) {
    HRESULT _hr = put_TrailDuration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6050)
inline enum AgStkGatorLib::AgEVABodyAxis AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetBodyAxis ( ) {
    enum AgEVABodyAxis _result;
    HRESULT _hr = get_BodyAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6051)
inline void AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::PutBodyAxis ( enum AgEVABodyAxis pVal ) {
    HRESULT _hr = put_BodyAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6052)
inline enum AgStkGatorLib::AgEVAConstraintSign AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetConstraintSign ( ) {
    enum AgEVAConstraintSign _result;
    HRESULT _hr = get_ConstraintSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6053)
inline void AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::PutConstraintSign ( enum AgEVAConstraintSign pVal ) {
    HRESULT _hr = put_ConstraintSign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6054)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetConstraintVectorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintVectorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6055)
inline void AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::PutConstraintVectorName ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstraintVectorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6056)
inline enum AgStkGatorLib::AgEVACustomFunction AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetCustomFunction ( ) {
    enum AgEVACustomFunction _result;
    HRESULT _hr = get_CustomFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6057)
inline void AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::PutCustomFunction ( enum AgEVACustomFunction pVal ) {
    HRESULT _hr = put_CustomFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6058)
inline HRESULT AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::SelectPluginByName ( _bstr_t Name ) {
    HRESULT _hr = raw_SelectPluginByName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6059)
inline _bstr_t AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6060)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6061)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAAttitudeControlFinitePlugin::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAAttitudeControlFinitePlugin wrapper method implementations
//

#pragma implementation_key(6062)
inline HRESULT AgStkGatorLib::IAgVAAttitudeControlFinitePlugin::SelectPluginByName ( _bstr_t Name ) {
    HRESULT _hr = raw_SelectPluginByName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6063)
inline _bstr_t AgStkGatorLib::IAgVAAttitudeControlFinitePlugin::GetPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6064)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVAAttitudeControlFinitePlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

//
// interface _IAgVAManeuverFinitePropagator wrapper method implementations
//

#pragma implementation_key(6065)
inline _bstr_t AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetPropagatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropagatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6066)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutPropagatorName ( _bstr_t pVal ) {
    HRESULT _hr = put_PropagatorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6067)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetStoppingConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_StoppingConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(6068)
inline double AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetMinPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6069)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutMinPropagationTime ( double pVal ) {
    HRESULT _hr = put_MinPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6070)
inline double AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetMaxPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6071)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutMaxPropagationTime ( double pVal ) {
    HRESULT _hr = put_MaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6072)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetEnableMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6073)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutEnableMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6074)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetEnableWarningMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWarningMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6075)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutEnableWarningMessage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWarningMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6076)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetEnableCenterBurn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableCenterBurn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6077)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutEnableCenterBurn ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableCenterBurn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6078)
inline double AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetBias ( ) {
    double _result = 0;
    HRESULT _hr = get_Bias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6079)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutBias ( double pVal ) {
    HRESULT _hr = put_Bias(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6080)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetOverrideMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6081)
inline void AgStkGatorLib::_IAgVAManeuverFinitePropagator::PutOverrideMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OverrideMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6082)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAManeuverFinitePropagator::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAMCSHold wrapper method implementations
//

#pragma implementation_key(6083)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSHold::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6084)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSHold::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(6085)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSHold::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6086)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSHold::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6087)
inline _variant_t AgStkGatorLib::_IAgVAMCSHold::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6088)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSHold::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6089)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSHold::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6090)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSHold::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(6091)
inline double AgStkGatorLib::_IAgVAMCSHold::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6092)
inline void AgStkGatorLib::_IAgVAMCSHold::PutStepSize ( double pVal ) {
    HRESULT _hr = put_StepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6093)
inline _bstr_t AgStkGatorLib::_IAgVAMCSHold::GetHoldFrameName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HoldFrameName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6094)
inline void AgStkGatorLib::_IAgVAMCSHold::PutHoldFrameName ( _bstr_t pVal ) {
    HRESULT _hr = put_HoldFrameName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6095)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::GetEnableHoldAttitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableHoldAttitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6096)
inline void AgStkGatorLib::_IAgVAMCSHold::PutEnableHoldAttitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableHoldAttitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6097)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::_IAgVAMCSHold::GetStoppingConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_StoppingConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(6098)
inline double AgStkGatorLib::_IAgVAMCSHold::GetMinPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6099)
inline void AgStkGatorLib::_IAgVAMCSHold::PutMinPropagationTime ( double pVal ) {
    HRESULT _hr = put_MinPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6100)
inline double AgStkGatorLib::_IAgVAMCSHold::GetMaxPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6101)
inline void AgStkGatorLib::_IAgVAMCSHold::PutMaxPropagationTime ( double pVal ) {
    HRESULT _hr = put_MaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6102)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::GetEnableMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6103)
inline void AgStkGatorLib::_IAgVAMCSHold::PutEnableMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6104)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::GetEnableWarningMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWarningMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6105)
inline void AgStkGatorLib::_IAgVAMCSHold::PutEnableWarningMessage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWarningMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6106)
inline HRESULT AgStkGatorLib::_IAgVAMCSHold::EnableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6107)
inline HRESULT AgStkGatorLib::_IAgVAMCSHold::DisableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6108)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::IsControlParameterEnabled ( enum AgEVAControlAdvanced Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6109)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6110)
inline _bstr_t AgStkGatorLib::_IAgVAMCSHold::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6111)
inline void AgStkGatorLib::_IAgVAMCSHold::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6112)
inline _bstr_t AgStkGatorLib::_IAgVAMCSHold::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6113)
inline void AgStkGatorLib::_IAgVAMCSHold::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6114)
inline _bstr_t AgStkGatorLib::_IAgVAMCSHold::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6115)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6116)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSHold::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6117)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSHold::GetOverrideMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6118)
inline void AgStkGatorLib::_IAgVAMCSHold::PutOverrideMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OverrideMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6119)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSHold::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSHold wrapper method implementations
//

#pragma implementation_key(6120)
inline double AgStkGatorLib::IAgVAMCSHold::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6121)
inline void AgStkGatorLib::IAgVAMCSHold::PutStepSize ( double pVal ) {
    HRESULT _hr = put_StepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6122)
inline _bstr_t AgStkGatorLib::IAgVAMCSHold::GetHoldFrameName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HoldFrameName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6123)
inline void AgStkGatorLib::IAgVAMCSHold::PutHoldFrameName ( _bstr_t pVal ) {
    HRESULT _hr = put_HoldFrameName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6124)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSHold::GetEnableHoldAttitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableHoldAttitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6125)
inline void AgStkGatorLib::IAgVAMCSHold::PutEnableHoldAttitude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableHoldAttitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6126)
inline AgStkGatorLib::IAgVAStoppingConditionCollectionPtr AgStkGatorLib::IAgVAMCSHold::GetStoppingConditions ( ) {
    struct IAgVAStoppingConditionCollection * _result = 0;
    HRESULT _hr = get_StoppingConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStoppingConditionCollectionPtr(_result, false);
}

#pragma implementation_key(6127)
inline double AgStkGatorLib::IAgVAMCSHold::GetMinPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6128)
inline void AgStkGatorLib::IAgVAMCSHold::PutMinPropagationTime ( double pVal ) {
    HRESULT _hr = put_MinPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6129)
inline double AgStkGatorLib::IAgVAMCSHold::GetMaxPropagationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6130)
inline void AgStkGatorLib::IAgVAMCSHold::PutMaxPropagationTime ( double pVal ) {
    HRESULT _hr = put_MaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6131)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSHold::GetEnableMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6132)
inline void AgStkGatorLib::IAgVAMCSHold::PutEnableMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6133)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSHold::GetEnableWarningMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWarningMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6134)
inline void AgStkGatorLib::IAgVAMCSHold::PutEnableWarningMessage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWarningMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6135)
inline HRESULT AgStkGatorLib::IAgVAMCSHold::EnableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6136)
inline HRESULT AgStkGatorLib::IAgVAMCSHold::DisableControlParameter ( enum AgEVAControlAdvanced Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6137)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSHold::IsControlParameterEnabled ( enum AgEVAControlAdvanced Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6138)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSHold::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6139)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSHold::GetOverrideMaxPropagationTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideMaxPropagationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6140)
inline void AgStkGatorLib::IAgVAMCSHold::PutOverrideMaxPropagationTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OverrideMaxPropagationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAUserVariableUpdate wrapper method implementations
//

#pragma implementation_key(6141)
inline _bstr_t AgStkGatorLib::IAgVAUserVariableUpdate::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6142)
inline _bstr_t AgStkGatorLib::IAgVAUserVariableUpdate::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6143)
inline _variant_t AgStkGatorLib::IAgVAUserVariableUpdate::GetVariableValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VariableValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6144)
inline void AgStkGatorLib::IAgVAUserVariableUpdate::PutVariableValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_VariableValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6145)
inline enum AgStkGatorLib::AgEVAUpdateAction AgStkGatorLib::IAgVAUserVariableUpdate::GetVariableAction ( ) {
    enum AgEVAUpdateAction _result;
    HRESULT _hr = get_VariableAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6146)
inline void AgStkGatorLib::IAgVAUserVariableUpdate::PutVariableAction ( enum AgEVAUpdateAction pVal ) {
    HRESULT _hr = put_VariableAction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6147)
inline HRESULT AgStkGatorLib::IAgVAUserVariableUpdate::EnableControlParameter ( ) {
    HRESULT _hr = raw_EnableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6148)
inline HRESULT AgStkGatorLib::IAgVAUserVariableUpdate::DisableControlParameter ( ) {
    HRESULT _hr = raw_DisableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6149)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUserVariableUpdate::IsControlParameterEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6150)
inline VARIANT_BOOL AgStkGatorLib::IAgVAUserVariableUpdate::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAUserVariableUpdateCollection wrapper method implementations
//

#pragma implementation_key(6151)
inline AgStkGatorLib::IAgVAUserVariableUpdatePtr AgStkGatorLib::IAgVAUserVariableUpdateCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAUserVariableUpdate * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableUpdatePtr(_result, false);
}

#pragma implementation_key(6152)
inline IUnknownPtr AgStkGatorLib::IAgVAUserVariableUpdateCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6153)
inline long AgStkGatorLib::IAgVAUserVariableUpdateCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAMCSUpdate wrapper method implementations
//

#pragma implementation_key(6154)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSUpdate::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6155)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSUpdate::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(6156)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSUpdate::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6157)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSUpdate::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6158)
inline _variant_t AgStkGatorLib::_IAgVAMCSUpdate::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6159)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSUpdate::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6160)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSUpdate::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6161)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSUpdate::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(6162)
inline HRESULT AgStkGatorLib::_IAgVAMCSUpdate::SetActionAndValue ( enum AgEVAUpdateParam ParameterType, enum AgEVAUpdateAction ActionType, double Value ) {
    HRESULT _hr = raw_SetActionAndValue(ParameterType, ActionType, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6163)
inline enum AgStkGatorLib::AgEVAUpdateAction AgStkGatorLib::_IAgVAMCSUpdate::GetAction ( enum AgEVAUpdateParam ParameterType ) {
    enum AgEVAUpdateAction _result;
    HRESULT _hr = raw_GetAction(ParameterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6164)
inline double AgStkGatorLib::_IAgVAMCSUpdate::GetValue ( enum AgEVAUpdateParam ParameterType ) {
    double _result = 0;
    HRESULT _hr = raw_GetValue(ParameterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6165)
inline HRESULT AgStkGatorLib::_IAgVAMCSUpdate::SetAction ( enum AgEVAUpdateParam ParameterName, enum AgEVAUpdateAction ActionType ) {
    HRESULT _hr = raw_SetAction(ParameterName, ActionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6166)
inline HRESULT AgStkGatorLib::_IAgVAMCSUpdate::SetValue ( enum AgEVAUpdateParam ParameterName, double Value ) {
    HRESULT _hr = raw_SetValue(ParameterName, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6167)
inline HRESULT AgStkGatorLib::_IAgVAMCSUpdate::DisableControlParameter ( enum AgEVAControlUpdate Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6168)
inline HRESULT AgStkGatorLib::_IAgVAMCSUpdate::EnableControlParameter ( enum AgEVAControlUpdate Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6169)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSUpdate::IsControlParameterEnabled ( enum AgEVAControlUpdate Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6170)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSUpdate::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6171)
inline _bstr_t AgStkGatorLib::_IAgVAMCSUpdate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6172)
inline void AgStkGatorLib::_IAgVAMCSUpdate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6173)
inline _bstr_t AgStkGatorLib::_IAgVAMCSUpdate::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6174)
inline void AgStkGatorLib::_IAgVAMCSUpdate::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6175)
inline _bstr_t AgStkGatorLib::_IAgVAMCSUpdate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6176)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSUpdate::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6177)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSUpdate::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6178)
inline AgStkGatorLib::IAgVAUserVariableUpdateCollectionPtr AgStkGatorLib::_IAgVAMCSUpdate::GetUserVariables ( ) {
    struct IAgVAUserVariableUpdateCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableUpdateCollectionPtr(_result, false);
}

#pragma implementation_key(6179)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSUpdate::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSUpdate wrapper method implementations
//

#pragma implementation_key(6180)
inline HRESULT AgStkGatorLib::IAgVAMCSUpdate::SetActionAndValue ( enum AgEVAUpdateParam ParameterType, enum AgEVAUpdateAction ActionType, double Value ) {
    HRESULT _hr = raw_SetActionAndValue(ParameterType, ActionType, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6181)
inline enum AgStkGatorLib::AgEVAUpdateAction AgStkGatorLib::IAgVAMCSUpdate::GetAction ( enum AgEVAUpdateParam ParameterType ) {
    enum AgEVAUpdateAction _result;
    HRESULT _hr = raw_GetAction(ParameterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6182)
inline double AgStkGatorLib::IAgVAMCSUpdate::GetValue ( enum AgEVAUpdateParam ParameterType ) {
    double _result = 0;
    HRESULT _hr = raw_GetValue(ParameterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6183)
inline HRESULT AgStkGatorLib::IAgVAMCSUpdate::SetAction ( enum AgEVAUpdateParam ParameterName, enum AgEVAUpdateAction ActionType ) {
    HRESULT _hr = raw_SetAction(ParameterName, ActionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6184)
inline HRESULT AgStkGatorLib::IAgVAMCSUpdate::SetValue ( enum AgEVAUpdateParam ParameterName, double Value ) {
    HRESULT _hr = raw_SetValue(ParameterName, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6185)
inline HRESULT AgStkGatorLib::IAgVAMCSUpdate::DisableControlParameter ( enum AgEVAControlUpdate Param ) {
    HRESULT _hr = raw_DisableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6186)
inline HRESULT AgStkGatorLib::IAgVAMCSUpdate::EnableControlParameter ( enum AgEVAControlUpdate Param ) {
    HRESULT _hr = raw_EnableControlParameter(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6187)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSUpdate::IsControlParameterEnabled ( enum AgEVAControlUpdate Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6188)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSUpdate::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6189)
inline AgStkGatorLib::IAgVAUserVariableUpdateCollectionPtr AgStkGatorLib::IAgVAMCSUpdate::GetUserVariables ( ) {
    struct IAgVAUserVariableUpdateCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableUpdateCollectionPtr(_result, false);
}

//
// interface _IAgVAMCSReturn wrapper method implementations
//

#pragma implementation_key(6190)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSReturn::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6191)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSReturn::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(6192)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSReturn::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6193)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSReturn::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6194)
inline _variant_t AgStkGatorLib::_IAgVAMCSReturn::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6195)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSReturn::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6196)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSReturn::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6197)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSReturn::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(6198)
inline enum AgStkGatorLib::AgEVAReturnControl AgStkGatorLib::_IAgVAMCSReturn::GetReturnControlToParentSequence ( ) {
    enum AgEVAReturnControl _result;
    HRESULT _hr = get_ReturnControlToParentSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6199)
inline void AgStkGatorLib::_IAgVAMCSReturn::PutReturnControlToParentSequence ( enum AgEVAReturnControl pVal ) {
    HRESULT _hr = put_ReturnControlToParentSequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6200)
inline _bstr_t AgStkGatorLib::_IAgVAMCSReturn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6201)
inline void AgStkGatorLib::_IAgVAMCSReturn::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6202)
inline _bstr_t AgStkGatorLib::_IAgVAMCSReturn::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6203)
inline void AgStkGatorLib::_IAgVAMCSReturn::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6204)
inline _bstr_t AgStkGatorLib::_IAgVAMCSReturn::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6205)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSReturn::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6206)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSReturn::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6207)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSReturn::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSReturn wrapper method implementations
//

#pragma implementation_key(6208)
inline enum AgStkGatorLib::AgEVAReturnControl AgStkGatorLib::IAgVAMCSReturn::GetReturnControlToParentSequence ( ) {
    enum AgEVAReturnControl _result;
    HRESULT _hr = get_ReturnControlToParentSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6209)
inline void AgStkGatorLib::IAgVAMCSReturn::PutReturnControlToParentSequence ( enum AgEVAReturnControl pVal ) {
    HRESULT _hr = put_ReturnControlToParentSequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAMCSStop wrapper method implementations
//

#pragma implementation_key(6210)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSStop::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6211)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSStop::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(6212)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSStop::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6213)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSStop::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6214)
inline _variant_t AgStkGatorLib::_IAgVAMCSStop::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6215)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSStop::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6216)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSStop::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6217)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSStop::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(6218)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSStop::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6219)
inline void AgStkGatorLib::_IAgVAMCSStop::PutEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6220)
inline _bstr_t AgStkGatorLib::_IAgVAMCSStop::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6221)
inline void AgStkGatorLib::_IAgVAMCSStop::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6222)
inline _bstr_t AgStkGatorLib::_IAgVAMCSStop::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6223)
inline void AgStkGatorLib::_IAgVAMCSStop::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6224)
inline _bstr_t AgStkGatorLib::_IAgVAMCSStop::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6225)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSStop::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6226)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSStop::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6227)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSStop::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSStop wrapper method implementations
//

#pragma implementation_key(6228)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSStop::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6229)
inline void AgStkGatorLib::IAgVAMCSStop::PutEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAProfile wrapper method implementations
//

#pragma implementation_key(6230)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::IAgVAProfile::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6231)
inline _bstr_t AgStkGatorLib::IAgVAProfile::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6232)
inline void AgStkGatorLib::IAgVAProfile::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6233)
inline _bstr_t AgStkGatorLib::IAgVAProfile::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6234)
inline _bstr_t AgStkGatorLib::IAgVAProfile::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6235)
inline void AgStkGatorLib::IAgVAProfile::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6236)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::IAgVAProfile::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6237)
inline void AgStkGatorLib::IAgVAProfile::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6238)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::IAgVAProfile::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileCollection wrapper method implementations
//

#pragma implementation_key(6239)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::IAgVAProfileCollection::Add ( _bstr_t ProfileName ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Add(ProfileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6240)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::IAgVAProfileCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6241)
inline IUnknownPtr AgStkGatorLib::IAgVAProfileCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6242)
inline long AgStkGatorLib::IAgVAProfileCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6243)
inline SAFEARRAY * AgStkGatorLib::IAgVAProfileCollection::GetAvailableProfiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProfiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6244)
inline HRESULT AgStkGatorLib::IAgVAProfileCollection::Remove ( const _variant_t & IndexOrProfileName ) {
    HRESULT _hr = raw_Remove(IndexOrProfileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6245)
inline HRESULT AgStkGatorLib::IAgVAProfileCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6246)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVAProfileCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6247)
inline HRESULT AgStkGatorLib::IAgVAProfileCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6248)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::IAgVAProfileCollection::Paste ( const _variant_t & IndexOrName, enum AgEVAProfileInsertDirection Direction ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Paste(IndexOrName, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6249)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::IAgVAProfileCollection::InsertCopy ( struct IAgVAProfile * Profile, const _variant_t & IndexOrName, enum AgEVAProfileInsertDirection Direction ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_InsertCopy(Profile, IndexOrName, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6250)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::IAgVAProfileCollection::Add2 ( _bstr_t ProfileName, const _variant_t & IndexOrName, enum AgEVAProfileInsertDirection Direction ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Add2(ProfileName, IndexOrName, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

//
// interface _IAgVAMCSTargetSequence wrapper method implementations
//

#pragma implementation_key(6251)
inline enum AgStkGatorLib::AgEVASegmentType AgStkGatorLib::_IAgVAMCSTargetSequence::GetType ( ) {
    enum AgEVASegmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6252)
inline AgStkGatorLib::IAgVAMCSSegmentPropertiesPtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetProperties ( ) {
    struct IAgVAMCSSegmentProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentPropertiesPtr(_result, false);
}

#pragma implementation_key(6253)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetInitialState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6254)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetFinalState ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = get_FinalState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6255)
inline _variant_t AgStkGatorLib::_IAgVAMCSTargetSequence::GetResultValue ( _bstr_t ResultName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetResultValue(ResultName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6256)
inline AgStkGatorLib::IAgVAStatePtr AgStkGatorLib::_IAgVAMCSTargetSequence::Run ( ) {
    struct IAgVAState * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAStatePtr(_result, false);
}

#pragma implementation_key(6257)
inline AgStkGatorLib::IAgVACalcObjectCollectionPtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetResults ( ) {
    struct IAgVACalcObjectCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6258)
inline STKObjects::IAgDrResultPtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetExecSummary ( ) {
    struct STKObjects::IAgDrResult * _result = 0;
    HRESULT _hr = get_ExecSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgDrResultPtr(_result, false);
}

#pragma implementation_key(6259)
inline enum AgStkGatorLib::AgEVATargetSeqAction AgStkGatorLib::_IAgVAMCSTargetSequence::GetAction ( ) {
    enum AgEVATargetSeqAction _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6260)
inline void AgStkGatorLib::_IAgVAMCSTargetSequence::PutAction ( enum AgEVATargetSeqAction pVal ) {
    HRESULT _hr = put_Action(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6261)
inline enum AgStkGatorLib::AgEVAProfilesFinish AgStkGatorLib::_IAgVAMCSTargetSequence::GetWhenProfilesFinish ( ) {
    enum AgEVAProfilesFinish _result;
    HRESULT _hr = get_WhenProfilesFinish(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6262)
inline void AgStkGatorLib::_IAgVAMCSTargetSequence::PutWhenProfilesFinish ( enum AgEVAProfilesFinish pVal ) {
    HRESULT _hr = put_WhenProfilesFinish(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6263)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSTargetSequence::GetContinueOnFailure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueOnFailure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6264)
inline void AgStkGatorLib::_IAgVAMCSTargetSequence::PutContinueOnFailure ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ContinueOnFailure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6265)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetSegments ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(6266)
inline AgStkGatorLib::IAgVAProfileCollectionPtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetProfiles ( ) {
    struct IAgVAProfileCollection * _result = 0;
    HRESULT _hr = get_Profiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfileCollectionPtr(_result, false);
}

#pragma implementation_key(6267)
inline HRESULT AgStkGatorLib::_IAgVAMCSTargetSequence::ApplyProfiles ( ) {
    HRESULT _hr = raw_ApplyProfiles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6268)
inline HRESULT AgStkGatorLib::_IAgVAMCSTargetSequence::ResetProfiles ( ) {
    HRESULT _hr = raw_ResetProfiles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6269)
inline HRESULT AgStkGatorLib::_IAgVAMCSTargetSequence::ApplyProfile ( struct IAgVAProfile * Profile ) {
    HRESULT _hr = raw_ApplyProfile(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6270)
inline HRESULT AgStkGatorLib::_IAgVAMCSTargetSequence::ResetProfile ( struct IAgVAProfile * Profile ) {
    HRESULT _hr = raw_ResetProfile(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6271)
inline HRESULT AgStkGatorLib::_IAgVAMCSTargetSequence::ApplyProfileByName ( _bstr_t Profile ) {
    HRESULT _hr = raw_ApplyProfileByName(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6272)
inline HRESULT AgStkGatorLib::_IAgVAMCSTargetSequence::ResetProfileByName ( _bstr_t Profile ) {
    HRESULT _hr = raw_ResetProfileByName(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6273)
inline _bstr_t AgStkGatorLib::_IAgVAMCSTargetSequence::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6274)
inline void AgStkGatorLib::_IAgVAMCSTargetSequence::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6275)
inline _bstr_t AgStkGatorLib::_IAgVAMCSTargetSequence::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6276)
inline void AgStkGatorLib::_IAgVAMCSTargetSequence::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6277)
inline _bstr_t AgStkGatorLib::_IAgVAMCSTargetSequence::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6278)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSTargetSequence::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6279)
inline IUnknownPtr AgStkGatorLib::_IAgVAMCSTargetSequence::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6280)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSTargetSequence::GetResetInnerTargeters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetInnerTargeters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6281)
inline void AgStkGatorLib::_IAgVAMCSTargetSequence::PutResetInnerTargeters ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetInnerTargeters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6282)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSTargetSequence::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVAMCSTargetSequence wrapper method implementations
//

#pragma implementation_key(6283)
inline enum AgStkGatorLib::AgEVATargetSeqAction AgStkGatorLib::IAgVAMCSTargetSequence::GetAction ( ) {
    enum AgEVATargetSeqAction _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6284)
inline void AgStkGatorLib::IAgVAMCSTargetSequence::PutAction ( enum AgEVATargetSeqAction pVal ) {
    HRESULT _hr = put_Action(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6285)
inline enum AgStkGatorLib::AgEVAProfilesFinish AgStkGatorLib::IAgVAMCSTargetSequence::GetWhenProfilesFinish ( ) {
    enum AgEVAProfilesFinish _result;
    HRESULT _hr = get_WhenProfilesFinish(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6286)
inline void AgStkGatorLib::IAgVAMCSTargetSequence::PutWhenProfilesFinish ( enum AgEVAProfilesFinish pVal ) {
    HRESULT _hr = put_WhenProfilesFinish(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6287)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSTargetSequence::GetContinueOnFailure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueOnFailure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6288)
inline void AgStkGatorLib::IAgVAMCSTargetSequence::PutContinueOnFailure ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ContinueOnFailure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6289)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::IAgVAMCSTargetSequence::GetSegments ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(6290)
inline AgStkGatorLib::IAgVAProfileCollectionPtr AgStkGatorLib::IAgVAMCSTargetSequence::GetProfiles ( ) {
    struct IAgVAProfileCollection * _result = 0;
    HRESULT _hr = get_Profiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfileCollectionPtr(_result, false);
}

#pragma implementation_key(6291)
inline HRESULT AgStkGatorLib::IAgVAMCSTargetSequence::ApplyProfiles ( ) {
    HRESULT _hr = raw_ApplyProfiles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6292)
inline HRESULT AgStkGatorLib::IAgVAMCSTargetSequence::ResetProfiles ( ) {
    HRESULT _hr = raw_ResetProfiles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6293)
inline HRESULT AgStkGatorLib::IAgVAMCSTargetSequence::ApplyProfile ( struct IAgVAProfile * Profile ) {
    HRESULT _hr = raw_ApplyProfile(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6294)
inline HRESULT AgStkGatorLib::IAgVAMCSTargetSequence::ResetProfile ( struct IAgVAProfile * Profile ) {
    HRESULT _hr = raw_ResetProfile(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6295)
inline HRESULT AgStkGatorLib::IAgVAMCSTargetSequence::ApplyProfileByName ( _bstr_t Profile ) {
    HRESULT _hr = raw_ApplyProfileByName(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6296)
inline HRESULT AgStkGatorLib::IAgVAMCSTargetSequence::ResetProfileByName ( _bstr_t Profile ) {
    HRESULT _hr = raw_ResetProfileByName(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6297)
inline VARIANT_BOOL AgStkGatorLib::IAgVAMCSTargetSequence::GetResetInnerTargeters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetInnerTargeters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6298)
inline void AgStkGatorLib::IAgVAMCSTargetSequence::PutResetInnerTargeters ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetInnerTargeters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAMCSOptions wrapper method implementations
//

#pragma implementation_key(6299)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetDrawTrajectoryIn2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawTrajectoryIn2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6300)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutDrawTrajectoryIn2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawTrajectoryIn2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6301)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetDrawTrajectoryIn3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawTrajectoryIn3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6302)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutDrawTrajectoryIn3D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawTrajectoryIn3D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6303)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetUpdateAnimationTimeForAllObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateAnimationTimeForAllObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6304)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutUpdateAnimationTimeForAllObjects ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateAnimationTimeForAllObjects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6305)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetClearDWCGraphicsBeforeEachRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearDWCGraphicsBeforeEachRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6306)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutClearDWCGraphicsBeforeEachRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ClearDWCGraphicsBeforeEachRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6307)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetClearAdditionalBPlanePoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearAdditionalBPlanePoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6308)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutClearAdditionalBPlanePoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ClearAdditionalBPlanePoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6309)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetPropagateOnApply ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PropagateOnApply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6310)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutPropagateOnApply ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PropagateOnApply(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6311)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetEnableTrajectorySegmentColors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTrajectorySegmentColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6312)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutEnableTrajectorySegmentColors ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableTrajectorySegmentColors(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6313)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetSaveNumbersInRawFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveNumbersInRawFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6314)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutSaveNumbersInRawFormat ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SaveNumbersInRawFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6315)
inline double AgStkGatorLib::_IAgVAMCSOptions::GetStoppingConditionTimeTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_StoppingConditionTimeTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6316)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutStoppingConditionTimeTolerance ( double pVal ) {
    HRESULT _hr = put_StoppingConditionTimeTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6317)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetEnableSegmentControls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSegmentControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6318)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutEnableSegmentControls ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSegmentControls(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6319)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetEnableSegmentResults ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSegmentResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6320)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutEnableSegmentResults ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSegmentResults(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6321)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetEnableLogging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLogging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6322)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutEnableLogging ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLogging(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6323)
inline double AgStkGatorLib::_IAgVAMCSOptions::GetGraphicsUpdateRate ( ) {
    double _result = 0;
    HRESULT _hr = get_GraphicsUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6324)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutGraphicsUpdateRate ( double pVal ) {
    HRESULT _hr = put_GraphicsUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6325)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetPromoteControls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PromoteControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6326)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutPromoteControls ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PromoteControls(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6327)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetUseNominalSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseNominalSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6328)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutUseNominalSettings ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseNominalSettings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6329)
inline double AgStkGatorLib::_IAgVAMCSOptions::GetMinEphemStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinEphemStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6330)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutMinEphemStep ( double pVal ) {
    HRESULT _hr = put_MinEphemStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6331)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSOptions::GetGenerateEphemeris ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6332)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutGenerateEphemeris ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateEphemeris(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6333)
inline AgStkGatorLib::IAgVAUserVariableDefinitionCollectionPtr AgStkGatorLib::_IAgVAMCSOptions::GetUserVariables ( ) {
    struct IAgVAUserVariableDefinitionCollection * _result = 0;
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAUserVariableDefinitionCollectionPtr(_result, false);
}

#pragma implementation_key(6334)
inline enum AgStkGatorLib::AgEVASmartRunMode AgStkGatorLib::_IAgVAMCSOptions::GetSmartRunMode ( ) {
    enum AgEVASmartRunMode _result;
    HRESULT _hr = get_SmartRunMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6335)
inline void AgStkGatorLib::_IAgVAMCSOptions::PutSmartRunMode ( enum AgEVASmartRunMode pVal ) {
    HRESULT _hr = put_SmartRunMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAPluginProperties wrapper method implementations
//

#pragma implementation_key(6336)
inline _variant_t AgStkGatorLib::_IAgVAPluginProperties::GetProperty ( _bstr_t Path ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6337)
inline HRESULT AgStkGatorLib::_IAgVAPluginProperties::SetProperty ( _bstr_t Path, const _variant_t & PropertyValue ) {
    HRESULT _hr = raw_SetProperty(Path, PropertyValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6338)
inline SAFEARRAY * AgStkGatorLib::_IAgVAPluginProperties::GetAvailableProperties ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVASearchPluginControl wrapper method implementations
//

#pragma implementation_key(6339)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginControl::GetControlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6340)
inline _variant_t AgStkGatorLib::IAgVASearchPluginControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6341)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginControl::GetParentSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6342)
inline _variant_t AgStkGatorLib::IAgVASearchPluginControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6343)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginControl::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6344)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVASearchPluginControl::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6345)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginControl::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6346)
inline VARIANT_BOOL AgStkGatorLib::IAgVASearchPluginControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6347)
inline void AgStkGatorLib::IAgVASearchPluginControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6348)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6349)
inline void AgStkGatorLib::IAgVASearchPluginControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6350)
inline SAFEARRAY * AgStkGatorLib::IAgVASearchPluginControl::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6351)
inline void AgStkGatorLib::IAgVASearchPluginControl::PutCurrentValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_CurrentValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASearchPluginControlCollection wrapper method implementations
//

#pragma implementation_key(6352)
inline AgStkGatorLib::IAgVASearchPluginControlPtr AgStkGatorLib::IAgVASearchPluginControlCollection::GetItem ( long Index ) {
    struct IAgVASearchPluginControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginControlPtr(_result, false);
}

#pragma implementation_key(6353)
inline IUnknownPtr AgStkGatorLib::IAgVASearchPluginControlCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6354)
inline long AgStkGatorLib::IAgVASearchPluginControlCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6355)
inline AgStkGatorLib::IAgVASearchPluginControlPtr AgStkGatorLib::IAgVASearchPluginControlCollection::GetControlByPaths ( _bstr_t ObjectPath, _bstr_t ControlPath ) {
    struct IAgVASearchPluginControl * _result = 0;
    HRESULT _hr = raw_GetControlByPaths(ObjectPath, ControlPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginControlPtr(_result, false);
}

//
// interface IAgVASearchPluginResult wrapper method implementations
//

#pragma implementation_key(6356)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginResult::GetResultName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6357)
inline _variant_t AgStkGatorLib::IAgVASearchPluginResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6358)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginResult::GetParentSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6359)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginResult::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6360)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVASearchPluginResult::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6361)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginResult::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6362)
inline VARIANT_BOOL AgStkGatorLib::IAgVASearchPluginResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6363)
inline void AgStkGatorLib::IAgVASearchPluginResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6364)
inline _bstr_t AgStkGatorLib::IAgVASearchPluginResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6365)
inline void AgStkGatorLib::IAgVASearchPluginResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6366)
inline SAFEARRAY * AgStkGatorLib::IAgVASearchPluginResult::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVASearchPluginResultCollection wrapper method implementations
//

#pragma implementation_key(6367)
inline AgStkGatorLib::IAgVASearchPluginResultPtr AgStkGatorLib::IAgVASearchPluginResultCollection::GetItem ( long Index ) {
    struct IAgVASearchPluginResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginResultPtr(_result, false);
}

#pragma implementation_key(6368)
inline IUnknownPtr AgStkGatorLib::IAgVASearchPluginResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6369)
inline long AgStkGatorLib::IAgVASearchPluginResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6370)
inline AgStkGatorLib::IAgVASearchPluginResultPtr AgStkGatorLib::IAgVASearchPluginResultCollection::GetResultByPaths ( _bstr_t ObjectPath, _bstr_t ResultPath ) {
    struct IAgVASearchPluginResult * _result = 0;
    HRESULT _hr = raw_GetResultByPaths(ObjectPath, ResultPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginResultPtr(_result, false);
}

//
// interface IAgVATargeterGraphActiveControl wrapper method implementations
//

#pragma implementation_key(6371)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphActiveControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6372)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphActiveControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6373)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraphActiveControl::GetShowGraphValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowGraphValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6374)
inline void AgStkGatorLib::IAgVATargeterGraphActiveControl::PutShowGraphValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowGraphValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6375)
inline OLE_COLOR AgStkGatorLib::IAgVATargeterGraphActiveControl::GetLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6376)
inline void AgStkGatorLib::IAgVATargeterGraphActiveControl::PutLineColor ( OLE_COLOR pValue ) {
    HRESULT _hr = put_LineColor(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6377)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphActiveControl::GetPointStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6378)
inline void AgStkGatorLib::IAgVATargeterGraphActiveControl::PutPointStyle ( _bstr_t pRetVal ) {
    HRESULT _hr = put_PointStyle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6379)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphActiveControl::GetYAxis ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6380)
inline void AgStkGatorLib::IAgVATargeterGraphActiveControl::PutYAxis ( _bstr_t pRetVal ) {
    HRESULT _hr = put_YAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVATargeterGraphActiveControlCollection wrapper method implementations
//

#pragma implementation_key(6381)
inline AgStkGatorLib::IAgVATargeterGraphActiveControlPtr AgStkGatorLib::IAgVATargeterGraphActiveControlCollection::GetItem ( long Index ) {
    struct IAgVATargeterGraphActiveControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphActiveControlPtr(_result, false);
}

#pragma implementation_key(6382)
inline IUnknownPtr AgStkGatorLib::IAgVATargeterGraphActiveControlCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6383)
inline long AgStkGatorLib::IAgVATargeterGraphActiveControlCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6384)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVATargeterGraphActiveControlCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVATargeterGraphResult wrapper method implementations
//

#pragma implementation_key(6385)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6386)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6387)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraphResult::GetShowDesiredValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDesiredValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6388)
inline void AgStkGatorLib::IAgVATargeterGraphResult::PutShowDesiredValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowDesiredValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6389)
inline OLE_COLOR AgStkGatorLib::IAgVATargeterGraphResult::GetLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6390)
inline void AgStkGatorLib::IAgVATargeterGraphResult::PutLineColor ( OLE_COLOR pValue ) {
    HRESULT _hr = put_LineColor(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6391)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphResult::GetPointStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6392)
inline void AgStkGatorLib::IAgVATargeterGraphResult::PutPointStyle ( _bstr_t pRetVal ) {
    HRESULT _hr = put_PointStyle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6393)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraphResult::GetYAxis ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6394)
inline void AgStkGatorLib::IAgVATargeterGraphResult::PutYAxis ( _bstr_t pRetVal ) {
    HRESULT _hr = put_YAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6395)
inline enum AgStkGatorLib::AgEVAGraphOption AgStkGatorLib::IAgVATargeterGraphResult::GetGraphOption ( ) {
    enum AgEVAGraphOption _result;
    HRESULT _hr = get_GraphOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6396)
inline void AgStkGatorLib::IAgVATargeterGraphResult::PutGraphOption ( enum AgEVAGraphOption pRetVal ) {
    HRESULT _hr = put_GraphOption(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6397)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraphResult::GetShowToleranceBand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToleranceBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6398)
inline void AgStkGatorLib::IAgVATargeterGraphResult::PutShowToleranceBand ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowToleranceBand(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVATargeterGraphResultCollection wrapper method implementations
//

#pragma implementation_key(6399)
inline AgStkGatorLib::IAgVATargeterGraphResultPtr AgStkGatorLib::IAgVATargeterGraphResultCollection::GetItem ( long Index ) {
    struct IAgVATargeterGraphResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphResultPtr(_result, false);
}

#pragma implementation_key(6400)
inline IUnknownPtr AgStkGatorLib::IAgVATargeterGraphResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6401)
inline long AgStkGatorLib::IAgVATargeterGraphResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6402)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVATargeterGraphResultCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVATargeterGraph wrapper method implementations
//

#pragma implementation_key(6403)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraph::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6404)
inline void AgStkGatorLib::IAgVATargeterGraph::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6405)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraph::GetGenerateOnRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateOnRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6406)
inline void AgStkGatorLib::IAgVATargeterGraph::PutGenerateOnRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateOnRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6407)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraph::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6408)
inline void AgStkGatorLib::IAgVATargeterGraph::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6409)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraph::GetShowLabelIterations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabelIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6410)
inline void AgStkGatorLib::IAgVATargeterGraph::PutShowLabelIterations ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowLabelIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6411)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraph::GetShowDesiredValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDesiredValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6412)
inline void AgStkGatorLib::IAgVATargeterGraph::PutShowDesiredValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowDesiredValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6413)
inline VARIANT_BOOL AgStkGatorLib::IAgVATargeterGraph::GetShowToleranceBand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToleranceBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6414)
inline void AgStkGatorLib::IAgVATargeterGraph::PutShowToleranceBand ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowToleranceBand(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6415)
inline _bstr_t AgStkGatorLib::IAgVATargeterGraph::GetIndependentVariable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IndependentVariable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6416)
inline void AgStkGatorLib::IAgVATargeterGraph::PutIndependentVariable ( _bstr_t pRetVal ) {
    HRESULT _hr = put_IndependentVariable(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6417)
inline AgStkGatorLib::IAgVATargeterGraphActiveControlCollectionPtr AgStkGatorLib::IAgVATargeterGraph::GetActiveControls ( ) {
    struct IAgVATargeterGraphActiveControlCollection * _result = 0;
    HRESULT _hr = get_ActiveControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphActiveControlCollectionPtr(_result, false);
}

#pragma implementation_key(6418)
inline AgStkGatorLib::IAgVATargeterGraphResultCollectionPtr AgStkGatorLib::IAgVATargeterGraph::GetResults ( ) {
    struct IAgVATargeterGraphResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphResultCollectionPtr(_result, false);
}

//
// interface IAgVATargeterGraphCollection wrapper method implementations
//

#pragma implementation_key(6419)
inline AgStkGatorLib::IAgVATargeterGraphPtr AgStkGatorLib::IAgVATargeterGraphCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgVATargeterGraph * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphPtr(_result, false);
}

#pragma implementation_key(6420)
inline IUnknownPtr AgStkGatorLib::IAgVATargeterGraphCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6421)
inline long AgStkGatorLib::IAgVATargeterGraphCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6422)
inline AgStkGatorLib::IAgVATargeterGraphPtr AgStkGatorLib::IAgVATargeterGraphCollection::AddGraph ( ) {
    struct IAgVATargeterGraph * _result = 0;
    HRESULT _hr = raw_AddGraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphPtr(_result, false);
}

#pragma implementation_key(6423)
inline HRESULT AgStkGatorLib::IAgVATargeterGraphCollection::RemoveGraph ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_RemoveGraph(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6424)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVATargeterGraphCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6425)
inline HRESULT AgStkGatorLib::IAgVATargeterGraphCollection::Cut ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Cut(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6426)
inline AgStkGatorLib::IAgVATargeterGraphPtr AgStkGatorLib::IAgVATargeterGraphCollection::Paste ( ) {
    struct IAgVATargeterGraph * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphPtr(_result, false);
}

#pragma implementation_key(6427)
inline AgStkGatorLib::IAgVATargeterGraphPtr AgStkGatorLib::IAgVATargeterGraphCollection::InsertCopy ( struct IAgVATargeterGraph * Graph ) {
    struct IAgVATargeterGraph * _result = 0;
    HRESULT _hr = raw_InsertCopy(Graph, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphPtr(_result, false);
}

//
// interface _IAgVAProfileSearchPlugin wrapper method implementations
//

#pragma implementation_key(6428)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileSearchPlugin::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6429)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSearchPlugin::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6430)
inline void AgStkGatorLib::_IAgVAProfileSearchPlugin::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6431)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSearchPlugin::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6432)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSearchPlugin::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6433)
inline void AgStkGatorLib::_IAgVAProfileSearchPlugin::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6434)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileSearchPlugin::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6435)
inline void AgStkGatorLib::_IAgVAProfileSearchPlugin::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6436)
inline AgStkGatorLib::IAgVASearchPluginControlCollectionPtr AgStkGatorLib::_IAgVAProfileSearchPlugin::GetControls ( ) {
    struct IAgVASearchPluginControlCollection * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginControlCollectionPtr(_result, false);
}

#pragma implementation_key(6437)
inline AgStkGatorLib::IAgVASearchPluginResultCollectionPtr AgStkGatorLib::_IAgVAProfileSearchPlugin::GetResults ( ) {
    struct IAgVASearchPluginResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginResultCollectionPtr(_result, false);
}

#pragma implementation_key(6438)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVAProfileSearchPlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6439)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSearchPlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6440)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAProfileSearchPlugin::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(6441)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileSearchPlugin::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6442)
inline void AgStkGatorLib::_IAgVAProfileSearchPlugin::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6443)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileSearchPlugin::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6444)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::_IAgVAProfileSearchPlugin::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(6445)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileSearchPlugin::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileSearchPlugin wrapper method implementations
//

#pragma implementation_key(6446)
inline AgStkGatorLib::IAgVASearchPluginControlCollectionPtr AgStkGatorLib::IAgVAProfileSearchPlugin::GetControls ( ) {
    struct IAgVASearchPluginControlCollection * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginControlCollectionPtr(_result, false);
}

#pragma implementation_key(6447)
inline AgStkGatorLib::IAgVASearchPluginResultCollectionPtr AgStkGatorLib::IAgVAProfileSearchPlugin::GetResults ( ) {
    struct IAgVASearchPluginResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASearchPluginResultCollectionPtr(_result, false);
}

#pragma implementation_key(6448)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::IAgVAProfileSearchPlugin::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6449)
inline _bstr_t AgStkGatorLib::IAgVAProfileSearchPlugin::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6450)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::IAgVAProfileSearchPlugin::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(6451)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileSearchPlugin::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6452)
inline void AgStkGatorLib::IAgVAProfileSearchPlugin::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6453)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::IAgVAProfileSearchPlugin::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

//
// interface IAgVADEControl wrapper method implementations
//

#pragma implementation_key(6454)
inline VARIANT_BOOL AgStkGatorLib::IAgVADEControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6455)
inline void AgStkGatorLib::IAgVADEControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6456)
inline _bstr_t AgStkGatorLib::IAgVADEControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6457)
inline _variant_t AgStkGatorLib::IAgVADEControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6458)
inline _bstr_t AgStkGatorLib::IAgVADEControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6459)
inline _variant_t AgStkGatorLib::IAgVADEControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6460)
inline _variant_t AgStkGatorLib::IAgVADEControl::GetPerturbation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Perturbation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6461)
inline void AgStkGatorLib::IAgVADEControl::PutPerturbation ( const _variant_t & pVal ) {
    HRESULT _hr = put_Perturbation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6462)
inline _variant_t AgStkGatorLib::IAgVADEControl::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6463)
inline void AgStkGatorLib::IAgVADEControl::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6464)
inline _variant_t AgStkGatorLib::IAgVADEControl::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6465)
inline void AgStkGatorLib::IAgVADEControl::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6466)
inline enum AgStkGatorLib::AgEVADEScalingMethod AgStkGatorLib::IAgVADEControl::GetScalingMethod ( ) {
    enum AgEVADEScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6467)
inline void AgStkGatorLib::IAgVADEControl::PutScalingMethod ( enum AgEVADEScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6468)
inline _variant_t AgStkGatorLib::IAgVADEControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6469)
inline void AgStkGatorLib::IAgVADEControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6470)
inline _bstr_t AgStkGatorLib::IAgVADEControl::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6471)
inline VARIANT_BOOL AgStkGatorLib::IAgVADEControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6472)
inline void AgStkGatorLib::IAgVADEControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6473)
inline _bstr_t AgStkGatorLib::IAgVADEControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6474)
inline void AgStkGatorLib::IAgVADEControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6475)
inline SAFEARRAY * AgStkGatorLib::IAgVADEControl::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVADEControlCollection wrapper method implementations
//

#pragma implementation_key(6476)
inline AgStkGatorLib::IAgVADEControlPtr AgStkGatorLib::IAgVADEControlCollection::GetItem ( long Index ) {
    struct IAgVADEControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEControlPtr(_result, false);
}

#pragma implementation_key(6477)
inline IUnknownPtr AgStkGatorLib::IAgVADEControlCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6478)
inline long AgStkGatorLib::IAgVADEControlCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6479)
inline AgStkGatorLib::IAgVADEControlPtr AgStkGatorLib::IAgVADEControlCollection::GetControlByPaths ( _bstr_t ObjectPath, _bstr_t ControlPath ) {
    struct IAgVADEControl * _result = 0;
    HRESULT _hr = raw_GetControlByPaths(ObjectPath, ControlPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEControlPtr(_result, false);
}

//
// interface IAgVADEResult wrapper method implementations
//

#pragma implementation_key(6480)
inline VARIANT_BOOL AgStkGatorLib::IAgVADEResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6481)
inline void AgStkGatorLib::IAgVADEResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6482)
inline _bstr_t AgStkGatorLib::IAgVADEResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6483)
inline _variant_t AgStkGatorLib::IAgVADEResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6484)
inline _bstr_t AgStkGatorLib::IAgVADEResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6485)
inline _variant_t AgStkGatorLib::IAgVADEResult::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6486)
inline void AgStkGatorLib::IAgVADEResult::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6487)
inline _variant_t AgStkGatorLib::IAgVADEResult::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6488)
inline void AgStkGatorLib::IAgVADEResult::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6489)
inline enum AgStkGatorLib::AgEVADEScalingMethod AgStkGatorLib::IAgVADEResult::GetScalingMethod ( ) {
    enum AgEVADEScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6490)
inline void AgStkGatorLib::IAgVADEResult::PutScalingMethod ( enum AgEVADEScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6491)
inline _variant_t AgStkGatorLib::IAgVADEResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6492)
inline void AgStkGatorLib::IAgVADEResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6493)
inline double AgStkGatorLib::IAgVADEResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6494)
inline void AgStkGatorLib::IAgVADEResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6495)
inline enum AgStkGatorLib::AgEVADEGoal AgStkGatorLib::IAgVADEResult::GetGoal ( ) {
    enum AgEVADEGoal _result;
    HRESULT _hr = get_Goal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6496)
inline void AgStkGatorLib::IAgVADEResult::PutGoal ( enum AgEVADEGoal pVal ) {
    HRESULT _hr = put_Goal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6497)
inline _bstr_t AgStkGatorLib::IAgVADEResult::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6498)
inline VARIANT_BOOL AgStkGatorLib::IAgVADEResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6499)
inline void AgStkGatorLib::IAgVADEResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6500)
inline _bstr_t AgStkGatorLib::IAgVADEResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6501)
inline void AgStkGatorLib::IAgVADEResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6502)
inline SAFEARRAY * AgStkGatorLib::IAgVADEResult::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVADEResultCollection wrapper method implementations
//

#pragma implementation_key(6503)
inline AgStkGatorLib::IAgVADEResultPtr AgStkGatorLib::IAgVADEResultCollection::GetItem ( long Index ) {
    struct IAgVADEResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEResultPtr(_result, false);
}

#pragma implementation_key(6504)
inline IUnknownPtr AgStkGatorLib::IAgVADEResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6505)
inline long AgStkGatorLib::IAgVADEResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6506)
inline AgStkGatorLib::IAgVADEResultPtr AgStkGatorLib::IAgVADEResultCollection::GetResultByPaths ( _bstr_t ObjectPath, _bstr_t ResultPath ) {
    struct IAgVADEResult * _result = 0;
    HRESULT _hr = raw_GetResultByPaths(ObjectPath, ResultPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEResultPtr(_result, false);
}

//
// interface _IAgVAProfileDEOptimizer wrapper method implementations
//

#pragma implementation_key(6507)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileDEOptimizer::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6508)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDEOptimizer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6509)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6510)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDEOptimizer::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6511)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDEOptimizer::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6512)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6513)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileDEOptimizer::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6514)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6515)
inline AgStkGatorLib::IAgVADEControlCollectionPtr AgStkGatorLib::_IAgVAProfileDEOptimizer::GetControlParameters ( ) {
    struct IAgVADEControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEControlCollectionPtr(_result, false);
}

#pragma implementation_key(6516)
inline AgStkGatorLib::IAgVADEResultCollectionPtr AgStkGatorLib::_IAgVAProfileDEOptimizer::GetResults ( ) {
    struct IAgVADEResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEResultCollectionPtr(_result, false);
}

#pragma implementation_key(6517)
inline long AgStkGatorLib::_IAgVAProfileDEOptimizer::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6518)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6519)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetEnableDisplayStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDisplayStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6520)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutEnableDisplayStatus ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDisplayStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6521)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6522)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6523)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetGenerateResultsFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateResultsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6524)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutGenerateResultsFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateResultsFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6525)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetUseDefaults ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6526)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutUseDefaults ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDefaults(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6527)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetUseAdvancedDefaults ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAdvancedDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6528)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutUseAdvancedDefaults ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAdvancedDefaults(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6529)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetUseGlobalPerturbationSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseGlobalPerturbationSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6530)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutUseGlobalPerturbationSize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseGlobalPerturbationSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6531)
inline double AgStkGatorLib::_IAgVAProfileDEOptimizer::GetToleranceOnObjectiveFunction ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnObjectiveFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6532)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutToleranceOnObjectiveFunction ( double pVal ) {
    HRESULT _hr = put_ToleranceOnObjectiveFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6533)
inline double AgStkGatorLib::_IAgVAProfileDEOptimizer::GetToleranceOnConstraintFeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnConstraintFeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6534)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutToleranceOnConstraintFeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnConstraintFeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6535)
inline double AgStkGatorLib::_IAgVAProfileDEOptimizer::GetToleranceOnProjectedGradient ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnProjectedGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6536)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutToleranceOnProjectedGradient ( double pVal ) {
    HRESULT _hr = put_ToleranceOnProjectedGradient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6537)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDEOptimizer::GetSummaryLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SummaryLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6538)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDEOptimizer::GetDetailLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DetailLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6539)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDEOptimizer::GetEngineLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EngineLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6540)
inline double AgStkGatorLib::_IAgVAProfileDEOptimizer::GetPerturbationSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PerturbationSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6541)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutPerturbationSize ( double pVal ) {
    HRESULT _hr = put_PerturbationSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6542)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAProfileDEOptimizer::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(6543)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDEOptimizer::GetEnforceDesignVariableBounds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnforceDesignVariableBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6544)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutEnforceDesignVariableBounds ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnforceDesignVariableBounds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6545)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileDEOptimizer::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6546)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::_IAgVAProfileDEOptimizer::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(6547)
inline long AgStkGatorLib::_IAgVAProfileDEOptimizer::GetMaxEvaluations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxEvaluations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6548)
inline void AgStkGatorLib::_IAgVAProfileDEOptimizer::PutMaxEvaluations ( long pVal ) {
    HRESULT _hr = put_MaxEvaluations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6549)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileDEOptimizer::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileDEOptimizer wrapper method implementations
//

#pragma implementation_key(6550)
inline AgStkGatorLib::IAgVADEControlCollectionPtr AgStkGatorLib::IAgVAProfileDEOptimizer::GetControlParameters ( ) {
    struct IAgVADEControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEControlCollectionPtr(_result, false);
}

#pragma implementation_key(6551)
inline AgStkGatorLib::IAgVADEResultCollectionPtr AgStkGatorLib::IAgVAProfileDEOptimizer::GetResults ( ) {
    struct IAgVADEResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADEResultCollectionPtr(_result, false);
}

#pragma implementation_key(6552)
inline long AgStkGatorLib::IAgVAProfileDEOptimizer::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6553)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6554)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetEnableDisplayStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDisplayStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6555)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutEnableDisplayStatus ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDisplayStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6556)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6557)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6558)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetGenerateResultsFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateResultsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6559)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutGenerateResultsFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateResultsFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6560)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetUseDefaults ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6561)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutUseDefaults ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDefaults(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6562)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetUseAdvancedDefaults ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAdvancedDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6563)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutUseAdvancedDefaults ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAdvancedDefaults(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6564)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetUseGlobalPerturbationSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseGlobalPerturbationSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6565)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutUseGlobalPerturbationSize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseGlobalPerturbationSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6566)
inline double AgStkGatorLib::IAgVAProfileDEOptimizer::GetToleranceOnObjectiveFunction ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnObjectiveFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6567)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutToleranceOnObjectiveFunction ( double pVal ) {
    HRESULT _hr = put_ToleranceOnObjectiveFunction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6568)
inline double AgStkGatorLib::IAgVAProfileDEOptimizer::GetToleranceOnConstraintFeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnConstraintFeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6569)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutToleranceOnConstraintFeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnConstraintFeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6570)
inline double AgStkGatorLib::IAgVAProfileDEOptimizer::GetToleranceOnProjectedGradient ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnProjectedGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6571)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutToleranceOnProjectedGradient ( double pVal ) {
    HRESULT _hr = put_ToleranceOnProjectedGradient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6572)
inline _bstr_t AgStkGatorLib::IAgVAProfileDEOptimizer::GetSummaryLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SummaryLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6573)
inline _bstr_t AgStkGatorLib::IAgVAProfileDEOptimizer::GetDetailLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DetailLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6574)
inline _bstr_t AgStkGatorLib::IAgVAProfileDEOptimizer::GetEngineLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EngineLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6575)
inline double AgStkGatorLib::IAgVAProfileDEOptimizer::GetPerturbationSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PerturbationSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6576)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutPerturbationSize ( double pVal ) {
    HRESULT _hr = put_PerturbationSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6577)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::IAgVAProfileDEOptimizer::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(6578)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDEOptimizer::GetEnforceDesignVariableBounds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnforceDesignVariableBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6579)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutEnforceDesignVariableBounds ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnforceDesignVariableBounds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6580)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::IAgVAProfileDEOptimizer::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(6581)
inline long AgStkGatorLib::IAgVAProfileDEOptimizer::GetMaxEvaluations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxEvaluations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6582)
inline void AgStkGatorLib::IAgVAProfileDEOptimizer::PutMaxEvaluations ( long pVal ) {
    HRESULT _hr = put_MaxEvaluations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVATargeterGraph wrapper method implementations
//

#pragma implementation_key(6583)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraph::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6584)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6585)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraph::GetGenerateOnRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateOnRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6586)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutGenerateOnRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateOnRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6587)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraph::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6588)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6589)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraph::GetShowLabelIterations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabelIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6590)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutShowLabelIterations ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowLabelIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6591)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraph::GetShowDesiredValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDesiredValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6592)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutShowDesiredValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowDesiredValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6593)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraph::GetShowToleranceBand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToleranceBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6594)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutShowToleranceBand ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowToleranceBand(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6595)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraph::GetIndependentVariable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IndependentVariable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6596)
inline void AgStkGatorLib::_IAgVATargeterGraph::PutIndependentVariable ( _bstr_t pRetVal ) {
    HRESULT _hr = put_IndependentVariable(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6597)
inline AgStkGatorLib::IAgVATargeterGraphActiveControlCollectionPtr AgStkGatorLib::_IAgVATargeterGraph::GetActiveControls ( ) {
    struct IAgVATargeterGraphActiveControlCollection * _result = 0;
    HRESULT _hr = get_ActiveControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphActiveControlCollectionPtr(_result, false);
}

#pragma implementation_key(6598)
inline AgStkGatorLib::IAgVATargeterGraphResultCollectionPtr AgStkGatorLib::_IAgVATargeterGraph::GetResults ( ) {
    struct IAgVATargeterGraphResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphResultCollectionPtr(_result, false);
}

#pragma implementation_key(6599)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVATargeterGraph::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVATargeterGraphActiveControl wrapper method implementations
//

#pragma implementation_key(6600)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6601)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6602)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetShowGraphValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowGraphValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6603)
inline void AgStkGatorLib::_IAgVATargeterGraphActiveControl::PutShowGraphValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowGraphValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6604)
inline OLE_COLOR AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6605)
inline void AgStkGatorLib::_IAgVATargeterGraphActiveControl::PutLineColor ( OLE_COLOR pValue ) {
    HRESULT _hr = put_LineColor(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6606)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetPointStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6607)
inline void AgStkGatorLib::_IAgVATargeterGraphActiveControl::PutPointStyle ( _bstr_t pRetVal ) {
    HRESULT _hr = put_PointStyle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6608)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetYAxis ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6609)
inline void AgStkGatorLib::_IAgVATargeterGraphActiveControl::PutYAxis ( _bstr_t pRetVal ) {
    HRESULT _hr = put_YAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6610)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVATargeterGraphActiveControl::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVATargeterGraphResult wrapper method implementations
//

#pragma implementation_key(6611)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6612)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6613)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraphResult::GetShowDesiredValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDesiredValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6614)
inline void AgStkGatorLib::_IAgVATargeterGraphResult::PutShowDesiredValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowDesiredValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6615)
inline OLE_COLOR AgStkGatorLib::_IAgVATargeterGraphResult::GetLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6616)
inline void AgStkGatorLib::_IAgVATargeterGraphResult::PutLineColor ( OLE_COLOR pValue ) {
    HRESULT _hr = put_LineColor(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6617)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphResult::GetPointStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6618)
inline void AgStkGatorLib::_IAgVATargeterGraphResult::PutPointStyle ( _bstr_t pRetVal ) {
    HRESULT _hr = put_PointStyle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6619)
inline _bstr_t AgStkGatorLib::_IAgVATargeterGraphResult::GetYAxis ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6620)
inline void AgStkGatorLib::_IAgVATargeterGraphResult::PutYAxis ( _bstr_t pRetVal ) {
    HRESULT _hr = put_YAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6621)
inline enum AgStkGatorLib::AgEVAGraphOption AgStkGatorLib::_IAgVATargeterGraphResult::GetGraphOption ( ) {
    enum AgEVAGraphOption _result;
    HRESULT _hr = get_GraphOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6622)
inline void AgStkGatorLib::_IAgVATargeterGraphResult::PutGraphOption ( enum AgEVAGraphOption pRetVal ) {
    HRESULT _hr = put_GraphOption(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6623)
inline VARIANT_BOOL AgStkGatorLib::_IAgVATargeterGraphResult::GetShowToleranceBand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToleranceBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6624)
inline void AgStkGatorLib::_IAgVATargeterGraphResult::PutShowToleranceBand ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowToleranceBand(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6625)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVATargeterGraphResult::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVADCControl wrapper method implementations
//

#pragma implementation_key(6626)
inline VARIANT_BOOL AgStkGatorLib::IAgVADCControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6627)
inline void AgStkGatorLib::IAgVADCControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6628)
inline _bstr_t AgStkGatorLib::IAgVADCControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6629)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetFinalValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FinalValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6630)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetLastUpdate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6631)
inline _bstr_t AgStkGatorLib::IAgVADCControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6632)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6633)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetPerturbation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Perturbation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6634)
inline void AgStkGatorLib::IAgVADCControl::PutPerturbation ( const _variant_t & pVal ) {
    HRESULT _hr = put_Perturbation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6635)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetCorrection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Correction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6636)
inline void AgStkGatorLib::IAgVADCControl::PutCorrection ( const _variant_t & pVal ) {
    HRESULT _hr = put_Correction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6637)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetTolerance ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6638)
inline void AgStkGatorLib::IAgVADCControl::PutTolerance ( const _variant_t & pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6639)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetMaxStep ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6640)
inline void AgStkGatorLib::IAgVADCControl::PutMaxStep ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6641)
inline enum AgStkGatorLib::AgEVADCScalingMethod AgStkGatorLib::IAgVADCControl::GetScalingMethod ( ) {
    enum AgEVADCScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6642)
inline void AgStkGatorLib::IAgVADCControl::PutScalingMethod ( enum AgEVADCScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6643)
inline _variant_t AgStkGatorLib::IAgVADCControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6644)
inline void AgStkGatorLib::IAgVADCControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6645)
inline _bstr_t AgStkGatorLib::IAgVADCControl::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6646)
inline VARIANT_BOOL AgStkGatorLib::IAgVADCControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6647)
inline void AgStkGatorLib::IAgVADCControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6648)
inline _bstr_t AgStkGatorLib::IAgVADCControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6649)
inline void AgStkGatorLib::IAgVADCControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6650)
inline SAFEARRAY * AgStkGatorLib::IAgVADCControl::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVADCControlCollection wrapper method implementations
//

#pragma implementation_key(6651)
inline AgStkGatorLib::IAgVADCControlPtr AgStkGatorLib::IAgVADCControlCollection::GetItem ( long Index ) {
    struct IAgVADCControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCControlPtr(_result, false);
}

#pragma implementation_key(6652)
inline IUnknownPtr AgStkGatorLib::IAgVADCControlCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6653)
inline long AgStkGatorLib::IAgVADCControlCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6654)
inline AgStkGatorLib::IAgVADCControlPtr AgStkGatorLib::IAgVADCControlCollection::GetControlByPaths ( _bstr_t ObjectPath, _bstr_t ControlPath ) {
    struct IAgVADCControl * _result = 0;
    HRESULT _hr = raw_GetControlByPaths(ObjectPath, ControlPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCControlPtr(_result, false);
}

#pragma implementation_key(6655)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVADCControlCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVADCResult wrapper method implementations
//

#pragma implementation_key(6656)
inline VARIANT_BOOL AgStkGatorLib::IAgVADCResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6657)
inline void AgStkGatorLib::IAgVADCResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6658)
inline _bstr_t AgStkGatorLib::IAgVADCResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6659)
inline _variant_t AgStkGatorLib::IAgVADCResult::GetDesiredValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DesiredValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6660)
inline void AgStkGatorLib::IAgVADCResult::PutDesiredValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_DesiredValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6661)
inline _variant_t AgStkGatorLib::IAgVADCResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6662)
inline _bstr_t AgStkGatorLib::IAgVADCResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6663)
inline _variant_t AgStkGatorLib::IAgVADCResult::GetDifference ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Difference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6664)
inline _variant_t AgStkGatorLib::IAgVADCResult::GetTolerance ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6665)
inline void AgStkGatorLib::IAgVADCResult::PutTolerance ( const _variant_t & pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6666)
inline enum AgStkGatorLib::AgEVADCScalingMethod AgStkGatorLib::IAgVADCResult::GetScalingMethod ( ) {
    enum AgEVADCScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6667)
inline void AgStkGatorLib::IAgVADCResult::PutScalingMethod ( enum AgEVADCScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6668)
inline _variant_t AgStkGatorLib::IAgVADCResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6669)
inline void AgStkGatorLib::IAgVADCResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6670)
inline double AgStkGatorLib::IAgVADCResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6671)
inline void AgStkGatorLib::IAgVADCResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6672)
inline _bstr_t AgStkGatorLib::IAgVADCResult::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6673)
inline VARIANT_BOOL AgStkGatorLib::IAgVADCResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6674)
inline void AgStkGatorLib::IAgVADCResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6675)
inline _bstr_t AgStkGatorLib::IAgVADCResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6676)
inline void AgStkGatorLib::IAgVADCResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6677)
inline SAFEARRAY * AgStkGatorLib::IAgVADCResult::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVADCResultCollection wrapper method implementations
//

#pragma implementation_key(6678)
inline AgStkGatorLib::IAgVADCResultPtr AgStkGatorLib::IAgVADCResultCollection::GetItem ( long Index ) {
    struct IAgVADCResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCResultPtr(_result, false);
}

#pragma implementation_key(6679)
inline IUnknownPtr AgStkGatorLib::IAgVADCResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6680)
inline long AgStkGatorLib::IAgVADCResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6681)
inline AgStkGatorLib::IAgVADCResultPtr AgStkGatorLib::IAgVADCResultCollection::GetResultByPaths ( _bstr_t ObjectPath, _bstr_t ResultPath ) {
    struct IAgVADCResult * _result = 0;
    HRESULT _hr = raw_GetResultByPaths(ObjectPath, ResultPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCResultPtr(_result, false);
}

#pragma implementation_key(6682)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::IAgVADCResultCollection::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface _IAgVAProfileDifferentialCorrector wrapper method implementations
//

#pragma implementation_key(6683)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileDifferentialCorrector::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6684)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6685)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6686)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6687)
inline _bstr_t AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6688)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6689)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6690)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6691)
inline AgStkGatorLib::IAgVADCControlCollectionPtr AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetControlParameters ( ) {
    struct IAgVADCControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCControlCollectionPtr(_result, false);
}

#pragma implementation_key(6692)
inline AgStkGatorLib::IAgVADCResultCollectionPtr AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetResults ( ) {
    struct IAgVADCResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCResultCollectionPtr(_result, false);
}

#pragma implementation_key(6693)
inline long AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6694)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6695)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetEnableDisplayStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDisplayStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6696)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutEnableDisplayStatus ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDisplayStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6697)
inline enum AgStkGatorLib::AgEVAConvergenceCriteria AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetConvergenceCriteria ( ) {
    enum AgEVAConvergenceCriteria _result;
    HRESULT _hr = get_ConvergenceCriteria(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6698)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutConvergenceCriteria ( enum AgEVAConvergenceCriteria pVal ) {
    HRESULT _hr = put_ConvergenceCriteria(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6699)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetEnableLineSearch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLineSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6700)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutEnableLineSearch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLineSearch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6701)
inline long AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetMaxLineSearchIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLineSearchIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6702)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutMaxLineSearchIterations ( long pVal ) {
    HRESULT _hr = put_MaxLineSearchIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6703)
inline double AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetLineSearchLowerBound ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSearchLowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6704)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutLineSearchLowerBound ( double pVal ) {
    HRESULT _hr = put_LineSearchLowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6705)
inline double AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetLineSearchUpperBound ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSearchUpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6706)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutLineSearchUpperBound ( double pVal ) {
    HRESULT _hr = put_LineSearchUpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6707)
inline double AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetLineSearchTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSearchTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6708)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutLineSearchTolerance ( double pVal ) {
    HRESULT _hr = put_LineSearchTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6709)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetEnableHomotopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableHomotopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6710)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutEnableHomotopy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableHomotopy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6711)
inline long AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetHomotopySteps ( ) {
    long _result = 0;
    HRESULT _hr = get_HomotopySteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6712)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutHomotopySteps ( long pVal ) {
    HRESULT _hr = put_HomotopySteps(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6713)
inline enum AgStkGatorLib::AgEVADeriveCalcMethod AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetDerivativeCalcMethod ( ) {
    enum AgEVADeriveCalcMethod _result;
    HRESULT _hr = get_DerivativeCalcMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6714)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutDerivativeCalcMethod ( enum AgEVADeriveCalcMethod pVal ) {
    HRESULT _hr = put_DerivativeCalcMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6715)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetClearCorrectionsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearCorrectionsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6716)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutClearCorrectionsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ClearCorrectionsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6717)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetEnableBPlaneNominal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBPlaneNominal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6718)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutEnableBPlaneNominal ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableBPlaneNominal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6719)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetEnableBPlanePerturbations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBPlanePerturbations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6720)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutEnableBPlanePerturbations ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableBPlanePerturbations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6721)
inline enum AgStkGatorLib::AgEVADrawPerturbation AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetDrawPerturbation ( ) {
    enum AgEVADrawPerturbation _result;
    HRESULT _hr = get_DrawPerturbation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6722)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutDrawPerturbation ( enum AgEVADrawPerturbation pVal ) {
    HRESULT _hr = put_DrawPerturbation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6723)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(6724)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6725)
inline enum AgStkGatorLib::AgEVARootFindingAlgorithm AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetRootFindingAlgorithm ( ) {
    enum AgEVARootFindingAlgorithm _result;
    HRESULT _hr = get_RootFindingAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6726)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutRootFindingAlgorithm ( enum AgEVARootFindingAlgorithm pVal ) {
    HRESULT _hr = put_RootFindingAlgorithm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6727)
inline long AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetNumIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_NumIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6728)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(6729)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetStopOnLimitCycleDetection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StopOnLimitCycleDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6730)
inline void AgStkGatorLib::_IAgVAProfileDifferentialCorrector::PutStopOnLimitCycleDetection ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_StopOnLimitCycleDetection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6731)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileDifferentialCorrector::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileDifferentialCorrector wrapper method implementations
//

#pragma implementation_key(6732)
inline AgStkGatorLib::IAgVADCControlCollectionPtr AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetControlParameters ( ) {
    struct IAgVADCControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCControlCollectionPtr(_result, false);
}

#pragma implementation_key(6733)
inline AgStkGatorLib::IAgVADCResultCollectionPtr AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetResults ( ) {
    struct IAgVADCResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVADCResultCollectionPtr(_result, false);
}

#pragma implementation_key(6734)
inline long AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetMaxIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6735)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutMaxIterations ( long pVal ) {
    HRESULT _hr = put_MaxIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6736)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetEnableDisplayStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDisplayStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6737)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutEnableDisplayStatus ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDisplayStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6738)
inline enum AgStkGatorLib::AgEVAConvergenceCriteria AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetConvergenceCriteria ( ) {
    enum AgEVAConvergenceCriteria _result;
    HRESULT _hr = get_ConvergenceCriteria(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6739)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutConvergenceCriteria ( enum AgEVAConvergenceCriteria pVal ) {
    HRESULT _hr = put_ConvergenceCriteria(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6740)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetEnableLineSearch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLineSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6741)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutEnableLineSearch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLineSearch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6742)
inline long AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetMaxLineSearchIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLineSearchIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6743)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutMaxLineSearchIterations ( long pVal ) {
    HRESULT _hr = put_MaxLineSearchIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6744)
inline double AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetLineSearchLowerBound ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSearchLowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6745)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutLineSearchLowerBound ( double pVal ) {
    HRESULT _hr = put_LineSearchLowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6746)
inline double AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetLineSearchUpperBound ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSearchUpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6747)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutLineSearchUpperBound ( double pVal ) {
    HRESULT _hr = put_LineSearchUpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6748)
inline double AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetLineSearchTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSearchTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6749)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutLineSearchTolerance ( double pVal ) {
    HRESULT _hr = put_LineSearchTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6750)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetEnableHomotopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableHomotopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6751)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutEnableHomotopy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableHomotopy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6752)
inline long AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetHomotopySteps ( ) {
    long _result = 0;
    HRESULT _hr = get_HomotopySteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6753)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutHomotopySteps ( long pVal ) {
    HRESULT _hr = put_HomotopySteps(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6754)
inline enum AgStkGatorLib::AgEVADeriveCalcMethod AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetDerivativeCalcMethod ( ) {
    enum AgEVADeriveCalcMethod _result;
    HRESULT _hr = get_DerivativeCalcMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6755)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutDerivativeCalcMethod ( enum AgEVADeriveCalcMethod pVal ) {
    HRESULT _hr = put_DerivativeCalcMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6756)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetClearCorrectionsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearCorrectionsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6757)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutClearCorrectionsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ClearCorrectionsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6758)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetEnableBPlaneNominal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBPlaneNominal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6759)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutEnableBPlaneNominal ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableBPlaneNominal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6760)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetEnableBPlanePerturbations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBPlanePerturbations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6761)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutEnableBPlanePerturbations ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableBPlanePerturbations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6762)
inline enum AgStkGatorLib::AgEVADrawPerturbation AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetDrawPerturbation ( ) {
    enum AgEVADrawPerturbation _result;
    HRESULT _hr = get_DrawPerturbation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6763)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutDrawPerturbation ( enum AgEVADrawPerturbation pVal ) {
    HRESULT _hr = put_DrawPerturbation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6764)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(6765)
inline enum AgStkGatorLib::AgEVARootFindingAlgorithm AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetRootFindingAlgorithm ( ) {
    enum AgEVARootFindingAlgorithm _result;
    HRESULT _hr = get_RootFindingAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6766)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutRootFindingAlgorithm ( enum AgEVARootFindingAlgorithm pVal ) {
    HRESULT _hr = put_RootFindingAlgorithm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6767)
inline long AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetNumIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_NumIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6768)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(6769)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileDifferentialCorrector::GetStopOnLimitCycleDetection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StopOnLimitCycleDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6770)
inline void AgStkGatorLib::IAgVAProfileDifferentialCorrector::PutStopOnLimitCycleDetection ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_StopOnLimitCycleDetection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAProfileScriptingTool wrapper method implementations
//

#pragma implementation_key(6771)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileScriptingTool::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6772)
inline _bstr_t AgStkGatorLib::_IAgVAProfileScriptingTool::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6773)
inline void AgStkGatorLib::_IAgVAProfileScriptingTool::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6774)
inline _bstr_t AgStkGatorLib::_IAgVAProfileScriptingTool::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6775)
inline _bstr_t AgStkGatorLib::_IAgVAProfileScriptingTool::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6776)
inline void AgStkGatorLib::_IAgVAProfileScriptingTool::PutUserComment ( _bstr_t pbstrVal ) {
    HRESULT _hr = put_UserComment(pbstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6777)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileScriptingTool::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6778)
inline void AgStkGatorLib::_IAgVAProfileScriptingTool::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6779)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileScriptingTool::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6780)
inline void AgStkGatorLib::_IAgVAProfileScriptingTool::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6781)
inline AgStkGatorLib::IAgVAScriptingSegmentCollectionPtr AgStkGatorLib::_IAgVAProfileScriptingTool::GetSegmentProperties ( ) {
    struct IAgVAScriptingSegmentCollection * _result = 0;
    HRESULT _hr = get_SegmentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(6782)
inline AgStkGatorLib::IAgVAScriptingCalcObjectCollectionPtr AgStkGatorLib::_IAgVAProfileScriptingTool::GetCalcObjects ( ) {
    struct IAgVAScriptingCalcObjectCollection * _result = 0;
    HRESULT _hr = get_CalcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6783)
inline AgStkGatorLib::IAgVAScriptingParameterCollectionPtr AgStkGatorLib::_IAgVAProfileScriptingTool::GetParameters ( ) {
    struct IAgVAScriptingParameterCollection * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterCollectionPtr(_result, false);
}

#pragma implementation_key(6784)
inline enum AgStkGatorLib::AgEVALanguage AgStkGatorLib::_IAgVAProfileScriptingTool::GetLanguageType ( ) {
    enum AgEVALanguage _result;
    HRESULT _hr = get_LanguageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6785)
inline void AgStkGatorLib::_IAgVAProfileScriptingTool::PutLanguageType ( enum AgEVALanguage pVal ) {
    HRESULT _hr = put_LanguageType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6786)
inline HRESULT AgStkGatorLib::_IAgVAProfileScriptingTool::ScriptText ( _bstr_t Script ) {
    HRESULT _hr = raw_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6787)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileScriptingTool::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6788)
inline HRESULT AgStkGatorLib::_IAgVAProfileScriptingTool::CopyToClipboard ( ) {
    HRESULT _hr = raw_CopyToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6789)
inline HRESULT AgStkGatorLib::_IAgVAProfileScriptingTool::PasteFromClipboard ( ) {
    HRESULT _hr = raw_PasteFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6790)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileScriptingTool::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileScriptingTool wrapper method implementations
//

#pragma implementation_key(6791)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileScriptingTool::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6792)
inline void AgStkGatorLib::IAgVAProfileScriptingTool::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6793)
inline AgStkGatorLib::IAgVAScriptingSegmentCollectionPtr AgStkGatorLib::IAgVAProfileScriptingTool::GetSegmentProperties ( ) {
    struct IAgVAScriptingSegmentCollection * _result = 0;
    HRESULT _hr = get_SegmentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(6794)
inline AgStkGatorLib::IAgVAScriptingCalcObjectCollectionPtr AgStkGatorLib::IAgVAProfileScriptingTool::GetCalcObjects ( ) {
    struct IAgVAScriptingCalcObjectCollection * _result = 0;
    HRESULT _hr = get_CalcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(6795)
inline AgStkGatorLib::IAgVAScriptingParameterCollectionPtr AgStkGatorLib::IAgVAProfileScriptingTool::GetParameters ( ) {
    struct IAgVAScriptingParameterCollection * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterCollectionPtr(_result, false);
}

#pragma implementation_key(6796)
inline enum AgStkGatorLib::AgEVALanguage AgStkGatorLib::IAgVAProfileScriptingTool::GetLanguageType ( ) {
    enum AgEVALanguage _result;
    HRESULT _hr = get_LanguageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6797)
inline void AgStkGatorLib::IAgVAProfileScriptingTool::PutLanguageType ( enum AgEVALanguage pVal ) {
    HRESULT _hr = put_LanguageType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6798)
inline HRESULT AgStkGatorLib::IAgVAProfileScriptingTool::ScriptText ( _bstr_t Script ) {
    HRESULT _hr = raw_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6799)
inline HRESULT AgStkGatorLib::IAgVAProfileScriptingTool::CopyToClipboard ( ) {
    HRESULT _hr = raw_CopyToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6800)
inline HRESULT AgStkGatorLib::IAgVAProfileScriptingTool::PasteFromClipboard ( ) {
    HRESULT _hr = raw_PasteFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVADCControl wrapper method implementations
//

#pragma implementation_key(6801)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADCControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6802)
inline void AgStkGatorLib::_IAgVADCControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6803)
inline _bstr_t AgStkGatorLib::_IAgVADCControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6804)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetFinalValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FinalValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6805)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetLastUpdate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6806)
inline _bstr_t AgStkGatorLib::_IAgVADCControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6807)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6808)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetPerturbation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Perturbation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6809)
inline void AgStkGatorLib::_IAgVADCControl::PutPerturbation ( const _variant_t & pVal ) {
    HRESULT _hr = put_Perturbation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6810)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetCorrection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Correction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6811)
inline void AgStkGatorLib::_IAgVADCControl::PutCorrection ( const _variant_t & pVal ) {
    HRESULT _hr = put_Correction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6812)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetTolerance ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6813)
inline void AgStkGatorLib::_IAgVADCControl::PutTolerance ( const _variant_t & pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6814)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetMaxStep ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6815)
inline void AgStkGatorLib::_IAgVADCControl::PutMaxStep ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6816)
inline enum AgStkGatorLib::AgEVADCScalingMethod AgStkGatorLib::_IAgVADCControl::GetScalingMethod ( ) {
    enum AgEVADCScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6817)
inline void AgStkGatorLib::_IAgVADCControl::PutScalingMethod ( enum AgEVADCScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6818)
inline _variant_t AgStkGatorLib::_IAgVADCControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6819)
inline void AgStkGatorLib::_IAgVADCControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6820)
inline _bstr_t AgStkGatorLib::_IAgVADCControl::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6821)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVADCControl::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6822)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADCControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6823)
inline void AgStkGatorLib::_IAgVADCControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6824)
inline _bstr_t AgStkGatorLib::_IAgVADCControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6825)
inline void AgStkGatorLib::_IAgVADCControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6826)
inline SAFEARRAY * AgStkGatorLib::_IAgVADCControl::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVADCResult wrapper method implementations
//

#pragma implementation_key(6827)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADCResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6828)
inline void AgStkGatorLib::_IAgVADCResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6829)
inline _bstr_t AgStkGatorLib::_IAgVADCResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6830)
inline _variant_t AgStkGatorLib::_IAgVADCResult::GetDesiredValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DesiredValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6831)
inline void AgStkGatorLib::_IAgVADCResult::PutDesiredValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_DesiredValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6832)
inline _variant_t AgStkGatorLib::_IAgVADCResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6833)
inline _bstr_t AgStkGatorLib::_IAgVADCResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6834)
inline _variant_t AgStkGatorLib::_IAgVADCResult::GetDifference ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Difference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6835)
inline _variant_t AgStkGatorLib::_IAgVADCResult::GetTolerance ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6836)
inline void AgStkGatorLib::_IAgVADCResult::PutTolerance ( const _variant_t & pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6837)
inline enum AgStkGatorLib::AgEVADCScalingMethod AgStkGatorLib::_IAgVADCResult::GetScalingMethod ( ) {
    enum AgEVADCScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6838)
inline void AgStkGatorLib::_IAgVADCResult::PutScalingMethod ( enum AgEVADCScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6839)
inline _variant_t AgStkGatorLib::_IAgVADCResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6840)
inline void AgStkGatorLib::_IAgVADCResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6841)
inline double AgStkGatorLib::_IAgVADCResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6842)
inline void AgStkGatorLib::_IAgVADCResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6843)
inline _bstr_t AgStkGatorLib::_IAgVADCResult::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6844)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVADCResult::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6845)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADCResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6846)
inline void AgStkGatorLib::_IAgVADCResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6847)
inline _bstr_t AgStkGatorLib::_IAgVADCResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6848)
inline void AgStkGatorLib::_IAgVADCResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6849)
inline SAFEARRAY * AgStkGatorLib::_IAgVADCResult::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVADEControl wrapper method implementations
//

#pragma implementation_key(6850)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADEControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6851)
inline void AgStkGatorLib::_IAgVADEControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6852)
inline _bstr_t AgStkGatorLib::_IAgVADEControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6853)
inline _variant_t AgStkGatorLib::_IAgVADEControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6854)
inline _bstr_t AgStkGatorLib::_IAgVADEControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6855)
inline _variant_t AgStkGatorLib::_IAgVADEControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6856)
inline _variant_t AgStkGatorLib::_IAgVADEControl::GetPerturbation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Perturbation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6857)
inline void AgStkGatorLib::_IAgVADEControl::PutPerturbation ( const _variant_t & pVal ) {
    HRESULT _hr = put_Perturbation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6858)
inline _variant_t AgStkGatorLib::_IAgVADEControl::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6859)
inline void AgStkGatorLib::_IAgVADEControl::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6860)
inline _variant_t AgStkGatorLib::_IAgVADEControl::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6861)
inline void AgStkGatorLib::_IAgVADEControl::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6862)
inline enum AgStkGatorLib::AgEVADEScalingMethod AgStkGatorLib::_IAgVADEControl::GetScalingMethod ( ) {
    enum AgEVADEScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6863)
inline void AgStkGatorLib::_IAgVADEControl::PutScalingMethod ( enum AgEVADEScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6864)
inline _variant_t AgStkGatorLib::_IAgVADEControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6865)
inline void AgStkGatorLib::_IAgVADEControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6866)
inline _bstr_t AgStkGatorLib::_IAgVADEControl::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6867)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADEControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6868)
inline void AgStkGatorLib::_IAgVADEControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6869)
inline _bstr_t AgStkGatorLib::_IAgVADEControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6870)
inline void AgStkGatorLib::_IAgVADEControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6871)
inline SAFEARRAY * AgStkGatorLib::_IAgVADEControl::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVADEResult wrapper method implementations
//

#pragma implementation_key(6872)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADEResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6873)
inline void AgStkGatorLib::_IAgVADEResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6874)
inline _bstr_t AgStkGatorLib::_IAgVADEResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6875)
inline _variant_t AgStkGatorLib::_IAgVADEResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6876)
inline _bstr_t AgStkGatorLib::_IAgVADEResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6877)
inline _variant_t AgStkGatorLib::_IAgVADEResult::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6878)
inline void AgStkGatorLib::_IAgVADEResult::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6879)
inline _variant_t AgStkGatorLib::_IAgVADEResult::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6880)
inline void AgStkGatorLib::_IAgVADEResult::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6881)
inline enum AgStkGatorLib::AgEVADEScalingMethod AgStkGatorLib::_IAgVADEResult::GetScalingMethod ( ) {
    enum AgEVADEScalingMethod _result;
    HRESULT _hr = get_ScalingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6882)
inline void AgStkGatorLib::_IAgVADEResult::PutScalingMethod ( enum AgEVADEScalingMethod pVal ) {
    HRESULT _hr = put_ScalingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6883)
inline _variant_t AgStkGatorLib::_IAgVADEResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6884)
inline void AgStkGatorLib::_IAgVADEResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6885)
inline double AgStkGatorLib::_IAgVADEResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6886)
inline void AgStkGatorLib::_IAgVADEResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6887)
inline enum AgStkGatorLib::AgEVADEGoal AgStkGatorLib::_IAgVADEResult::GetGoal ( ) {
    enum AgEVADEGoal _result;
    HRESULT _hr = get_Goal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6888)
inline void AgStkGatorLib::_IAgVADEResult::PutGoal ( enum AgEVADEGoal pVal ) {
    HRESULT _hr = put_Goal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6889)
inline _bstr_t AgStkGatorLib::_IAgVADEResult::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6890)
inline VARIANT_BOOL AgStkGatorLib::_IAgVADEResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6891)
inline void AgStkGatorLib::_IAgVADEResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6892)
inline _bstr_t AgStkGatorLib::_IAgVADEResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6893)
inline void AgStkGatorLib::_IAgVADEResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6894)
inline SAFEARRAY * AgStkGatorLib::_IAgVADEResult::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVASearchPluginControl wrapper method implementations
//

#pragma implementation_key(6895)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginControl::GetControlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6896)
inline _variant_t AgStkGatorLib::_IAgVASearchPluginControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6897)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginControl::GetParentSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6898)
inline _variant_t AgStkGatorLib::_IAgVASearchPluginControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6899)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginControl::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6900)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVASearchPluginControl::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6901)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginControl::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6902)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASearchPluginControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6903)
inline void AgStkGatorLib::_IAgVASearchPluginControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6904)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6905)
inline void AgStkGatorLib::_IAgVASearchPluginControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6906)
inline SAFEARRAY * AgStkGatorLib::_IAgVASearchPluginControl::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6907)
inline void AgStkGatorLib::_IAgVASearchPluginControl::PutCurrentValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_CurrentValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASearchPluginResult wrapper method implementations
//

#pragma implementation_key(6908)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginResult::GetResultName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6909)
inline _variant_t AgStkGatorLib::_IAgVASearchPluginResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6910)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginResult::GetParentSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentSegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6911)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginResult::GetPluginIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6912)
inline AgStkGatorLib::IAgVAPluginPropertiesPtr AgStkGatorLib::_IAgVASearchPluginResult::GetPluginConfig ( ) {
    struct IAgVAPluginProperties * _result = 0;
    HRESULT _hr = get_PluginConfig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAPluginPropertiesPtr(_result, false);
}

#pragma implementation_key(6913)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginResult::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6914)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASearchPluginResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6915)
inline void AgStkGatorLib::_IAgVASearchPluginResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6916)
inline _bstr_t AgStkGatorLib::_IAgVASearchPluginResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6917)
inline void AgStkGatorLib::_IAgVASearchPluginResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6918)
inline SAFEARRAY * AgStkGatorLib::_IAgVASearchPluginResult::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAProfileChangeManeuverType wrapper method implementations
//

#pragma implementation_key(6919)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileChangeManeuverType::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6920)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6921)
inline void AgStkGatorLib::_IAgVAProfileChangeManeuverType::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6922)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6923)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6924)
inline void AgStkGatorLib::_IAgVAProfileChangeManeuverType::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6925)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6926)
inline void AgStkGatorLib::_IAgVAProfileChangeManeuverType::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6927)
inline AgStkGatorLib::IAgVAMCSManeuverPtr AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetSegment ( ) {
    struct IAgVAMCSManeuver * _result = 0;
    HRESULT _hr = get_Segment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSManeuverPtr(_result, false);
}

#pragma implementation_key(6928)
inline void AgStkGatorLib::_IAgVAProfileChangeManeuverType::PutSegment ( struct IAgVAMCSManeuver * ppVAMCSManeuver ) {
    HRESULT _hr = put_Segment(ppVAMCSManeuver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6929)
inline enum AgStkGatorLib::AgEVAManeuverType AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetManeuverType ( ) {
    enum AgEVAManeuverType _result;
    HRESULT _hr = get_ManeuverType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6930)
inline void AgStkGatorLib::_IAgVAProfileChangeManeuverType::PutManeuverType ( enum AgEVAManeuverType pVal ) {
    HRESULT _hr = put_ManeuverType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6931)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6932)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileChangeManeuverType::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileChangeManeuverType wrapper method implementations
//

#pragma implementation_key(6933)
inline AgStkGatorLib::IAgVAMCSManeuverPtr AgStkGatorLib::IAgVAProfileChangeManeuverType::GetSegment ( ) {
    struct IAgVAMCSManeuver * _result = 0;
    HRESULT _hr = get_Segment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSManeuverPtr(_result, false);
}

#pragma implementation_key(6934)
inline void AgStkGatorLib::IAgVAProfileChangeManeuverType::PutSegment ( struct IAgVAMCSManeuver * ppVAMCSManeuver ) {
    HRESULT _hr = put_Segment(ppVAMCSManeuver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6935)
inline enum AgStkGatorLib::AgEVAManeuverType AgStkGatorLib::IAgVAProfileChangeManeuverType::GetManeuverType ( ) {
    enum AgEVAManeuverType _result;
    HRESULT _hr = get_ManeuverType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6936)
inline void AgStkGatorLib::IAgVAProfileChangeManeuverType::PutManeuverType ( enum AgEVAManeuverType pVal ) {
    HRESULT _hr = put_ManeuverType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAProfileChangeReturnSegment wrapper method implementations
//

#pragma implementation_key(6937)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileChangeReturnSegment::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6938)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6939)
inline void AgStkGatorLib::_IAgVAProfileChangeReturnSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6940)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6941)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6942)
inline void AgStkGatorLib::_IAgVAProfileChangeReturnSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6943)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6944)
inline void AgStkGatorLib::_IAgVAProfileChangeReturnSegment::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6945)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6946)
inline void AgStkGatorLib::_IAgVAProfileChangeReturnSegment::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6947)
inline HRESULT AgStkGatorLib::_IAgVAProfileChangeReturnSegment::SetSegment ( struct IAgVAMCSReturn * ppVAMCSReturn ) {
    HRESULT _hr = raw_SetSegment(ppVAMCSReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6948)
inline enum AgStkGatorLib::AgEVAReturnControl AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetState ( ) {
    enum AgEVAReturnControl _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6949)
inline void AgStkGatorLib::_IAgVAProfileChangeReturnSegment::PutState ( enum AgEVAReturnControl pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6950)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6951)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileChangeReturnSegment::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileChangeReturnSegment wrapper method implementations
//

#pragma implementation_key(6952)
inline _bstr_t AgStkGatorLib::IAgVAProfileChangeReturnSegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6953)
inline void AgStkGatorLib::IAgVAProfileChangeReturnSegment::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6954)
inline HRESULT AgStkGatorLib::IAgVAProfileChangeReturnSegment::SetSegment ( struct IAgVAMCSReturn * pVAMCSReturn ) {
    HRESULT _hr = raw_SetSegment(pVAMCSReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6955)
inline enum AgStkGatorLib::AgEVAReturnControl AgStkGatorLib::IAgVAProfileChangeReturnSegment::GetState ( ) {
    enum AgEVAReturnControl _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6956)
inline void AgStkGatorLib::IAgVAProfileChangeReturnSegment::PutState ( enum AgEVAReturnControl pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAProfileChangePropagator wrapper method implementations
//

#pragma implementation_key(6957)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileChangePropagator::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6958)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangePropagator::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6959)
inline void AgStkGatorLib::_IAgVAProfileChangePropagator::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6960)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangePropagator::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6961)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangePropagator::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6962)
inline void AgStkGatorLib::_IAgVAProfileChangePropagator::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6963)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileChangePropagator::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6964)
inline void AgStkGatorLib::_IAgVAProfileChangePropagator::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6965)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangePropagator::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6966)
inline void AgStkGatorLib::_IAgVAProfileChangePropagator::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6967)
inline HRESULT AgStkGatorLib::_IAgVAProfileChangePropagator::SetSegment ( struct IAgVAMCSSegment * pVAMCSSegment ) {
    HRESULT _hr = raw_SetSegment(pVAMCSSegment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6968)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangePropagator::GetPropagatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropagatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6969)
inline void AgStkGatorLib::_IAgVAProfileChangePropagator::PutPropagatorName ( _bstr_t pVal ) {
    HRESULT _hr = put_PropagatorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6970)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileChangePropagator::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6971)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileChangePropagator::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileChangePropagator wrapper method implementations
//

#pragma implementation_key(6972)
inline _bstr_t AgStkGatorLib::IAgVAProfileChangePropagator::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6973)
inline void AgStkGatorLib::IAgVAProfileChangePropagator::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6974)
inline HRESULT AgStkGatorLib::IAgVAProfileChangePropagator::SetSegment ( struct IAgVAMCSSegment * pVAMCSSegment ) {
    HRESULT _hr = raw_SetSegment(pVAMCSSegment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6975)
inline _bstr_t AgStkGatorLib::IAgVAProfileChangePropagator::GetPropagatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropagatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6976)
inline void AgStkGatorLib::IAgVAProfileChangePropagator::PutPropagatorName ( _bstr_t pVal ) {
    HRESULT _hr = put_PropagatorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAProfileChangeStopSegment wrapper method implementations
//

#pragma implementation_key(6977)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileChangeStopSegment::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6978)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6979)
inline void AgStkGatorLib::_IAgVAProfileChangeStopSegment::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6980)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6981)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6982)
inline void AgStkGatorLib::_IAgVAProfileChangeStopSegment::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6983)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6984)
inline void AgStkGatorLib::_IAgVAProfileChangeStopSegment::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6985)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6986)
inline void AgStkGatorLib::_IAgVAProfileChangeStopSegment::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6987)
inline HRESULT AgStkGatorLib::_IAgVAProfileChangeStopSegment::SetSegment ( struct IAgVAMCSStop * pVAMCSStop ) {
    HRESULT _hr = raw_SetSegment(pVAMCSStop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6988)
inline enum AgStkGatorLib::AgEVAState AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetState ( ) {
    enum AgEVAState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6989)
inline void AgStkGatorLib::_IAgVAProfileChangeStopSegment::PutState ( enum AgEVAState pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6990)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(6991)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileChangeStopSegment::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileChangeStopSegment wrapper method implementations
//

#pragma implementation_key(6992)
inline _bstr_t AgStkGatorLib::IAgVAProfileChangeStopSegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6993)
inline void AgStkGatorLib::IAgVAProfileChangeStopSegment::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6994)
inline HRESULT AgStkGatorLib::IAgVAProfileChangeStopSegment::SetSegment ( struct IAgVAMCSStop * pVAMCSStop ) {
    HRESULT _hr = raw_SetSegment(pVAMCSStop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6995)
inline enum AgStkGatorLib::AgEVAState AgStkGatorLib::IAgVAProfileChangeStopSegment::GetState ( ) {
    enum AgEVAState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6996)
inline void AgStkGatorLib::IAgVAProfileChangeStopSegment::PutState ( enum AgEVAState pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAProfileChangeStoppingConditionState wrapper method implementations
//

#pragma implementation_key(6997)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(6998)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6999)
inline void AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7000)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7001)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7002)
inline void AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7003)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7004)
inline void AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7005)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7006)
inline void AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7007)
inline HRESULT AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::SetSegment ( struct IAgVAMCSSegment * MCSSegment ) {
    HRESULT _hr = raw_SetSegment(MCSSegment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7008)
inline enum AgStkGatorLib::AgEVAState AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetState ( ) {
    enum AgEVAState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7009)
inline void AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::PutState ( enum AgEVAState pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7010)
inline HRESULT AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::SetTrigger ( struct IAgVAStoppingCondition * StoppingCondition ) {
    HRESULT _hr = raw_SetTrigger(StoppingCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7011)
inline _bstr_t AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetTriggerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7012)
inline void AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::PutTriggerName ( _bstr_t pVal ) {
    HRESULT _hr = put_TriggerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7013)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7014)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileChangeStoppingConditionState::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileChangeStoppingConditionState wrapper method implementations
//

#pragma implementation_key(7015)
inline _bstr_t AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7016)
inline void AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7017)
inline HRESULT AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::SetSegment ( struct IAgVAMCSSegment * MCSSegment ) {
    HRESULT _hr = raw_SetSegment(MCSSegment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7018)
inline enum AgStkGatorLib::AgEVAState AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::GetState ( ) {
    enum AgEVAState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7019)
inline void AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::PutState ( enum AgEVAState pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7020)
inline HRESULT AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::SetTrigger ( struct IAgVAStoppingCondition * StoppingCondition ) {
    HRESULT _hr = raw_SetTrigger(StoppingCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7021)
inline _bstr_t AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::GetTriggerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7022)
inline void AgStkGatorLib::IAgVAProfileChangeStoppingConditionState::PutTriggerName ( _bstr_t pVal ) {
    HRESULT _hr = put_TriggerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAProfileSeedFiniteManeuver wrapper method implementations
//

#pragma implementation_key(7023)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(7024)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7025)
inline void AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7026)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7027)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7028)
inline void AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7029)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7030)
inline void AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7031)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7032)
inline void AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7033)
inline HRESULT AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::SetSegment ( struct IAgVAMCSManeuver * pVAMCSManeuver ) {
    HRESULT _hr = raw_SetSegment(pVAMCSManeuver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7034)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7035)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileSeedFiniteManeuver::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVAProfileSeedFiniteManeuver wrapper method implementations
//

#pragma implementation_key(7036)
inline _bstr_t AgStkGatorLib::IAgVAProfileSeedFiniteManeuver::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7037)
inline void AgStkGatorLib::IAgVAProfileSeedFiniteManeuver::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7038)
inline HRESULT AgStkGatorLib::IAgVAProfileSeedFiniteManeuver::SetSegment ( struct IAgVAMCSManeuver * pVAMCSManeuver ) {
    HRESULT _hr = raw_SetSegment(pVAMCSManeuver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVAProfileRunOnce wrapper method implementations
//

#pragma implementation_key(7039)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileRunOnce::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(7040)
inline _bstr_t AgStkGatorLib::_IAgVAProfileRunOnce::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7041)
inline void AgStkGatorLib::_IAgVAProfileRunOnce::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7042)
inline _bstr_t AgStkGatorLib::_IAgVAProfileRunOnce::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7043)
inline _bstr_t AgStkGatorLib::_IAgVAProfileRunOnce::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7044)
inline void AgStkGatorLib::_IAgVAProfileRunOnce::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7045)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileRunOnce::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7046)
inline void AgStkGatorLib::_IAgVAProfileRunOnce::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7047)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAProfileRunOnce::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7048)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileRunOnce::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAAutomaticSequence wrapper method implementations
//

#pragma implementation_key(7049)
inline AgStkGatorLib::IAgVAAutomaticSequencePtr AgStkGatorLib::_IAgVAAutomaticSequence::MakeCopy ( _bstr_t OriginalName ) {
    struct IAgVAAutomaticSequence * _result = 0;
    HRESULT _hr = raw_MakeCopy(OriginalName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAAutomaticSequencePtr(_result, false);
}

#pragma implementation_key(7050)
inline _bstr_t AgStkGatorLib::_IAgVAAutomaticSequence::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7051)
inline void AgStkGatorLib::_IAgVAAutomaticSequence::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7052)
inline _bstr_t AgStkGatorLib::_IAgVAAutomaticSequence::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7053)
inline void AgStkGatorLib::_IAgVAAutomaticSequence::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7054)
inline AgStkGatorLib::IAgVAMCSSegmentCollectionPtr AgStkGatorLib::_IAgVAAutomaticSequence::GetSequence ( ) {
    struct IAgVAMCSSegmentCollection * _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAMCSSegmentCollectionPtr(_result, false);
}

//
// interface _IAgVAMCSSegmentProperties wrapper method implementations
//

#pragma implementation_key(7055)
inline _bstr_t AgStkGatorLib::_IAgVAMCSSegmentProperties::GetDisplayCoordinateSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayCoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7056)
inline void AgStkGatorLib::_IAgVAMCSSegmentProperties::PutDisplayCoordinateSystem ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayCoordinateSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7057)
inline OLE_COLOR AgStkGatorLib::_IAgVAMCSSegmentProperties::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7058)
inline void AgStkGatorLib::_IAgVAMCSSegmentProperties::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7059)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAMCSSegmentProperties::GetUpdateAnimationTimeAfterRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpdateAnimationTimeAfterRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7060)
inline void AgStkGatorLib::_IAgVAMCSSegmentProperties::PutUpdateAnimationTimeAfterRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpdateAnimationTimeAfterRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7061)
inline HRESULT AgStkGatorLib::_IAgVAMCSSegmentProperties::ApplyFinalStateToBPlanes ( ) {
    HRESULT _hr = raw_ApplyFinalStateToBPlanes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7062)
inline AgStkGatorLib::IAgVABPlaneCollectionPtr AgStkGatorLib::_IAgVAMCSSegmentProperties::GetBPlanes ( ) {
    struct IAgVABPlaneCollection * _result = 0;
    HRESULT _hr = get_BPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVABPlaneCollectionPtr(_result, false);
}

#pragma implementation_key(7063)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAMCSSegmentProperties::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7064)
inline enum AgStkGatorLib::AgEVARunCode AgStkGatorLib::_IAgVAMCSSegmentProperties::GetLastRunCode ( ) {
    enum AgEVARunCode _result;
    HRESULT _hr = get_LastRunCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAScriptingTool wrapper method implementations
//

#pragma implementation_key(7065)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAScriptingTool::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7066)
inline void AgStkGatorLib::_IAgVAScriptingTool::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7067)
inline AgStkGatorLib::IAgVAScriptingSegmentCollectionPtr AgStkGatorLib::_IAgVAScriptingTool::GetSegmentProperties ( ) {
    struct IAgVAScriptingSegmentCollection * _result = 0;
    HRESULT _hr = get_SegmentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingSegmentCollectionPtr(_result, false);
}

#pragma implementation_key(7068)
inline AgStkGatorLib::IAgVAScriptingCalcObjectCollectionPtr AgStkGatorLib::_IAgVAScriptingTool::GetCalcObjects ( ) {
    struct IAgVAScriptingCalcObjectCollection * _result = 0;
    HRESULT _hr = get_CalcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingCalcObjectCollectionPtr(_result, false);
}

#pragma implementation_key(7069)
inline AgStkGatorLib::IAgVAScriptingParameterCollectionPtr AgStkGatorLib::_IAgVAScriptingTool::GetParameters ( ) {
    struct IAgVAScriptingParameterCollection * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterCollectionPtr(_result, false);
}

#pragma implementation_key(7070)
inline enum AgStkGatorLib::AgEVALanguage AgStkGatorLib::_IAgVAScriptingTool::GetLanguageType ( ) {
    enum AgEVALanguage _result;
    HRESULT _hr = get_LanguageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7071)
inline void AgStkGatorLib::_IAgVAScriptingTool::PutLanguageType ( enum AgEVALanguage pVal ) {
    HRESULT _hr = put_LanguageType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7072)
inline HRESULT AgStkGatorLib::_IAgVAScriptingTool::ScriptText ( _bstr_t Script ) {
    HRESULT _hr = raw_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7073)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAScriptingTool::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7074)
inline HRESULT AgStkGatorLib::_IAgVAScriptingTool::CopyToClipboard ( ) {
    HRESULT _hr = raw_CopyToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7075)
inline HRESULT AgStkGatorLib::_IAgVAScriptingTool::PasteFromClipboard ( ) {
    HRESULT _hr = raw_PasteFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7076)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAScriptingTool::GetPreIterate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreIterate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7077)
inline void AgStkGatorLib::_IAgVAScriptingTool::PutPreIterate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PreIterate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAScriptingSegment wrapper method implementations
//

#pragma implementation_key(7078)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingSegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7079)
inline void AgStkGatorLib::_IAgVAScriptingSegment::PutSegmentName ( _bstr_t pVal ) {
    HRESULT _hr = put_SegmentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7080)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingSegment::GetComponentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7081)
inline void AgStkGatorLib::_IAgVAScriptingSegment::PutComponentName ( _bstr_t pVal ) {
    HRESULT _hr = put_ComponentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7082)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingSegment::GetAttribute ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Attribute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7083)
inline void AgStkGatorLib::_IAgVAScriptingSegment::PutAttribute ( _bstr_t pVal ) {
    HRESULT _hr = put_Attribute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7084)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingSegment::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7085)
inline void AgStkGatorLib::_IAgVAScriptingSegment::PutUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7086)
inline SAFEARRAY * AgStkGatorLib::_IAgVAScriptingSegment::GetAvailableSegmentNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableSegmentNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7087)
inline SAFEARRAY * AgStkGatorLib::_IAgVAScriptingSegment::GetAvailableAttributeValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttributeValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7088)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAScriptingSegment::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7089)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAScriptingSegment::GetReadOnlyProperty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnlyProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7090)
inline void AgStkGatorLib::_IAgVAScriptingSegment::PutReadOnlyProperty ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ReadOnlyProperty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7091)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingSegment::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7092)
inline void AgStkGatorLib::_IAgVAScriptingSegment::PutObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7093)
inline SAFEARRAY * AgStkGatorLib::_IAgVAScriptingSegment::GetAvailableObjectNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjectNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAScriptingParameter wrapper method implementations
//

#pragma implementation_key(7094)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7095)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7096)
inline double AgStkGatorLib::_IAgVAScriptingParameter::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7097)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7098)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAScriptingParameter::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

#pragma implementation_key(7099)
inline _variant_t AgStkGatorLib::_IAgVAScriptingParameter::GetParamValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ParamValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7100)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutParamValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ParamValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7101)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingParameter::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7102)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7103)
inline enum AgStkGatorLib::AgEVAScriptingParameterType AgStkGatorLib::_IAgVAScriptingParameter::GetType ( ) {
    enum AgEVAScriptingParameterType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7104)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutType ( enum AgEVAScriptingParameterType pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7105)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAScriptingParameter::GetInheritValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7106)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutInheritValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7107)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingParameter::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7108)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7109)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingParameter::GetDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7110)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_Dimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7111)
inline AgStkGatorLib::IAgVAScriptingParameterEnumerationChoiceCollectionPtr AgStkGatorLib::_IAgVAScriptingParameter::GetEnumerationChoices ( ) {
    struct IAgVAScriptingParameterEnumerationChoiceCollection * _result = 0;
    HRESULT _hr = get_EnumerationChoices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingParameterEnumerationChoiceCollectionPtr(_result, false);
}

#pragma implementation_key(7112)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAScriptingParameter::GetUseMinValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7113)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutUseMinValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7114)
inline _variant_t AgStkGatorLib::_IAgVAScriptingParameter::GetMinValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7115)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutMinValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7116)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAScriptingParameter::GetUseMaxValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7117)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutUseMaxValue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7118)
inline _variant_t AgStkGatorLib::_IAgVAScriptingParameter::GetMaxValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7119)
inline void AgStkGatorLib::_IAgVAScriptingParameter::PutMaxValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAScriptingCalcObject wrapper method implementations
//

#pragma implementation_key(7120)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingCalcObject::GetComponentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7121)
inline void AgStkGatorLib::_IAgVAScriptingCalcObject::PutComponentName ( _bstr_t pVal ) {
    HRESULT _hr = put_ComponentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7122)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingCalcObject::GetCalcObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7123)
inline void AgStkGatorLib::_IAgVAScriptingCalcObject::PutCalcObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7124)
inline STKObjects::IAgComponentInfoPtr AgStkGatorLib::_IAgVAScriptingCalcObject::GetCalcObject ( ) {
    struct STKObjects::IAgComponentInfo * _result = 0;
    HRESULT _hr = get_CalcObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKObjects::IAgComponentInfoPtr(_result, false);
}

#pragma implementation_key(7125)
inline void AgStkGatorLib::_IAgVAScriptingCalcObject::PutCalcObject ( struct STKObjects::IAgComponentInfo * ppRetVal ) {
    HRESULT _hr = put_CalcObject(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7126)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingCalcObject::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7127)
inline void AgStkGatorLib::_IAgVAScriptingCalcObject::PutUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7128)
inline HRESULT AgStkGatorLib::_IAgVAScriptingCalcObject::CopyCalcObjectToClipboard ( ) {
    HRESULT _hr = raw_CopyCalcObjectToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7129)
inline HRESULT AgStkGatorLib::_IAgVAScriptingCalcObject::PasteCalcObjectFromClipboard ( ) {
    HRESULT _hr = raw_PasteCalcObjectFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVAUserVariableDefinition wrapper method implementations
//

#pragma implementation_key(7130)
inline _bstr_t AgStkGatorLib::_IAgVAUserVariableDefinition::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7131)
inline void AgStkGatorLib::_IAgVAUserVariableDefinition::PutUnitDimension ( _bstr_t pVal ) {
    HRESULT _hr = put_UnitDimension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7132)
inline _bstr_t AgStkGatorLib::_IAgVAUserVariableDefinition::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7133)
inline void AgStkGatorLib::_IAgVAUserVariableDefinition::PutVariableName ( _bstr_t pVal ) {
    HRESULT _hr = put_VariableName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAUserVariable wrapper method implementations
//

#pragma implementation_key(7134)
inline _bstr_t AgStkGatorLib::_IAgVAUserVariable::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7135)
inline _bstr_t AgStkGatorLib::_IAgVAUserVariable::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7136)
inline _variant_t AgStkGatorLib::_IAgVAUserVariable::GetVariableValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VariableValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7137)
inline void AgStkGatorLib::_IAgVAUserVariable::PutVariableValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_VariableValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7138)
inline HRESULT AgStkGatorLib::_IAgVAUserVariable::EnableControlParameter ( ) {
    HRESULT _hr = raw_EnableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7139)
inline HRESULT AgStkGatorLib::_IAgVAUserVariable::DisableControlParameter ( ) {
    HRESULT _hr = raw_DisableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7140)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUserVariable::IsControlParameterEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7141)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUserVariable::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAUserVariableUpdate wrapper method implementations
//

#pragma implementation_key(7142)
inline _bstr_t AgStkGatorLib::_IAgVAUserVariableUpdate::GetUnitDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7143)
inline _bstr_t AgStkGatorLib::_IAgVAUserVariableUpdate::GetVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7144)
inline _variant_t AgStkGatorLib::_IAgVAUserVariableUpdate::GetVariableValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VariableValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7145)
inline void AgStkGatorLib::_IAgVAUserVariableUpdate::PutVariableValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_VariableValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7146)
inline enum AgStkGatorLib::AgEVAUpdateAction AgStkGatorLib::_IAgVAUserVariableUpdate::GetVariableAction ( ) {
    enum AgEVAUpdateAction _result;
    HRESULT _hr = get_VariableAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7147)
inline void AgStkGatorLib::_IAgVAUserVariableUpdate::PutVariableAction ( enum AgEVAUpdateAction pVal ) {
    HRESULT _hr = put_VariableAction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7148)
inline HRESULT AgStkGatorLib::_IAgVAUserVariableUpdate::EnableControlParameter ( ) {
    HRESULT _hr = raw_EnableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7149)
inline HRESULT AgStkGatorLib::_IAgVAUserVariableUpdate::DisableControlParameter ( ) {
    HRESULT _hr = raw_DisableControlParameter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7150)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUserVariableUpdate::IsControlParameterEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlParameterEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7151)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAUserVariableUpdate::GetControlParametersAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlParametersAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVAScriptingParameterEnumerationChoice wrapper method implementations
//

#pragma implementation_key(7152)
inline _bstr_t AgStkGatorLib::_IAgVAScriptingParameterEnumerationChoice::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7153)
inline void AgStkGatorLib::_IAgVAScriptingParameterEnumerationChoice::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7154)
inline long AgStkGatorLib::_IAgVAScriptingParameterEnumerationChoice::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7155)
inline void AgStkGatorLib::_IAgVAScriptingParameterEnumerationChoice::PutValue ( long pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7156)
inline STKUtil::IAgRuntimeTypeInfoPtr AgStkGatorLib::_IAgVAScriptingParameterEnumerationChoice::GetProvideRuntimeTypeInfo ( ) {
    struct STKUtil::IAgRuntimeTypeInfo * _result = 0;
    HRESULT _hr = get_ProvideRuntimeTypeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgRuntimeTypeInfoPtr(_result, false);
}

//
// interface IAgVASNOPTControl wrapper method implementations
//

#pragma implementation_key(7157)
inline VARIANT_BOOL AgStkGatorLib::IAgVASNOPTControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7158)
inline void AgStkGatorLib::IAgVASNOPTControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7159)
inline _bstr_t AgStkGatorLib::IAgVASNOPTControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7160)
inline _bstr_t AgStkGatorLib::IAgVASNOPTControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7161)
inline _variant_t AgStkGatorLib::IAgVASNOPTControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7162)
inline _variant_t AgStkGatorLib::IAgVASNOPTControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7163)
inline void AgStkGatorLib::IAgVASNOPTControl::PutCurrentValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_CurrentValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7164)
inline _variant_t AgStkGatorLib::IAgVASNOPTControl::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7165)
inline void AgStkGatorLib::IAgVASNOPTControl::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7166)
inline _variant_t AgStkGatorLib::IAgVASNOPTControl::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7167)
inline void AgStkGatorLib::IAgVASNOPTControl::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7168)
inline _variant_t AgStkGatorLib::IAgVASNOPTControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7169)
inline void AgStkGatorLib::IAgVASNOPTControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7170)
inline VARIANT_BOOL AgStkGatorLib::IAgVASNOPTControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7171)
inline void AgStkGatorLib::IAgVASNOPTControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7172)
inline _bstr_t AgStkGatorLib::IAgVASNOPTControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7173)
inline void AgStkGatorLib::IAgVASNOPTControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASNOPTControlCollection wrapper method implementations
//

#pragma implementation_key(7174)
inline AgStkGatorLib::IAgVASNOPTControlPtr AgStkGatorLib::IAgVASNOPTControlCollection::GetItem ( long Index ) {
    struct IAgVASNOPTControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTControlPtr(_result, false);
}

#pragma implementation_key(7175)
inline IUnknownPtr AgStkGatorLib::IAgVASNOPTControlCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7176)
inline long AgStkGatorLib::IAgVASNOPTControlCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7177)
inline AgStkGatorLib::IAgVASNOPTControlPtr AgStkGatorLib::IAgVASNOPTControlCollection::GetControlByPaths ( _bstr_t ObjectPath, _bstr_t ControlPath ) {
    struct IAgVASNOPTControl * _result = 0;
    HRESULT _hr = raw_GetControlByPaths(ObjectPath, ControlPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTControlPtr(_result, false);
}

//
// interface IAgVASNOPTResult wrapper method implementations
//

#pragma implementation_key(7178)
inline VARIANT_BOOL AgStkGatorLib::IAgVASNOPTResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7179)
inline void AgStkGatorLib::IAgVASNOPTResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7180)
inline _bstr_t AgStkGatorLib::IAgVASNOPTResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7181)
inline _variant_t AgStkGatorLib::IAgVASNOPTResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7182)
inline _bstr_t AgStkGatorLib::IAgVASNOPTResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7183)
inline _variant_t AgStkGatorLib::IAgVASNOPTResult::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7184)
inline void AgStkGatorLib::IAgVASNOPTResult::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7185)
inline _variant_t AgStkGatorLib::IAgVASNOPTResult::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7186)
inline void AgStkGatorLib::IAgVASNOPTResult::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7187)
inline _variant_t AgStkGatorLib::IAgVASNOPTResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7188)
inline void AgStkGatorLib::IAgVASNOPTResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7189)
inline double AgStkGatorLib::IAgVASNOPTResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7190)
inline void AgStkGatorLib::IAgVASNOPTResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7191)
inline enum AgStkGatorLib::AgEVASNOPTGoal AgStkGatorLib::IAgVASNOPTResult::GetGoal ( ) {
    enum AgEVASNOPTGoal _result;
    HRESULT _hr = get_Goal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7192)
inline void AgStkGatorLib::IAgVASNOPTResult::PutGoal ( enum AgEVASNOPTGoal pVal ) {
    HRESULT _hr = put_Goal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7193)
inline VARIANT_BOOL AgStkGatorLib::IAgVASNOPTResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7194)
inline void AgStkGatorLib::IAgVASNOPTResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7195)
inline _bstr_t AgStkGatorLib::IAgVASNOPTResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7196)
inline void AgStkGatorLib::IAgVASNOPTResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASNOPTResultCollection wrapper method implementations
//

#pragma implementation_key(7197)
inline AgStkGatorLib::IAgVASNOPTResultPtr AgStkGatorLib::IAgVASNOPTResultCollection::GetItem ( long Index ) {
    struct IAgVASNOPTResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTResultPtr(_result, false);
}

#pragma implementation_key(7198)
inline IUnknownPtr AgStkGatorLib::IAgVASNOPTResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7199)
inline long AgStkGatorLib::IAgVASNOPTResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7200)
inline AgStkGatorLib::IAgVASNOPTResultPtr AgStkGatorLib::IAgVASNOPTResultCollection::GetResultByPaths ( _bstr_t ObjectPath, _bstr_t ResultPath ) {
    struct IAgVASNOPTResult * _result = 0;
    HRESULT _hr = raw_GetResultByPaths(ObjectPath, ResultPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTResultPtr(_result, false);
}

//
// interface _IAgVAProfileSNOPTOptimizer wrapper method implementations
//

#pragma implementation_key(7201)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(7202)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7203)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7204)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7205)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7206)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7207)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7208)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7209)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7210)
inline AgStkGatorLib::IAgVASNOPTControlCollectionPtr AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetControlParameters ( ) {
    struct IAgVASNOPTControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTControlCollectionPtr(_result, false);
}

#pragma implementation_key(7211)
inline AgStkGatorLib::IAgVASNOPTResultCollectionPtr AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetResults ( ) {
    struct IAgVASNOPTResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTResultCollectionPtr(_result, false);
}

#pragma implementation_key(7212)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(7213)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(7214)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7215)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7216)
inline long AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetMaxMajorIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxMajorIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7217)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutMaxMajorIterations ( long pVal ) {
    HRESULT _hr = put_MaxMajorIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7218)
inline double AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetToleranceOnMajorFeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMajorFeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7219)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutToleranceOnMajorFeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMajorFeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7220)
inline double AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetToleranceOnMajorOptimality ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMajorOptimality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7221)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutToleranceOnMajorOptimality ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMajorOptimality(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7222)
inline long AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetMaxMinorIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxMinorIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7223)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutMaxMinorIterations ( long pVal ) {
    HRESULT _hr = put_MaxMinorIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7224)
inline double AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetToleranceOnMinorFeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMinorFeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7225)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutToleranceOnMinorFeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMinorFeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7226)
inline double AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetToleranceOnMinorOptimality ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMinorOptimality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7227)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutToleranceOnMinorOptimality ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMinorOptimality(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7228)
inline _bstr_t AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::GetOptionsFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionsFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7229)
inline void AgStkGatorLib::_IAgVAProfileSNOPTOptimizer::PutOptionsFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_OptionsFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAProfileSNOPTOptimizer wrapper method implementations
//

#pragma implementation_key(7230)
inline AgStkGatorLib::IAgVASNOPTControlCollectionPtr AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetControlParameters ( ) {
    struct IAgVASNOPTControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTControlCollectionPtr(_result, false);
}

#pragma implementation_key(7231)
inline AgStkGatorLib::IAgVASNOPTResultCollectionPtr AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetResults ( ) {
    struct IAgVASNOPTResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVASNOPTResultCollectionPtr(_result, false);
}

#pragma implementation_key(7232)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(7233)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(7234)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7235)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7236)
inline long AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetMaxMajorIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxMajorIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7237)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutMaxMajorIterations ( long pVal ) {
    HRESULT _hr = put_MaxMajorIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7238)
inline double AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetToleranceOnMajorFeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMajorFeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7239)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutToleranceOnMajorFeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMajorFeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7240)
inline double AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetToleranceOnMajorOptimality ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMajorOptimality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7241)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutToleranceOnMajorOptimality ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMajorOptimality(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7242)
inline long AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetMaxMinorIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxMinorIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7243)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutMaxMinorIterations ( long pVal ) {
    HRESULT _hr = put_MaxMinorIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7244)
inline double AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetToleranceOnMinorFeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMinorFeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7245)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutToleranceOnMinorFeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMinorFeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7246)
inline double AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetToleranceOnMinorOptimality ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnMinorOptimality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7247)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutToleranceOnMinorOptimality ( double pVal ) {
    HRESULT _hr = put_ToleranceOnMinorOptimality(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7248)
inline _bstr_t AgStkGatorLib::IAgVAProfileSNOPTOptimizer::GetOptionsFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionsFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7249)
inline void AgStkGatorLib::IAgVAProfileSNOPTOptimizer::PutOptionsFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_OptionsFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASNOPTControl wrapper method implementations
//

#pragma implementation_key(7250)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASNOPTControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7251)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7252)
inline _bstr_t AgStkGatorLib::_IAgVASNOPTControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7253)
inline _bstr_t AgStkGatorLib::_IAgVASNOPTControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7254)
inline _variant_t AgStkGatorLib::_IAgVASNOPTControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7255)
inline _variant_t AgStkGatorLib::_IAgVASNOPTControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7256)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutCurrentValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_CurrentValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7257)
inline _variant_t AgStkGatorLib::_IAgVASNOPTControl::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7258)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7259)
inline _variant_t AgStkGatorLib::_IAgVASNOPTControl::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7260)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7261)
inline _variant_t AgStkGatorLib::_IAgVASNOPTControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7262)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7263)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASNOPTControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7264)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7265)
inline _bstr_t AgStkGatorLib::_IAgVASNOPTControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7266)
inline void AgStkGatorLib::_IAgVASNOPTControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASNOPTResult wrapper method implementations
//

#pragma implementation_key(7267)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASNOPTResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7268)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7269)
inline _bstr_t AgStkGatorLib::_IAgVASNOPTResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7270)
inline _variant_t AgStkGatorLib::_IAgVASNOPTResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7271)
inline _bstr_t AgStkGatorLib::_IAgVASNOPTResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7272)
inline _variant_t AgStkGatorLib::_IAgVASNOPTResult::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7273)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7274)
inline _variant_t AgStkGatorLib::_IAgVASNOPTResult::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7275)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7276)
inline _variant_t AgStkGatorLib::_IAgVASNOPTResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7277)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7278)
inline double AgStkGatorLib::_IAgVASNOPTResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7279)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7280)
inline enum AgStkGatorLib::AgEVASNOPTGoal AgStkGatorLib::_IAgVASNOPTResult::GetGoal ( ) {
    enum AgEVASNOPTGoal _result;
    HRESULT _hr = get_Goal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7281)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutGoal ( enum AgEVASNOPTGoal pVal ) {
    HRESULT _hr = put_Goal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7282)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASNOPTResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7283)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7284)
inline _bstr_t AgStkGatorLib::_IAgVASNOPTResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7285)
inline void AgStkGatorLib::_IAgVASNOPTResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAIPOPTControl wrapper method implementations
//

#pragma implementation_key(7286)
inline VARIANT_BOOL AgStkGatorLib::IAgVAIPOPTControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7287)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7288)
inline _bstr_t AgStkGatorLib::IAgVAIPOPTControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7289)
inline _bstr_t AgStkGatorLib::IAgVAIPOPTControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7290)
inline _variant_t AgStkGatorLib::IAgVAIPOPTControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7291)
inline _variant_t AgStkGatorLib::IAgVAIPOPTControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7292)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutCurrentValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_CurrentValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7293)
inline _variant_t AgStkGatorLib::IAgVAIPOPTControl::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7294)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7295)
inline _variant_t AgStkGatorLib::IAgVAIPOPTControl::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7296)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7297)
inline _variant_t AgStkGatorLib::IAgVAIPOPTControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7298)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7299)
inline VARIANT_BOOL AgStkGatorLib::IAgVAIPOPTControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7300)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7301)
inline _bstr_t AgStkGatorLib::IAgVAIPOPTControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7302)
inline void AgStkGatorLib::IAgVAIPOPTControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAIPOPTControlCollection wrapper method implementations
//

#pragma implementation_key(7303)
inline AgStkGatorLib::IAgVAIPOPTControlPtr AgStkGatorLib::IAgVAIPOPTControlCollection::GetItem ( long Index ) {
    struct IAgVAIPOPTControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTControlPtr(_result, false);
}

#pragma implementation_key(7304)
inline IUnknownPtr AgStkGatorLib::IAgVAIPOPTControlCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7305)
inline long AgStkGatorLib::IAgVAIPOPTControlCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7306)
inline AgStkGatorLib::IAgVAIPOPTControlPtr AgStkGatorLib::IAgVAIPOPTControlCollection::GetControlByPaths ( _bstr_t ObjectPath, _bstr_t ControlPath ) {
    struct IAgVAIPOPTControl * _result = 0;
    HRESULT _hr = raw_GetControlByPaths(ObjectPath, ControlPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTControlPtr(_result, false);
}

//
// interface IAgVAIPOPTResult wrapper method implementations
//

#pragma implementation_key(7307)
inline VARIANT_BOOL AgStkGatorLib::IAgVAIPOPTResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7308)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7309)
inline _bstr_t AgStkGatorLib::IAgVAIPOPTResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7310)
inline _variant_t AgStkGatorLib::IAgVAIPOPTResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7311)
inline _bstr_t AgStkGatorLib::IAgVAIPOPTResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7312)
inline _variant_t AgStkGatorLib::IAgVAIPOPTResult::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7313)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7314)
inline _variant_t AgStkGatorLib::IAgVAIPOPTResult::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7315)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7316)
inline _variant_t AgStkGatorLib::IAgVAIPOPTResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7317)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7318)
inline double AgStkGatorLib::IAgVAIPOPTResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7319)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7320)
inline enum AgStkGatorLib::AgEVAIPOPTGoal AgStkGatorLib::IAgVAIPOPTResult::GetGoal ( ) {
    enum AgEVAIPOPTGoal _result;
    HRESULT _hr = get_Goal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7321)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutGoal ( enum AgEVAIPOPTGoal pVal ) {
    HRESULT _hr = put_Goal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7322)
inline VARIANT_BOOL AgStkGatorLib::IAgVAIPOPTResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7323)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7324)
inline _bstr_t AgStkGatorLib::IAgVAIPOPTResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7325)
inline void AgStkGatorLib::IAgVAIPOPTResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAIPOPTResultCollection wrapper method implementations
//

#pragma implementation_key(7326)
inline AgStkGatorLib::IAgVAIPOPTResultPtr AgStkGatorLib::IAgVAIPOPTResultCollection::GetItem ( long Index ) {
    struct IAgVAIPOPTResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTResultPtr(_result, false);
}

#pragma implementation_key(7327)
inline IUnknownPtr AgStkGatorLib::IAgVAIPOPTResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7328)
inline long AgStkGatorLib::IAgVAIPOPTResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7329)
inline AgStkGatorLib::IAgVAIPOPTResultPtr AgStkGatorLib::IAgVAIPOPTResultCollection::GetResultByPaths ( _bstr_t ObjectPath, _bstr_t ResultPath ) {
    struct IAgVAIPOPTResult * _result = 0;
    HRESULT _hr = raw_GetResultByPaths(ObjectPath, ResultPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTResultPtr(_result, false);
}

//
// interface _IAgVAProfileIPOPTOptimizer wrapper method implementations
//

#pragma implementation_key(7330)
inline AgStkGatorLib::IAgVAProfilePtr AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::Copy ( ) {
    struct IAgVAProfile * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAProfilePtr(_result, false);
}

#pragma implementation_key(7331)
inline _bstr_t AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7332)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7333)
inline _bstr_t AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7334)
inline _bstr_t AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7335)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7336)
inline enum AgStkGatorLib::AgEVAProfileMode AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetMode ( ) {
    enum AgEVAProfileMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7337)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutMode ( enum AgEVAProfileMode pVal ) {
    HRESULT _hr = put_Mode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7338)
inline enum AgStkGatorLib::AgEVAProfile AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetType ( ) {
    enum AgEVAProfile _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7339)
inline AgStkGatorLib::IAgVAIPOPTControlCollectionPtr AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetControlParameters ( ) {
    struct IAgVAIPOPTControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTControlCollectionPtr(_result, false);
}

#pragma implementation_key(7340)
inline AgStkGatorLib::IAgVAIPOPTResultCollectionPtr AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetResults ( ) {
    struct IAgVAIPOPTResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTResultCollectionPtr(_result, false);
}

#pragma implementation_key(7341)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(7342)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(7343)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7344)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7345)
inline double AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetToleranceOnConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7346)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutToleranceOnConvergence ( double pVal ) {
    HRESULT _hr = put_ToleranceOnConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7347)
inline long AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetMaximumIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7348)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutMaximumIterations ( long pVal ) {
    HRESULT _hr = put_MaximumIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7349)
inline double AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetToleranceOnConstraintViolation ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnConstraintViolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7350)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutToleranceOnConstraintViolation ( double pVal ) {
    HRESULT _hr = put_ToleranceOnConstraintViolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7351)
inline double AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetToleranceOnDualInfeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnDualInfeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7352)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutToleranceOnDualInfeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnDualInfeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7353)
inline double AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetToleranceOnComplementaryInfeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnComplementaryInfeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7354)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutToleranceOnComplementaryInfeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnComplementaryInfeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7355)
inline _bstr_t AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::GetOptionsFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionsFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7356)
inline void AgStkGatorLib::_IAgVAProfileIPOPTOptimizer::PutOptionsFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_OptionsFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVAProfileIPOPTOptimizer wrapper method implementations
//

#pragma implementation_key(7357)
inline AgStkGatorLib::IAgVAIPOPTControlCollectionPtr AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetControlParameters ( ) {
    struct IAgVAIPOPTControlCollection * _result = 0;
    HRESULT _hr = get_ControlParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTControlCollectionPtr(_result, false);
}

#pragma implementation_key(7358)
inline AgStkGatorLib::IAgVAIPOPTResultCollectionPtr AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetResults ( ) {
    struct IAgVAIPOPTResultCollection * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAIPOPTResultCollectionPtr(_result, false);
}

#pragma implementation_key(7359)
inline AgStkGatorLib::IAgVATargeterGraphCollectionPtr AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetTargeterGraphs ( ) {
    struct IAgVATargeterGraphCollection * _result = 0;
    HRESULT _hr = get_TargeterGraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVATargeterGraphCollectionPtr(_result, false);
}

#pragma implementation_key(7360)
inline AgStkGatorLib::IAgVAScriptingToolPtr AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetScriptingTool ( ) {
    struct IAgVAScriptingTool * _result = 0;
    HRESULT _hr = get_ScriptingTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVAScriptingToolPtr(_result, false);
}

#pragma implementation_key(7361)
inline VARIANT_BOOL AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetResetControlsBeforeRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetControlsBeforeRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7362)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutResetControlsBeforeRun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetControlsBeforeRun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7363)
inline double AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetToleranceOnConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7364)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutToleranceOnConvergence ( double pVal ) {
    HRESULT _hr = put_ToleranceOnConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7365)
inline long AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetMaximumIterations ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7366)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutMaximumIterations ( long pVal ) {
    HRESULT _hr = put_MaximumIterations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7367)
inline double AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetToleranceOnConstraintViolation ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnConstraintViolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7368)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutToleranceOnConstraintViolation ( double pVal ) {
    HRESULT _hr = put_ToleranceOnConstraintViolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7369)
inline double AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetToleranceOnDualInfeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnDualInfeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7370)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutToleranceOnDualInfeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnDualInfeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7371)
inline double AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetToleranceOnComplementaryInfeasibility ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceOnComplementaryInfeasibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7372)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutToleranceOnComplementaryInfeasibility ( double pVal ) {
    HRESULT _hr = put_ToleranceOnComplementaryInfeasibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7373)
inline _bstr_t AgStkGatorLib::IAgVAProfileIPOPTOptimizer::GetOptionsFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionsFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7374)
inline void AgStkGatorLib::IAgVAProfileIPOPTOptimizer::PutOptionsFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_OptionsFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAIPOPTControl wrapper method implementations
//

#pragma implementation_key(7375)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAIPOPTControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7376)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7377)
inline _bstr_t AgStkGatorLib::_IAgVAIPOPTControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7378)
inline _bstr_t AgStkGatorLib::_IAgVAIPOPTControl::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7379)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTControl::GetInitialValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7380)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTControl::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7381)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutCurrentValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_CurrentValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7382)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTControl::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7383)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7384)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTControl::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7385)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7386)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTControl::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7387)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7388)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAIPOPTControl::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7389)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7390)
inline _bstr_t AgStkGatorLib::_IAgVAIPOPTControl::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7391)
inline void AgStkGatorLib::_IAgVAIPOPTControl::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVAIPOPTResult wrapper method implementations
//

#pragma implementation_key(7392)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAIPOPTResult::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7393)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7394)
inline _bstr_t AgStkGatorLib::_IAgVAIPOPTResult::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7395)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTResult::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7396)
inline _bstr_t AgStkGatorLib::_IAgVAIPOPTResult::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7397)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTResult::GetLowerBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7398)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutLowerBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_LowerBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7399)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTResult::GetUpperBound ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7400)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutUpperBound ( const _variant_t & pVal ) {
    HRESULT _hr = put_UpperBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7401)
inline _variant_t AgStkGatorLib::_IAgVAIPOPTResult::GetScalingValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7402)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutScalingValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_ScalingValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7403)
inline double AgStkGatorLib::_IAgVAIPOPTResult::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7404)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutWeight ( double pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7405)
inline enum AgStkGatorLib::AgEVAIPOPTGoal AgStkGatorLib::_IAgVAIPOPTResult::GetGoal ( ) {
    enum AgEVAIPOPTGoal _result;
    HRESULT _hr = get_Goal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7406)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutGoal ( enum AgEVAIPOPTGoal pVal ) {
    HRESULT _hr = put_Goal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7407)
inline VARIANT_BOOL AgStkGatorLib::_IAgVAIPOPTResult::GetUseCustomDisplayUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7408)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutUseCustomDisplayUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7409)
inline _bstr_t AgStkGatorLib::_IAgVAIPOPTResult::GetCustomDisplayUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7410)
inline void AgStkGatorLib::_IAgVAIPOPTResult::PutCustomDisplayUnit ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDisplayUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVACentralBodyCollection wrapper method implementations
//

#pragma implementation_key(7411)
inline AgStkGatorLib::IAgVACentralBodyPtr AgStkGatorLib::IAgVACentralBodyCollection::GetItem ( const _variant_t & IndexOrCbName ) {
    struct IAgVACentralBody * _result = 0;
    HRESULT _hr = get_Item(IndexOrCbName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyPtr(_result, false);
}

#pragma implementation_key(7412)
inline long AgStkGatorLib::IAgVACentralBodyCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7413)
inline IUnknownPtr AgStkGatorLib::IAgVACentralBodyCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7414)
inline HRESULT AgStkGatorLib::IAgVACentralBodyCollection::Add ( _bstr_t CbName ) {
    HRESULT _hr = raw_Add(CbName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7415)
inline HRESULT AgStkGatorLib::IAgVACentralBodyCollection::Remove ( const _variant_t & IndexOrName ) {
    HRESULT _hr = raw_Remove(IndexOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7416)
inline HRESULT AgStkGatorLib::IAgVACentralBodyCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVACentralBody wrapper method implementations
//

#pragma implementation_key(7417)
inline double AgStkGatorLib::IAgVACentralBody::GetGravitationalParam ( ) {
    double _result = 0;
    HRESULT _hr = get_GravitationalParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7418)
inline void AgStkGatorLib::IAgVACentralBody::PutGravitationalParam ( double pVal ) {
    HRESULT _hr = put_GravitationalParam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7419)
inline _bstr_t AgStkGatorLib::IAgVACentralBody::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7420)
inline void AgStkGatorLib::IAgVACentralBody::PutParentName ( _bstr_t pVal ) {
    HRESULT _hr = put_ParentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7421)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVACentralBody::GetChildren ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7422)
inline _bstr_t AgStkGatorLib::IAgVACentralBody::GetDefaultGravityModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultGravityModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7423)
inline HRESULT AgStkGatorLib::IAgVACentralBody::SetDefaultGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_SetDefaultGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7424)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::IAgVACentralBody::GetDefaultGravityModelData ( ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = get_DefaultGravityModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7425)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::IAgVACentralBody::AddGravityModel ( enum AgEVACbGravityModel EGravityModel, _bstr_t UniqueName ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = raw_AddGravityModel(EGravityModel, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7426)
inline HRESULT AgStkGatorLib::IAgVACentralBody::RemoveGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_RemoveGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7427)
inline _bstr_t AgStkGatorLib::IAgVACentralBody::GetDefaultShapeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultShapeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7428)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::IAgVACentralBody::GetDefaultShapeData ( ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = get_DefaultShapeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7429)
inline HRESULT AgStkGatorLib::IAgVACentralBody::SetDefaultShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_SetDefaultShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7430)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::IAgVACentralBody::AddShape ( enum AgEVACbShape EShape, _bstr_t UniqueName ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = raw_AddShape(EShape, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7431)
inline HRESULT AgStkGatorLib::IAgVACentralBody::RemoveShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_RemoveShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7432)
inline _bstr_t AgStkGatorLib::IAgVACentralBody::GetDefaultAttitudeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultAttitudeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7433)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::IAgVACentralBody::GetDefaultAttitudeData ( ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = get_DefaultAttitudeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7434)
inline HRESULT AgStkGatorLib::IAgVACentralBody::SetDefaultAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_SetDefaultAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7435)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::IAgVACentralBody::AddAttitude ( enum AgEVACbAttitude EAttitude, _bstr_t UniqueName ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = raw_AddAttitude(EAttitude, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7436)
inline HRESULT AgStkGatorLib::IAgVACentralBody::RemoveAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_RemoveAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7437)
inline _bstr_t AgStkGatorLib::IAgVACentralBody::GetDefaultEphemerisName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultEphemerisName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7438)
inline HRESULT AgStkGatorLib::IAgVACentralBody::SetDefaultEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_SetDefaultEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7439)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::IAgVACentralBody::GetDefaultEphemerisData ( ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = get_DefaultEphemerisData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

#pragma implementation_key(7440)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::IAgVACentralBody::AddEphemeris ( enum AgEVACbEphemeris EEphemeris, _bstr_t UniqueName ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = raw_AddEphemeris(EEphemeris, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

#pragma implementation_key(7441)
inline HRESULT AgStkGatorLib::IAgVACentralBody::RemoveEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_RemoveEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7442)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CutGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_CutGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7443)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CopyGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_CopyGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7444)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::IAgVACentralBody::PasteGravityModel ( ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = raw_PasteGravityModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7445)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::IAgVACentralBody::AddCopyOfGravityModel ( struct IAgVACbGravityModel * GravityModel ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = raw_AddCopyOfGravityModel(GravityModel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7446)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CutShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_CutShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7447)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CopyShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_CopyShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7448)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::IAgVACentralBody::PasteShape ( ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = raw_PasteShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7449)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::IAgVACentralBody::AddCopyOfShape ( struct IAgVACbShape * Shape ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = raw_AddCopyOfShape(Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7450)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CutAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_CutAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7451)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CopyAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_CopyAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7452)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::IAgVACentralBody::PasteAttitude ( ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = raw_PasteAttitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7453)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::IAgVACentralBody::AddCopyOfAttitude ( struct IAgVACbAttitude * Attitude ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = raw_AddCopyOfAttitude(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7454)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CutEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_CutEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7455)
inline HRESULT AgStkGatorLib::IAgVACentralBody::CopyEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_CopyEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7456)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::IAgVACentralBody::PasteEphemeris ( ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = raw_PasteEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

#pragma implementation_key(7457)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::IAgVACentralBody::AddCopyOfEphemeris ( struct IAgVACbEphemeris * Ephemeris ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = raw_AddCopyOfEphemeris(Ephemeris, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

//
// interface _IAgVACentralBody wrapper method implementations
//

#pragma implementation_key(7458)
inline double AgStkGatorLib::_IAgVACentralBody::GetGravitationalParam ( ) {
    double _result = 0;
    HRESULT _hr = get_GravitationalParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7459)
inline void AgStkGatorLib::_IAgVACentralBody::PutGravitationalParam ( double pVal ) {
    HRESULT _hr = put_GravitationalParam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7460)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetParentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7461)
inline void AgStkGatorLib::_IAgVACentralBody::PutParentName ( _bstr_t pVal ) {
    HRESULT _hr = put_ParentName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7462)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVACentralBody::GetChildren ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7463)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetDefaultGravityModelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultGravityModelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7464)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::SetDefaultGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_SetDefaultGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7465)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::_IAgVACentralBody::GetDefaultGravityModelData ( ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = get_DefaultGravityModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7466)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::_IAgVACentralBody::AddGravityModel ( enum AgEVACbGravityModel EGravityModel, _bstr_t UniqueName ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = raw_AddGravityModel(EGravityModel, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7467)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::RemoveGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_RemoveGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7468)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetDefaultShapeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultShapeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7469)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::_IAgVACentralBody::GetDefaultShapeData ( ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = get_DefaultShapeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7470)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::SetDefaultShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_SetDefaultShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7471)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::_IAgVACentralBody::AddShape ( enum AgEVACbShape ECbShape, _bstr_t UniqueName ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = raw_AddShape(ECbShape, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7472)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::RemoveShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_RemoveShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7473)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetDefaultAttitudeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultAttitudeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7474)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::_IAgVACentralBody::GetDefaultAttitudeData ( ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = get_DefaultAttitudeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7475)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::SetDefaultAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_SetDefaultAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7476)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::_IAgVACentralBody::AddAttitude ( enum AgEVACbAttitude EAttitude, _bstr_t UniqueName ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = raw_AddAttitude(EAttitude, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7477)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::RemoveAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_RemoveAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7478)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetDefaultEphemerisName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultEphemerisName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7479)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::SetDefaultEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_SetDefaultEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7480)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::_IAgVACentralBody::GetDefaultEphemerisData ( ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = get_DefaultEphemerisData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

#pragma implementation_key(7481)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::_IAgVACentralBody::AddEphemeris ( enum AgEVACbEphemeris EEphemeris, _bstr_t UniqueName ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = raw_AddEphemeris(EEphemeris, UniqueName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

#pragma implementation_key(7482)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::RemoveEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_RemoveEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7483)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7484)
inline void AgStkGatorLib::_IAgVACentralBody::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7485)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7486)
inline void AgStkGatorLib::_IAgVACentralBody::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7487)
inline _bstr_t AgStkGatorLib::_IAgVACentralBody::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7488)
inline VARIANT_BOOL AgStkGatorLib::_IAgVACentralBody::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7489)
inline IUnknownPtr AgStkGatorLib::_IAgVACentralBody::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7490)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CutGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_CutGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7491)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CopyGravityModelByName ( _bstr_t GravityModelName ) {
    HRESULT _hr = raw_CopyGravityModelByName(GravityModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7492)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::_IAgVACentralBody::PasteGravityModel ( ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = raw_PasteGravityModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7493)
inline AgStkGatorLib::IAgVACbGravityModelPtr AgStkGatorLib::_IAgVACentralBody::AddCopyOfGravityModel ( struct IAgVACbGravityModel * GravityModel ) {
    struct IAgVACbGravityModel * _result = 0;
    HRESULT _hr = raw_AddCopyOfGravityModel(GravityModel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbGravityModelPtr(_result, false);
}

#pragma implementation_key(7494)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CutShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_CutShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7495)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CopyShapeByName ( _bstr_t ShapeName ) {
    HRESULT _hr = raw_CopyShapeByName(ShapeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7496)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::_IAgVACentralBody::PasteShape ( ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = raw_PasteShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7497)
inline AgStkGatorLib::IAgVACbShapePtr AgStkGatorLib::_IAgVACentralBody::AddCopyOfShape ( struct IAgVACbShape * Shape ) {
    struct IAgVACbShape * _result = 0;
    HRESULT _hr = raw_AddCopyOfShape(Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbShapePtr(_result, false);
}

#pragma implementation_key(7498)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CutAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_CutAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7499)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CopyAttitudeByName ( _bstr_t AttitudeName ) {
    HRESULT _hr = raw_CopyAttitudeByName(AttitudeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7500)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::_IAgVACentralBody::PasteAttitude ( ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = raw_PasteAttitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7501)
inline AgStkGatorLib::IAgVACbAttitudePtr AgStkGatorLib::_IAgVACentralBody::AddCopyOfAttitude ( struct IAgVACbAttitude * Attitude ) {
    struct IAgVACbAttitude * _result = 0;
    HRESULT _hr = raw_AddCopyOfAttitude(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbAttitudePtr(_result, false);
}

#pragma implementation_key(7502)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CutEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_CutEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7503)
inline HRESULT AgStkGatorLib::_IAgVACentralBody::CopyEphemerisByName ( _bstr_t EphemerisName ) {
    HRESULT _hr = raw_CopyEphemerisByName(EphemerisName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7504)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::_IAgVACentralBody::PasteEphemeris ( ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = raw_PasteEphemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

#pragma implementation_key(7505)
inline AgStkGatorLib::IAgVACbEphemerisPtr AgStkGatorLib::_IAgVACentralBody::AddCopyOfEphemeris ( struct IAgVACbEphemeris * Ephemeris ) {
    struct IAgVACbEphemeris * _result = 0;
    HRESULT _hr = raw_AddCopyOfEphemeris(Ephemeris, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACbEphemerisPtr(_result, false);
}

//
// interface IAgVASRPAeroT20 wrapper method implementations
//

#pragma implementation_key(7506)
inline double AgStkGatorLib::IAgVASRPAeroT20::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7507)
inline void AgStkGatorLib::IAgVASRPAeroT20::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7508)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPAeroT20::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7509)
inline void AgStkGatorLib::IAgVASRPAeroT20::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7510)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPAeroT20::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7511)
inline void AgStkGatorLib::IAgVASRPAeroT20::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7512)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPAeroT20::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7513)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPAeroT20::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7514)
inline void AgStkGatorLib::IAgVASRPAeroT20::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7515)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPAeroT20::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7516)
inline void AgStkGatorLib::IAgVASRPAeroT20::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7517)
inline double AgStkGatorLib::IAgVASRPAeroT20::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7518)
inline void AgStkGatorLib::IAgVASRPAeroT20::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPAeroT20 wrapper method implementations
//

#pragma implementation_key(7519)
inline double AgStkGatorLib::_IAgVASRPAeroT20::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7520)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7521)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPAeroT20::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7522)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7523)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPAeroT20::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7524)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7525)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPAeroT20::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7526)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPAeroT20::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7527)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7528)
inline _bstr_t AgStkGatorLib::_IAgVASRPAeroT20::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7529)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7530)
inline _bstr_t AgStkGatorLib::_IAgVASRPAeroT20::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7531)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7532)
inline _bstr_t AgStkGatorLib::_IAgVASRPAeroT20::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7533)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPAeroT20::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7534)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPAeroT20::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7535)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPAeroT20::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7536)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7537)
inline double AgStkGatorLib::_IAgVASRPAeroT20::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7538)
inline void AgStkGatorLib::_IAgVASRPAeroT20::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASRPAeroT30 wrapper method implementations
//

#pragma implementation_key(7539)
inline double AgStkGatorLib::IAgVASRPAeroT30::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7540)
inline void AgStkGatorLib::IAgVASRPAeroT30::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7541)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPAeroT30::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7542)
inline void AgStkGatorLib::IAgVASRPAeroT30::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7543)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPAeroT30::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7544)
inline void AgStkGatorLib::IAgVASRPAeroT30::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7545)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPAeroT30::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7546)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPAeroT30::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7547)
inline void AgStkGatorLib::IAgVASRPAeroT30::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7548)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPAeroT30::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7549)
inline void AgStkGatorLib::IAgVASRPAeroT30::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7550)
inline double AgStkGatorLib::IAgVASRPAeroT30::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7551)
inline void AgStkGatorLib::IAgVASRPAeroT30::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPAeroT30 wrapper method implementations
//

#pragma implementation_key(7552)
inline double AgStkGatorLib::_IAgVASRPAeroT30::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7553)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7554)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPAeroT30::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7555)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7556)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPAeroT30::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7557)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7558)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPAeroT30::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7559)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPAeroT30::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7560)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7561)
inline _bstr_t AgStkGatorLib::_IAgVASRPAeroT30::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7562)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7563)
inline _bstr_t AgStkGatorLib::_IAgVASRPAeroT30::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7564)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7565)
inline _bstr_t AgStkGatorLib::_IAgVASRPAeroT30::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7566)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPAeroT30::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7567)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPAeroT30::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7568)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPAeroT30::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7569)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7570)
inline double AgStkGatorLib::_IAgVASRPAeroT30::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7571)
inline void AgStkGatorLib::_IAgVASRPAeroT30::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASRPGSPM04aIIA wrapper method implementations
//

#pragma implementation_key(7572)
inline double AgStkGatorLib::IAgVASRPGSPM04aIIA::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7573)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIA::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7574)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPGSPM04aIIA::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7575)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIA::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7576)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPGSPM04aIIA::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7577)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIA::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7578)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPGSPM04aIIA::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7579)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aIIA::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7580)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIA::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7581)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aIIA::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7582)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIA::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7583)
inline double AgStkGatorLib::IAgVASRPGSPM04aIIA::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7584)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIA::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPGSPM04aIIA wrapper method implementations
//

#pragma implementation_key(7585)
inline double AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7586)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7587)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7588)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7589)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7590)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7591)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7592)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7593)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7594)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7595)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7596)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7597)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7598)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7599)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aIIA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7600)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPGSPM04aIIA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7601)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7602)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7603)
inline double AgStkGatorLib::_IAgVASRPGSPM04aIIA::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7604)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIA::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASRPGSPM04aIIR wrapper method implementations
//

#pragma implementation_key(7605)
inline double AgStkGatorLib::IAgVASRPGSPM04aIIR::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7606)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIR::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7607)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPGSPM04aIIR::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7608)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIR::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7609)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPGSPM04aIIR::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7610)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIR::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7611)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPGSPM04aIIR::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7612)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aIIR::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7613)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIR::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7614)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aIIR::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7615)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIR::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7616)
inline double AgStkGatorLib::IAgVASRPGSPM04aIIR::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7617)
inline void AgStkGatorLib::IAgVASRPGSPM04aIIR::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPGSPM04aIIR wrapper method implementations
//

#pragma implementation_key(7618)
inline double AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7619)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7620)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7621)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7622)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7623)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7624)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7625)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7626)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7627)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7628)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7629)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7630)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7631)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7632)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aIIR::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7633)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPGSPM04aIIR::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7634)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7635)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7636)
inline double AgStkGatorLib::_IAgVASRPGSPM04aIIR::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7637)
inline void AgStkGatorLib::_IAgVASRPGSPM04aIIR::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASRPGSPM04aeIIA wrapper method implementations
//

#pragma implementation_key(7638)
inline double AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7639)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIA::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7640)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7641)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIA::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7642)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7643)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIA::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7644)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7645)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7646)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIA::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7647)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7648)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIA::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7649)
inline double AgStkGatorLib::IAgVASRPGSPM04aeIIA::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7650)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIA::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPGSPM04aeIIA wrapper method implementations
//

#pragma implementation_key(7651)
inline double AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7652)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7653)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7654)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7655)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7656)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7657)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7658)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7659)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7660)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7661)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7662)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7663)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7664)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7665)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aeIIA::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7666)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPGSPM04aeIIA::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7667)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7668)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7669)
inline double AgStkGatorLib::_IAgVASRPGSPM04aeIIA::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7670)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIA::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASRPGSPM04aeIIR wrapper method implementations
//

#pragma implementation_key(7671)
inline double AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7672)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIR::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7673)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7674)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIR::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7675)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7676)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIR::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7677)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7678)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7679)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIR::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7680)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7681)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIR::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7682)
inline double AgStkGatorLib::IAgVASRPGSPM04aeIIR::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7683)
inline void AgStkGatorLib::IAgVASRPGSPM04aeIIR::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPGSPM04aeIIR wrapper method implementations
//

#pragma implementation_key(7684)
inline double AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7685)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7686)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7687)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7688)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7689)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7690)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7691)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7692)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7693)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7694)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7695)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7696)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7697)
inline _bstr_t AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7698)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aeIIR::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7699)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPGSPM04aeIIR::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7700)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7701)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7702)
inline double AgStkGatorLib::_IAgVASRPGSPM04aeIIR::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7703)
inline void AgStkGatorLib::_IAgVASRPGSPM04aeIIR::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVASRPSpherical wrapper method implementations
//

#pragma implementation_key(7704)
inline double AgStkGatorLib::IAgVASRPSpherical::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7705)
inline void AgStkGatorLib::IAgVASRPSpherical::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7706)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::IAgVASRPSpherical::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7707)
inline void AgStkGatorLib::IAgVASRPSpherical::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7708)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::IAgVASRPSpherical::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7709)
inline void AgStkGatorLib::IAgVASRPSpherical::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7710)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::IAgVASRPSpherical::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7711)
inline double AgStkGatorLib::IAgVASRPSpherical::GetMeanFlux ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanFlux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7712)
inline void AgStkGatorLib::IAgVASRPSpherical::PutMeanFlux ( double pVal ) {
    HRESULT _hr = put_MeanFlux(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7713)
inline double AgStkGatorLib::IAgVASRPSpherical::GetLuminosity ( ) {
    double _result = 0;
    HRESULT _hr = get_Luminosity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7714)
inline void AgStkGatorLib::IAgVASRPSpherical::PutLuminosity ( double pVal ) {
    HRESULT _hr = put_Luminosity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7715)
inline enum AgStkGatorLib::AgEVASolarForceMethod AgStkGatorLib::IAgVASRPSpherical::GetSolarForceMethod ( ) {
    enum AgEVASolarForceMethod _result;
    HRESULT _hr = get_SolarForceMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7716)
inline void AgStkGatorLib::IAgVASRPSpherical::PutSolarForceMethod ( enum AgEVASolarForceMethod pVal ) {
    HRESULT _hr = put_SolarForceMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7717)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPSpherical::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7718)
inline void AgStkGatorLib::IAgVASRPSpherical::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7719)
inline VARIANT_BOOL AgStkGatorLib::IAgVASRPSpherical::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7720)
inline void AgStkGatorLib::IAgVASRPSpherical::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7721)
inline double AgStkGatorLib::IAgVASRPSpherical::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7722)
inline void AgStkGatorLib::IAgVASRPSpherical::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVASRPSpherical wrapper method implementations
//

#pragma implementation_key(7723)
inline double AgStkGatorLib::_IAgVASRPSpherical::GetAtmosAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7724)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutAtmosAlt ( double pVal ) {
    HRESULT _hr = put_AtmosAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7725)
inline enum AgStkGatorLib::AgEVAShadowModel AgStkGatorLib::_IAgVASRPSpherical::GetShadowModel ( ) {
    enum AgEVAShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7726)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutShadowModel ( enum AgEVAShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7727)
inline enum AgStkGatorLib::AgEVASunPosition AgStkGatorLib::_IAgVASRPSpherical::GetSunPosition ( ) {
    enum AgEVASunPosition _result;
    HRESULT _hr = get_SunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7728)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutSunPosition ( enum AgEVASunPosition pVal ) {
    HRESULT _hr = put_SunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7729)
inline AgStkGatorLib::IAgVACentralBodyCollectionPtr AgStkGatorLib::_IAgVASRPSpherical::GetEclipsingBodies ( ) {
    struct IAgVACentralBodyCollection * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVACentralBodyCollectionPtr(_result, false);
}

#pragma implementation_key(7730)
inline double AgStkGatorLib::_IAgVASRPSpherical::GetMeanFlux ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanFlux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7731)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutMeanFlux ( double pVal ) {
    HRESULT _hr = put_MeanFlux(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7732)
inline double AgStkGatorLib::_IAgVASRPSpherical::GetLuminosity ( ) {
    double _result = 0;
    HRESULT _hr = get_Luminosity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7733)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutLuminosity ( double pVal ) {
    HRESULT _hr = put_Luminosity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7734)
inline enum AgStkGatorLib::AgEVASolarForceMethod AgStkGatorLib::_IAgVASRPSpherical::GetSolarForceMethod ( ) {
    enum AgEVASolarForceMethod _result;
    HRESULT _hr = get_SolarForceMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7735)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutSolarForceMethod ( enum AgEVASolarForceMethod pVal ) {
    HRESULT _hr = put_SolarForceMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7736)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPSpherical::GetIncludeBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7737)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutIncludeBoundaryMitigation ( VARIANT_BOOL pMitigation ) {
    HRESULT _hr = put_IncludeBoundaryMitigation(pMitigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7738)
inline _bstr_t AgStkGatorLib::_IAgVASRPSpherical::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7739)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7740)
inline _bstr_t AgStkGatorLib::_IAgVASRPSpherical::GetUserComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7741)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutUserComment ( _bstr_t pVal ) {
    HRESULT _hr = put_UserComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7742)
inline _bstr_t AgStkGatorLib::_IAgVASRPSpherical::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7743)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPSpherical::IsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7744)
inline IUnknownPtr AgStkGatorLib::_IAgVASRPSpherical::CloneObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CloneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7745)
inline VARIANT_BOOL AgStkGatorLib::_IAgVASRPSpherical::GetUseSunCbFileValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSunCbFileValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7746)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutUseSunCbFileValues ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSunCbFileValues(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7747)
inline double AgStkGatorLib::_IAgVASRPSpherical::GetSolarRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SolarRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7748)
inline void AgStkGatorLib::_IAgVASRPSpherical::PutSolarRadius ( double pVal ) {
    HRESULT _hr = put_SolarRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
