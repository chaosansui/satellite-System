// Created by Microsoft (R) C/C++ Compiler Version 14.16.27026.1 (27230505).
//
// d:\dev\r_stk_prod_x64\source\lib\release.x64\tlhbuilder\stkx.tlh
//
// C++ source equivalent of type library STKX.tlb
// compiler-generated file created 03/29/19 at 20:37:36 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace STKXLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("bef246ab-fa35-44bb-bee8-01928b41e9a6"))
/* LIBID */ __STKXLib;
struct __declspec(uuid("69d27167-4ce1-4fc7-8a92-4bd6c259bdc0"))
/* dual interface */ IAgPickInfoData;
struct __declspec(uuid("14e3c4fa-3f31-40b2-828d-797037260b01"))
/* dual interface */ IAgRubberBandPickInfoData;
struct __declspec(uuid("d850dc37-dae8-4343-b44c-d9c7808011ae"))
/* dual interface */ IAgObjPathCollection;
struct __declspec(uuid("e398c2dc-a483-4958-bed8-f371466a2523"))
/* dual interface */ IAgSTKXApplication;
struct __declspec(uuid("80cd7a52-4f8f-48d7-bed7-254784ed4759"))
/* dual interface */ IAgExecCmdResult;
enum AgELoggingMode;
enum AgEExecMultiCmdResultAction;
struct __declspec(uuid("5b4a1fae-b250-461a-9e12-8cc8327b8b40"))
/* dual interface */ IAgExecMultiCmdResult;
enum AgEFeatureCodes;
struct __declspec(uuid("ba9441e9-6b6d-4e64-9c92-c051de266895"))
/* dual interface */ IAgDataObject;
struct __declspec(uuid("abac7c4e-2aab-4b28-9a40-02345ffaf4bb"))
/* dual interface */ IAgDataObjectFiles;
struct __declspec(uuid("c4a2fe4a-29d3-44a5-8f3d-3581f9b216a8"))
/* dual interface */ IAgDrawElem;
struct __declspec(uuid("69bddc1a-5ce2-4224-9982-5ed2062127e3"))
/* dual interface */ IAgDrawElemRect;
enum AgELineStyle;
struct __declspec(uuid("5a81dac9-92bf-4e83-9477-dced2eca3b65"))
/* dual interface */ IAgDrawElemCollection;
struct __declspec(uuid("9b9afe71-cddd-4df8-bace-b0f6df7c8090"))
/* dual interface */ IAgWinProjPos;
struct __declspec(uuid("191a6108-21df-4451-a15f-6e6e4db71ce4"))
/* dual interface */ IAgDrawElemLine;
enum AgEMouseMode;
enum AgEOLEDropMode;
enum AgEButtonValues;
enum AgEShiftValues;
enum AgELogMsgType;
enum AgELogMsgDispID;
struct /* coclass */ AgExecCmdResult;
struct /* coclass */ AgExecMultiCmdResult;
struct __declspec(uuid("9162f1c6-75bc-443e-a72a-e2ac541cc097"))
/* dispinterface */ IAgUiAxVOCntrlEvents;
struct __declspec(uuid("8fe7a7ad-7d52-41fe-b454-c4ab8c4bfd20"))
/* dual interface */ IAgUiAxStockRawEvents;
struct __declspec(uuid("88f3f2b2-b522-412e-9293-c8decd5b4d75"))
/* dual interface */ IAgUiAxVOCntrlRawEvents;
struct __declspec(uuid("bde01729-3f87-4603-812e-cfc29e6bf300"))
/* dual interface */ IAgUiAxVOCntrl;
enum AgEShowProgressImage;
enum AgEProgressImageXOrigin;
enum AgEProgressImageYOrigin;
struct __declspec(uuid("4dde22be-56b1-4e8e-8d28-84116703932a"))
/* dispinterface */ IAgUiAx2DCntrlEvents;
struct __declspec(uuid("226ffc0a-7f86-47eb-af1c-bbabcae41faf"))
/* dual interface */ IAgUiAx2DCntrl;
enum AgEGfxDrawCoords;
struct __declspec(uuid("86a7dd52-9116-41f4-8a74-30c738703e12"))
/* dispinterface */ IAgSTKXApplicationEvents;
enum AgEGfxAnalysisMode;
struct __declspec(uuid("90ed2919-ff2a-4d9b-b050-0c1ae1745e98"))
/* dual interface */ IAgSTKXSSLCertificateErrorEventArgs;
struct __declspec(uuid("680e6b88-e794-40fe-9343-17f84b835f27"))
/* dual interface */ IAgSTKXConControlQuitReceivedEventArgs;
struct __declspec(uuid("04e697d0-ad7f-48e4-8091-ec924eec8d22"))
/* dual interface */ IAgSTKXApplicationRawEvents;
struct __declspec(uuid("0e542289-7ef4-423d-b8a1-b91d1f63d202"))
/* dispinterface */ IAgUiAxGfxAnalysisCntrlEvents;
struct __declspec(uuid("cfb6315c-3a5e-493c-afca-7b046184e14f"))
/* dual interface */ IAgUiAxGfxAnalysisCntrl;
struct /* coclass */ AgUiAxVOCntrl;
struct /* coclass */ AgUiAx2DCntrl;
struct /* coclass */ AgPickInfoData;
struct /* coclass */ AgSTKXApplication;
struct /* coclass */ AgDataObject;
struct /* coclass */ AgDataObjectFiles;
struct /* coclass */ AgRubberBandPickInfoData;
struct /* coclass */ AgObjPathCollection;
struct /* coclass */ AgDrawElemRect;
struct /* coclass */ AgDrawElemCollection;
struct /* coclass */ AgDraw2DElemRect;
struct /* coclass */ AgDraw2DElemCollection;
struct /* coclass */ AgUiAxGfxAnalysisCntrl;
struct /* coclass */ AgWinProjPos;
struct /* coclass */ AgDrawElemLine;
struct /* coclass */ AgSTKXSSLCertificateErrorEventArgs;
struct /* coclass */ AgSTKXConControlQuitReceivedEventArgs;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgPickInfoData, __uuidof(IAgPickInfoData));
_COM_SMARTPTR_TYPEDEF(IAgObjPathCollection, __uuidof(IAgObjPathCollection));
_COM_SMARTPTR_TYPEDEF(IAgRubberBandPickInfoData, __uuidof(IAgRubberBandPickInfoData));
_COM_SMARTPTR_TYPEDEF(IAgExecCmdResult, __uuidof(IAgExecCmdResult));
_COM_SMARTPTR_TYPEDEF(IAgExecMultiCmdResult, __uuidof(IAgExecMultiCmdResult));
_COM_SMARTPTR_TYPEDEF(IAgSTKXApplication, __uuidof(IAgSTKXApplication));
_COM_SMARTPTR_TYPEDEF(IAgDataObjectFiles, __uuidof(IAgDataObjectFiles));
_COM_SMARTPTR_TYPEDEF(IAgDataObject, __uuidof(IAgDataObject));
_COM_SMARTPTR_TYPEDEF(IAgDrawElem, __uuidof(IAgDrawElem));
_COM_SMARTPTR_TYPEDEF(IAgDrawElemRect, __uuidof(IAgDrawElemRect));
_COM_SMARTPTR_TYPEDEF(IAgDrawElemCollection, __uuidof(IAgDrawElemCollection));
_COM_SMARTPTR_TYPEDEF(IAgWinProjPos, __uuidof(IAgWinProjPos));
_COM_SMARTPTR_TYPEDEF(IAgDrawElemLine, __uuidof(IAgDrawElemLine));
_COM_SMARTPTR_TYPEDEF(IAgUiAxVOCntrlEvents, __uuidof(IAgUiAxVOCntrlEvents));
_COM_SMARTPTR_TYPEDEF(IAgUiAxStockRawEvents, __uuidof(IAgUiAxStockRawEvents));
_COM_SMARTPTR_TYPEDEF(IAgUiAxVOCntrlRawEvents, __uuidof(IAgUiAxVOCntrlRawEvents));
_COM_SMARTPTR_TYPEDEF(IAgUiAxVOCntrl, __uuidof(IAgUiAxVOCntrl));
_COM_SMARTPTR_TYPEDEF(IAgUiAx2DCntrlEvents, __uuidof(IAgUiAx2DCntrlEvents));
_COM_SMARTPTR_TYPEDEF(IAgUiAx2DCntrl, __uuidof(IAgUiAx2DCntrl));
_COM_SMARTPTR_TYPEDEF(IAgSTKXApplicationEvents, __uuidof(IAgSTKXApplicationEvents));
_COM_SMARTPTR_TYPEDEF(IAgSTKXSSLCertificateErrorEventArgs, __uuidof(IAgSTKXSSLCertificateErrorEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgSTKXConControlQuitReceivedEventArgs, __uuidof(IAgSTKXConControlQuitReceivedEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgSTKXApplicationRawEvents, __uuidof(IAgSTKXApplicationRawEvents));
_COM_SMARTPTR_TYPEDEF(IAgUiAxGfxAnalysisCntrlEvents, __uuidof(IAgUiAxGfxAnalysisCntrlEvents));
_COM_SMARTPTR_TYPEDEF(IAgUiAxGfxAnalysisCntrl, __uuidof(IAgUiAxGfxAnalysisCntrl));

//
// Type library items
//

struct __declspec(uuid("69d27167-4ce1-4fc7-8a92-4bd6c259bdc0"))
IAgPickInfoData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjPath))
    _bstr_t ObjPath;
    __declspec(property(get=GetLat))
    double Lat;
    __declspec(property(get=GetLon))
    double Lon;
    __declspec(property(get=GetAlt))
    double Alt;
    __declspec(property(get=GetIsObjPathValid))
    VARIANT_BOOL IsObjPathValid;
    __declspec(property(get=GetIsLatLonAltValid))
    VARIANT_BOOL IsLatLonAltValid;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetObjPath ( );
    double GetLat ( );
    double GetLon ( );
    double GetAlt ( );
    VARIANT_BOOL GetIsObjPathValid ( );
    VARIANT_BOOL GetIsLatLonAltValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ObjPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsObjPathValid (
        /*[out,retval]*/ VARIANT_BOOL * pIsValid ) = 0;
      virtual HRESULT __stdcall get_IsLatLonAltValid (
        /*[out,retval]*/ VARIANT_BOOL * pIsValid ) = 0;
};

struct __declspec(uuid("d850dc37-dae8-4343-b44c-d9c7808011ae"))
IAgObjPathCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    SAFEARRAY * Range (
        long StartIndex,
        long StopIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long StartIndex,
        /*[in]*/ long StopIndex,
        /*[out,retval]*/ SAFEARRAY * * pVar ) = 0;
};

struct __declspec(uuid("14e3c4fa-3f31-40b2-828d-797037260b01"))
IAgRubberBandPickInfoData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjPaths))
    IAgObjPathCollectionPtr ObjPaths;

    //
    // Wrapper methods for error-handling
    //

    IAgObjPathCollectionPtr GetObjPaths ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ObjPaths (
        /*[out,retval]*/ struct IAgObjPathCollection * * ppColl ) = 0;
};

struct __declspec(uuid("80cd7a52-4f8f-48d7-bed7-254784ed4759"))
IAgExecCmdResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetIsSucceeded))
    VARIANT_BOOL IsSucceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    SAFEARRAY * Range (
        long StartIndex,
        long StopIndex );
    VARIANT_BOOL GetIsSucceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long StartIndex,
        /*[in]*/ long StopIndex,
        /*[out,retval]*/ SAFEARRAY * * ppVar ) = 0;
      virtual HRESULT __stdcall get_IsSucceeded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgELoggingMode
{
    eLogInactive = 0,
    eLogActive = 1,
    eLogActiveKeepFile = 2
};

enum AgEExecMultiCmdResultAction
{
    eContinueOnError = 0,
    eStopOnError = 1,
    eExceptionOnError = 2,
    eIgnoreExecCmdResult = 32768
};

struct __declspec(uuid("5b4a1fae-b250-461a-9e12-8cc8327b8b40"))
IAgExecMultiCmdResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgExecCmdResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgExecCmdResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgExecCmdResult * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
};

enum AgEFeatureCodes
{
    eFeatureCodeEngineRuntime = 1,
    eFeatureCodeGlobeControl = 2
};

struct __declspec(uuid("e398c2dc-a483-4958-bed8-f371466a2523"))
IAgSTKXApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableConnect,put=PutEnableConnect))
    VARIANT_BOOL EnableConnect;
    __declspec(property(get=GetConnectPort,put=PutConnectPort))
    short ConnectPort;
    __declspec(property(get=GetVendorID,put=PutVendorID))
    _bstr_t VendorID;
    __declspec(property(get=GetHostID))
    _bstr_t HostID;
    __declspec(property(get=GetRegistrationID))
    _bstr_t RegistrationID;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetConnectMaxConnections,put=PutConnectMaxConnections))
    long ConnectMaxConnections;
    __declspec(property(get=GetLogFileFullName))
    _bstr_t LogFileFullName;
    __declspec(property(get=GetLoggingMode,put=PutLoggingMode))
    enum AgELoggingMode LoggingMode;
    __declspec(property(get=GetNoGraphics,put=PutNoGraphics))
    VARIANT_BOOL NoGraphics;
    __declspec(property(get=GetShowSLAIfNotAccepted,put=PutShowSLAIfNotAccepted))
    VARIANT_BOOL ShowSLAIfNotAccepted;
    __declspec(property(put=PutUseHook))
    VARIANT_BOOL UseHook;

    //
    // Wrapper methods for error-handling
    //

    IAgExecCmdResultPtr ExecuteCommand (
        _bstr_t Command );
    VARIANT_BOOL GetEnableConnect ( );
    void PutEnableConnect (
        VARIANT_BOOL pVal );
    short GetConnectPort ( );
    void PutConnectPort (
        short pVal );
    _bstr_t GetHostID ( );
    _bstr_t GetRegistrationID ( );
    _bstr_t GetVersion ( );
    _bstr_t GetLicensingReport ( );
    _bstr_t GetVendorID ( );
    void PutVendorID (
        _bstr_t pbstrVal );
    VARIANT_BOOL SetOnlineOptions (
        VARIANT_BOOL UseProxy,
        _bstr_t ServerName,
        long PortNum,
        _bstr_t UserName,
        _bstr_t Password,
        VARIANT_BOOL SavePassword );
    VARIANT_BOOL GetOnlineOptions (
        VARIANT_BOOL * UseProxy,
        BSTR * ServerName,
        long * PortNum,
        BSTR * UserName );
    HRESULT SetConnectHandler (
        _bstr_t CommandID,
        _bstr_t ProgID );
    _bstr_t GetLogFileFullName ( );
    enum AgELoggingMode GetLoggingMode ( );
    void PutLoggingMode (
        enum AgELoggingMode pVal );
    long GetConnectMaxConnections ( );
    void PutConnectMaxConnections (
        long pVal );
    IAgExecMultiCmdResultPtr ExecuteMultipleCommands (
        SAFEARRAY * * ConnectCommands,
        enum AgEExecMultiCmdResultAction EAction );
    VARIANT_BOOL IsFeatureAvailable (
        enum AgEFeatureCodes FeatureCode );
    VARIANT_BOOL GetNoGraphics ( );
    void PutNoGraphics (
        VARIANT_BOOL pVal );
    HRESULT Terminate ( );
    VARIANT_BOOL GetShowSLAIfNotAccepted ( );
    void PutShowSLAIfNotAccepted (
        VARIANT_BOOL pVal );
    void PutUseHook (
        VARIANT_BOOL _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExecuteCommand (
        /*[in]*/ BSTR Command,
        /*[out,retval]*/ struct IAgExecCmdResult * * ppExecCmdRes ) = 0;
      virtual HRESULT __stdcall get_EnableConnect (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableConnect (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectPort (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectPort (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_HostID (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall get_RegistrationID (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_GetLicensingReport (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall get_VendorID (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall put_VendorID (
        /*[in]*/ BSTR pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnlineOptions (
        /*[in]*/ VARIANT_BOOL UseProxy,
        /*[in]*/ BSTR ServerName,
        /*[in]*/ long PortNum,
        /*[in]*/ BSTR UserName,
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT_BOOL SavePassword,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOnlineOptions (
        /*[out]*/ VARIANT_BOOL * UseProxy,
        /*[out]*/ BSTR * ServerName,
        /*[out]*/ long * PortNum,
        /*[out]*/ BSTR * UserName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetConnectHandler (
        /*[in]*/ BSTR CommandID,
        /*[in]*/ BSTR ProgID ) = 0;
      virtual HRESULT __stdcall get_LogFileFullName (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall get_LoggingMode (
        /*[out,retval]*/ enum AgELoggingMode * pVal ) = 0;
      virtual HRESULT __stdcall put_LoggingMode (
        /*[in]*/ enum AgELoggingMode pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectMaxConnections (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectMaxConnections (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ExecuteMultipleCommands (
        /*[in]*/ SAFEARRAY * * ConnectCommands,
        /*[in]*/ enum AgEExecMultiCmdResultAction EAction,
        /*[out,retval]*/ struct IAgExecMultiCmdResult * * ppResult ) = 0;
      virtual HRESULT __stdcall raw_IsFeatureAvailable (
        /*[in]*/ enum AgEFeatureCodes FeatureCode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NoGraphics (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_NoGraphics (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Terminate ( ) = 0;
      virtual HRESULT __stdcall get_ShowSLAIfNotAccepted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowSLAIfNotAccepted (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall put_UseHook (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
};

struct __declspec(uuid("abac7c4e-2aab-4b28-9a40-02345ffaf4bb"))
IAgDataObjectFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetItem (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("ba9441e9-6b6d-4e64-9c92-c051de266895"))
IAgDataObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFiles))
    IAgDataObjectFilesPtr Files;

    //
    // Wrapper methods for error-handling
    //

    IAgDataObjectFilesPtr GetFiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Files (
        /*[out,retval]*/ struct IAgDataObjectFiles * * pFile ) = 0;
};

struct __declspec(uuid("c4a2fe4a-29d3-44a5-8f3d-3581f9b216a8"))
IAgDrawElem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgELineStyle
{
    eSolid = 0,
    eDashed = 1,
    eDotted = 2,
    eDotDashed = 3,
    eLongDashed = 4,
    eDashDotDotted = 5,
    eMDash = 6,
    eLDash = 7,
    eSDashDot = 8,
    eMDashDot = 9,
    eLDashDot = 10,
    eMSDash = 11,
    eLSDash = 12,
    eLMDash = 13,
    eLMSDash = 14,
    eDot = 15,
    eLongDash = 16,
    eSDash = 17
};

struct __declspec(uuid("69bddc1a-5ce2-4224-9982-5ed2062127e3"))
IAgDrawElemRect : IAgDrawElem
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft))
    OLE_XPOS_PIXELS Left;
    __declspec(property(get=GetRight))
    OLE_XPOS_PIXELS Right;
    __declspec(property(get=GetTop))
    OLE_YPOS_PIXELS Top;
    __declspec(property(get=GetBottom))
    OLE_YPOS_PIXELS Bottom;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    float LineWidth;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum AgELineStyle LineStyle;

    //
    // Wrapper methods for error-handling
    //

    OLE_XPOS_PIXELS GetLeft ( );
    OLE_XPOS_PIXELS GetRight ( );
    OLE_YPOS_PIXELS GetTop ( );
    OLE_YPOS_PIXELS GetBottom ( );
    HRESULT Set (
        OLE_XPOS_PIXELS Left,
        OLE_YPOS_PIXELS Top,
        OLE_XPOS_PIXELS Right,
        OLE_YPOS_PIXELS Bottom );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    float GetLineWidth ( );
    void PutLineWidth (
        float pVal );
    enum AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ OLE_XPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ OLE_XPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ OLE_YPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ OLE_YPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ OLE_XPOS_PIXELS Left,
        /*[in]*/ OLE_YPOS_PIXELS Top,
        /*[in]*/ OLE_XPOS_PIXELS Right,
        /*[in]*/ OLE_YPOS_PIXELS Bottom ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum AgELineStyle pVal ) = 0;
};

struct __declspec(uuid("5a81dac9-92bf-4e83-9477-dced2eca3b65"))
IAgDrawElemCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDrawElemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgDrawElemPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Clear ( );
    IAgDrawElemPtr Add (
        _bstr_t ElemType );
    HRESULT Remove (
        struct IAgDrawElem * DrawElem );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgDrawElem * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ElemType,
        /*[out,retval]*/ struct IAgDrawElem * * ppDrawElem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgDrawElem * DrawElem ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("9b9afe71-cddd-4df8-bace-b0f6df7c8090"))
IAgWinProjPos : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXPos))
    double XPos;
    __declspec(property(get=GetYPos))
    double YPos;
    __declspec(property(get=GetIsWinProjPosValid))
    VARIANT_BOOL IsWinProjPosValid;

    //
    // Wrapper methods for error-handling
    //

    double GetXPos ( );
    double GetYPos ( );
    VARIANT_BOOL GetIsWinProjPosValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XPos (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_YPos (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsWinProjPosValid (
        /*[out,retval]*/ VARIANT_BOOL * pIsValid ) = 0;
};

struct __declspec(uuid("191a6108-21df-4451-a15f-6e6e4db71ce4"))
IAgDrawElemLine : IAgDrawElem
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft))
    OLE_XPOS_PIXELS Left;
    __declspec(property(get=GetRight))
    OLE_XPOS_PIXELS Right;
    __declspec(property(get=GetTop))
    OLE_YPOS_PIXELS Top;
    __declspec(property(get=GetBottom))
    OLE_YPOS_PIXELS Bottom;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    float LineWidth;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum AgELineStyle LineStyle;

    //
    // Wrapper methods for error-handling
    //

    OLE_XPOS_PIXELS GetLeft ( );
    OLE_XPOS_PIXELS GetRight ( );
    OLE_YPOS_PIXELS GetTop ( );
    OLE_YPOS_PIXELS GetBottom ( );
    HRESULT Set (
        OLE_XPOS_PIXELS Left,
        OLE_YPOS_PIXELS Top,
        OLE_XPOS_PIXELS Right,
        OLE_YPOS_PIXELS Bottom );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    float GetLineWidth ( );
    void PutLineWidth (
        float pVal );
    enum AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ OLE_XPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ OLE_XPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ OLE_YPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ OLE_YPOS_PIXELS * pVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ OLE_XPOS_PIXELS Left,
        /*[in]*/ OLE_YPOS_PIXELS Top,
        /*[in]*/ OLE_XPOS_PIXELS Right,
        /*[in]*/ OLE_YPOS_PIXELS Bottom ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum AgELineStyle pVal ) = 0;
};

enum AgEMouseMode
{
    eMouseModeAutomatic = 0,
    eMouseModeManual = 1
};

enum AgEOLEDropMode
{
    eNone = 0,
    eManual = 1,
    eAutomatic = 2
};

enum AgEButtonValues
{
    eLeftPressed = 1,
    eRightPressed = 2,
    eMiddlePressed = 4
};

enum AgEShiftValues
{
    eShiftPressed = 1,
    eCtrlPressed = 2,
    eAltPressed = 4
};

enum AgELogMsgType
{
    eLogMsgDebug = 0,
    eLogMsgInfo = 1,
    eLogMsgForceInfo = 2,
    eLogMsgWarning = 3,
    eLogMsgAlarm = 4
};

enum AgELogMsgDispID
{
    eLogMsgDispAll = -1,
    eLogMsgDispDefault = 0,
    eLogMsgDispMsgWin = 1,
    eLogMsgDispStatusBar = 2
};

struct __declspec(uuid("f1b26fc1-f7f5-4464-aa15-7e8fee1c5f57"))
AgExecCmdResult;
    // [ default ] interface IDispatch
    // interface IAgExecCmdResult

struct __declspec(uuid("80cc518d-7e32-4a2a-97a3-2dbdff671aa3"))
AgExecMultiCmdResult;
    // [ default ] interface IDispatch
    // interface IAgExecMultiCmdResult

struct __declspec(uuid("9162f1c6-75bc-443e-a72a-e2ac541cc097"))
IAgUiAxVOCntrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT KeyDown (
        short * KeyCode,
        short Shift );
    HRESULT KeyPress (
        short * KeyAscii );
    HRESULT KeyUp (
        short * KeyCode,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT MouseDown (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT OLEDragDrop (
        struct IAgDataObject * Data,
        long Effect,
        short Button,
        short Shift,
        long X,
        long Y );
    HRESULT MouseWheel (
        short Button,
        short Shift,
        short Delta,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT OnObjectEditingStart (
        _bstr_t Path );
    HRESULT OnObjectEditingApply (
        _bstr_t Path );
    HRESULT OnObjectEditingCancel (
        _bstr_t Path );
    HRESULT OnObjectEditingStop (
        _bstr_t Path );
};

struct __declspec(uuid("8fe7a7ad-7d52-41fe-b454-c4ab8c4bfd20"))
IAgUiAxStockRawEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT KeyDown (
        short * KeyCode,
        short Shift );
    HRESULT KeyPress (
        short * KeyAscii );
    HRESULT KeyUp (
        short * KeyCode,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT MouseDown (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT OLEDragDrop (
        struct IAgDataObject * Data,
        long Effect,
        short Button,
        short Shift,
        long X,
        long Y );
    HRESULT MouseWheel (
        short Button,
        short Shift,
        short Delta,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_KeyDown (
        /*[in,out]*/ short * KeyCode,
        /*[in]*/ short Shift ) = 0;
      virtual HRESULT __stdcall raw_KeyPress (
        /*[in,out]*/ short * KeyAscii ) = 0;
      virtual HRESULT __stdcall raw_KeyUp (
        /*[in,out]*/ short * KeyCode,
        /*[in]*/ short Shift ) = 0;
      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall raw_DblClick ( ) = 0;
      virtual HRESULT __stdcall raw_MouseDown (
        /*[in]*/ short Button,
        /*[in]*/ short Shift,
        /*[in]*/ OLE_XPOS_PIXELS X,
        /*[in]*/ OLE_YPOS_PIXELS Y ) = 0;
      virtual HRESULT __stdcall raw_MouseMove (
        /*[in]*/ short Button,
        /*[in]*/ short Shift,
        /*[in]*/ OLE_XPOS_PIXELS X,
        /*[in]*/ OLE_YPOS_PIXELS Y ) = 0;
      virtual HRESULT __stdcall raw_MouseUp (
        /*[in]*/ short Button,
        /*[in]*/ short Shift,
        /*[in]*/ OLE_XPOS_PIXELS X,
        /*[in]*/ OLE_YPOS_PIXELS Y ) = 0;
      virtual HRESULT __stdcall raw_OLEDragDrop (
        /*[in]*/ struct IAgDataObject * Data,
        /*[in]*/ long Effect,
        /*[in]*/ short Button,
        /*[in]*/ short Shift,
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_MouseWheel (
        /*[in]*/ short Button,
        /*[in]*/ short Shift,
        /*[in]*/ short Delta,
        /*[in]*/ OLE_XPOS_PIXELS X,
        /*[in]*/ OLE_YPOS_PIXELS Y ) = 0;
};

struct __declspec(uuid("88f3f2b2-b522-412e-9293-c8decd5b4d75"))
IAgUiAxVOCntrlRawEvents : IAgUiAxStockRawEvents
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnObjectEditingStart (
        _bstr_t Path );
    HRESULT OnObjectEditingApply (
        _bstr_t Path );
    HRESULT OnObjectEditingCancel (
        _bstr_t Path );
    HRESULT OnObjectEditingStop (
        _bstr_t Path );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnObjectEditingStart (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_OnObjectEditingApply (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_OnObjectEditingCancel (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_OnObjectEditingStop (
        /*[in]*/ BSTR Path ) = 0;
};

enum AgEShowProgressImage
{
    eShowProgressImageNone = 1,
    eShowProgressImageDefault = 2,
    eShowProgressImageUser = 3
};

enum AgEProgressImageXOrigin
{
    eProgressImageXLeft = 1,
    eProgressImageXRight = 2,
    eProgressImageXCenter = 3
};

enum AgEProgressImageYOrigin
{
    eProgressImageYTop = 1,
    eProgressImageYBottom = 2,
    eProgressImageYCenter = 3
};

struct __declspec(uuid("bde01729-3f87-4603-812e-cfc29e6bf300"))
IAgUiAxVOCntrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWinID,put=PutWinID))
    long WinID;
    __declspec(property(get=GetVendorID,put=PutVendorID))
    _bstr_t VendorID;
    __declspec(property(get=GetNoLogo,put=PutNoLogo))
    VARIANT_BOOL NoLogo;
    __declspec(property(get=GetOLEDropMode,put=PutOLEDropMode))
    enum AgEOLEDropMode OLEDropMode;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetApplication))
    IAgSTKXApplicationPtr Application;
    __declspec(property(get=GetMouseMode,put=PutMouseMode))
    enum AgEMouseMode MouseMode;
    __declspec(property(get=GetPptPreloadMode,put=PutPptPreloadMode))
    VARIANT_BOOL PptPreloadMode;
    __declspec(property(get=GetAdvancedPickMode,put=PutAdvancedPickMode))
    VARIANT_BOOL AdvancedPickMode;
    __declspec(property(get=GetShowProgressImage,put=PutShowProgressImage))
    enum AgEShowProgressImage ShowProgressImage;
    __declspec(property(get=GetProgressImageXOffset,put=PutProgressImageXOffset))
    long ProgressImageXOffset;
    __declspec(property(get=GetDrawElements))
    IAgDrawElemCollectionPtr DrawElements;
    __declspec(property(get=GetReadyState))
    long ReadyState;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    IPictureDisp * Picture;
    __declspec(property(get=GetProgressImageYOffset,put=PutProgressImageYOffset))
    long ProgressImageYOffset;
    __declspec(property(get=GetProgressImageFile,put=PutProgressImageFile))
    _bstr_t ProgressImageFile;
    __declspec(property(get=GetIsObjectEditing))
    VARIANT_BOOL IsObjectEditing;
    __declspec(property(get=GetInZoomMode))
    VARIANT_BOOL InZoomMode;
    __declspec(property(get=GetProgressImageXOrigin,put=PutProgressImageXOrigin))
    enum AgEProgressImageXOrigin ProgressImageXOrigin;
    __declspec(property(get=GetProgressImageYOrigin,put=PutProgressImageYOrigin))
    enum AgEProgressImageYOrigin ProgressImageYOrigin;
    __declspec(property(get=GetPictureFromFile,put=PutPictureFromFile))
    _bstr_t PictureFromFile;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pclr );
    IPictureDisp * GetPicture ( );
    void PutRefPicture (
        IPictureDisp * ppPicture );
    void PutPicture (
        IPictureDisp * ppPicture );
    IAgPickInfoDataPtr PickInfo (
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    long GetWinID ( );
    void PutWinID (
        long pVal );
    IAgSTKXApplicationPtr GetApplication ( );
    HRESULT ZoomIn ( );
    VARIANT_BOOL GetNoLogo ( );
    void PutNoLogo (
        VARIANT_BOOL pNoLogo );
    enum AgEOLEDropMode GetOLEDropMode ( );
    void PutOLEDropMode (
        enum AgEOLEDropMode psOLEDropMode );
    _bstr_t GetVendorID ( );
    void PutVendorID (
        _bstr_t pbstrVal );
    IAgRubberBandPickInfoDataPtr RubberBandPickInfo (
        OLE_XPOS_PIXELS Left,
        OLE_YPOS_PIXELS Top,
        OLE_XPOS_PIXELS Right,
        OLE_YPOS_PIXELS Bottom );
    enum AgEMouseMode GetMouseMode ( );
    void PutMouseMode (
        enum AgEMouseMode psMouseMode );
    IAgDrawElemCollectionPtr GetDrawElements ( );
    long GetReadyState ( );
    VARIANT_BOOL GetPptPreloadMode ( );
    void PutPptPreloadMode (
        VARIANT_BOOL pPptPreloadMode );
    VARIANT_BOOL GetAdvancedPickMode ( );
    void PutAdvancedPickMode (
        VARIANT_BOOL pAdvancePickMode );
    HRESULT CopyFromWinID (
        long WinID );
    HRESULT StartObjectEditing (
        _bstr_t ObjEditPath );
    HRESULT ApplyObjectEditing ( );
    HRESULT StopObjectEditing (
        VARIANT_BOOL Canceled );
    VARIANT_BOOL GetIsObjectEditing ( );
    VARIANT_BOOL GetInZoomMode ( );
    HRESULT SetMouseCursorFromFile (
        _bstr_t CursorFileName );
    HRESULT RestoreMouseCursor ( );
    HRESULT SetMouseCursorFromHandle (
        OLE_HANDLE CursorHandle );
    enum AgEShowProgressImage GetShowProgressImage ( );
    void PutShowProgressImage (
        enum AgEShowProgressImage psProgressImage );
    long GetProgressImageXOffset ( );
    void PutProgressImageXOffset (
        long pXOffset );
    long GetProgressImageYOffset ( );
    void PutProgressImageYOffset (
        long pYOffset );
    _bstr_t GetProgressImageFile ( );
    void PutProgressImageFile (
        _bstr_t pImageFile );
    enum AgEProgressImageXOrigin GetProgressImageXOrigin ( );
    void PutProgressImageXOrigin (
        enum AgEProgressImageXOrigin psProgressImageXOrigin );
    enum AgEProgressImageYOrigin GetProgressImageYOrigin ( );
    void PutProgressImageYOrigin (
        enum AgEProgressImageYOrigin psProgressImageYOrigin );
    _bstr_t GetPictureFromFile ( );
    void PutPictureFromFile (
        _bstr_t pPictureFile );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pclr ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pclr ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ IPictureDisp * * ppPicture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ IPictureDisp * ppPicture ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ IPictureDisp * ppPicture ) = 0;
      virtual HRESULT __stdcall raw_PickInfo (
        /*[in]*/ OLE_XPOS_PIXELS X,
        /*[in]*/ OLE_YPOS_PIXELS Y,
        /*[out,retval]*/ struct IAgPickInfoData * * ppPickData ) = 0;
      virtual HRESULT __stdcall get_WinID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WinID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAgSTKXApplication * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ZoomIn ( ) = 0;
      virtual HRESULT __stdcall get_NoLogo (
        /*[out,retval]*/ VARIANT_BOOL * pNoLogo ) = 0;
      virtual HRESULT __stdcall put_NoLogo (
        /*[in]*/ VARIANT_BOOL pNoLogo ) = 0;
      virtual HRESULT __stdcall get_OLEDropMode (
        /*[out,retval]*/ enum AgEOLEDropMode * psOLEDropMode ) = 0;
      virtual HRESULT __stdcall put_OLEDropMode (
        /*[in]*/ enum AgEOLEDropMode psOLEDropMode ) = 0;
      virtual HRESULT __stdcall get_VendorID (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall put_VendorID (
        /*[in]*/ BSTR pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_RubberBandPickInfo (
        /*[in]*/ OLE_XPOS_PIXELS Left,
        /*[in]*/ OLE_YPOS_PIXELS Top,
        /*[in]*/ OLE_XPOS_PIXELS Right,
        /*[in]*/ OLE_YPOS_PIXELS Bottom,
        /*[out,retval]*/ struct IAgRubberBandPickInfoData * * ppPickInfoData ) = 0;
      virtual HRESULT __stdcall get_MouseMode (
        /*[out,retval]*/ enum AgEMouseMode * psMouseMode ) = 0;
      virtual HRESULT __stdcall put_MouseMode (
        /*[in]*/ enum AgEMouseMode psMouseMode ) = 0;
      virtual HRESULT __stdcall get_DrawElements (
        /*[out,retval]*/ struct IAgDrawElemCollection * * ppDrawElemColl ) = 0;
      virtual HRESULT __stdcall get_ReadyState (
        /*[out,retval]*/ long * pclr ) = 0;
      virtual HRESULT __stdcall get_PptPreloadMode (
        /*[out,retval]*/ VARIANT_BOOL * pPptPreloadMode ) = 0;
      virtual HRESULT __stdcall put_PptPreloadMode (
        /*[in]*/ VARIANT_BOOL pPptPreloadMode ) = 0;
      virtual HRESULT __stdcall get_AdvancedPickMode (
        /*[out,retval]*/ VARIANT_BOOL * pAdvancePickMode ) = 0;
      virtual HRESULT __stdcall put_AdvancedPickMode (
        /*[in]*/ VARIANT_BOOL pAdvancePickMode ) = 0;
      virtual HRESULT __stdcall raw_CopyFromWinID (
        /*[in]*/ long WinID ) = 0;
      virtual HRESULT __stdcall raw_StartObjectEditing (
        /*[in]*/ BSTR ObjEditPath ) = 0;
      virtual HRESULT __stdcall raw_ApplyObjectEditing ( ) = 0;
      virtual HRESULT __stdcall raw_StopObjectEditing (
        /*[in]*/ VARIANT_BOOL Canceled ) = 0;
      virtual HRESULT __stdcall get_IsObjectEditing (
        /*[out,retval]*/ VARIANT_BOOL * p3DObjectEditing ) = 0;
      virtual HRESULT __stdcall get_InZoomMode (
        /*[out,retval]*/ VARIANT_BOOL * pZoomIn ) = 0;
      virtual HRESULT __stdcall raw_SetMouseCursorFromFile (
        /*[in]*/ BSTR CursorFileName ) = 0;
      virtual HRESULT __stdcall raw_RestoreMouseCursor ( ) = 0;
      virtual HRESULT __stdcall raw_SetMouseCursorFromHandle (
        /*[in]*/ OLE_HANDLE CursorHandle ) = 0;
      virtual HRESULT __stdcall get_ShowProgressImage (
        /*[out,retval]*/ enum AgEShowProgressImage * psProgressImage ) = 0;
      virtual HRESULT __stdcall put_ShowProgressImage (
        /*[in]*/ enum AgEShowProgressImage psProgressImage ) = 0;
      virtual HRESULT __stdcall get_ProgressImageXOffset (
        /*[out,retval]*/ long * pXOffset ) = 0;
      virtual HRESULT __stdcall put_ProgressImageXOffset (
        /*[in]*/ long pXOffset ) = 0;
      virtual HRESULT __stdcall get_ProgressImageYOffset (
        /*[out,retval]*/ long * pYOffset ) = 0;
      virtual HRESULT __stdcall put_ProgressImageYOffset (
        /*[in]*/ long pYOffset ) = 0;
      virtual HRESULT __stdcall get_ProgressImageFile (
        /*[out,retval]*/ BSTR * pImageFile ) = 0;
      virtual HRESULT __stdcall put_ProgressImageFile (
        /*[in]*/ BSTR pImageFile ) = 0;
      virtual HRESULT __stdcall get_ProgressImageXOrigin (
        /*[out,retval]*/ enum AgEProgressImageXOrigin * psProgressImageXOrigin ) = 0;
      virtual HRESULT __stdcall put_ProgressImageXOrigin (
        /*[in]*/ enum AgEProgressImageXOrigin psProgressImageXOrigin ) = 0;
      virtual HRESULT __stdcall get_ProgressImageYOrigin (
        /*[out,retval]*/ enum AgEProgressImageYOrigin * psProgressImageYOrigin ) = 0;
      virtual HRESULT __stdcall put_ProgressImageYOrigin (
        /*[in]*/ enum AgEProgressImageYOrigin psProgressImageYOrigin ) = 0;
      virtual HRESULT __stdcall get_PictureFromFile (
        /*[out,retval]*/ BSTR * pPictureFile ) = 0;
      virtual HRESULT __stdcall put_PictureFromFile (
        /*[in]*/ BSTR pPictureFile ) = 0;
};

struct __declspec(uuid("4dde22be-56b1-4e8e-8d28-84116703932a"))
IAgUiAx2DCntrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT KeyDown (
        short * KeyCode,
        short Shift );
    HRESULT KeyPress (
        short * KeyAscii );
    HRESULT KeyUp (
        short * KeyCode,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT MouseDown (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT OLEDragDrop (
        struct IAgDataObject * Data,
        long Effect,
        short Button,
        short Shift,
        long X,
        long Y );
    HRESULT MouseWheel (
        short Button,
        short Shift,
        short Delta,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
};

enum AgEGfxDrawCoords
{
    ePixelDrawCoords = 1,
    eScreenDrawCoords = 2
};

struct __declspec(uuid("226ffc0a-7f86-47eb-af1c-bbabcae41faf"))
IAgUiAx2DCntrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAgSTKXApplicationPtr Application;
    __declspec(property(get=GetWinID,put=PutWinID))
    long WinID;
    __declspec(property(get=GetVendorID,put=PutVendorID))
    _bstr_t VendorID;
    __declspec(property(get=GetNoLogo,put=PutNoLogo))
    VARIANT_BOOL NoLogo;
    __declspec(property(get=GetOLEDropMode,put=PutOLEDropMode))
    enum AgEOLEDropMode OLEDropMode;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetMouseMode,put=PutMouseMode))
    enum AgEMouseMode MouseMode;
    __declspec(property(get=GetAdvancedPickMode,put=PutAdvancedPickMode))
    VARIANT_BOOL AdvancedPickMode;
    __declspec(property(get=GetInZoomMode))
    VARIANT_BOOL InZoomMode;
    __declspec(property(get=GetShowProgressImage,put=PutShowProgressImage))
    enum AgEShowProgressImage ShowProgressImage;
    __declspec(property(get=GetProgressImageXOffset,put=PutProgressImageXOffset))
    long ProgressImageXOffset;
    __declspec(property(get=GetReadyState))
    long ReadyState;
    __declspec(property(get=GetProgressImageYOffset,put=PutProgressImageYOffset))
    long ProgressImageYOffset;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    IPictureDisp * Picture;
    __declspec(property(get=GetProgressImageFile,put=PutProgressImageFile))
    _bstr_t ProgressImageFile;
    __declspec(property(get=GetProgressImageXOrigin,put=PutProgressImageXOrigin))
    enum AgEProgressImageXOrigin ProgressImageXOrigin;
    __declspec(property(get=GetProgressImageYOrigin,put=PutProgressImageYOrigin))
    enum AgEProgressImageYOrigin ProgressImageYOrigin;
    __declspec(property(get=GetPictureFromFile,put=PutPictureFromFile))
    _bstr_t PictureFromFile;
    __declspec(property(get=GetPanModeEnabled,put=PutPanModeEnabled))
    VARIANT_BOOL PanModeEnabled;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pclr );
    IPictureDisp * GetPicture ( );
    void PutRefPicture (
        IPictureDisp * ppPicture );
    void PutPicture (
        IPictureDisp * ppPicture );
    long GetWinID ( );
    void PutWinID (
        long pVal );
    HRESULT ZoomIn ( );
    HRESULT ZoomOut ( );
    IAgPickInfoDataPtr PickInfo (
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    IAgSTKXApplicationPtr GetApplication ( );
    VARIANT_BOOL GetNoLogo ( );
    void PutNoLogo (
        VARIANT_BOOL pNoLogo );
    enum AgEOLEDropMode GetOLEDropMode ( );
    void PutOLEDropMode (
        enum AgEOLEDropMode psOLEDropMode );
    _bstr_t GetVendorID ( );
    void PutVendorID (
        _bstr_t pbstrVal );
    enum AgEMouseMode GetMouseMode ( );
    void PutMouseMode (
        enum AgEMouseMode psMouseMode );
    long GetReadyState ( );
    HRESULT CopyFromWinID (
        long WinID );
    IAgRubberBandPickInfoDataPtr RubberBandPickInfo (
        OLE_XPOS_PIXELS Left,
        OLE_YPOS_PIXELS Top,
        OLE_XPOS_PIXELS Right,
        OLE_YPOS_PIXELS Bottom );
    VARIANT_BOOL GetAdvancedPickMode ( );
    void PutAdvancedPickMode (
        VARIANT_BOOL pAdvancePickMode );
    IAgWinProjPosPtr GetWindowProjectedPosition (
        double Lat,
        double Lon,
        double Alt,
        enum AgEGfxDrawCoords DrawCoords );
    VARIANT_BOOL GetInZoomMode ( );
    HRESULT SetMouseCursorFromFile (
        _bstr_t CursorFileName );
    HRESULT RestoreMouseCursor ( );
    HRESULT SetMouseCursorFromHandle (
        OLE_HANDLE CursorHandle );
    enum AgEShowProgressImage GetShowProgressImage ( );
    void PutShowProgressImage (
        enum AgEShowProgressImage psProgressImage );
    long GetProgressImageXOffset ( );
    void PutProgressImageXOffset (
        long pXOffset );
    long GetProgressImageYOffset ( );
    void PutProgressImageYOffset (
        long pYOffset );
    _bstr_t GetProgressImageFile ( );
    void PutProgressImageFile (
        _bstr_t pImageFile );
    enum AgEProgressImageXOrigin GetProgressImageXOrigin ( );
    void PutProgressImageXOrigin (
        enum AgEProgressImageXOrigin psProgressImageXOrigin );
    enum AgEProgressImageYOrigin GetProgressImageYOrigin ( );
    void PutProgressImageYOrigin (
        enum AgEProgressImageYOrigin psProgressImageYOrigin );
    _bstr_t GetPictureFromFile ( );
    void PutPictureFromFile (
        _bstr_t pPictureFile );
    VARIANT_BOOL GetPanModeEnabled ( );
    void PutPanModeEnabled (
        VARIANT_BOOL pPanMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pclr ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pclr ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ IPictureDisp * * ppPicture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ IPictureDisp * ppPicture ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ IPictureDisp * ppPicture ) = 0;
      virtual HRESULT __stdcall get_WinID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WinID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ZoomIn ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomOut ( ) = 0;
      virtual HRESULT __stdcall raw_PickInfo (
        /*[in]*/ OLE_XPOS_PIXELS X,
        /*[in]*/ OLE_YPOS_PIXELS Y,
        /*[out,retval]*/ struct IAgPickInfoData * * ppPickData ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAgSTKXApplication * * ppApp ) = 0;
      virtual HRESULT __stdcall get_NoLogo (
        /*[out,retval]*/ VARIANT_BOOL * pNoLogo ) = 0;
      virtual HRESULT __stdcall put_NoLogo (
        /*[in]*/ VARIANT_BOOL pNoLogo ) = 0;
      virtual HRESULT __stdcall get_OLEDropMode (
        /*[out,retval]*/ enum AgEOLEDropMode * psOLEDropMode ) = 0;
      virtual HRESULT __stdcall put_OLEDropMode (
        /*[in]*/ enum AgEOLEDropMode psOLEDropMode ) = 0;
      virtual HRESULT __stdcall get_VendorID (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall put_VendorID (
        /*[in]*/ BSTR pbstrVal ) = 0;
      virtual HRESULT __stdcall get_MouseMode (
        /*[out,retval]*/ enum AgEMouseMode * psMouseMode ) = 0;
      virtual HRESULT __stdcall put_MouseMode (
        /*[in]*/ enum AgEMouseMode psMouseMode ) = 0;
      virtual HRESULT __stdcall get_ReadyState (
        /*[out,retval]*/ long * pclr ) = 0;
      virtual HRESULT __stdcall raw_CopyFromWinID (
        /*[in]*/ long WinID ) = 0;
      virtual HRESULT __stdcall raw_RubberBandPickInfo (
        /*[in]*/ OLE_XPOS_PIXELS Left,
        /*[in]*/ OLE_YPOS_PIXELS Top,
        /*[in]*/ OLE_XPOS_PIXELS Right,
        /*[in]*/ OLE_YPOS_PIXELS Bottom,
        /*[out,retval]*/ struct IAgRubberBandPickInfoData * * ppPickInfoData ) = 0;
      virtual HRESULT __stdcall get_AdvancedPickMode (
        /*[out,retval]*/ VARIANT_BOOL * pAdvancePickMode ) = 0;
      virtual HRESULT __stdcall put_AdvancedPickMode (
        /*[in]*/ VARIANT_BOOL pAdvancePickMode ) = 0;
      virtual HRESULT __stdcall raw_GetWindowProjectedPosition (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in]*/ enum AgEGfxDrawCoords DrawCoords,
        /*[out,retval]*/ struct IAgWinProjPos * * ppWinProjPos ) = 0;
      virtual HRESULT __stdcall get_InZoomMode (
        /*[out,retval]*/ VARIANT_BOOL * pZoomIn ) = 0;
      virtual HRESULT __stdcall raw_SetMouseCursorFromFile (
        /*[in]*/ BSTR CursorFileName ) = 0;
      virtual HRESULT __stdcall raw_RestoreMouseCursor ( ) = 0;
      virtual HRESULT __stdcall raw_SetMouseCursorFromHandle (
        /*[in]*/ OLE_HANDLE CursorHandle ) = 0;
      virtual HRESULT __stdcall get_ShowProgressImage (
        /*[out,retval]*/ enum AgEShowProgressImage * psProgressImage ) = 0;
      virtual HRESULT __stdcall put_ShowProgressImage (
        /*[in]*/ enum AgEShowProgressImage psProgressImage ) = 0;
      virtual HRESULT __stdcall get_ProgressImageXOffset (
        /*[out,retval]*/ long * pXOffset ) = 0;
      virtual HRESULT __stdcall put_ProgressImageXOffset (
        /*[in]*/ long pXOffset ) = 0;
      virtual HRESULT __stdcall get_ProgressImageYOffset (
        /*[out,retval]*/ long * pYOffset ) = 0;
      virtual HRESULT __stdcall put_ProgressImageYOffset (
        /*[in]*/ long pYOffset ) = 0;
      virtual HRESULT __stdcall get_ProgressImageFile (
        /*[out,retval]*/ BSTR * pImageFile ) = 0;
      virtual HRESULT __stdcall put_ProgressImageFile (
        /*[in]*/ BSTR pImageFile ) = 0;
      virtual HRESULT __stdcall get_ProgressImageXOrigin (
        /*[out,retval]*/ enum AgEProgressImageXOrigin * psProgressImageXOrigin ) = 0;
      virtual HRESULT __stdcall put_ProgressImageXOrigin (
        /*[in]*/ enum AgEProgressImageXOrigin psProgressImageXOrigin ) = 0;
      virtual HRESULT __stdcall get_ProgressImageYOrigin (
        /*[out,retval]*/ enum AgEProgressImageYOrigin * psProgressImageYOrigin ) = 0;
      virtual HRESULT __stdcall put_ProgressImageYOrigin (
        /*[in]*/ enum AgEProgressImageYOrigin psProgressImageYOrigin ) = 0;
      virtual HRESULT __stdcall get_PictureFromFile (
        /*[out,retval]*/ BSTR * pPictureFile ) = 0;
      virtual HRESULT __stdcall put_PictureFromFile (
        /*[in]*/ BSTR pPictureFile ) = 0;
      virtual HRESULT __stdcall get_PanModeEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pPanMode ) = 0;
      virtual HRESULT __stdcall put_PanModeEnabled (
        /*[in]*/ VARIANT_BOOL pPanMode ) = 0;
};

struct __declspec(uuid("86a7dd52-9116-41f4-8a74-30c738703e12"))
IAgSTKXApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnScenarioNew (
        _bstr_t Path );
    HRESULT OnScenarioLoad (
        _bstr_t Path );
    HRESULT OnScenarioClose ( );
    HRESULT OnScenarioSave (
        _bstr_t Path );
    HRESULT OnLogMessage (
        _bstr_t Message,
        enum AgELogMsgType MsgType,
        long ErrorCode,
        _bstr_t FileName,
        long LineNo,
        enum AgELogMsgDispID DispID );
    HRESULT OnAnimUpdate (
        double TimeEpSec );
    HRESULT OnNewGlobeCtrlRequest (
        long SceneID );
    HRESULT OnNewMapCtrlRequest (
        long WinID );
    HRESULT OnBeforeNewScenario (
        _bstr_t Scenario );
    HRESULT OnBeforeLoadScenario (
        _bstr_t Scenario );
    HRESULT OnBeginScenarioClose ( );
    HRESULT OnNewGfxAnalysisCtrlRequest (
        long SceneID,
        enum AgEGfxAnalysisMode GfxAnalysisMode );
    HRESULT OnSSLCertificateServerError (
        struct IAgSTKXSSLCertificateErrorEventArgs * pArgs );
    HRESULT OnConControlQuitReceived (
        struct IAgSTKXConControlQuitReceivedEventArgs * pArgs );
};

enum AgEGfxAnalysisMode
{
    eSolarPanelTool = 1,
    eAreaTool = 2,
    eObscurationTool = 3,
    eAzElMaskTool = 4
};

struct __declspec(uuid("90ed2919-ff2a-4d9b-b050-0c1ae1745e98"))
IAgSTKXSSLCertificateErrorEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsErrorIgnored))
    VARIANT_BOOL IsErrorIgnored;
    __declspec(property(get=GetSerialNumber))
    _bstr_t SerialNumber;
    __declspec(property(get=GetIssuer))
    _bstr_t Issuer;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetValidDate))
    DATE ValidDate;
    __declspec(property(get=GetExpirationDate))
    DATE ExpirationDate;
    __declspec(property(get=GetIsExpired))
    VARIANT_BOOL IsExpired;
    __declspec(property(get=GetPEMData))
    _bstr_t PEMData;
    __declspec(property(get=GetHandled,put=PutHandled))
    VARIANT_BOOL Handled;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetIgnoreError (
        VARIANT_BOOL IgnoreError );
    VARIANT_BOOL GetIsErrorIgnored ( );
    HRESULT SetIgnoreErrorPermanently (
        VARIANT_BOOL IgnoreErrorPermanently );
    _bstr_t GetSerialNumber ( );
    _bstr_t GetIssuer ( );
    _bstr_t GetSubject ( );
    DATE GetValidDate ( );
    DATE GetExpirationDate ( );
    VARIANT_BOOL GetIsExpired ( );
    _bstr_t GetPEMData ( );
    VARIANT_BOOL GetHandled ( );
    void PutHandled (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetIgnoreError (
        /*[in]*/ VARIANT_BOOL IgnoreError ) = 0;
      virtual HRESULT __stdcall get_IsErrorIgnored (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetIgnoreErrorPermanently (
        /*[in]*/ VARIANT_BOOL IgnoreErrorPermanently ) = 0;
      virtual HRESULT __stdcall get_SerialNumber (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Issuer (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValidDate (
        /*[out,retval]*/ DATE * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExpirationDate (
        /*[out,retval]*/ DATE * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsExpired (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PEMData (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Handled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Handled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("680e6b88-e794-40fe-9343-17f84b835f27"))
IAgSTKXConControlQuitReceivedEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAcknowledge,put=PutAcknowledge))
    VARIANT_BOOL Acknowledge;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAcknowledge ( );
    void PutAcknowledge (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Acknowledge (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Acknowledge (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("04e697d0-ad7f-48e4-8091-ec924eec8d22"))
IAgSTKXApplicationRawEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnScenarioNew (
        _bstr_t Path );
    HRESULT OnScenarioLoad (
        _bstr_t Path );
    HRESULT OnScenarioClose ( );
    HRESULT OnScenarioSave (
        _bstr_t Path );
    HRESULT OnLogMessage (
        _bstr_t Message,
        enum AgELogMsgType MsgType,
        long ErrorCode,
        _bstr_t FileName,
        long LineNo,
        enum AgELogMsgDispID DispID );
    HRESULT OnAnimUpdate (
        double TimeEpSec );
    HRESULT OnNewGlobeCtrlRequest (
        long SceneID );
    HRESULT OnNewMapCtrlRequest (
        long WinID );
    HRESULT OnBeforeNewScenario (
        _bstr_t Scenario );
    HRESULT OnBeforeLoadScenario (
        _bstr_t Scenario );
    HRESULT OnBeginScenarioClose ( );
    HRESULT OnNewGfxAnalysisCtrlRequest (
        long SceneID,
        enum AgEGfxAnalysisMode GfxAnalysisMode );
    HRESULT OnSSLCertificateServerError (
        struct IAgSTKXSSLCertificateErrorEventArgs * pArgs );
    HRESULT OnConControlQuitReceived (
        struct IAgSTKXConControlQuitReceivedEventArgs * pArgs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnScenarioNew (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_OnScenarioLoad (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_OnScenarioClose ( ) = 0;
      virtual HRESULT __stdcall raw_OnScenarioSave (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_OnLogMessage (
        /*[in]*/ BSTR Message,
        /*[in]*/ enum AgELogMsgType MsgType,
        /*[in]*/ long ErrorCode,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long LineNo,
        /*[in]*/ enum AgELogMsgDispID DispID ) = 0;
      virtual HRESULT __stdcall raw_OnAnimUpdate (
        /*[in]*/ double TimeEpSec ) = 0;
      virtual HRESULT __stdcall raw_OnNewGlobeCtrlRequest (
        /*[in]*/ long SceneID ) = 0;
      virtual HRESULT __stdcall raw_OnNewMapCtrlRequest (
        /*[in]*/ long WinID ) = 0;
      virtual HRESULT __stdcall raw_OnBeforeNewScenario (
        /*[in]*/ BSTR Scenario ) = 0;
      virtual HRESULT __stdcall raw_OnBeforeLoadScenario (
        /*[in]*/ BSTR Scenario ) = 0;
      virtual HRESULT __stdcall raw_OnBeginScenarioClose ( ) = 0;
      virtual HRESULT __stdcall raw_OnNewGfxAnalysisCtrlRequest (
        /*[in]*/ long SceneID,
        /*[in]*/ enum AgEGfxAnalysisMode GfxAnalysisMode ) = 0;
      virtual HRESULT __stdcall raw_OnSSLCertificateServerError (
        /*[in]*/ struct IAgSTKXSSLCertificateErrorEventArgs * pArgs ) = 0;
      virtual HRESULT __stdcall raw_OnConControlQuitReceived (
        /*[in]*/ struct IAgSTKXConControlQuitReceivedEventArgs * pArgs ) = 0;
};

struct __declspec(uuid("0e542289-7ef4-423d-b8a1-b91d1f63d202"))
IAgUiAxGfxAnalysisCntrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT KeyDown (
        short * KeyCode,
        short Shift );
    HRESULT KeyPress (
        short * KeyAscii );
    HRESULT KeyUp (
        short * KeyCode,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT MouseDown (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        OLE_XPOS_PIXELS X,
        OLE_YPOS_PIXELS Y );
};

struct __declspec(uuid("cfb6315c-3a5e-493c-afca-7b046184e14f"))
IAgUiAxGfxAnalysisCntrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAgSTKXApplicationPtr Application;
    __declspec(property(get=GetWinID,put=PutWinID))
    long WinID;
    __declspec(property(get=GetVendorID,put=PutVendorID))
    _bstr_t VendorID;
    __declspec(property(get=GetNoLogo,put=PutNoLogo))
    VARIANT_BOOL NoLogo;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetControlMode,put=PutControlMode))
    enum AgEGfxAnalysisMode ControlMode;
    __declspec(property(get=GetReadyState))
    long ReadyState;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    IPictureDisp * Picture;
    __declspec(property(get=GetPictureFromFile,put=PutPictureFromFile))
    _bstr_t PictureFromFile;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pclr );
    IPictureDisp * GetPicture ( );
    void PutRefPicture (
        IPictureDisp * ppPicture );
    void PutPicture (
        IPictureDisp * ppPicture );
    VARIANT_BOOL GetNoLogo ( );
    void PutNoLogo (
        VARIANT_BOOL pNoLogo );
    _bstr_t GetVendorID ( );
    void PutVendorID (
        _bstr_t pbstrVal );
    long GetReadyState ( );
    IAgSTKXApplicationPtr GetApplication ( );
    enum AgEGfxAnalysisMode GetControlMode ( );
    void PutControlMode (
        enum AgEGfxAnalysisMode peGfxAnalysisMode );
    _bstr_t GetPictureFromFile ( );
    void PutPictureFromFile (
        _bstr_t pPictureFile );
    long GetWinID ( );
    void PutWinID (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pclr ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pclr ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ IPictureDisp * * ppPicture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ IPictureDisp * ppPicture ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ IPictureDisp * ppPicture ) = 0;
      virtual HRESULT __stdcall get_NoLogo (
        /*[out,retval]*/ VARIANT_BOOL * pNoLogo ) = 0;
      virtual HRESULT __stdcall put_NoLogo (
        /*[in]*/ VARIANT_BOOL pNoLogo ) = 0;
      virtual HRESULT __stdcall get_VendorID (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall put_VendorID (
        /*[in]*/ BSTR pbstrVal ) = 0;
      virtual HRESULT __stdcall get_ReadyState (
        /*[out,retval]*/ long * pclr ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAgSTKXApplication * * pVal ) = 0;
      virtual HRESULT __stdcall get_ControlMode (
        /*[out,retval]*/ enum AgEGfxAnalysisMode * peGfxAnalysisMode ) = 0;
      virtual HRESULT __stdcall put_ControlMode (
        /*[in]*/ enum AgEGfxAnalysisMode peGfxAnalysisMode ) = 0;
      virtual HRESULT __stdcall get_PictureFromFile (
        /*[out,retval]*/ BSTR * pPictureFile ) = 0;
      virtual HRESULT __stdcall put_PictureFromFile (
        /*[in]*/ BSTR pPictureFile ) = 0;
      virtual HRESULT __stdcall get_WinID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WinID (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("c1f8ca1f-d597-430e-944a-50d5d43e0a90"))
AgUiAxVOCntrl;
    // [ default ] interface IAgUiAxVOCntrl
    // [ default, source ] dispinterface IAgUiAxVOCntrlEvents

struct __declspec(uuid("5920236b-c284-44a3-8a33-93b65fb5cdbc"))
AgUiAx2DCntrl;
    // [ default ] interface IAgUiAx2DCntrl
    // [ default, source ] dispinterface IAgUiAx2DCntrlEvents

struct __declspec(uuid("76f79bbb-4176-4984-a87f-bd658f631434"))
AgPickInfoData;
    // [ default ] interface IAgPickInfoData

struct __declspec(uuid("9c726629-023d-4405-a368-38556e4e2cad"))
AgSTKXApplication;
    // [ default ] interface IAgSTKXApplication
    // [ default, source ] dispinterface IAgSTKXApplicationEvents

struct __declspec(uuid("63a86a08-1766-46aa-8e88-b57064304bf6"))
AgDataObject;
    // [ default ] interface IAgDataObject

struct __declspec(uuid("f2817817-5d37-499c-af88-e0ab9dfa5f41"))
AgDataObjectFiles;
    // [ default ] interface IAgDataObjectFiles

struct __declspec(uuid("43b8f962-e3c1-4df0-8b4e-09b50a1a4d7d"))
AgRubberBandPickInfoData;
    // [ default ] interface IAgRubberBandPickInfoData

struct __declspec(uuid("3a7d3b7c-8335-4bd7-af02-c86998f967f9"))
AgObjPathCollection;
    // [ default ] interface IAgObjPathCollection

struct __declspec(uuid("7c49b402-1775-4e62-a3ed-80a57d9de1a0"))
AgDrawElemRect;
    // [ default ] interface IAgDrawElemRect

struct __declspec(uuid("66b5203f-60a4-4935-80fa-42dd381a502a"))
AgDrawElemCollection;
    // [ default ] interface IAgDrawElemCollection

struct __declspec(uuid("46597fd3-7759-4378-909f-2c31d43db3b5"))
AgDraw2DElemRect;
    // [ default ] interface IAgDrawElemRect

struct __declspec(uuid("9ac39f88-68b3-4226-a068-8ea952f9cadd"))
AgDraw2DElemCollection;
    // [ default ] interface IAgDrawElemCollection

struct __declspec(uuid("82f05495-112d-489a-83a2-bfff0cd7fe8d"))
AgUiAxGfxAnalysisCntrl;
    // [ default ] interface IAgUiAxGfxAnalysisCntrl
    // [ default, source ] dispinterface IAgUiAxGfxAnalysisCntrlEvents

struct __declspec(uuid("4964d957-e33b-4ac9-95bf-c5b2fdf948ea"))
AgWinProjPos;
    // [ default ] interface IAgWinProjPos

struct __declspec(uuid("9922969f-30b7-4908-8cc9-4bc9d92df019"))
AgDrawElemLine;
    // [ default ] interface IAgDrawElemLine

struct __declspec(uuid("127c3d10-ae94-4b3e-906f-35c8314074ec"))
AgSTKXSSLCertificateErrorEventArgs;
    // [ default ] interface IAgSTKXSSLCertificateErrorEventArgs

struct __declspec(uuid("d83dba40-f3c8-403c-8112-87dc61e76a9c"))
AgSTKXConControlQuitReceivedEventArgs;
    // [ default ] interface IAgSTKXConControlQuitReceivedEventArgs

} // namespace STKXLib

#pragma pack(pop)
