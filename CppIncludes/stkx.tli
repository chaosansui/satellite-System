// Created by Microsoft (R) C/C++ Compiler Version 14.16.27026.1 (082c910b).
//
// d:\dev\r_stk_prod_x64\source\lib\release.x64\tlhbuilder\stkx.tli
//
// Wrapper implementations for type library STKX.tlb
// compiler-generated file created 03/29/19 at 20:37:41 - DO NOT EDIT!

#pragma once

namespace STKXLib {

//
// interface IAgPickInfoData wrapper method implementations
//

_bstr_t IAgPickInfoData::GetObjPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IAgPickInfoData::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgPickInfoData::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgPickInfoData::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgPickInfoData::GetIsObjPathValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsObjPathValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgPickInfoData::GetIsLatLonAltValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLatLonAltValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgObjPathCollection wrapper method implementations
//

long IAgObjPathCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgObjPathCollection::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IAgObjPathCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SAFEARRAY * IAgObjPathCollection::Range ( long StartIndex, long StopIndex ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Range(StartIndex, StopIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgRubberBandPickInfoData wrapper method implementations
//

IAgObjPathCollectionPtr IAgRubberBandPickInfoData::GetObjPaths ( ) {
    struct IAgObjPathCollection * _result = 0;
    HRESULT _hr = get_ObjPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjPathCollectionPtr(_result, false);
}

//
// interface IAgExecCmdResult wrapper method implementations
//

long IAgExecCmdResult::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgExecCmdResult::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IAgExecCmdResult::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SAFEARRAY * IAgExecCmdResult::Range ( long StartIndex, long StopIndex ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Range(StartIndex, StopIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgExecCmdResult::GetIsSucceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSucceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgExecMultiCmdResult wrapper method implementations
//

long IAgExecMultiCmdResult::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgExecCmdResultPtr IAgExecMultiCmdResult::GetItem ( long Index ) {
    struct IAgExecCmdResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExecCmdResultPtr(_result, false);
}

IUnknownPtr IAgExecMultiCmdResult::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgSTKXApplication wrapper method implementations
//

IAgExecCmdResultPtr IAgSTKXApplication::ExecuteCommand ( _bstr_t Command ) {
    struct IAgExecCmdResult * _result = 0;
    HRESULT _hr = raw_ExecuteCommand(Command, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExecCmdResultPtr(_result, false);
}

VARIANT_BOOL IAgSTKXApplication::GetEnableConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXApplication::PutEnableConnect ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableConnect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IAgSTKXApplication::GetConnectPort ( ) {
    short _result = 0;
    HRESULT _hr = get_ConnectPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXApplication::PutConnectPort ( short pVal ) {
    HRESULT _hr = put_ConnectPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgSTKXApplication::GetHostID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HostID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgSTKXApplication::GetRegistrationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RegistrationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgSTKXApplication::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgSTKXApplication::GetLicensingReport ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLicensingReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgSTKXApplication::GetVendorID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VendorID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSTKXApplication::PutVendorID ( _bstr_t pbstrVal ) {
    HRESULT _hr = put_VendorID(pbstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSTKXApplication::SetOnlineOptions ( VARIANT_BOOL UseProxy, _bstr_t ServerName, long PortNum, _bstr_t UserName, _bstr_t Password, VARIANT_BOOL SavePassword ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetOnlineOptions(UseProxy, ServerName, PortNum, UserName, Password, SavePassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgSTKXApplication::GetOnlineOptions ( VARIANT_BOOL * UseProxy, BSTR * ServerName, long * PortNum, BSTR * UserName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOnlineOptions(UseProxy, ServerName, PortNum, UserName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSTKXApplication::SetConnectHandler ( _bstr_t CommandID, _bstr_t ProgID ) {
    HRESULT _hr = raw_SetConnectHandler(CommandID, ProgID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IAgSTKXApplication::GetLogFileFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFileFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgELoggingMode IAgSTKXApplication::GetLoggingMode ( ) {
    enum AgELoggingMode _result;
    HRESULT _hr = get_LoggingMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXApplication::PutLoggingMode ( enum AgELoggingMode pVal ) {
    HRESULT _hr = put_LoggingMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgSTKXApplication::GetConnectMaxConnections ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectMaxConnections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXApplication::PutConnectMaxConnections ( long pVal ) {
    HRESULT _hr = put_ConnectMaxConnections(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExecMultiCmdResultPtr IAgSTKXApplication::ExecuteMultipleCommands ( SAFEARRAY * * ConnectCommands, enum AgEExecMultiCmdResultAction EAction ) {
    struct IAgExecMultiCmdResult * _result = 0;
    HRESULT _hr = raw_ExecuteMultipleCommands(ConnectCommands, EAction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExecMultiCmdResultPtr(_result, false);
}

VARIANT_BOOL IAgSTKXApplication::IsFeatureAvailable ( enum AgEFeatureCodes FeatureCode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFeatureAvailable(FeatureCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgSTKXApplication::GetNoGraphics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXApplication::PutNoGraphics ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_NoGraphics(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSTKXApplication::Terminate ( ) {
    HRESULT _hr = raw_Terminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgSTKXApplication::GetShowSLAIfNotAccepted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSLAIfNotAccepted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXApplication::PutShowSLAIfNotAccepted ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowSLAIfNotAccepted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IAgSTKXApplication::PutUseHook ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_UseHook(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgDataObjectFiles wrapper method implementations
//

IUnknownPtr IAgDataObjectFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_bstr_t IAgDataObjectFiles::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IAgDataObjectFiles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDataObject wrapper method implementations
//

IAgDataObjectFilesPtr IAgDataObject::GetFiles ( ) {
    struct IAgDataObjectFiles * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataObjectFilesPtr(_result, false);
}

//
// interface IAgDrawElem wrapper method implementations
//

VARIANT_BOOL IAgDrawElem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElem::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgDrawElemRect wrapper method implementations
//

OLE_XPOS_PIXELS IAgDrawElemRect::GetLeft ( ) {
    OLE_XPOS_PIXELS _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_XPOS_PIXELS IAgDrawElemRect::GetRight ( ) {
    OLE_XPOS_PIXELS _result;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_YPOS_PIXELS IAgDrawElemRect::GetTop ( ) {
    OLE_YPOS_PIXELS _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_YPOS_PIXELS IAgDrawElemRect::GetBottom ( ) {
    OLE_YPOS_PIXELS _result;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgDrawElemRect::Set ( OLE_XPOS_PIXELS Left, OLE_YPOS_PIXELS Top, OLE_XPOS_PIXELS Right, OLE_YPOS_PIXELS Bottom ) {
    HRESULT _hr = raw_Set(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

OLE_COLOR IAgDrawElemRect::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemRect::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgDrawElemRect::GetLineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemRect::PutLineWidth ( float pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineStyle IAgDrawElemRect::GetLineStyle ( ) {
    enum AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemRect::PutLineStyle ( enum AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgDrawElemCollection wrapper method implementations
//

long IAgDrawElemCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDrawElemPtr IAgDrawElemCollection::GetItem ( long Index ) {
    struct IAgDrawElem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrawElemPtr(_result, false);
}

IUnknownPtr IAgDrawElemCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgDrawElemCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgDrawElemPtr IAgDrawElemCollection::Add ( _bstr_t ElemType ) {
    struct IAgDrawElem * _result = 0;
    HRESULT _hr = raw_Add(ElemType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrawElemPtr(_result, false);
}

HRESULT IAgDrawElemCollection::Remove ( struct IAgDrawElem * DrawElem ) {
    HRESULT _hr = raw_Remove(DrawElem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgDrawElemCollection::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemCollection::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgWinProjPos wrapper method implementations
//

double IAgWinProjPos::GetXPos ( ) {
    double _result = 0;
    HRESULT _hr = get_XPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgWinProjPos::GetYPos ( ) {
    double _result = 0;
    HRESULT _hr = get_YPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgWinProjPos::GetIsWinProjPosValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsWinProjPosValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDrawElemLine wrapper method implementations
//

OLE_XPOS_PIXELS IAgDrawElemLine::GetLeft ( ) {
    OLE_XPOS_PIXELS _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_XPOS_PIXELS IAgDrawElemLine::GetRight ( ) {
    OLE_XPOS_PIXELS _result;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_YPOS_PIXELS IAgDrawElemLine::GetTop ( ) {
    OLE_YPOS_PIXELS _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_YPOS_PIXELS IAgDrawElemLine::GetBottom ( ) {
    OLE_YPOS_PIXELS _result;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgDrawElemLine::Set ( OLE_XPOS_PIXELS Left, OLE_YPOS_PIXELS Top, OLE_XPOS_PIXELS Right, OLE_YPOS_PIXELS Bottom ) {
    HRESULT _hr = raw_Set(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

OLE_COLOR IAgDrawElemLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgDrawElemLine::GetLineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemLine::PutLineWidth ( float pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineStyle IAgDrawElemLine::GetLineStyle ( ) {
    enum AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDrawElemLine::PutLineStyle ( enum AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IAgUiAxVOCntrlEvents wrapper method implementations
//

HRESULT IAgUiAxVOCntrlEvents::KeyDown ( short * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002\x0002", KeyCode, Shift);
}

HRESULT IAgUiAxVOCntrlEvents::KeyPress ( short * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002", KeyAscii);
}

HRESULT IAgUiAxVOCntrlEvents::KeyUp ( short * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002\x0002", KeyCode, Shift);
}

HRESULT IAgUiAxVOCntrlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgUiAxVOCntrlEvents::DblClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgUiAxVOCntrlEvents::MouseDown ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAxVOCntrlEvents::MouseMove ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAxVOCntrlEvents::MouseUp ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAxVOCntrlEvents::OLEDragDrop ( struct IAgDataObject * Data, long Effect, short Button, short Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0002\x0002\x0003\x0003", Data, Effect, Button, Shift, X, Y);
}

HRESULT IAgUiAxVOCntrlEvents::MouseWheel ( short Button, short Shift, short Delta, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0002\x0003\x0003", Button, Shift, Delta, X, Y);
}

HRESULT IAgUiAxVOCntrlEvents::OnObjectEditingStart ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgUiAxVOCntrlEvents::OnObjectEditingApply ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgUiAxVOCntrlEvents::OnObjectEditingCancel ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgUiAxVOCntrlEvents::OnObjectEditingStop ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

//
// interface IAgUiAxStockRawEvents wrapper method implementations
//

HRESULT IAgUiAxStockRawEvents::KeyDown ( short * KeyCode, short Shift ) {
    HRESULT _hr = raw_KeyDown(KeyCode, Shift);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::KeyPress ( short * KeyAscii ) {
    HRESULT _hr = raw_KeyPress(KeyAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::KeyUp ( short * KeyCode, short Shift ) {
    HRESULT _hr = raw_KeyUp(KeyCode, Shift);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::DblClick ( ) {
    HRESULT _hr = raw_DblClick();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::MouseDown ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    HRESULT _hr = raw_MouseDown(Button, Shift, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::MouseMove ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    HRESULT _hr = raw_MouseMove(Button, Shift, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::MouseUp ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    HRESULT _hr = raw_MouseUp(Button, Shift, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::OLEDragDrop ( struct IAgDataObject * Data, long Effect, short Button, short Shift, long X, long Y ) {
    HRESULT _hr = raw_OLEDragDrop(Data, Effect, Button, Shift, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxStockRawEvents::MouseWheel ( short Button, short Shift, short Delta, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    HRESULT _hr = raw_MouseWheel(Button, Shift, Delta, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgUiAxVOCntrlRawEvents wrapper method implementations
//

HRESULT IAgUiAxVOCntrlRawEvents::OnObjectEditingStart ( _bstr_t Path ) {
    HRESULT _hr = raw_OnObjectEditingStart(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrlRawEvents::OnObjectEditingApply ( _bstr_t Path ) {
    HRESULT _hr = raw_OnObjectEditingApply(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrlRawEvents::OnObjectEditingCancel ( _bstr_t Path ) {
    HRESULT _hr = raw_OnObjectEditingCancel(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrlRawEvents::OnObjectEditingStop ( _bstr_t Path ) {
    HRESULT _hr = raw_OnObjectEditingStop(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgUiAxVOCntrl wrapper method implementations
//

OLE_COLOR IAgUiAxVOCntrl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutBackColor ( OLE_COLOR pclr ) {
    HRESULT _hr = put_BackColor(pclr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * IAgUiAxVOCntrl::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutRefPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = putref_Picture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IAgUiAxVOCntrl::PutPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = put_Picture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgPickInfoDataPtr IAgUiAxVOCntrl::PickInfo ( OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    struct IAgPickInfoData * _result = 0;
    HRESULT _hr = raw_PickInfo(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPickInfoDataPtr(_result, false);
}

long IAgUiAxVOCntrl::GetWinID ( ) {
    long _result = 0;
    HRESULT _hr = get_WinID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutWinID ( long pVal ) {
    HRESULT _hr = put_WinID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSTKXApplicationPtr IAgUiAxVOCntrl::GetApplication ( ) {
    struct IAgSTKXApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSTKXApplicationPtr(_result, false);
}

HRESULT IAgUiAxVOCntrl::ZoomIn ( ) {
    HRESULT _hr = raw_ZoomIn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgUiAxVOCntrl::GetNoLogo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoLogo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutNoLogo ( VARIANT_BOOL pNoLogo ) {
    HRESULT _hr = put_NoLogo(pNoLogo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEOLEDropMode IAgUiAxVOCntrl::GetOLEDropMode ( ) {
    enum AgEOLEDropMode _result;
    HRESULT _hr = get_OLEDropMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutOLEDropMode ( enum AgEOLEDropMode psOLEDropMode ) {
    HRESULT _hr = put_OLEDropMode(psOLEDropMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAxVOCntrl::GetVendorID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VendorID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAxVOCntrl::PutVendorID ( _bstr_t pbstrVal ) {
    HRESULT _hr = put_VendorID(pbstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgRubberBandPickInfoDataPtr IAgUiAxVOCntrl::RubberBandPickInfo ( OLE_XPOS_PIXELS Left, OLE_YPOS_PIXELS Top, OLE_XPOS_PIXELS Right, OLE_YPOS_PIXELS Bottom ) {
    struct IAgRubberBandPickInfoData * _result = 0;
    HRESULT _hr = raw_RubberBandPickInfo(Left, Top, Right, Bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgRubberBandPickInfoDataPtr(_result, false);
}

enum AgEMouseMode IAgUiAxVOCntrl::GetMouseMode ( ) {
    enum AgEMouseMode _result;
    HRESULT _hr = get_MouseMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutMouseMode ( enum AgEMouseMode psMouseMode ) {
    HRESULT _hr = put_MouseMode(psMouseMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgDrawElemCollectionPtr IAgUiAxVOCntrl::GetDrawElements ( ) {
    struct IAgDrawElemCollection * _result = 0;
    HRESULT _hr = get_DrawElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrawElemCollectionPtr(_result, false);
}

long IAgUiAxVOCntrl::GetReadyState ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadyState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgUiAxVOCntrl::GetPptPreloadMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PptPreloadMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutPptPreloadMode ( VARIANT_BOOL pPptPreloadMode ) {
    HRESULT _hr = put_PptPreloadMode(pPptPreloadMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgUiAxVOCntrl::GetAdvancedPickMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdvancedPickMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutAdvancedPickMode ( VARIANT_BOOL pAdvancePickMode ) {
    HRESULT _hr = put_AdvancedPickMode(pAdvancePickMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgUiAxVOCntrl::CopyFromWinID ( long WinID ) {
    HRESULT _hr = raw_CopyFromWinID(WinID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrl::StartObjectEditing ( _bstr_t ObjEditPath ) {
    HRESULT _hr = raw_StartObjectEditing(ObjEditPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrl::ApplyObjectEditing ( ) {
    HRESULT _hr = raw_ApplyObjectEditing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrl::StopObjectEditing ( VARIANT_BOOL Canceled ) {
    HRESULT _hr = raw_StopObjectEditing(Canceled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgUiAxVOCntrl::GetIsObjectEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsObjectEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgUiAxVOCntrl::GetInZoomMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InZoomMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgUiAxVOCntrl::SetMouseCursorFromFile ( _bstr_t CursorFileName ) {
    HRESULT _hr = raw_SetMouseCursorFromFile(CursorFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrl::RestoreMouseCursor ( ) {
    HRESULT _hr = raw_RestoreMouseCursor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAxVOCntrl::SetMouseCursorFromHandle ( OLE_HANDLE CursorHandle ) {
    HRESULT _hr = raw_SetMouseCursorFromHandle(CursorHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEShowProgressImage IAgUiAxVOCntrl::GetShowProgressImage ( ) {
    enum AgEShowProgressImage _result;
    HRESULT _hr = get_ShowProgressImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutShowProgressImage ( enum AgEShowProgressImage psProgressImage ) {
    HRESULT _hr = put_ShowProgressImage(psProgressImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAxVOCntrl::GetProgressImageXOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_ProgressImageXOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutProgressImageXOffset ( long pXOffset ) {
    HRESULT _hr = put_ProgressImageXOffset(pXOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAxVOCntrl::GetProgressImageYOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_ProgressImageYOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutProgressImageYOffset ( long pYOffset ) {
    HRESULT _hr = put_ProgressImageYOffset(pYOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAxVOCntrl::GetProgressImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgressImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAxVOCntrl::PutProgressImageFile ( _bstr_t pImageFile ) {
    HRESULT _hr = put_ProgressImageFile(pImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEProgressImageXOrigin IAgUiAxVOCntrl::GetProgressImageXOrigin ( ) {
    enum AgEProgressImageXOrigin _result;
    HRESULT _hr = get_ProgressImageXOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutProgressImageXOrigin ( enum AgEProgressImageXOrigin psProgressImageXOrigin ) {
    HRESULT _hr = put_ProgressImageXOrigin(psProgressImageXOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEProgressImageYOrigin IAgUiAxVOCntrl::GetProgressImageYOrigin ( ) {
    enum AgEProgressImageYOrigin _result;
    HRESULT _hr = get_ProgressImageYOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxVOCntrl::PutProgressImageYOrigin ( enum AgEProgressImageYOrigin psProgressImageYOrigin ) {
    HRESULT _hr = put_ProgressImageYOrigin(psProgressImageYOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAxVOCntrl::GetPictureFromFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PictureFromFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAxVOCntrl::PutPictureFromFile ( _bstr_t pPictureFile ) {
    HRESULT _hr = put_PictureFromFile(pPictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IAgUiAx2DCntrlEvents wrapper method implementations
//

HRESULT IAgUiAx2DCntrlEvents::KeyDown ( short * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002\x0002", KeyCode, Shift);
}

HRESULT IAgUiAx2DCntrlEvents::KeyPress ( short * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002", KeyAscii);
}

HRESULT IAgUiAx2DCntrlEvents::KeyUp ( short * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002\x0002", KeyCode, Shift);
}

HRESULT IAgUiAx2DCntrlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgUiAx2DCntrlEvents::DblClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgUiAx2DCntrlEvents::MouseDown ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAx2DCntrlEvents::MouseMove ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAx2DCntrlEvents::MouseUp ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAx2DCntrlEvents::OLEDragDrop ( struct IAgDataObject * Data, long Effect, short Button, short Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0002\x0002\x0003\x0003", Data, Effect, Button, Shift, X, Y);
}

HRESULT IAgUiAx2DCntrlEvents::MouseWheel ( short Button, short Shift, short Delta, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0002\x0003\x0003", Button, Shift, Delta, X, Y);
}

//
// interface IAgUiAx2DCntrl wrapper method implementations
//

OLE_COLOR IAgUiAx2DCntrl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutBackColor ( OLE_COLOR pclr ) {
    HRESULT _hr = put_BackColor(pclr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * IAgUiAx2DCntrl::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutRefPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = putref_Picture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IAgUiAx2DCntrl::PutPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = put_Picture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAx2DCntrl::GetWinID ( ) {
    long _result = 0;
    HRESULT _hr = get_WinID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutWinID ( long pVal ) {
    HRESULT _hr = put_WinID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgUiAx2DCntrl::ZoomIn ( ) {
    HRESULT _hr = raw_ZoomIn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAx2DCntrl::ZoomOut ( ) {
    HRESULT _hr = raw_ZoomOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgPickInfoDataPtr IAgUiAx2DCntrl::PickInfo ( OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    struct IAgPickInfoData * _result = 0;
    HRESULT _hr = raw_PickInfo(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPickInfoDataPtr(_result, false);
}

IAgSTKXApplicationPtr IAgUiAx2DCntrl::GetApplication ( ) {
    struct IAgSTKXApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSTKXApplicationPtr(_result, false);
}

VARIANT_BOOL IAgUiAx2DCntrl::GetNoLogo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoLogo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutNoLogo ( VARIANT_BOOL pNoLogo ) {
    HRESULT _hr = put_NoLogo(pNoLogo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEOLEDropMode IAgUiAx2DCntrl::GetOLEDropMode ( ) {
    enum AgEOLEDropMode _result;
    HRESULT _hr = get_OLEDropMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutOLEDropMode ( enum AgEOLEDropMode psOLEDropMode ) {
    HRESULT _hr = put_OLEDropMode(psOLEDropMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAx2DCntrl::GetVendorID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VendorID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAx2DCntrl::PutVendorID ( _bstr_t pbstrVal ) {
    HRESULT _hr = put_VendorID(pbstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMouseMode IAgUiAx2DCntrl::GetMouseMode ( ) {
    enum AgEMouseMode _result;
    HRESULT _hr = get_MouseMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutMouseMode ( enum AgEMouseMode psMouseMode ) {
    HRESULT _hr = put_MouseMode(psMouseMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAx2DCntrl::GetReadyState ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadyState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgUiAx2DCntrl::CopyFromWinID ( long WinID ) {
    HRESULT _hr = raw_CopyFromWinID(WinID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgRubberBandPickInfoDataPtr IAgUiAx2DCntrl::RubberBandPickInfo ( OLE_XPOS_PIXELS Left, OLE_YPOS_PIXELS Top, OLE_XPOS_PIXELS Right, OLE_YPOS_PIXELS Bottom ) {
    struct IAgRubberBandPickInfoData * _result = 0;
    HRESULT _hr = raw_RubberBandPickInfo(Left, Top, Right, Bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgRubberBandPickInfoDataPtr(_result, false);
}

VARIANT_BOOL IAgUiAx2DCntrl::GetAdvancedPickMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdvancedPickMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutAdvancedPickMode ( VARIANT_BOOL pAdvancePickMode ) {
    HRESULT _hr = put_AdvancedPickMode(pAdvancePickMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgWinProjPosPtr IAgUiAx2DCntrl::GetWindowProjectedPosition ( double Lat, double Lon, double Alt, enum AgEGfxDrawCoords DrawCoords ) {
    struct IAgWinProjPos * _result = 0;
    HRESULT _hr = raw_GetWindowProjectedPosition(Lat, Lon, Alt, DrawCoords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgWinProjPosPtr(_result, false);
}

VARIANT_BOOL IAgUiAx2DCntrl::GetInZoomMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InZoomMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgUiAx2DCntrl::SetMouseCursorFromFile ( _bstr_t CursorFileName ) {
    HRESULT _hr = raw_SetMouseCursorFromFile(CursorFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAx2DCntrl::RestoreMouseCursor ( ) {
    HRESULT _hr = raw_RestoreMouseCursor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgUiAx2DCntrl::SetMouseCursorFromHandle ( OLE_HANDLE CursorHandle ) {
    HRESULT _hr = raw_SetMouseCursorFromHandle(CursorHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEShowProgressImage IAgUiAx2DCntrl::GetShowProgressImage ( ) {
    enum AgEShowProgressImage _result;
    HRESULT _hr = get_ShowProgressImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutShowProgressImage ( enum AgEShowProgressImage psProgressImage ) {
    HRESULT _hr = put_ShowProgressImage(psProgressImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAx2DCntrl::GetProgressImageXOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_ProgressImageXOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutProgressImageXOffset ( long pXOffset ) {
    HRESULT _hr = put_ProgressImageXOffset(pXOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAx2DCntrl::GetProgressImageYOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_ProgressImageYOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutProgressImageYOffset ( long pYOffset ) {
    HRESULT _hr = put_ProgressImageYOffset(pYOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAx2DCntrl::GetProgressImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgressImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAx2DCntrl::PutProgressImageFile ( _bstr_t pImageFile ) {
    HRESULT _hr = put_ProgressImageFile(pImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEProgressImageXOrigin IAgUiAx2DCntrl::GetProgressImageXOrigin ( ) {
    enum AgEProgressImageXOrigin _result;
    HRESULT _hr = get_ProgressImageXOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutProgressImageXOrigin ( enum AgEProgressImageXOrigin psProgressImageXOrigin ) {
    HRESULT _hr = put_ProgressImageXOrigin(psProgressImageXOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEProgressImageYOrigin IAgUiAx2DCntrl::GetProgressImageYOrigin ( ) {
    enum AgEProgressImageYOrigin _result;
    HRESULT _hr = get_ProgressImageYOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutProgressImageYOrigin ( enum AgEProgressImageYOrigin psProgressImageYOrigin ) {
    HRESULT _hr = put_ProgressImageYOrigin(psProgressImageYOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAx2DCntrl::GetPictureFromFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PictureFromFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAx2DCntrl::PutPictureFromFile ( _bstr_t pPictureFile ) {
    HRESULT _hr = put_PictureFromFile(pPictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgUiAx2DCntrl::GetPanModeEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PanModeEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAx2DCntrl::PutPanModeEnabled ( VARIANT_BOOL pPanMode ) {
    HRESULT _hr = put_PanModeEnabled(pPanMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IAgSTKXApplicationEvents wrapper method implementations
//

HRESULT IAgSTKXApplicationEvents::OnScenarioNew ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgSTKXApplicationEvents::OnScenarioLoad ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgSTKXApplicationEvents::OnScenarioClose ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgSTKXApplicationEvents::OnScenarioSave ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgSTKXApplicationEvents::OnLogMessage ( _bstr_t Message, enum AgELogMsgType MsgType, long ErrorCode, _bstr_t FileName, long LineNo, enum AgELogMsgDispID DispID ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0003\x0003\x0008\x0003\x0003", (BSTR)Message, MsgType, ErrorCode, (BSTR)FileName, LineNo, DispID);
}

HRESULT IAgSTKXApplicationEvents::OnAnimUpdate ( double TimeEpSec ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0005", TimeEpSec);
    return _result;
}

HRESULT IAgSTKXApplicationEvents::OnNewGlobeCtrlRequest ( long SceneID ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SceneID);
}

HRESULT IAgSTKXApplicationEvents::OnNewMapCtrlRequest ( long WinID ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", WinID);
}

HRESULT IAgSTKXApplicationEvents::OnBeforeNewScenario ( _bstr_t Scenario ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Scenario);
}

HRESULT IAgSTKXApplicationEvents::OnBeforeLoadScenario ( _bstr_t Scenario ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Scenario);
}

HRESULT IAgSTKXApplicationEvents::OnBeginScenarioClose ( ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgSTKXApplicationEvents::OnNewGfxAnalysisCtrlRequest ( long SceneID, enum AgEGfxAnalysisMode GfxAnalysisMode ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SceneID, GfxAnalysisMode);
}

HRESULT IAgSTKXApplicationEvents::OnSSLCertificateServerError ( struct IAgSTKXSSLCertificateErrorEventArgs * pArgs ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pArgs);
}

HRESULT IAgSTKXApplicationEvents::OnConControlQuitReceived ( struct IAgSTKXConControlQuitReceivedEventArgs * pArgs ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pArgs);
}

//
// interface IAgSTKXSSLCertificateErrorEventArgs wrapper method implementations
//

HRESULT IAgSTKXSSLCertificateErrorEventArgs::SetIgnoreError ( VARIANT_BOOL IgnoreError ) {
    HRESULT _hr = raw_SetIgnoreError(IgnoreError);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgSTKXSSLCertificateErrorEventArgs::GetIsErrorIgnored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsErrorIgnored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSTKXSSLCertificateErrorEventArgs::SetIgnoreErrorPermanently ( VARIANT_BOOL IgnoreErrorPermanently ) {
    HRESULT _hr = raw_SetIgnoreErrorPermanently(IgnoreErrorPermanently);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IAgSTKXSSLCertificateErrorEventArgs::GetSerialNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SerialNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgSTKXSSLCertificateErrorEventArgs::GetIssuer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Issuer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgSTKXSSLCertificateErrorEventArgs::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

DATE IAgSTKXSSLCertificateErrorEventArgs::GetValidDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ValidDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IAgSTKXSSLCertificateErrorEventArgs::GetExpirationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgSTKXSSLCertificateErrorEventArgs::GetIsExpired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExpired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgSTKXSSLCertificateErrorEventArgs::GetPEMData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PEMData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgSTKXSSLCertificateErrorEventArgs::GetHandled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Handled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXSSLCertificateErrorEventArgs::PutHandled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Handled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSTKXConControlQuitReceivedEventArgs wrapper method implementations
//

VARIANT_BOOL IAgSTKXConControlQuitReceivedEventArgs::GetAcknowledge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Acknowledge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSTKXConControlQuitReceivedEventArgs::PutAcknowledge ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Acknowledge(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSTKXApplicationRawEvents wrapper method implementations
//

HRESULT IAgSTKXApplicationRawEvents::OnScenarioNew ( _bstr_t Path ) {
    HRESULT _hr = raw_OnScenarioNew(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnScenarioLoad ( _bstr_t Path ) {
    HRESULT _hr = raw_OnScenarioLoad(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnScenarioClose ( ) {
    HRESULT _hr = raw_OnScenarioClose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnScenarioSave ( _bstr_t Path ) {
    HRESULT _hr = raw_OnScenarioSave(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnLogMessage ( _bstr_t Message, enum AgELogMsgType MsgType, long ErrorCode, _bstr_t FileName, long LineNo, enum AgELogMsgDispID DispID ) {
    HRESULT _hr = raw_OnLogMessage(Message, MsgType, ErrorCode, FileName, LineNo, DispID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnAnimUpdate ( double TimeEpSec ) {
    HRESULT _hr = raw_OnAnimUpdate(TimeEpSec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnNewGlobeCtrlRequest ( long SceneID ) {
    HRESULT _hr = raw_OnNewGlobeCtrlRequest(SceneID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnNewMapCtrlRequest ( long WinID ) {
    HRESULT _hr = raw_OnNewMapCtrlRequest(WinID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnBeforeNewScenario ( _bstr_t Scenario ) {
    HRESULT _hr = raw_OnBeforeNewScenario(Scenario);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnBeforeLoadScenario ( _bstr_t Scenario ) {
    HRESULT _hr = raw_OnBeforeLoadScenario(Scenario);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnBeginScenarioClose ( ) {
    HRESULT _hr = raw_OnBeginScenarioClose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnNewGfxAnalysisCtrlRequest ( long SceneID, enum AgEGfxAnalysisMode GfxAnalysisMode ) {
    HRESULT _hr = raw_OnNewGfxAnalysisCtrlRequest(SceneID, GfxAnalysisMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnSSLCertificateServerError ( struct IAgSTKXSSLCertificateErrorEventArgs * pArgs ) {
    HRESULT _hr = raw_OnSSLCertificateServerError(pArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSTKXApplicationRawEvents::OnConControlQuitReceived ( struct IAgSTKXConControlQuitReceivedEventArgs * pArgs ) {
    HRESULT _hr = raw_OnConControlQuitReceived(pArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface IAgUiAxGfxAnalysisCntrlEvents wrapper method implementations
//

HRESULT IAgUiAxGfxAnalysisCntrlEvents::KeyDown ( short * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002\x0002", KeyCode, Shift);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::KeyPress ( short * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002", KeyAscii);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::KeyUp ( short * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002\x0002", KeyCode, Shift);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::DblClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::MouseDown ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::MouseMove ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

HRESULT IAgUiAxGfxAnalysisCntrlEvents::MouseUp ( short Button, short Shift, OLE_XPOS_PIXELS X, OLE_YPOS_PIXELS Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", Button, Shift, X, Y);
}

//
// interface IAgUiAxGfxAnalysisCntrl wrapper method implementations
//

OLE_COLOR IAgUiAxGfxAnalysisCntrl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxGfxAnalysisCntrl::PutBackColor ( OLE_COLOR pclr ) {
    HRESULT _hr = put_BackColor(pclr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * IAgUiAxGfxAnalysisCntrl::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxGfxAnalysisCntrl::PutRefPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = putref_Picture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IAgUiAxGfxAnalysisCntrl::PutPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = put_Picture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgUiAxGfxAnalysisCntrl::GetNoLogo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoLogo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxGfxAnalysisCntrl::PutNoLogo ( VARIANT_BOOL pNoLogo ) {
    HRESULT _hr = put_NoLogo(pNoLogo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAxGfxAnalysisCntrl::GetVendorID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VendorID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAxGfxAnalysisCntrl::PutVendorID ( _bstr_t pbstrVal ) {
    HRESULT _hr = put_VendorID(pbstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAxGfxAnalysisCntrl::GetReadyState ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadyState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSTKXApplicationPtr IAgUiAxGfxAnalysisCntrl::GetApplication ( ) {
    struct IAgSTKXApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSTKXApplicationPtr(_result, false);
}

enum AgEGfxAnalysisMode IAgUiAxGfxAnalysisCntrl::GetControlMode ( ) {
    enum AgEGfxAnalysisMode _result;
    HRESULT _hr = get_ControlMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxGfxAnalysisCntrl::PutControlMode ( enum AgEGfxAnalysisMode peGfxAnalysisMode ) {
    HRESULT _hr = put_ControlMode(peGfxAnalysisMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgUiAxGfxAnalysisCntrl::GetPictureFromFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PictureFromFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgUiAxGfxAnalysisCntrl::PutPictureFromFile ( _bstr_t pPictureFile ) {
    HRESULT _hr = put_PictureFromFile(pPictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgUiAxGfxAnalysisCntrl::GetWinID ( ) {
    long _result = 0;
    HRESULT _hr = get_WinID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgUiAxGfxAnalysisCntrl::PutWinID ( long pVal ) {
    HRESULT _hr = put_WinID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

} // namespace STKXLib
