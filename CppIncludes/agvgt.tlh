// Created by Microsoft (R) C/C++ Compiler Version 14.16.27026.1 (d4a80479).
//
// d:\dev\r_stk_prod_x64\source\lib\release.x64\tlhbuilder\agvgt.tlh
//
// C++ source equivalent of type library AgVGT.tlb
// compiler-generated file created 03/29/19 at 20:37:34 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AgSTKVgtLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("8b49f426-4bf0-49f7-a59b-93961d83cb5d"))
/* LIBID */ __AgSTKVgtLib;
struct __declspec(uuid("aca6a9d2-b2b8-439b-9576-f86fdff4b957"))
/* dual interface */ IAgCrdnIntervalCollection;
struct __declspec(uuid("f12a71b9-7f54-4162-b742-27acdef49973"))
/* interface */ IAgCrdnInterval;
struct __declspec(uuid("56986b69-c1af-4d2b-9abb-70f7e17e0040"))
/* interface */ IAgCrdnPoint;
enum AgECrdnPointType;
struct __declspec(uuid("ce6ae859-24ff-48a0-943d-6eaa6d13c9c3"))
/* interface */ IAgCrdnSystem;
enum AgECrdnSystemType;
struct __declspec(uuid("e86a1015-8a3a-48e7-8256-6bb4556c6d3b"))
/* interface */ IAgCrdnSystemFindInSystemResult;
struct __declspec(uuid("a4579666-eb3a-4690-a907-94bfe9cf5fde"))
/* interface */ IAgCrdnSystemTransformResult;
struct __declspec(uuid("df5065b7-ab26-463d-969b-5aac15b62816"))
/* interface */ IAgCrdnSystemTransformWithRateResult;
struct __declspec(uuid("45ec8d0c-93cd-4a11-a7c2-e25e80398cb3"))
/* interface */ IAgCrdnPointLocateInSystemWithRateResult;
struct __declspec(uuid("ae05da02-fbd3-419c-b595-a437ce6f2912"))
/* interface */ IAgCrdnPointLocateInSystemResult;
struct __declspec(uuid("e39a2aaf-4c13-49ee-aa42-6e57db1f8d79"))
/* interface */ IAgCrdnVector;
enum AgECrdnVectorType;
struct __declspec(uuid("a74d39ba-89d9-478e-8097-07731f64e027"))
/* interface */ IAgCrdnAxes;
enum AgECrdnAxesType;
struct __declspec(uuid("45e20c8f-cc19-4c69-bd7a-dea601668e34"))
/* interface */ IAgCrdnAxesFindInAxesWithRateResult;
struct __declspec(uuid("d8b83f51-f4d7-438f-8d1f-5bac7fcc190d"))
/* interface */ IAgCrdnAxesFindInAxesResult;
struct __declspec(uuid("b90c7093-7f80-4d23-8b90-67d852802fee"))
/* interface */ IAgCrdnAxesLabels;
struct __declspec(uuid("f75866c1-39af-44ce-bb8d-5b2dfedde5b7"))
/* interface */ IAgCrdnAxesTransformResult;
struct __declspec(uuid("ce2b2889-37f6-4d0d-be05-29d2c4f28a70"))
/* interface */ IAgCrdnAxesTransformWithRateResult;
struct __declspec(uuid("a4bf7ee2-45f9-4a60-9c40-106151dfa9ba"))
/* interface */ IAgCrdnVectorFindInAxesResult;
struct __declspec(uuid("69e05bc0-f15d-4e5f-869b-b60eaa04a949"))
/* interface */ IAgCrdnVectorFindInAxesWithRateResult;
struct __declspec(uuid("ccc77a45-a50a-4f6c-bfb7-fe9dde89a34d"))
/* interface */ IAgCrdnAngle;
enum AgECrdnAngleType;
struct __declspec(uuid("b1838a8b-e080-4dca-b27f-170c3501eb87"))
/* interface */ IAgCrdnAngleFindAngleResult;
struct __declspec(uuid("ce2e0e0d-f759-40ae-b27b-7e122926b4ce"))
/* interface */ IAgCrdnAngleFindAngleWithRateResult;
struct __declspec(uuid("a9bac738-5600-41a4-a781-5a3637d62ecc"))
/* interface */ IAgCrdnAngleFindResult;
struct __declspec(uuid("9e9617a5-faf7-4e7e-8274-3589bc6a7638"))
/* interface */ IAgCrdnAngleFindWithRateResult;
struct __declspec(uuid("72638cb1-a2f9-4541-9002-7303c4171824"))
/* interface */ IAgCrdnPlane;
enum AgECrdnPlaneType;
struct __declspec(uuid("0690c045-dff8-4e73-bb79-66eb79ba43d5"))
/* interface */ IAgCrdnPlaneFindInAxesResult;
struct __declspec(uuid("7ea9dfcf-2d40-4065-846f-c4f94ed9f26b"))
/* interface */ IAgCrdnPlaneFindInAxesWithRateResult;
struct __declspec(uuid("e2274ecd-7729-4c46-a513-04276243db80"))
/* interface */ IAgCrdnPlaneFindInSystemResult;
struct __declspec(uuid("8f9a9ed2-4d72-438e-be8c-497f3f69432d"))
/* interface */ IAgCrdnPlaneFindInSystemWithRateResult;
struct __declspec(uuid("8407b3e6-b6d2-4bb3-89c7-b0d46645fe94"))
/* interface */ IAgCrdnPlaneLabels;
struct __declspec(uuid("023e87ad-73c0-4525-b428-45894a232f58"))
/* interface */ IAgCrdnContext;
struct __declspec(uuid("d31f841c-054b-4176-88c4-18ddf8ebc267"))
/* dual interface */ _IAgCrdnEvaluateResult;
struct __declspec(uuid("ea8566c3-a79f-4c00-bd8a-d670b27b9ed0"))
/* dual interface */ _IAgCrdnEvaluateWithRateResult;
struct __declspec(uuid("e5ac174c-1fd8-4231-8b9e-12ad8c9a8705"))
/* dual interface */ _IAgCrdnEventIntervalResult;
struct __declspec(uuid("2007f9f9-9769-4412-ae52-4fc4eda3c4d6"))
/* dual interface */ _IAgCrdnEventFindOccurrenceResult;
struct __declspec(uuid("9872b7d3-5746-4a37-b37a-689785b9bbd5"))
/* dual interface */ _IAgCrdnFindTimesResult;
struct __declspec(uuid("73110f0f-b787-4a35-bd9d-f30cbe096747"))
/* dual interface */ _IAgCrdnIntervalsVectorResult;
struct __declspec(uuid("c0e7d4e8-7cd9-453f-8812-01cbeca40e79"))
/* dual interface */ IAgCrdnIntervalVectorCollection;
struct __declspec(uuid("f969cac9-f110-4b17-819f-359858259593"))
/* dual interface */ _IAgCrdnEventIntervalCollectionOccurredResult;
struct __declspec(uuid("7fd79848-ed11-4f46-a079-52d578be1797"))
/* dual interface */ _IAgCrdnIntervalListResult;
struct __declspec(uuid("e15a240a-cc6b-4f89-b9a2-99a2b0aa3802"))
/* dual interface */ _IAgCrdnIntervalVectorCollection;
struct __declspec(uuid("7c1c338f-987f-4e2d-9967-1c80dd58e4fc"))
/* dual interface */ _IAgCrdnConditionSetEvaluateResult;
struct __declspec(uuid("5d22194a-caf9-47d5-9816-b9dd4cead6d8"))
/* dual interface */ _IAgCrdnConditionSetEvaluateWithRateResult;
struct __declspec(uuid("cb7768a9-5e60-4e01-8dfe-5191c4cc68a1"))
/* dual interface */ _IAgCrdnCalcScalar;
enum AgECrdnCalcScalarType;
struct __declspec(uuid("33c9a2b6-243d-40bd-9b12-18b40dcf3db6"))
/* interface */ IAgCrdnEvaluateResult;
struct __declspec(uuid("3fae0fff-f951-4c57-9196-0cd55308ec13"))
/* interface */ IAgCrdnEvaluateWithRateResult;
enum AgECrdnKind;
struct __declspec(uuid("33182920-ec43-40ce-989b-36c84476e307"))
/* interface */ IAgCrdnTypeInfo;
struct __declspec(uuid("467d32e8-c564-480f-9be4-6a051e719771"))
/* interface */ IAgCrdn;
struct __declspec(uuid("d4dd0e8d-bca5-40df-bcec-03a812851d7b"))
/* dual interface */ IAgCrdnCollection;
struct __declspec(uuid("105bdfa9-38b4-4a9f-9e40-e582ca6a2e84"))
/* interface */ IAgCrdnEventArray;
enum AgECrdnEventArrayType;
struct __declspec(uuid("34bb38a4-28d5-4060-b1f6-c0634d66b786"))
/* interface */ IAgCrdnFindTimesResult;
struct __declspec(uuid("074125f8-1653-41d5-9d99-a426c521dbfe"))
/* dual interface */ _IAgCrdnCalcScalarAngle;
struct __declspec(uuid("19da7d2b-382f-4209-b712-e4f33b2235b2"))
/* dual interface */ _IAgCrdnCalcScalarConstant;
struct __declspec(uuid("e8f09ece-beeb-4d26-beaf-e2ad42f55c7a"))
/* dual interface */ _IAgCrdnCalcScalarCustom;
struct __declspec(uuid("6793731d-9f01-45da-b33b-7bac84a74683"))
/* dual interface */ _IAgCrdnCalcScalarDataElement;
struct __declspec(uuid("fe56d705-f750-4e1a-a44b-db81b2d7a25f"))
/* interface */ IAgCrdnInterp;
struct __declspec(uuid("7f3719ca-2ad8-449a-b5f5-11f7b493e93f"))
/* interface */ IAgCrdnSampling;
enum AgECrdnSaveDataOption;
struct __declspec(uuid("b70b81f2-d40d-4848-a9aa-f2b19a54ce84"))
/* dual interface */ _IAgCrdnCalcScalarDerivative;
struct __declspec(uuid("4318bd6c-46d2-40cd-aa10-d979048df4e5"))
/* interface */ IAgCrdnCalcScalar;
struct __declspec(uuid("7c040ac7-7aac-4686-818c-0e418efa8568"))
/* dual interface */ _IAgCrdnCalcScalarElapsedTime;
struct __declspec(uuid("97ebf8c3-5c4f-40fe-bfef-4d5dcb51d4fa"))
/* interface */ IAgCrdnEvent;
enum AgECrdnEventType;
struct __declspec(uuid("c41e3f8a-f959-411c-bb6c-34f25cd9db6f"))
/* interface */ IAgCrdnEventFindOccurrenceResult;
struct __declspec(uuid("775df1e3-76cf-4f16-84f4-342f4e23fa40"))
/* dual interface */ _IAgCrdnCalcScalarFactory;
struct __declspec(uuid("754ebfd4-0357-4d10-b7bb-6c94c82d35b1"))
/* dual interface */ _IAgCrdnCalcScalarFile;
struct __declspec(uuid("8b7f5f3d-907e-481c-8228-8d532c08be82"))
/* interface */ IAgCrdnEventIntervalResult;
enum AgECrdnFileInterpolatorType;
struct __declspec(uuid("4e26b9d4-5f7f-4be0-8475-2b95e299a62a"))
/* dual interface */ _IAgCrdnCalcScalarFixedAtTimeInstant;
struct __declspec(uuid("ba8e4911-2281-4ea1-9814-815cd825630c"))
/* dual interface */ _IAgCrdnCalcScalarFunction;
struct __declspec(uuid("6dffaa52-acdb-46c7-989a-0bbceaf2b7f7"))
/* interface */ IAgCrdnConverge;
struct __declspec(uuid("914d41a1-343e-4f5a-836f-74f1ccd97e0a"))
/* dual interface */ _IAgCrdnCalcScalarFunction2Var;
enum AgECrdnDimensionInheritance;
struct __declspec(uuid("58f240ca-fcbe-435d-8337-cb6743b48979"))
/* dual interface */ _IAgCrdnCalcScalarIntegral;
enum AgECrdnIntegrationWindowType;
struct __declspec(uuid("05336fc7-a0e0-4576-9f06-041020ab1a0e"))
/* interface */ IAgCrdnEventIntervalList;
enum AgECrdnEventIntervalListType;
struct __declspec(uuid("ea887c81-377e-4867-833e-5a8615046cdd"))
/* interface */ IAgCrdnIntervalListResult;
struct __declspec(uuid("9f4da27d-391e-44cb-814f-3031f80635ff"))
/* interface */ IAgCrdnIntegral;
struct __declspec(uuid("cdba106f-8103-4aeb-ac20-a4621fc6a8dd"))
/* dual interface */ _IAgCrdnCalcScalarPlugin;
struct __declspec(uuid("7b27e927-748d-4ac8-831e-61e29e955bab"))
/* dual interface */ _IAgCrdnCalcScalarSurfaceDistanceBetweenPoints;
struct __declspec(uuid("41073fa5-9719-424f-8679-074966bb5e56"))
/* dual interface */ _IAgCrdnCalcScalarVectorMagnitude;
struct __declspec(uuid("bd54d9da-fed8-461c-b558-c8c958d07e73"))
/* dual interface */ _IAgCrdnCondition;
enum AgECrdnConditionType;
struct __declspec(uuid("b853cfc2-f21a-44c4-a332-bd6b442142e2"))
/* dual interface */ _IAgCrdnConditionCombined;
enum AgECrdnConditionCombinedOperationType;
struct __declspec(uuid("f2090f5c-8394-48ba-ae93-4d3ec6e9ccfe"))
/* interface */ IAgCrdnCondition;
struct __declspec(uuid("a90627d1-60f5-43b7-a427-81c7c0f54a36"))
/* dual interface */ _IAgCrdnConditionFactory;
struct __declspec(uuid("afd205bc-c0ce-4179-9405-c0a5d82d86aa"))
/* dual interface */ _IAgCrdnConditionScalarBounds;
enum AgECrdnConditionThresholdOption;
struct __declspec(uuid("aa0903d2-653f-4476-ab53-a8cfad6548d2"))
/* dual interface */ _IAgCrdnConditionSet;
enum AgECrdnConditionSetType;
struct __declspec(uuid("6ba91a0b-ee1a-45eb-ae9f-ee845a133b4f"))
/* interface */ IAgCrdnConditionSetEvaluateResult;
struct __declspec(uuid("d077b2c6-087f-4891-87c7-2db5c8f3e1fb"))
/* interface */ IAgCrdnConditionSetEvaluateWithRateResult;
struct __declspec(uuid("389a641e-6ffc-4b4c-838e-27c1ee3e2fcc"))
/* dual interface */ _IAgCrdnConditionSetFactory;
struct __declspec(uuid("1ae76dc9-5dba-4a74-8c05-8638404e75a8"))
/* interface */ IAgCrdnConditionSet;
struct __declspec(uuid("fcbc85a4-335e-4daf-a9d0-a43126adcef2"))
/* dual interface */ _IAgCrdnConditionSetScalarThresholds;
struct __declspec(uuid("525393f6-aa73-48cc-b2e6-6fe874b8a68c"))
/* dual interface */ _IAgCrdnConverge;
struct __declspec(uuid("da99cc65-f15d-46b8-8431-d9bd4eec2855"))
/* dual interface */ _IAgCrdnConvergeBasic;
enum AgECrdnThreshConvergeSense;
struct __declspec(uuid("02571950-2396-4596-b35f-0aef51b02aab"))
/* dual interface */ _IAgCrdnDerivative;
struct __declspec(uuid("a387e6a5-acbe-4d35-b38e-3ae7de45aa16"))
/* dual interface */ _IAgCrdnDerivativeBasic;
struct __declspec(uuid("e280dce3-df5f-4e53-914c-2c4a883b326d"))
/* dual interface */ _IAgCrdnEvent;
struct __declspec(uuid("5675a754-f8c4-4515-ad6f-4cbd96363652"))
/* dual interface */ _IAgCrdnEventArray;
struct __declspec(uuid("4b63989e-c9b7-4c65-ab13-2051aa109dab"))
/* dual interface */ _IAgCrdnEventArrayConditionCrossings;
enum AgECrdnSatisfactionCrossing;
struct __declspec(uuid("b9fd61a7-d2eb-4f44-acdc-ff8738a9b8d6"))
/* dual interface */ _IAgCrdnEventArrayExtrema;
enum AgECrdnExtremumConstants;
struct __declspec(uuid("a2279830-ac20-4b90-9bff-f87297ee916c"))
/* dual interface */ _IAgCrdnEventArrayFactory;
struct __declspec(uuid("5d9a771f-480d-485e-b4ec-d4f331891639"))
/* dual interface */ _IAgCrdnEventArrayFiltered;
enum AgECrdnEventArrayFilterType;
struct __declspec(uuid("cde53017-4ce4-4d36-b54e-e5ce42af6f28"))
/* dual interface */ _IAgCrdnEventArrayFixedStep;
enum AgECrdnSampledReferenceTime;
struct __declspec(uuid("7e78db73-bb4e-4ee8-94c3-1eb905201e26"))
/* dual interface */ _IAgCrdnEventArrayFixedTimes;
struct __declspec(uuid("03ff21a3-5901-49d2-a456-c46e31190b37"))
/* dual interface */ _IAgCrdnEventArrayMerged;
struct __declspec(uuid("91fabb8a-8825-4062-a543-91be12d08d05"))
/* dual interface */ _IAgCrdnEventArraySignaled;
enum AgECrdnSignalSense;
struct __declspec(uuid("31f8ef59-5259-428e-b82f-05ec915d519a"))
/* interface */ IAgCrdnSignalDelay;
struct __declspec(uuid("90da99da-d56e-48a6-a5d8-c5efc0f946d4"))
/* dual interface */ _IAgCrdnEventArrayStartStopTimes;
enum AgECrdnStartStopOption;
struct __declspec(uuid("a446d8f3-4d1d-4025-ac82-9c4625c1c9e9"))
/* dual interface */ _IAgCrdnEventEpoch;
struct __declspec(uuid("f53e912f-53bc-4afe-b0f1-569e8f52331a"))
/* dual interface */ _IAgCrdnEventExtremum;
struct __declspec(uuid("ab92be81-0081-4631-8c76-898da1b09d33"))
/* dual interface */ _IAgCrdnEventFactory;
struct __declspec(uuid("4359ff91-520d-4484-ac92-1b23d38698b7"))
/* interface */ IAgCrdnEventSmartEpoch;
enum AgECrdnSmartEpochState;
struct __declspec(uuid("8310b06a-6f21-4d10-bdf5-0affc153e7b2"))
/* dual interface */ _IAgCrdnEventInterval;
enum AgECrdnEventIntervalType;
struct __declspec(uuid("c4c30b96-2547-40d4-b903-2104c1b5ad47"))
/* dual interface */ _IAgCrdnEventIntervalBetweenTimeInstants;
struct __declspec(uuid("24094317-6dbe-4718-a35a-d7c30ea951fa"))
/* dual interface */ _IAgCrdnEventIntervalCollection;
enum AgECrdnEventIntervalCollectionType;
struct __declspec(uuid("c8b0c679-523e-44f7-92d5-3aa4cbcb404f"))
/* interface */ IAgCrdnIntervalsVectorResult;
struct __declspec(uuid("dc3d45d7-0f86-4827-8668-94e2c6547779"))
/* interface */ IAgCrdnEventIntervalCollectionOccurredResult;
struct __declspec(uuid("96b1b03b-7949-4a38-a9d6-7839fb7ff943"))
/* dual interface */ _IAgCrdnEventIntervalCollectionCondition;
struct __declspec(uuid("3e49cc9a-3e99-4ede-8300-f84014b5145f"))
/* dual interface */ _IAgCrdnEventIntervalCollectionFactory;
struct __declspec(uuid("03f42d68-83f1-485e-8274-c28f25a70fe3"))
/* interface */ IAgCrdnEventIntervalCollection;
struct __declspec(uuid("4fed7bc5-a624-4bd0-874b-708a36cfa60e"))
/* dual interface */ _IAgCrdnEventIntervalCollectionLighting;
struct __declspec(uuid("8b2e52a3-0417-4ea8-94ed-847986a0032a"))
/* dual interface */ _IAgCrdnEventIntervalCollectionSignaled;
struct __declspec(uuid("931bb564-056a-4e4c-83b0-5e80e2b476a5"))
/* dual interface */ _IAgCrdnEventIntervalFactory;
struct __declspec(uuid("417650ed-02d8-4aab-945c-e3a62dfa5e53"))
/* interface */ IAgCrdnEventInterval;
struct __declspec(uuid("b650978b-229b-49a0-9f40-bd54103d61aa"))
/* dual interface */ _IAgCrdnEventIntervalFixed;
struct __declspec(uuid("9739b28e-e67e-4995-9383-d89f53a57d92"))
/* dual interface */ _IAgCrdnEventIntervalFixedDuration;
struct __declspec(uuid("17ffb697-50ca-418f-b6fd-2c6855d1d1cd"))
/* dual interface */ _IAgCrdnEventIntervalFromIntervalList;
enum AgECrdnIntervalSelection;
struct __declspec(uuid("a0b50b60-b42e-4346-90a2-12d06f348a94"))
/* dual interface */ _IAgCrdnEventIntervalList;
struct __declspec(uuid("d53464df-6d97-47c6-b455-85443047a6a1"))
/* dual interface */ _IAgCrdnEventIntervalListCondition;
struct __declspec(uuid("f3a8a2dd-3634-4a3c-a1fe-c4d2b546a524"))
/* dual interface */ _IAgCrdnEventIntervalListFactory;
struct __declspec(uuid("82c7f754-e2d9-4f84-a56a-d75d100ae3c4"))
/* dual interface */ _IAgCrdnEventIntervalListFile;
struct __declspec(uuid("a0b46faf-046d-4ae4-a38d-d9c3320de936"))
/* dual interface */ _IAgCrdnEventIntervalListFiltered;
struct __declspec(uuid("e8d4771a-048d-480b-8ed0-d75af6a6cb94"))
/* interface */ IAgCrdnPruneFilterFactory;
enum AgECrdnPruneFilter;
struct __declspec(uuid("e2e922af-bba6-455c-85e8-61a4871e28c2"))
/* interface */ IAgCrdnPruneFilter;
struct __declspec(uuid("d62fb700-753f-4c2a-8740-6b577262cfce"))
/* dual interface */ _IAgCrdnEventIntervalListFixed;
struct __declspec(uuid("1f335b30-06db-4c63-b278-70034b4cc93c"))
/* dual interface */ _IAgCrdnEventIntervalListMerged;
enum AgECrdnEventListMergeOperation;
struct __declspec(uuid("441c52e1-6c82-46f2-ad95-548a13422b8c"))
/* dual interface */ _IAgCrdnEventIntervalListScaled;
struct __declspec(uuid("e0d5b2d0-4fe7-4348-9d0d-19eb7430d9ac"))
/* dual interface */ _IAgCrdnEventIntervalListSignaled;
struct __declspec(uuid("fdcb0697-040f-4eb6-8ab4-dc3602f4eb6c"))
/* dual interface */ _IAgCrdnEventIntervalListTimeOffset;
struct __declspec(uuid("9052a14f-7df9-4093-a9c2-6022dd7cb0ea"))
/* dual interface */ _IAgCrdnEventIntervalScaled;
struct __declspec(uuid("404ba9c6-75df-453b-8d1c-62253f555b09"))
/* dual interface */ _IAgCrdnEventIntervalSignaled;
struct __declspec(uuid("9ad522cd-2270-4da3-a523-3b2a5c7af214"))
/* dual interface */ _IAgCrdnEventIntervalSmartInterval;
enum AgECrdnSmartIntervalState;
struct __declspec(uuid("5a59dc0e-9491-425f-a0f2-6927df3dc84b"))
/* dual interface */ _IAgCrdnEventIntervalTimeOffset;
struct __declspec(uuid("359189be-a12e-47cd-86ba-2fa73a0c86f7"))
/* dual interface */ _IAgCrdnEventSignaled;
struct __declspec(uuid("54a7c574-9048-4a4a-80da-265d8c0dd183"))
/* dual interface */ _IAgCrdnEventSmartEpoch;
struct __declspec(uuid("bf63d2e2-d488-4a92-867d-8330356eb761"))
/* dual interface */ _IAgCrdnEventStartStopTime;
struct __declspec(uuid("5d345587-5249-4f7e-9454-bbc2193fcea0"))
/* dual interface */ _IAgCrdnEventTimeOffset;
struct __declspec(uuid("2fbb86ec-8414-415f-b059-6c6d7f7ebfcc"))
/* dual interface */ _IAgCrdnFirstIntervalsFilter;
struct __declspec(uuid("ebf2a703-8e80-4c7f-9da3-316c03d00860"))
/* dual interface */ _IAgCrdnGapsFilter;
enum AgECrdnIntervalDurationKind;
struct __declspec(uuid("d8c8531d-86b9-41e9-ad8b-a802597561c4"))
/* dual interface */ _IAgCrdnIntegral;
struct __declspec(uuid("a6cfab24-dde3-4e97-b9e5-910b05448ff5"))
/* dual interface */ _IAgCrdnIntegralBasic;
enum AgECrdnIntegralType;
struct __declspec(uuid("ae8023ba-43a2-428f-8426-0ee67ac03277"))
/* dual interface */ _IAgCrdnInterp;
struct __declspec(uuid("8ecf9751-7619-4987-830c-b8ae19616f61"))
/* dual interface */ _IAgCrdnInterpBasic;
enum AgECrdnInterpolatorType;
struct __declspec(uuid("3a158d2a-016b-4059-a763-934f1859eb8e"))
/* dual interface */ _IAgCrdnIntervalsFilter;
struct __declspec(uuid("559c0f72-5c62-494a-aef0-d047d0f3da0d"))
/* dual interface */ _IAgCrdnLastIntervalsFilter;
struct __declspec(uuid("355cf23f-56e2-4006-b1dd-6f582eb38794"))
/* dual interface */ _IAgCrdnParameterSet;
enum AgECrdnParameterSetType;
struct __declspec(uuid("0ffd0699-8757-4575-b2f8-5dfa7903bd48"))
/* dual interface */ _IAgCrdnParameterSetAttitude;
struct __declspec(uuid("fe1f6c54-48b0-4f48-b978-fa05347bb5f1"))
/* dual interface */ _IAgCrdnParameterSetFactory;
struct __declspec(uuid("40e91ea6-63b0-4d3d-971c-2dc7b6a19c9d"))
/* interface */ IAgCrdnParameterSet;
struct __declspec(uuid("49f4df9f-ab69-4008-8f37-b25b44953021"))
/* dual interface */ _IAgCrdnParameterSetGroundTrajectory;
struct __declspec(uuid("fb3136c2-87dc-49b0-a8cb-dea63e9789e7"))
/* dual interface */ _IAgCrdnParameterSetOrbit;
struct __declspec(uuid("3ba59fc3-4d4d-4a0f-bf98-7fccb4fd161e"))
/* dual interface */ _IAgCrdnParameterSetTrajectory;
struct __declspec(uuid("02c0ff90-1cd1-4a47-8648-39979b0b20b3"))
/* dual interface */ _IAgCrdnParameterSetVector;
struct __declspec(uuid("cba5ebc5-a631-41c3-b055-9fd2e2a3c689"))
/* dual interface */ _IAgCrdnPruneFilter;
struct __declspec(uuid("79b793d7-4773-4821-b010-8c77279e44d2"))
/* dual interface */ _IAgCrdnPruneFilterFactory;
struct __declspec(uuid("b519187a-c63e-4063-813a-f5bda850d918"))
/* dual interface */ _IAgCrdnRelativeSatisfactionConditionFilter;
struct __declspec(uuid("fed414bf-7e31-4911-bcd3-7b8a524d6c91"))
/* dual interface */ _IAgCrdnSampling;
struct __declspec(uuid("2a3c7fc3-dcf4-465c-a918-8e5ca4d8c63b"))
/* dual interface */ _IAgCrdnSamplingBasic;
struct __declspec(uuid("0f1d3bc0-70fb-4782-8aa8-37f247dcec56"))
/* interface */ IAgCrdnSamplingMethod;
enum AgECrdnSamplingMethod;
struct __declspec(uuid("d05ba4a2-2154-470a-8fc0-b1772ee5a776"))
/* interface */ IAgCrdnSamplingMethodFactory;
struct __declspec(uuid("1ed10fd0-e26c-4eee-bd76-6bf1369fe6ea"))
/* dual interface */ _IAgCrdnSamplingCurvatureTolerance;
struct __declspec(uuid("63a6f441-5ffc-43b8-892b-dda92f045a22"))
/* dual interface */ _IAgCrdnSamplingFixedStep;
struct __declspec(uuid("ab22c1f4-825b-43a8-8bbc-e9d1353b5deb"))
/* dual interface */ _IAgCrdnSamplingMethod;
struct __declspec(uuid("8e706576-1496-47fe-9c10-4c8b44128034"))
/* dual interface */ _IAgCrdnSamplingMethodFactory;
struct __declspec(uuid("5038da0f-7b35-40f9-8d52-4e94d2e9c498"))
/* dual interface */ _IAgCrdnSamplingRelativeTolerance;
struct __declspec(uuid("d72ba182-46dc-42ce-b94f-5e689ff635bf"))
/* dual interface */ _IAgCrdnSatisfactionConditionFilter;
struct __declspec(uuid("f3dfb221-7723-4bc3-aed6-f5df59d39ded"))
/* dual interface */ _IAgCrdnSignalDelay;
struct __declspec(uuid("b08e7e7b-8e78-48ff-9143-3e5d1df8b832"))
/* dual interface */ _IAgCrdnSignalDelayBasic;
enum AgECrdnSignalPathReferenceSystem;
enum AgECrdnSpeedOptions;
struct __declspec(uuid("0ef57e38-0333-4372-8c2e-c227ffb04963"))
/* dual interface */ _IAgCrdnVolumeFactory;
enum AgECrdnVolumeType;
struct __declspec(uuid("e3bb7e4a-1e3a-429b-bcd3-40f2e469d28b"))
/* interface */ IAgCrdnVolume;
struct __declspec(uuid("93fa9c57-46f2-4457-a7e1-7b2e9dd0aa68"))
/* dual interface */ _IAgCrdnVolumeGridFactory;
enum AgECrdnVolumeGridType;
struct __declspec(uuid("a896ca88-8eec-4922-b677-5f653380cad4"))
/* interface */ IAgCrdnVolumeGrid;
struct __declspec(uuid("520af2d5-a8bb-4f8c-84ef-8a6adfcbb790"))
/* dual interface */ _IAgCrdnGridCoordinateDefinition;
enum AgECrdnVolumetricGridValuesMethodType;
struct __declspec(uuid("66f283d8-bd27-4cf3-9750-759e8ce9a889"))
/* interface */ IAgCrdnGridValuesMethod;
struct __declspec(uuid("dab20e4c-5930-472e-9727-a2b6187c3619"))
/* interface */ IAgCrdnGridValuesFixedStep;
struct __declspec(uuid("252af502-b1fa-447c-8a46-2c29cf8ea15e"))
/* interface */ IAgCrdnGridValuesFixedNumberOfSteps;
struct __declspec(uuid("4a43f951-2954-4c31-9504-ef0c46cdcd77"))
/* interface */ IAgCrdnGridValuesCustom;
struct __declspec(uuid("84ffbea2-0915-4eb5-a3e7-5dc11d5e6763"))
/* dual interface */ _IAgCrdnGridValuesCustom;
struct __declspec(uuid("0ba01255-f8de-4e48-b18e-ed1bac2e83f5"))
/* dual interface */ _IAgCrdnGridValuesFixedNumberOfSteps;
struct __declspec(uuid("93abd809-9244-41b4-a1f7-2cf1130cb2eb"))
/* dual interface */ _IAgCrdnGridValuesFixedStep;
struct __declspec(uuid("c2eefba1-8348-4cd6-8801-5fdf5d743b28"))
/* dual interface */ _IAgCrdnGridValuesMethod;
struct __declspec(uuid("76a31198-2ded-4104-960c-b5d22ca0a8fc"))
/* dual interface */ _IAgCrdnLightTimeDelay;
enum AgECrdnVolumeAberrationType;
enum AgECrdnVolumeClockHostType;
enum AgECrdnVolumeTimeSenseType;
struct __declspec(uuid("9a9baf58-07f3-41da-9a8a-9e1f3ace5e7b"))
/* dual interface */ _IAgCrdnVolume;
struct __declspec(uuid("cbd3a811-206c-4c3f-a202-028f6d0ad56d"))
/* dual interface */ _IAgCrdnVolumeCombined;
enum AgECrdnVolumeCombinedOperationType;
struct __declspec(uuid("dc911540-53d2-43d2-9459-70937c58e4ff"))
/* dual interface */ _IAgCrdnVolumeFromCalc;
struct __declspec(uuid("d9a9b8bd-a993-4eed-bd8a-87acaf3787ab"))
/* dual interface */ _IAgCrdnVolumeFromCondition;
struct __declspec(uuid("9c11661a-9022-4fad-999d-9cb9ae78829e"))
/* dual interface */ _IAgCrdnVolumeFromGrid;
enum AgECrdnVolumeFromGridEdgeType;
struct __declspec(uuid("520120b0-55ab-4980-8c05-5d6ced7c5b71"))
/* dual interface */ _IAgCrdnVolumeFromTimeSatisfaction;
struct __declspec(uuid("a1b09deb-3317-4693-ae28-b4f3e075006e"))
/* dual interface */ _IAgCrdnVolumeGrid;
struct __declspec(uuid("5cfb81ed-5057-45f0-9aae-448a9348c6f0"))
/* dual interface */ _IAgCrdnVolumeGridBearingAlt;
struct __declspec(uuid("ba874a99-2a7a-43d8-9a2b-262d345997b4"))
/* interface */ IAgCrdnGridCoordinateDefinition;
struct __declspec(uuid("9f90bc50-170c-4bbb-b584-9c5c0a06d9f3"))
/* dual interface */ _IAgCrdnVolumeGridCartesian;
struct __declspec(uuid("bd3ab594-49ac-4caa-a8f0-359855fce7a2"))
/* dual interface */ _IAgCrdnVolumeGridConstrained;
struct __declspec(uuid("6cb2b2c8-9597-421f-b14e-4a34846a0ef9"))
/* dual interface */ _IAgCrdnVolumeGridCylindrical;
struct __declspec(uuid("f4254fed-d01a-431e-b491-6ddabee16d7f"))
/* dual interface */ _IAgCrdnVolumeGridLatLonAlt;
struct __declspec(uuid("4cef6b2e-6b2b-4f4c-a06c-5e9af26a9231"))
/* dual interface */ _IAgCrdnVolumeGridResult;
struct __declspec(uuid("bd75470f-6215-4ca0-8298-5405cced6666"))
/* dual interface */ _IAgCrdnVolumeGridSpherical;
struct __declspec(uuid("a69cb73b-0f94-4307-855a-50893af14723"))
/* dual interface */ _IAgCrdnVolumeInview;
struct __declspec(uuid("c93a2ddb-d31b-4dfe-a50e-ee78724174b8"))
/* interface */ IAgCrdnLightTimeDelay;
struct __declspec(uuid("55ab8542-1ade-47d2-a27c-d9661b5bd544"))
/* dual interface */ _IAgCrdnVolumeLighting;
enum AgECrdnVolumeLightingConditionsType;
struct __declspec(uuid("0e20b24f-35c0-422a-a898-71ab55871ff6"))
/* dual interface */ _IAgCrdnVolumeOverTime;
enum AgECrdnVolumeOverTimeDurationType;
struct __declspec(uuid("14705c23-9ae9-423a-b7a6-b228111c3cea"))
/* dual interface */ IAgCrdnEventGroup;
struct __declspec(uuid("0fff4188-5c52-487a-8d00-5b47476e81e8"))
/* interface */ IAgCrdnEventFactory;
struct __declspec(uuid("1151e0b0-ed4f-4c9c-bb60-1a9b57fa5749"))
/* dual interface */ IAgCrdnEventIntervalGroup;
struct __declspec(uuid("c09f48d8-e8e4-4faa-b3a0-fe9e4b660a0d"))
/* interface */ IAgCrdnEventIntervalFactory;
struct __declspec(uuid("c5a28f39-e4b2-4884-8348-e7eed53077d8"))
/* dual interface */ IAgCrdnEventIntervalListGroup;
struct __declspec(uuid("2b301efb-32ba-4eb8-a552-696a0ea96986"))
/* interface */ IAgCrdnEventIntervalListFactory;
struct __declspec(uuid("5487ee2b-0c06-4210-846c-fc6f96be2699"))
/* dual interface */ IAgCrdnEventArrayGroup;
struct __declspec(uuid("bd55ec98-aed7-4308-8009-cb875857a410"))
/* interface */ IAgCrdnEventArrayFactory;
struct __declspec(uuid("0d0ada4a-4335-47ec-abba-53e7963cb29f"))
/* dual interface */ IAgCrdnCalcScalarGroup;
struct __declspec(uuid("b721cc07-4b96-41a8-adf5-9f593510556a"))
/* interface */ IAgCrdnCalcScalarFactory;
struct __declspec(uuid("b6efec55-4af0-4eb8-85de-2de3ef0e8026"))
/* dual interface */ IAgCrdnEventIntervalCollectionGroup;
struct __declspec(uuid("debf915f-f274-4947-9228-6c21811e28bb"))
/* interface */ IAgCrdnEventIntervalCollectionFactory;
struct __declspec(uuid("0c3e1aea-08cf-4550-aafc-5abb6b7a6ecb"))
/* dual interface */ IAgCrdnParameterSetGroup;
struct __declspec(uuid("0fef5317-b241-4077-8ed3-784f94b97096"))
/* interface */ IAgCrdnParameterSetFactory;
struct __declspec(uuid("88590338-434e-440d-bee8-e87dc861a08c"))
/* dual interface */ IAgCrdnConditionGroup;
struct __declspec(uuid("3d6d9a5a-2086-4fe6-8942-a1fe9724c660"))
/* interface */ IAgCrdnConditionFactory;
struct __declspec(uuid("dc75e9b5-4cb3-4a98-ad6b-fbb6f4133a3f"))
/* dual interface */ IAgCrdnConditionSetGroup;
struct __declspec(uuid("3941cb08-d1bc-4a27-8aaa-ffbf4ab7e313"))
/* interface */ IAgCrdnConditionSetFactory;
struct __declspec(uuid("62bfaa70-7c0a-4915-9e23-b2942e13424f"))
/* dual interface */ IAgCrdnVolumeGridGroup;
struct __declspec(uuid("e4ec1b42-a11a-4d33-aab8-f0e2a49e713e"))
/* interface */ IAgCrdnVolumeGridFactory;
struct __declspec(uuid("b0b316a6-2d1b-47e8-9930-5e55a259787c"))
/* dual interface */ IAgCrdnVolumeGroup;
struct __declspec(uuid("4e0163a7-c611-4724-afa0-e0cca42aac21"))
/* interface */ IAgCrdnVolumeFactory;
struct __declspec(uuid("4318a512-9878-43ff-b164-0468de5d0489"))
/* interface */ IAgCrdnCalcScalarAngle;
struct __declspec(uuid("d90a78e7-f838-4a2a-a633-535b1946c3e2"))
/* interface */ IAgCrdnCalcScalarConstant;
struct __declspec(uuid("f9a780de-1313-4658-aceb-a7625ae81144"))
/* interface */ IAgCrdnCalcScalarCustom;
struct __declspec(uuid("17210592-1092-471c-ae93-a692bce967ec"))
/* interface */ IAgCrdnCalcScalarDataElement;
struct __declspec(uuid("0d735261-5f8c-417d-8715-e2a60b095a48"))
/* interface */ IAgCrdnCalcScalarDerivative;
struct __declspec(uuid("8ac55c36-48b4-40b3-a495-e96fac2fd111"))
/* interface */ IAgCrdnCalcScalarElapsedTime;
struct __declspec(uuid("bd2f45bb-8758-4673-93b1-aff7bb3c0d28"))
/* interface */ IAgCrdnCalcScalarFile;
struct __declspec(uuid("c03d8807-25e2-4999-98c6-079b6029d217"))
/* interface */ IAgCrdnCalcScalarFixedAtTimeInstant;
struct __declspec(uuid("ec1ace74-8efa-4cb3-9fad-0fc1c2a7c6fa"))
/* interface */ IAgCrdnCalcScalarFunction;
struct __declspec(uuid("5c7cc61b-0ce3-4e53-9ee8-d3e024a5fadf"))
/* interface */ IAgCrdnCalcScalarFunction2Var;
struct __declspec(uuid("e40885ec-4849-4350-b692-e403bd5114b8"))
/* interface */ IAgCrdnCalcScalarIntegral;
struct __declspec(uuid("8fa2e8e8-2173-4cec-8f53-d4ca79a7c9ae"))
/* interface */ IAgCrdnCalcScalarPlugin;
struct __declspec(uuid("90fffbf2-81b2-43d2-bfd7-ffb049d195c6"))
/* interface */ IAgCrdnCalcScalarSurfaceDistanceBetweenPoints;
struct __declspec(uuid("438e4e85-6018-4105-ae10-b774229297e1"))
/* interface */ IAgCrdnCalcScalarVectorMagnitude;
struct __declspec(uuid("7fb43b48-0809-4e46-9bba-58c139d30048"))
/* interface */ IAgCrdnConditionCombined;
struct __declspec(uuid("6cf360c7-967b-4535-a584-06fe767211e4"))
/* interface */ IAgCrdnConditionScalarBounds;
struct __declspec(uuid("45a85086-3cbe-4292-bdde-297920da12a5"))
/* interface */ IAgCrdnConditionSetScalarThresholds;
struct __declspec(uuid("f2763c04-0b38-46f1-8313-2d54e6611280"))
/* interface */ IAgCrdnConvergeBasic;
struct __declspec(uuid("8c5f72d2-855f-4eb2-b3bd-0fcc6c957abb"))
/* interface */ IAgCrdnDerivative;
struct __declspec(uuid("79deb489-ab82-40a5-8def-66b2cf433ac5"))
/* interface */ IAgCrdnDerivativeBasic;
struct __declspec(uuid("03baf2c3-e001-4ca2-8b79-c880a92a2eb9"))
/* interface */ IAgCrdnEventArrayConditionCrossings;
struct __declspec(uuid("0593f5f4-2714-494d-ad0b-c82fe134922e"))
/* interface */ IAgCrdnEventArrayExtrema;
struct __declspec(uuid("14a981f0-4366-40b9-a808-9fd6838e7fd6"))
/* interface */ IAgCrdnEventArrayFiltered;
struct __declspec(uuid("660c4d05-8204-42d8-ac4a-f0bbc5ea8bf9"))
/* interface */ IAgCrdnEventArrayFixedStep;
struct __declspec(uuid("ff98c921-92f9-4f59-9654-475c9c5fa8a1"))
/* interface */ IAgCrdnEventArrayFixedTimes;
struct __declspec(uuid("4291b7a5-dfe6-4945-b17d-8baac53ba1c0"))
/* interface */ IAgCrdnEventArrayMerged;
struct __declspec(uuid("26efa01f-3fa3-46a2-bcf4-aac32d889371"))
/* interface */ IAgCrdnEventArraySignaled;
struct __declspec(uuid("dfde7497-2b48-49f6-9706-e307f20416a5"))
/* interface */ IAgCrdnEventArrayStartStopTimes;
struct __declspec(uuid("0dac5013-afb1-40e0-a958-d48fdc514edd"))
/* interface */ IAgCrdnEventEpoch;
struct __declspec(uuid("c009ba0d-3451-4220-b00d-a99f376b4937"))
/* interface */ IAgCrdnEventExtremum;
struct __declspec(uuid("a85eda97-303d-4074-8fd7-6a01099577f8"))
/* interface */ IAgCrdnEventIntervalBetweenTimeInstants;
struct __declspec(uuid("147862fb-718e-4d18-8ee0-7e9ffbcebad9"))
/* interface */ IAgCrdnEventIntervalCollectionCondition;
struct __declspec(uuid("df1f03e1-fe58-4e9d-bd06-97731cc06d47"))
/* interface */ IAgCrdnEventIntervalCollectionLighting;
struct __declspec(uuid("2843017e-c869-47ad-8925-5a0506fca9a3"))
/* interface */ IAgCrdnEventIntervalCollectionSignaled;
struct __declspec(uuid("bcafe1b0-724a-43e4-9ff9-efd7d1e01a91"))
/* interface */ IAgCrdnEventIntervalFixed;
struct __declspec(uuid("df16d0f8-9caa-4b58-992e-08ed9871eedf"))
/* interface */ IAgCrdnEventIntervalFixedDuration;
struct __declspec(uuid("c10d6d58-a095-45a4-b72e-d9dd35d06e6b"))
/* interface */ IAgCrdnEventIntervalFromIntervalList;
struct __declspec(uuid("d6c3e35a-2cac-4189-8654-8052b1adc2e4"))
/* interface */ IAgCrdnEventIntervalListCondition;
struct __declspec(uuid("cdd73f4b-2dfc-4369-92d1-8e8da2e530df"))
/* interface */ IAgCrdnEventIntervalListFile;
struct __declspec(uuid("9c3731e0-3707-4c6d-a588-62944ad229cb"))
/* interface */ IAgCrdnEventIntervalListFiltered;
struct __declspec(uuid("534ae4c1-5149-4916-813b-c62e4823db25"))
/* interface */ IAgCrdnEventIntervalListFixed;
struct __declspec(uuid("7ebe6812-2259-46c9-8452-1c82e965f1e2"))
/* interface */ IAgCrdnEventIntervalListMerged;
struct __declspec(uuid("ee42809a-71e5-4175-8b74-3aebc934d9fc"))
/* interface */ IAgCrdnEventIntervalListScaled;
struct __declspec(uuid("04cecb39-8578-439a-a425-7a8e73a23166"))
/* interface */ IAgCrdnEventIntervalListSignaled;
struct __declspec(uuid("6acabfdf-25ff-4724-91e9-c42499013ecc"))
/* interface */ IAgCrdnEventIntervalListTimeOffset;
struct __declspec(uuid("96df1693-2dce-4a29-b184-954b96cb7b5a"))
/* interface */ IAgCrdnEventIntervalScaled;
struct __declspec(uuid("d653ece5-3591-4050-9aa6-43cd31d13382"))
/* interface */ IAgCrdnEventIntervalSignaled;
struct __declspec(uuid("9a3cbccf-8658-40e0-b570-90ce6b8c39ae"))
/* interface */ IAgCrdnEventIntervalSmartInterval;
struct __declspec(uuid("87552842-f6b9-49a4-bc7f-e4e9061be83b"))
/* interface */ IAgCrdnEventIntervalTimeOffset;
struct __declspec(uuid("f1050833-737e-46b9-a3ea-6dbd1a83fe61"))
/* interface */ IAgCrdnEventSignaled;
struct __declspec(uuid("1745b133-0030-43e5-b8c2-d9c7d664c1c7"))
/* interface */ IAgCrdnEventStartStopTime;
struct __declspec(uuid("fb4cece9-c0bc-4847-9ae6-b5e85536b6e9"))
/* interface */ IAgCrdnEventTimeOffset;
struct __declspec(uuid("8fccb82d-0faf-4455-9b7f-58ee56c9687c"))
/* interface */ IAgCrdnFirstIntervalsFilter;
struct __declspec(uuid("983abdbd-bc24-461a-b6cb-03d628a52ca2"))
/* interface */ IAgCrdnGapsFilter;
struct __declspec(uuid("3c992a8b-5045-492c-8c10-dcc7d9d48bc8"))
/* interface */ IAgCrdnIntegralBasic;
struct __declspec(uuid("9313f744-eb98-422e-b397-3628b2c69288"))
/* interface */ IAgCrdnInterpBasic;
struct __declspec(uuid("c1c50016-68de-4166-aa51-11d6d0687798"))
/* interface */ IAgCrdnIntervalsFilter;
struct __declspec(uuid("462f1294-5223-456d-a3e1-dca54ac0df1b"))
/* interface */ IAgCrdnLastIntervalsFilter;
struct __declspec(uuid("b9f1cde2-233b-42ee-a1c6-416cddc535e9"))
/* interface */ IAgCrdnParameterSetAttitude;
struct __declspec(uuid("c08238ea-f46b-45c6-84cb-362f3ee55ad0"))
/* interface */ IAgCrdnParameterSetGroundTrajectory;
struct __declspec(uuid("262d287a-26bb-40f7-8ad4-671a27d59a1d"))
/* interface */ IAgCrdnParameterSetOrbit;
struct __declspec(uuid("78eac44f-b0af-4f81-829d-333a541cf42c"))
/* interface */ IAgCrdnParameterSetTrajectory;
struct __declspec(uuid("4771409b-8c6f-4381-a7b3-d7b90eda79ec"))
/* interface */ IAgCrdnParameterSetVector;
struct __declspec(uuid("9bb14aa5-6900-4027-a2f9-5c12edecb221"))
/* interface */ IAgCrdnRelativeSatisfactionConditionFilter;
struct __declspec(uuid("19a5b028-1cfd-42e6-b5c2-c46b3b509362"))
/* interface */ IAgCrdnSamplingBasic;
struct __declspec(uuid("9b3751b6-2f00-4d9b-8c86-67f64f9a8180"))
/* interface */ IAgCrdnSamplingCurvatureTolerance;
struct __declspec(uuid("cab2c4f4-3712-4f09-ba1b-33907d91b9c7"))
/* interface */ IAgCrdnSamplingFixedStep;
struct __declspec(uuid("ed00c8f4-c58e-4c91-983e-57b84555da4f"))
/* interface */ IAgCrdnSamplingRelativeTolerance;
struct __declspec(uuid("6657fbc2-4d70-42cd-aa95-71019373549a"))
/* interface */ IAgCrdnSatisfactionConditionFilter;
struct __declspec(uuid("c57a69fe-370c-4d41-b821-25efd70b87ed"))
/* interface */ IAgCrdnSignalDelayBasic;
struct __declspec(uuid("0d3642fd-5252-4c80-ab0d-c87809f06862"))
/* interface */ IAgCrdnVolumeCombined;
struct __declspec(uuid("a1210bff-c5c3-4551-a4d9-3473baf5b929"))
/* interface */ IAgCrdnVolumeFromCalc;
struct __declspec(uuid("84303f43-9955-4879-a42a-1aaa747891a4"))
/* interface */ IAgCrdnVolumeFromCondition;
struct __declspec(uuid("ac31cf77-28de-458e-8d76-836b431a5d91"))
/* interface */ IAgCrdnVolumeFromGrid;
struct __declspec(uuid("e4b03775-990c-4d79-bdad-e121e0526953"))
/* interface */ IAgCrdnVolumeFromTimeSatisfaction;
struct __declspec(uuid("596939d4-d287-4a58-aef0-b8d43ac6b784"))
/* interface */ IAgCrdnVolumeGridBearingAlt;
struct __declspec(uuid("e5212616-3f37-4c40-9e0b-f925f199d4de"))
/* interface */ IAgCrdnVolumeGridCartesian;
struct __declspec(uuid("1a7c195f-c976-40a1-bfe0-a6672eae8dee"))
/* interface */ IAgCrdnVolumeGridConstrained;
struct __declspec(uuid("d2da83c9-cd3d-4c77-abee-4a9fd4eaeb38"))
/* interface */ IAgCrdnVolumeGridCylindrical;
struct __declspec(uuid("0d9fde14-4912-4512-b961-f587bf69c3ba"))
/* interface */ IAgCrdnVolumeGridLatLonAlt;
struct __declspec(uuid("39d7fd06-c18a-4b35-bb2e-5801e89facd4"))
/* interface */ IAgCrdnVolumeGridResult;
struct __declspec(uuid("dcd0a443-1a4f-4e56-9077-2a439a78fffe"))
/* interface */ IAgCrdnVolumeGridSpherical;
struct __declspec(uuid("d4ec9566-d108-44dc-a75f-e9137f2f3b35"))
/* interface */ IAgCrdnVolumeInview;
struct __declspec(uuid("2bd23c45-f637-4ae8-ab18-fadd8eec2559"))
/* interface */ IAgCrdnVolumeLighting;
struct __declspec(uuid("424054e9-e380-4a75-ad97-738c9e2fae75"))
/* interface */ IAgCrdnVolumeOverTime;
enum AgECrdnVolumeResultVectorRequest;
struct /* coclass */ AgCrdnEvaluateResult;
struct /* coclass */ AgCrdnEvaluateWithRateResult;
struct /* coclass */ AgCrdnEventIntervalResult;
struct /* coclass */ AgCrdnEventFindOccurrenceResult;
struct /* coclass */ AgCrdnFindTimesResult;
struct /* coclass */ AgCrdnIntervalsVectorResult;
struct /* coclass */ AgCrdnEventIntervalCollectionOccurredResult;
struct /* coclass */ AgCrdnIntervalListResult;
struct /* coclass */ AgCrdnIntervalVectorCollection;
struct /* coclass */ AgCrdnEventGroup;
struct /* coclass */ AgCrdnEventIntervalGroup;
struct /* coclass */ AgCrdnEventIntervalListGroup;
struct /* coclass */ AgCrdnEventArrayGroup;
struct /* coclass */ AgCrdnCalcScalarGroup;
struct /* coclass */ AgCrdnEventIntervalCollectionGroup;
struct /* coclass */ AgCrdnParameterSetGroup;
struct /* coclass */ AgCrdnConditionGroup;
struct /* coclass */ AgCrdnConditionSetGroup;
struct /* coclass */ AgCrdnConditionSetEvaluateResult;
struct /* coclass */ AgCrdnConditionSetEvaluateWithRateResult;
struct /* coclass */ AgCrdnVolumeGridGroup;
struct /* coclass */ AgCrdnVolumeGroup;
struct /* coclass */ AgCrdnCalcScalar;
struct /* coclass */ AgCrdnCalcScalarAngle;
struct /* coclass */ AgCrdnCalcScalarConstant;
struct /* coclass */ AgCrdnCalcScalarCustom;
struct /* coclass */ AgCrdnCalcScalarDataElement;
struct /* coclass */ AgCrdnCalcScalarDerivative;
struct /* coclass */ AgCrdnCalcScalarElapsedTime;
struct /* coclass */ AgCrdnCalcScalarFactory;
struct /* coclass */ AgCrdnCalcScalarFile;
struct /* coclass */ AgCrdnCalcScalarFixedAtTimeInstant;
struct /* coclass */ AgCrdnCalcScalarFunction;
struct /* coclass */ AgCrdnCalcScalarFunction2Var;
struct /* coclass */ AgCrdnCalcScalarIntegral;
struct /* coclass */ AgCrdnCalcScalarPlugin;
struct /* coclass */ AgCrdnCalcScalarSurfaceDistanceBetweenPoints;
struct /* coclass */ AgCrdnCalcScalarVectorMagnitude;
struct /* coclass */ AgCrdnCondition;
struct /* coclass */ AgCrdnConditionCombined;
struct /* coclass */ AgCrdnConditionFactory;
struct /* coclass */ AgCrdnConditionScalarBounds;
struct /* coclass */ AgCrdnConditionSet;
struct /* coclass */ AgCrdnConditionSetFactory;
struct /* coclass */ AgCrdnConditionSetScalarThresholds;
struct /* coclass */ AgCrdnConverge;
struct /* coclass */ AgCrdnConvergeBasic;
struct /* coclass */ AgCrdnDerivative;
struct /* coclass */ AgCrdnDerivativeBasic;
struct /* coclass */ AgCrdnEvent;
struct /* coclass */ AgCrdnEventArray;
struct /* coclass */ AgCrdnEventArrayConditionCrossings;
struct /* coclass */ AgCrdnEventArrayExtrema;
struct /* coclass */ AgCrdnEventArrayFactory;
struct /* coclass */ AgCrdnEventArrayFiltered;
struct /* coclass */ AgCrdnEventArrayFixedStep;
struct /* coclass */ AgCrdnEventArrayFixedTimes;
struct /* coclass */ AgCrdnEventArrayMerged;
struct /* coclass */ AgCrdnEventArraySignaled;
struct /* coclass */ AgCrdnEventArrayStartStopTimes;
struct /* coclass */ AgCrdnEventEpoch;
struct /* coclass */ AgCrdnEventExtremum;
struct /* coclass */ AgCrdnEventFactory;
struct /* coclass */ AgCrdnEventInterval;
struct /* coclass */ AgCrdnEventIntervalBetweenTimeInstants;
struct /* coclass */ AgCrdnEventIntervalCollection;
struct /* coclass */ AgCrdnEventIntervalCollectionCondition;
struct /* coclass */ AgCrdnEventIntervalCollectionFactory;
struct /* coclass */ AgCrdnEventIntervalCollectionLighting;
struct /* coclass */ AgCrdnEventIntervalCollectionSignaled;
struct /* coclass */ AgCrdnEventIntervalFactory;
struct /* coclass */ AgCrdnEventIntervalFixed;
struct /* coclass */ AgCrdnEventIntervalFixedDuration;
struct /* coclass */ AgCrdnEventIntervalFromIntervalList;
struct /* coclass */ AgCrdnEventIntervalList;
struct /* coclass */ AgCrdnEventIntervalListCondition;
struct /* coclass */ AgCrdnEventIntervalListFactory;
struct /* coclass */ AgCrdnEventIntervalListFile;
struct /* coclass */ AgCrdnEventIntervalListFiltered;
struct /* coclass */ AgCrdnEventIntervalListFixed;
struct /* coclass */ AgCrdnEventIntervalListMerged;
struct /* coclass */ AgCrdnEventIntervalListScaled;
struct /* coclass */ AgCrdnEventIntervalListSignaled;
struct /* coclass */ AgCrdnEventIntervalListTimeOffset;
struct /* coclass */ AgCrdnEventIntervalScaled;
struct /* coclass */ AgCrdnEventIntervalSignaled;
struct /* coclass */ AgCrdnEventIntervalSmartInterval;
struct /* coclass */ AgCrdnEventIntervalTimeOffset;
struct /* coclass */ AgCrdnEventSignaled;
struct /* coclass */ AgCrdnEventSmartEpoch;
struct /* coclass */ AgCrdnEventStartStopTime;
struct /* coclass */ AgCrdnEventTimeOffset;
struct /* coclass */ AgCrdnFirstIntervalsFilter;
struct /* coclass */ AgCrdnGapsFilter;
struct /* coclass */ AgCrdnIntegral;
struct /* coclass */ AgCrdnIntegralBasic;
struct /* coclass */ AgCrdnInterp;
struct /* coclass */ AgCrdnInterpBasic;
struct /* coclass */ AgCrdnIntervalsFilter;
struct /* coclass */ AgCrdnLastIntervalsFilter;
struct /* coclass */ AgCrdnParameterSet;
struct /* coclass */ AgCrdnParameterSetAttitude;
struct /* coclass */ AgCrdnParameterSetFactory;
struct /* coclass */ AgCrdnParameterSetGroundTrajectory;
struct /* coclass */ AgCrdnParameterSetOrbit;
struct /* coclass */ AgCrdnParameterSetTrajectory;
struct /* coclass */ AgCrdnParameterSetVector;
struct /* coclass */ AgCrdnPruneFilter;
struct /* coclass */ AgCrdnPruneFilterFactory;
struct /* coclass */ AgCrdnRelativeSatisfactionConditionFilter;
struct /* coclass */ AgCrdnSampling;
struct /* coclass */ AgCrdnSamplingBasic;
struct /* coclass */ AgCrdnSamplingCurvatureTolerance;
struct /* coclass */ AgCrdnSamplingFixedStep;
struct /* coclass */ AgCrdnSamplingMethod;
struct /* coclass */ AgCrdnSamplingMethodFactory;
struct /* coclass */ AgCrdnSamplingRelativeTolerance;
struct /* coclass */ AgCrdnSatisfactionConditionFilter;
struct /* coclass */ AgCrdnSignalDelay;
struct /* coclass */ AgCrdnSignalDelayBasic;
struct /* coclass */ AgCrdnVolumeFactory;
struct /* coclass */ AgCrdnVolumeGridFactory;
struct /* coclass */ AgCrdnGridCoordinateDefinition;
struct /* coclass */ AgCrdnGridValuesCustom;
struct /* coclass */ AgCrdnGridValuesFixedNumberOfSteps;
struct /* coclass */ AgCrdnGridValuesFixedStep;
struct /* coclass */ AgCrdnGridValuesMethod;
struct /* coclass */ AgCrdnLightTimeDelay;
struct /* coclass */ AgCrdnVolume;
struct /* coclass */ AgCrdnVolumeCombined;
struct /* coclass */ AgCrdnVolumeFromCalc;
struct /* coclass */ AgCrdnVolumeFromCondition;
struct /* coclass */ AgCrdnVolumeFromGrid;
struct /* coclass */ AgCrdnVolumeFromTimeSatisfaction;
struct /* coclass */ AgCrdnVolumeGrid;
struct /* coclass */ AgCrdnVolumeGridBearingAlt;
struct /* coclass */ AgCrdnVolumeGridCartesian;
struct /* coclass */ AgCrdnVolumeGridConstrained;
struct /* coclass */ AgCrdnVolumeGridCylindrical;
struct /* coclass */ AgCrdnVolumeGridLatLonAlt;
struct /* coclass */ AgCrdnVolumeGridResult;
struct /* coclass */ AgCrdnVolumeGridSpherical;
struct /* coclass */ AgCrdnVolumeInview;
struct /* coclass */ AgCrdnVolumeLighting;
struct /* coclass */ AgCrdnVolumeOverTime;
struct __declspec(uuid("42bfcb93-fbe1-4353-a5ff-af079c590dd0"))
/* interface */ IAgCrdnTimeProperties;
struct __declspec(uuid("1f7d829d-6d18-42a8-81e0-d244e6cefcfb"))
/* interface */ IAgCrdnRefTo;
struct __declspec(uuid("acb36377-3892-43be-9424-3c1ddcf18136"))
/* interface */ IAgCrdnTemplate;
struct __declspec(uuid("a5c99f29-a41c-48c4-bbd5-6567600827ca"))
/* interface */ IAgCrdnInstance;
struct __declspec(uuid("a3440ec7-3a82-46cd-b9eb-0a18cbdc0d56"))
/* interface */ IAgCrdnPointRefTo;
struct __declspec(uuid("24bf4c8a-0812-44d4-bdb0-9cef948d00a1"))
/* interface */ IAgCrdnVectorRefTo;
struct __declspec(uuid("05c81762-066f-4d5a-9988-727506df1229"))
/* interface */ IAgCrdnAxesRefTo;
struct __declspec(uuid("7dac2622-4e37-401b-b281-8cfe8046b69d"))
/* interface */ IAgCrdnAngleRefTo;
struct __declspec(uuid("af863b51-5186-4e13-a465-b503b66abc10"))
/* interface */ IAgCrdnSystemRefTo;
struct __declspec(uuid("9c321218-16da-4d15-bea8-56a2245b7e7d"))
/* interface */ IAgCrdnPlaneRefTo;
struct __declspec(uuid("d8145fd4-79c7-4a6d-ba2c-5247abf7a063"))
/* interface */ IAgCrdnAxesAlignedAndConstrained;
struct __declspec(uuid("f6a0f14a-7803-43ca-a898-2634735b8728"))
/* interface */ IAgCrdnAxesAngularOffset;
struct __declspec(uuid("e0dcee9c-7a5b-4b11-9f3a-db252af8064d"))
/* interface */ IAgCrdnAxesFixedAtEpoch;
struct __declspec(uuid("e6277f29-a5d7-46f6-99c7-9698e30f9960"))
/* interface */ IAgCrdnAxesBPlane;
struct __declspec(uuid("88481483-f927-4def-897a-c8319ddd1582"))
/* interface */ IAgCrdnCentralBodyRefTo;
struct __declspec(uuid("c35a2058-0d3f-4f95-aaa4-ae8e6d9a1026"))
/* interface */ IAgCrdnCentralBody;
enum AgECrdnDirectionType;
struct __declspec(uuid("b73ace31-c908-4878-bea4-944d65846c4c"))
/* interface */ IAgCrdnAxesCustomScript;
struct __declspec(uuid("bd66f711-35f9-47d7-8c78-05c95889c011"))
/* interface */ IAgCrdnAxesAttitudeFile;
struct __declspec(uuid("e3731911-f146-4eb2-834f-9affdbfff281"))
/* interface */ IAgCrdnAxesFixed;
struct __declspec(uuid("4e2d3a19-fbe1-4d41-ae43-38daac653edb"))
/* interface */ IAgCrdnAxesModelAttach;
struct __declspec(uuid("b2200d86-5e02-4791-b94e-7c229b0a2182"))
/* interface */ IAgCrdnAxesSpinning;
struct __declspec(uuid("6bb4fef3-3932-45e9-b52a-5c36820ef0a5"))
/* interface */ IAgCrdnAxesOnSurface;
struct __declspec(uuid("0c91bf49-1b71-45d7-abd0-98dbdad34107"))
/* interface */ IAgCrdnAxesTrajectory;
enum AgECrdnTrajectoryAxesType;
struct __declspec(uuid("21bbdc68-9a88-47a3-8e18-4401cfec0111"))
/* interface */ IAgCrdnAxesLagrangeLibration;
enum AgECrdnLagrangeLibrationPointType;
struct __declspec(uuid("ba4417ea-d6da-456d-803e-75543bf30a3b"))
/* dual interface */ IAgCrdnCentralBodyCollection;
struct __declspec(uuid("f8279298-ed5c-4655-b642-6b85661959ee"))
/* interface */ IAgCrdnAxesCommonTasks;
struct __declspec(uuid("1862720f-767c-467f-a911-2905853515ff"))
/* interface */ IAgCrdnAxesSamplingResult;
struct __declspec(uuid("204eda76-8e12-4e0c-9b32-d42dad61ee8b"))
/* interface */ IAgCrdnAxesSamplingIntervalCollection;
struct __declspec(uuid("b10c89e4-3e2e-48ae-a7d8-b6e863ee48fe"))
/* interface */ IAgCrdnAxesSamplingInterval;
struct __declspec(uuid("8f500ad6-9487-4385-92f0-bf2fb4671994"))
/* interface */ IAgCrdnAxesAtTimeInstant;
struct __declspec(uuid("98256780-18af-4b9d-8b43-156a16a689d4"))
/* interface */ IAgCrdnAxesPlugin;
struct __declspec(uuid("58cdacf2-a1b1-4eb4-a42e-2968db2c23a7"))
/* interface */ IAgCrdnAngleBetweenVectors;
struct __declspec(uuid("71a95217-e717-4a05-a1db-1ef4f1594356"))
/* interface */ IAgCrdnAngleBetweenPlanes;
struct __declspec(uuid("fd019b8b-3181-4ad7-bc55-a4c605f49189"))
/* interface */ IAgCrdnAngleDihedral;
struct __declspec(uuid("44ee6a16-5aa4-448f-91d6-9c06dee06f9f"))
/* interface */ IAgCrdnAngleRotation;
enum AgECrdnDisplayAxisSelector;
struct __declspec(uuid("9bbca03c-7746-4b88-addd-2d7de43d146c"))
/* interface */ IAgCrdnAngleToPlane;
enum AgECrdnSignedAngleType;
struct __declspec(uuid("c2d0b928-45c3-4816-81ad-24977b49ede5"))
/* interface */ IAgCrdnPlaneNormal;
struct __declspec(uuid("2e56315e-9245-4afb-babc-b05164996a75"))
/* interface */ IAgCrdnPlaneQuadrant;
enum AgECrdnQuadrantType;
struct __declspec(uuid("56482904-d0a0-45fe-b208-69e1ba0b981a"))
/* interface */ IAgCrdnPlaneTrajectory;
struct __declspec(uuid("0b7c56bd-9808-4f0e-82de-c2689411bfd1"))
/* interface */ IAgCrdnPlaneTriad;
struct __declspec(uuid("f45c47e9-c6b9-4b90-a275-94b37554f0a0"))
/* interface */ IAgCrdnPointBPlane;
enum AgECrdnPointBPlaneType;
struct __declspec(uuid("92ebd1f9-3cbb-4a3f-aba2-e1ec2fdc890b"))
/* interface */ IAgCrdnPointFile;
struct __declspec(uuid("eeb578e7-29c8-4c61-93f7-3f662d2123df"))
/* interface */ IAgCrdnPointFixedInSystem;
struct __declspec(uuid("278a5b79-66b3-4f52-af6b-8eac49ba3c15"))
/* interface */ IAgCrdnPointGrazing;
struct __declspec(uuid("35499fce-d8d0-40e6-884e-c9e527e5d84d"))
/* interface */ IAgCrdnPointGlint;
struct __declspec(uuid("e1f764f2-ba4d-4c7b-a529-60c89c8fde65"))
/* interface */ IAgCrdnPointCovarianceGrazing;
struct __declspec(uuid("c25bb12f-a1f6-4e77-9f25-a3aeddda9336"))
/* interface */ IAgCrdnPointPlaneIntersection;
struct __declspec(uuid("66fd09f9-17e7-4bf7-8509-a72b3022f71d"))
/* interface */ IAgCrdnPointOnSurface;
enum AgECrdnReferenceShapeType;
enum AgECrdnSurfaceType;
struct __declspec(uuid("be73aa6d-87d7-4f6f-bd16-89a930d8dc52"))
/* interface */ IAgCrdnPointModelAttach;
struct __declspec(uuid("0e4c6c72-9940-41d7-b31f-96cfab560d29"))
/* interface */ IAgCrdnPointPlaneProjection;
struct __declspec(uuid("d0244d49-f0de-44a2-a275-9cd0e0fc5af3"))
/* interface */ IAgCrdnPointLagrangeLibration;
struct __declspec(uuid("342624b6-ce5f-4591-8cdf-66925f1175e1"))
/* interface */ IAgCrdnPointCommonTasks;
struct __declspec(uuid("66b7efaf-92bd-473a-9f3f-94af085536a6"))
/* interface */ IAgCrdnPointSamplingResult;
struct __declspec(uuid("e89bb7d2-2dc1-49a4-8cc9-bdcba8c1c91f"))
/* interface */ IAgCrdnPointSamplingIntervalCollection;
struct __declspec(uuid("38475e97-53bd-4e11-ac30-9ac653994f51"))
/* interface */ IAgCrdnPointSamplingInterval;
struct __declspec(uuid("11cfbb8d-a84a-414e-b09a-82fb0ca20560"))
/* interface */ IAgCrdnPointCentBodyIntersect;
enum AgECrdnIntersectionSurface;
struct __declspec(uuid("3d97f8e6-7cde-4e1e-a55b-fa6d276842dc"))
/* interface */ IAgCrdnPointAtTimeInstant;
struct __declspec(uuid("ae5062e5-6d60-4065-aec0-850d37363040"))
/* interface */ IAgCrdnPointPlugin;
struct __declspec(uuid("c1bc8e47-7a99-4c64-a78e-e255a6dd3d06"))
/* interface */ IAgCrdnPointCBFixedOffset;
struct __declspec(uuid("fd28496d-0692-4a17-b23c-25db611f10ff"))
/* interface */ IAgCrdnSystemAssembled;
struct __declspec(uuid("44b483ff-3c51-4b5a-bf1d-aeffeaa2738c"))
/* interface */ IAgCrdnSystemOnSurface;
struct __declspec(uuid("2403d36f-dcbb-4aa1-83d0-d23e6a6b3995"))
/* interface */ IAgCrdnLLAPosition;
struct __declspec(uuid("de1c4334-6702-4138-bae3-f309f9c4f7ec"))
/* interface */ IAgCrdnSystemCommonTasks;
struct __declspec(uuid("291a8c3a-75a5-4875-851c-a8d8a7268f6e"))
/* interface */ IAgCrdnVectorAngleRate;
struct __declspec(uuid("bc6612f1-ee40-478a-844a-0a78cfabab43"))
/* interface */ IAgCrdnVectorApoapsis;
enum AgECrdnMeanElementTheory;
struct __declspec(uuid("bbc197bf-d2dc-4271-b2b2-fbb3bd977e4d"))
/* interface */ IAgCrdnVectorFixedAtEpoch;
struct __declspec(uuid("43107159-4a44-4a79-b0e9-6bc78fdf8d0f"))
/* interface */ IAgCrdnVectorAngularVelocity;
struct __declspec(uuid("abf7c2fa-53ca-4fc3-b6e4-c7903a27cd7f"))
/* interface */ IAgCrdnVectorConing;
enum AgECrdnSweepMode;
struct __declspec(uuid("1a3b7ac3-2641-4f15-b911-665ad2cacaea"))
/* interface */ IAgCrdnVectorCross;
struct __declspec(uuid("1be4bb24-c01d-4bcb-acda-0bcd1662e195"))
/* interface */ IAgCrdnVectorCustomScript;
struct __declspec(uuid("73a634fd-887f-49cf-b264-ee195cf5a310"))
/* interface */ IAgCrdnVectorDerivative;
struct __declspec(uuid("fe75da7b-95ca-40d5-9157-dfdbff37afe0"))
/* interface */ IAgCrdnVectorDisplacement;
struct __declspec(uuid("142042ce-e1c1-48f4-a5ce-435424e9c35b"))
/* interface */ IAgCrdnVectorTwoPlanesIntersection;
struct __declspec(uuid("6b18ba87-6002-43df-b47f-fc98483b017b"))
/* interface */ IAgCrdnVectorModelAttach;
struct __declspec(uuid("d7feed45-c34d-4425-9f82-dd031d7a34e0"))
/* interface */ IAgCrdnVectorProjection;
struct __declspec(uuid("6da9245c-c8ca-4bd3-838a-da3f0acc0174"))
/* interface */ IAgCrdnVectorScaled;
struct __declspec(uuid("4441e2e8-0693-4d33-afa6-d21dc4edca08"))
/* interface */ IAgCrdnVectorEccentricity;
struct __declspec(uuid("681bc23d-31f2-4a99-ab6a-4084147b57f1"))
/* interface */ IAgCrdnVectorFixedInAxes;
struct __declspec(uuid("dece7ece-8e15-44f7-81ff-2446156c8870"))
/* interface */ IAgCrdnVectorLineOfNodes;
struct __declspec(uuid("73d75810-5870-441c-8a18-4ac3c63c9ef7"))
/* interface */ IAgCrdnVectorOrbitAngularMomentum;
struct __declspec(uuid("e0d9a87f-af7e-4878-9ffc-546f5e72c6e7"))
/* interface */ IAgCrdnVectorOrbitNormal;
struct __declspec(uuid("8230ae2e-44dd-462f-ad5e-e361de4b9d7b"))
/* interface */ IAgCrdnVectorPeriapsis;
struct __declspec(uuid("5997268f-57db-44dd-84c7-a64297f08243"))
/* interface */ IAgCrdnVectorReflection;
struct __declspec(uuid("9f5cb9a3-3304-4d66-a2c3-3512f2e0dcdb"))
/* interface */ IAgCrdnVectorDirectionToStar;
struct __declspec(uuid("f4c852d0-fa44-4400-957e-94af113df4d1"))
/* interface */ IAgCrdnVectorFixedAtTimeInstant;
struct __declspec(uuid("31609bff-fb51-44f0-bb0d-f3b91e0db1fd"))
/* interface */ IAgCrdnVectorLinearCombination;
struct __declspec(uuid("858b354b-829f-4e6c-a190-00bc3d029d1a"))
/* interface */ IAgCrdnVectorProjectAlongVector;
struct __declspec(uuid("99c901af-bb66-425e-8c71-191a7a1efe2a"))
/* interface */ IAgCrdnVectorScalarLinearCombination;
struct __declspec(uuid("717d7d9d-8b09-4917-8c5d-7187172ed6eb"))
/* interface */ IAgCrdnVectorScalarScaled;
enum AgECrdnVectorScaledDimensionInheritance;
struct __declspec(uuid("79ce4395-6ed0-4d34-9cf1-809fbcb07624"))
/* interface */ IAgCrdnVectorVelocityAcceleration;
struct __declspec(uuid("b8a213a9-c314-401e-bfbe-bf6bb1e73b49"))
/* interface */ IAgCrdnVectorPlugin;
struct __declspec(uuid("779484ea-9df4-457d-b706-df26accb4d62"))
/* interface */ IAgCrdnVectorFactory;
struct __declspec(uuid("c9b581c8-924b-4b02-8200-afdb9e5ccbe0"))
/* interface */ IAgCrdnAxesFactory;
struct __declspec(uuid("8ccfed8a-aa26-455d-bff2-dbe1442d8260"))
/* interface */ IAgCrdnSystemFactory;
struct __declspec(uuid("297eba15-4759-413c-bc71-cbadd3d2188a"))
/* interface */ IAgCrdnPointFactory;
struct __declspec(uuid("4d5f9a02-f1c2-453f-80f3-c4060a631b0e"))
/* interface */ IAgCrdnPlaneFactory;
struct __declspec(uuid("ae8d2b4b-280f-4add-b10d-2cec8f9b1c96"))
/* interface */ IAgCrdnAngleFactory;
struct __declspec(uuid("3716db65-5320-4f8b-afff-f8e327d402ab"))
/* dual interface */ IAgCrdnVectorGroup;
struct __declspec(uuid("c37a21e9-3889-4755-bcb0-b61e0d26a494"))
/* dual interface */ IAgCrdnPointGroup;
struct __declspec(uuid("ddf7e8de-9591-4576-bdb2-625df4284bf9"))
/* dual interface */ IAgCrdnAngleGroup;
struct __declspec(uuid("4575eeb5-14eb-42a2-ac6d-adc7bca7b019"))
/* dual interface */ IAgCrdnAxesGroup;
struct __declspec(uuid("7763447a-fa3e-4735-bb9b-bd65364ad155"))
/* dual interface */ IAgCrdnPlaneGroup;
struct __declspec(uuid("891b3190-8a13-4c42-915d-e35ebacb085e"))
/* dual interface */ IAgCrdnSystemGroup;
struct __declspec(uuid("ec6fbbaf-4c41-4599-bd45-56433e380770"))
/* interface */ IAgCrdnProvider;
struct __declspec(uuid("e7bfd4df-41ee-4b0a-beb7-b794ec04e940"))
/* interface */ IAgCrdnWellKnownSystems;
struct __declspec(uuid("59deacdd-6dd1-4511-9188-acce55a35c59"))
/* interface */ IAgCrdnWellKnownEarthSystems;
struct __declspec(uuid("8291275d-e3ca-4e66-97d7-a8e00aa36fa3"))
/* interface */ IAgCrdnWellKnownSunSystems;
struct __declspec(uuid("c5082aa3-7a3b-4693-98ee-c7d1f5c43fa7"))
/* interface */ IAgCrdnWellKnownAxes;
struct __declspec(uuid("e7969854-a78e-4e79-8e22-69b288a25901"))
/* interface */ IAgCrdnWellKnownEarthAxes;
struct __declspec(uuid("f2b371da-53ac-4c40-bc26-ce65b477255e"))
/* interface */ IAgCrdnWellKnownSunAxes;
struct __declspec(uuid("75b84ca5-141f-4bc5-992a-6cbadae0d4ca"))
/* interface */ IAgCrdnRoot;
struct __declspec(uuid("00129044-9364-4a92-94aa-469bac097f69"))
/* interface */ IAgCrdnMethodCallResult;
struct __declspec(uuid("003e2010-2023-469d-b47a-39182a5bd1c6"))
/* dual interface */ _IAgCrdn;
struct __declspec(uuid("84bdbac2-f89d-4bec-9d96-bfbb071cb2b4"))
/* dual interface */ _IAgCrdnTypeInfo;
struct __declspec(uuid("734ddad0-8a01-43bd-869b-79acbab62db0"))
/* dual interface */ _IAgCrdnTemplate;
struct __declspec(uuid("b7bb004a-1fdb-4ddf-a930-0a184f6c13a0"))
/* dual interface */ _IAgCrdnInstance;
struct __declspec(uuid("22f80d9e-4098-42ce-b89e-9fcbe079f962"))
/* dual interface */ _IAgCrdnPointRefTo;
struct __declspec(uuid("42a01f63-a4fb-489c-ae33-6357c2ec4e94"))
/* dual interface */ _IAgCrdnVectorRefTo;
struct __declspec(uuid("933acb2b-8db8-4508-a570-ebf286e01fe3"))
/* dual interface */ _IAgCrdnAxesRefTo;
struct __declspec(uuid("5d7d691b-7159-4c31-9c92-e8ca0ce55c78"))
/* dual interface */ _IAgCrdnAngleRefTo;
struct __declspec(uuid("f9520e0c-81da-4a0d-ae00-fe6f13b21f33"))
/* dual interface */ _IAgCrdnSystemRefTo;
struct __declspec(uuid("12a213e0-09b3-4dc5-a9a7-970e3aee5266"))
/* dual interface */ _IAgCrdnPlaneRefTo;
struct __declspec(uuid("b19f264e-2a85-49ee-85db-8479953062e8"))
/* dual interface */ _IAgCrdnVector;
struct __declspec(uuid("29895bef-9c71-4d8b-91d5-ac46e47ea2e5"))
/* dual interface */ _IAgCrdnAxesLabels;
struct __declspec(uuid("58e677e0-5d18-4a9d-8ac9-aebbcd4ecdda"))
/* dual interface */ _IAgCrdnAxes;
struct __declspec(uuid("ae4eb755-6735-4d43-b337-782b00c7ae6b"))
/* dual interface */ _IAgCrdnPoint;
struct __declspec(uuid("5da0f216-cb0c-43f4-a428-be7c15e4f010"))
/* dual interface */ _IAgCrdnSystem;
struct __declspec(uuid("f667e946-2b2e-4ca8-8155-7b45882a1e33"))
/* dual interface */ _IAgCrdnAngle;
struct __declspec(uuid("9e0169fa-03b6-42c8-bc0e-bf9bedae8725"))
/* dual interface */ _IAgCrdnPlaneLabels;
struct __declspec(uuid("55e946b1-949b-4302-9d6b-e3931d850e90"))
/* dual interface */ _IAgCrdnPlane;
struct __declspec(uuid("7cb19b07-7f9a-4c86-a50b-b02515e4b794"))
/* dual interface */ _IAgCrdnAxesAlignedAndConstrained;
struct __declspec(uuid("c4d90572-5305-4829-84f4-14f2254cf5ee"))
/* dual interface */ _IAgCrdnAxesAngularOffset;
struct __declspec(uuid("c821ecc0-875e-4727-bf38-4336ee7b9632"))
/* dual interface */ _IAgCrdnAxesFixedAtEpoch;
struct __declspec(uuid("e9f6fc78-4703-4055-a63a-81c773411661"))
/* dual interface */ _IAgCrdnAxesBPlane;
struct __declspec(uuid("dd00eb00-6326-4346-ad8a-295692e0b1f3"))
/* dual interface */ _IAgCrdnAxesCustomScript;
struct __declspec(uuid("417843c4-43bb-4059-8117-0b1f422a88be"))
/* dual interface */ _IAgCrdnAxesAttitudeFile;
struct __declspec(uuid("d60130b1-4028-4406-808c-2bf6f1b5f26b"))
/* dual interface */ _IAgCrdnAxesFixed;
struct __declspec(uuid("56f94105-d5d2-47b1-bd82-eeb3d7af65ea"))
/* dual interface */ _IAgCrdnAxesModelAttach;
struct __declspec(uuid("debd1e7d-a56c-456e-aece-345f224bcd6a"))
/* dual interface */ _IAgCrdnAxesSpinning;
struct __declspec(uuid("29f42195-2797-4e00-b6f8-4b1fc6db4b47"))
/* dual interface */ _IAgCrdnAxesOnSurface;
struct __declspec(uuid("a9c56b8c-cf59-42bb-b3a1-a51890b9cc97"))
/* dual interface */ _IAgCrdnAxesTrajectory;
struct __declspec(uuid("dda28b21-3bc9-476c-81aa-d2eead4d538d"))
/* dual interface */ _IAgCrdnAxesLagrangeLibration;
struct __declspec(uuid("eee8bd1f-5429-4447-a50a-95497769bda8"))
/* dual interface */ _IAgCrdnAxesCommonTasks;
struct __declspec(uuid("000abb14-2b52-4717-b914-3879e5c65a1c"))
/* dual interface */ _IAgCrdnAxesAtTimeInstant;
struct __declspec(uuid("216a1874-2604-4687-93b4-72d6e689d531"))
/* dual interface */ _IAgCrdnAxesPlugin;
struct __declspec(uuid("6efe060e-6fc3-408b-a6b9-e3038fc3ab48"))
/* dual interface */ _IAgCrdnAngleBetweenVectors;
struct __declspec(uuid("23911d72-9a02-4fd4-b839-5c7c1dba6cd0"))
/* dual interface */ _IAgCrdnAngleBetweenPlanes;
struct __declspec(uuid("e87904e6-b03e-4138-aa8e-0077456a6386"))
/* dual interface */ _IAgCrdnAngleDihedral;
struct __declspec(uuid("649e692b-a14f-4bfe-b007-95b1389748bb"))
/* dual interface */ _IAgCrdnAngleRotation;
struct __declspec(uuid("fdabe3bf-231d-4596-a11e-41b8376d5958"))
/* dual interface */ _IAgCrdnAngleToPlane;
struct __declspec(uuid("9a2b7af4-8cf8-4b98-8211-41ddadc48b10"))
/* dual interface */ _IAgCrdnPlaneNormal;
struct __declspec(uuid("f898b607-c5ad-4e1e-823d-f56b50ea5a92"))
/* dual interface */ _IAgCrdnPlaneQuadrant;
struct __declspec(uuid("d3407190-00ac-4c28-8174-7517f5338a53"))
/* dual interface */ _IAgCrdnPlaneTrajectory;
struct __declspec(uuid("b225024e-8c5d-44b4-8efb-8caa4698a6a1"))
/* dual interface */ _IAgCrdnPlaneTriad;
struct __declspec(uuid("8486e489-4cde-4766-ab28-b8f14006c584"))
/* dual interface */ _IAgCrdnPointBPlane;
struct __declspec(uuid("eabe2be3-2a1f-46af-bac9-4eb9440494b9"))
/* dual interface */ _IAgCrdnPointFile;
struct __declspec(uuid("dd7be20c-0397-4529-8aaf-41f0391893b6"))
/* dual interface */ _IAgCrdnPointFixedInSystem;
struct __declspec(uuid("69755d0f-9c74-49ca-9dc4-776150b77ccc"))
/* dual interface */ _IAgCrdnPointGrazing;
struct __declspec(uuid("30f950b7-6302-4537-b66a-4f95c0820110"))
/* dual interface */ _IAgCrdnPointGlint;
struct __declspec(uuid("f9996e01-88d0-460a-9a5e-47d158fa1a88"))
/* dual interface */ _IAgCrdnPointCovarianceGrazing;
struct __declspec(uuid("135c564a-06f1-4058-b576-8734c4f877ef"))
/* dual interface */ _IAgCrdnPointPlaneIntersection;
struct __declspec(uuid("1274a4c8-ae18-409a-bce4-b2dd307cb5f1"))
/* dual interface */ _IAgCrdnPointOnSurface;
struct __declspec(uuid("fc399d17-d4be-4420-8614-08033b0778e6"))
/* dual interface */ _IAgCrdnPointModelAttach;
struct __declspec(uuid("f6f48bd0-59ad-4e64-8075-7c75626deef0"))
/* dual interface */ _IAgCrdnPointPlaneProjection;
struct __declspec(uuid("208c918b-7597-4b67-bea9-62e9b1a000a4"))
/* dual interface */ _IAgCrdnPointLagrangeLibration;
struct __declspec(uuid("bcb8b69c-46b3-4abd-bdb2-02a291925f0e"))
/* dual interface */ _IAgCrdnPointCommonTasks;
struct __declspec(uuid("fb55912d-ca4b-4ce0-ae53-f4927d9cb488"))
/* dual interface */ _IAgCrdnPointCentBodyIntersect;
struct __declspec(uuid("709d80ee-53a7-42b5-9dfb-f6ab61c6d0ea"))
/* dual interface */ _IAgCrdnPointAtTimeInstant;
struct __declspec(uuid("1d4b6d94-3a8c-4452-a734-1ef27e4227c1"))
/* dual interface */ _IAgCrdnPointPlugin;
struct __declspec(uuid("cd2db27c-415a-4cf4-a167-765d868357dd"))
/* dual interface */ _IAgCrdnPointCBFixedOffset;
struct __declspec(uuid("557242bf-e6cf-48d9-b317-51ff48ee417b"))
/* dual interface */ _IAgCrdnSystemAssembled;
struct __declspec(uuid("60ab961c-a38d-4ced-9bf2-4c31e658dd70"))
/* dual interface */ _IAgCrdnSystemOnSurface;
struct __declspec(uuid("cbb42f76-887a-41a0-a641-2c940b3cede4"))
/* dual interface */ _IAgCrdnLLAPosition;
struct __declspec(uuid("6ccb8283-f2e7-4fcd-9b9c-02c92075690e"))
/* dual interface */ _IAgCrdnSystemCommonTasks;
struct __declspec(uuid("7f599133-0304-491b-9526-c26145630ef7"))
/* dual interface */ _IAgCrdnVectorAngleRate;
struct __declspec(uuid("fd6fcf7a-15b3-427e-a3d4-d109d3de01d4"))
/* dual interface */ _IAgCrdnVectorApoapsis;
struct __declspec(uuid("702fda88-0a6b-445f-812a-34bf14d0eeb5"))
/* dual interface */ _IAgCrdnVectorFixedAtEpoch;
struct __declspec(uuid("09fca0c7-8a28-4743-9895-6cd10fcde801"))
/* dual interface */ _IAgCrdnVectorAngularVelocity;
struct __declspec(uuid("a548ccaf-99bc-4827-bc3c-2c29143221d8"))
/* dual interface */ _IAgCrdnVectorConing;
struct __declspec(uuid("0bf50c55-802f-4cb2-a694-64c8b0ef8d96"))
/* dual interface */ _IAgCrdnVectorCross;
struct __declspec(uuid("95039913-eafe-4419-a2d0-207e99107a9c"))
/* dual interface */ _IAgCrdnVectorCustomScript;
struct __declspec(uuid("c7fbf147-dd17-4bfb-8f51-8bce0756fdbc"))
/* dual interface */ _IAgCrdnVectorDerivative;
struct __declspec(uuid("d4a8a7fb-b868-4390-ae7f-60c988e21e57"))
/* dual interface */ _IAgCrdnVectorDisplacement;
struct __declspec(uuid("4503fa69-bab2-4c17-abf0-eb75f4f4d090"))
/* dual interface */ _IAgCrdnVectorTwoPlanesIntersection;
struct __declspec(uuid("d089211f-4ee3-45b9-a03d-c538deb43fb6"))
/* dual interface */ _IAgCrdnVectorModelAttach;
struct __declspec(uuid("8d749a58-1d7d-4b63-816d-b5d6ccdba402"))
/* dual interface */ _IAgCrdnVectorProjection;
struct __declspec(uuid("ea0b683f-4ff4-475b-a951-dec753c9716f"))
/* dual interface */ _IAgCrdnVectorScaled;
struct __declspec(uuid("05230012-e9ea-4aa1-b34b-afa12420c787"))
/* dual interface */ _IAgCrdnVectorEccentricity;
struct __declspec(uuid("e66e9194-6578-42fc-8485-cd757bfc3b3f"))
/* dual interface */ _IAgCrdnVectorFixedInAxes;
struct __declspec(uuid("6b17f4b8-ccf4-485f-84fc-d0f4ff563e06"))
/* dual interface */ _IAgCrdnVectorLineOfNodes;
struct __declspec(uuid("572ed90d-ba21-4ad4-9377-c982216dd2a1"))
/* dual interface */ _IAgCrdnVectorOrbitAngularMomentum;
struct __declspec(uuid("a8b6c5c7-5f4f-4c30-ab64-e009a4a6d17b"))
/* dual interface */ _IAgCrdnVectorOrbitNormal;
struct __declspec(uuid("08756195-06fb-488b-ac72-ce0c5cd31787"))
/* dual interface */ _IAgCrdnVectorPeriapsis;
struct __declspec(uuid("15ccd2b4-131e-4742-bcd7-3fb7f6894eb2"))
/* dual interface */ _IAgCrdnVectorReflection;
struct __declspec(uuid("9d056d4c-789f-4dbb-a185-f621bfab8556"))
/* dual interface */ _IAgCrdnVectorDirectionToStar;
struct __declspec(uuid("4145db79-5240-4d23-aa51-54bca4b82db8"))
/* dual interface */ _IAgCrdnVectorFixedAtTimeInstant;
struct __declspec(uuid("291bb6fd-fb56-4fb8-8e59-05bcd45c9b50"))
/* dual interface */ _IAgCrdnVectorLinearCombination;
struct __declspec(uuid("1cd36fd6-90ec-4e11-b2cd-e94b522cdf1f"))
/* dual interface */ _IAgCrdnVectorProjectAlongVector;
struct __declspec(uuid("dd17ccbb-1f73-4e24-a800-45962ac17e27"))
/* dual interface */ _IAgCrdnVectorScalarLinearCombination;
struct __declspec(uuid("06378377-106d-48f3-aa44-f9be72916880"))
/* dual interface */ _IAgCrdnVectorScalarScaled;
struct __declspec(uuid("3d19c67b-13ca-4c73-b462-38970af86fc0"))
/* dual interface */ _IAgCrdnVectorVelocityAcceleration;
struct __declspec(uuid("8b2275e0-bcd6-40d7-8729-4d9406ccb462"))
/* dual interface */ _IAgCrdnVectorPlugin;
struct __declspec(uuid("950401c6-7058-49a7-b79c-4e48900258e7"))
/* dual interface */ _IAgCrdnVectorFactory;
struct __declspec(uuid("7e07b2da-e83d-4623-a4e4-79966a4be21a"))
/* dual interface */ _IAgCrdnAxesFactory;
struct __declspec(uuid("31a664b9-a0c1-4a27-a014-5f94cbb91d3f"))
/* dual interface */ _IAgCrdnSystemFactory;
struct __declspec(uuid("4014f206-7af8-4c25-8593-57b741e1f080"))
/* dual interface */ _IAgCrdnPointFactory;
struct __declspec(uuid("9ee81b3f-a979-4932-9b34-9a4391d12f8a"))
/* dual interface */ _IAgCrdnPlaneFactory;
struct __declspec(uuid("c00a055f-2aeb-4922-a7f8-2b74cda79f84"))
/* dual interface */ _IAgCrdnAngleFactory;
struct __declspec(uuid("c9920c10-01b0-45fe-9329-61ec8d3efc56"))
/* dual interface */ _IAgCrdnProvider;
struct __declspec(uuid("787544bb-090f-4bab-be34-117c3cf6a561"))
/* dual interface */ _IAgCrdnRoot;
struct __declspec(uuid("dbdd94c5-07fc-474d-aa9d-353c820f94c2"))
/* dual interface */ _IAgCrdnWellKnownEarthSystems;
struct __declspec(uuid("635003c5-db7b-48b9-a615-bc23f41be7dd"))
/* dual interface */ _IAgCrdnWellKnownEarthAxes;
struct __declspec(uuid("8700e0f9-73d7-4b2c-a698-faada6db7260"))
/* dual interface */ _IAgCrdnWellKnownSunSystems;
struct __declspec(uuid("9e0178ef-fefc-4174-9bfb-b44a6b2d80b3"))
/* dual interface */ _IAgCrdnWellKnownSunAxes;
struct __declspec(uuid("26de0981-60cc-456e-825a-88a01c82cef2"))
/* dual interface */ _IAgCrdnWellKnownSystems;
struct __declspec(uuid("4f4fd026-0478-464f-9faf-981c2e58f663"))
/* dual interface */ _IAgCrdnWellKnownAxes;
struct __declspec(uuid("c08b5b79-651c-4d3e-b63d-a5570d687614"))
/* dual interface */ _IAgCrdnMethodCallResult;
struct __declspec(uuid("bf28e8be-e0ca-41b8-83ca-7f44dff12088"))
/* dual interface */ _IAgCrdnInterval;
struct __declspec(uuid("536ea481-2b29-4c4b-a51b-7bda6901664f"))
/* dual interface */ _IAgCrdnCentralBody;
struct __declspec(uuid("970a9a97-f1b9-4454-b979-c217ffd2fffb"))
/* dual interface */ _IAgCrdnCentralBodyRefTo;
struct __declspec(uuid("bde0e568-a251-4aa2-b520-02e379ca7035"))
/* dual interface */ _IAgCrdnPointSamplingResult;
struct __declspec(uuid("7aa0f683-0858-411e-a303-e80e27e3ef5a"))
/* dual interface */ _IAgCrdnPointSamplingInterval;
struct __declspec(uuid("9f3a4cd3-1770-47b2-937d-44dcb7b2cd73"))
/* dual interface */ _IAgCrdnPointSamplingIntervalCollection;
struct __declspec(uuid("e227c3e6-d68b-4384-99a0-df06b91fd26f"))
/* dual interface */ _IAgCrdnAxesSamplingResult;
struct __declspec(uuid("161d1930-dc69-48b8-801a-9039953d0882"))
/* dual interface */ _IAgCrdnAxesSamplingInterval;
struct __declspec(uuid("6dfb8265-5d6c-4aff-b970-5c71fbc15091"))
/* dual interface */ _IAgCrdnAxesSamplingIntervalCollection;
struct /* coclass */ AgCrdnGeneric;
struct /* coclass */ AgCrdnTypeInfo;
struct /* coclass */ AgCrdnInstance;
struct /* coclass */ AgCrdnTemplate;
struct /* coclass */ AgCrdnPointRefTo;
struct /* coclass */ AgCrdnVectorRefTo;
struct /* coclass */ AgCrdnAxesRefTo;
struct /* coclass */ AgCrdnAngleRefTo;
struct /* coclass */ AgCrdnSystemRefTo;
struct /* coclass */ AgCrdnPlaneRefTo;
struct /* coclass */ AgCrdnVector;
struct /* coclass */ AgCrdnAxesLabels;
struct /* coclass */ AgCrdnAxes;
struct /* coclass */ AgCrdnPoint;
struct /* coclass */ AgCrdnSystem;
struct /* coclass */ AgCrdnAngle;
struct /* coclass */ AgCrdnPlaneLabels;
struct /* coclass */ AgCrdnPlane;
struct /* coclass */ AgCrdnAxesAlignedAndConstrained;
struct /* coclass */ AgCrdnAxesAngularOffset;
struct /* coclass */ AgCrdnAxesFixedAtEpoch;
struct /* coclass */ AgCrdnAxesBPlane;
struct /* coclass */ AgCrdnAxesCustomScript;
struct /* coclass */ AgCrdnAxesAttitudeFile;
struct /* coclass */ AgCrdnAxesFixed;
struct /* coclass */ AgCrdnAxesModelAttach;
struct /* coclass */ AgCrdnAxesSpinning;
struct /* coclass */ AgCrdnAxesOnSurface;
struct /* coclass */ AgCrdnAxesTrajectory;
struct /* coclass */ AgCrdnAxesLagrangeLibration;
struct /* coclass */ AgCrdnAxesCommonTasks;
struct /* coclass */ AgCrdnAxesAtTimeInstant;
struct /* coclass */ AgCrdnAxesPlugin;
struct /* coclass */ AgCrdnAngleBetweenVectors;
struct /* coclass */ AgCrdnAngleBetweenPlanes;
struct /* coclass */ AgCrdnAngleDihedral;
struct /* coclass */ AgCrdnAngleRotation;
struct /* coclass */ AgCrdnAngleToPlane;
struct /* coclass */ AgCrdnPlaneNormal;
struct /* coclass */ AgCrdnPlaneQuadrant;
struct /* coclass */ AgCrdnPlaneTrajectory;
struct /* coclass */ AgCrdnPlaneTriad;
struct /* coclass */ AgCrdnPointBPlane;
struct /* coclass */ AgCrdnPointFile;
struct /* coclass */ AgCrdnPointFixedInSystem;
struct /* coclass */ AgCrdnPointGrazing;
struct /* coclass */ AgCrdnPointGlint;
struct /* coclass */ AgCrdnPointCovarianceGrazing;
struct /* coclass */ AgCrdnPointPlaneIntersection;
struct /* coclass */ AgCrdnPointOnSurface;
struct /* coclass */ AgCrdnPointModelAttach;
struct /* coclass */ AgCrdnPointPlaneProjection;
struct /* coclass */ AgCrdnPointLagrangeLibration;
struct /* coclass */ AgCrdnPointCommonTasks;
struct /* coclass */ AgCrdnPointCentBodyIntersect;
struct /* coclass */ AgCrdnPointAtTimeInstant;
struct /* coclass */ AgCrdnPointPlugin;
struct /* coclass */ AgCrdnPointCBFixedOffset;
struct /* coclass */ AgCrdnSystemAssembled;
struct /* coclass */ AgCrdnSystemOnSurface;
struct /* coclass */ AgCrdnLLAPosition;
struct /* coclass */ AgCrdnSystemCommonTasks;
struct /* coclass */ AgCrdnVectorAngleRate;
struct /* coclass */ AgCrdnVectorApoapsis;
struct /* coclass */ AgCrdnVectorFixedAtEpoch;
struct /* coclass */ AgCrdnVectorAngularVelocity;
struct /* coclass */ AgCrdnVectorConing;
struct /* coclass */ AgCrdnVectorCross;
struct /* coclass */ AgCrdnVectorCustomScript;
struct /* coclass */ AgCrdnVectorDerivative;
struct /* coclass */ AgCrdnVectorDisplacement;
struct /* coclass */ AgCrdnVectorTwoPlanesIntersection;
struct /* coclass */ AgCrdnVectorModelAttach;
struct /* coclass */ AgCrdnVectorProjection;
struct /* coclass */ AgCrdnVectorScaled;
struct /* coclass */ AgCrdnVectorEccentricity;
struct /* coclass */ AgCrdnVectorFixedInAxes;
struct /* coclass */ AgCrdnVectorLineOfNodes;
struct /* coclass */ AgCrdnVectorOrbitAngularMomentum;
struct /* coclass */ AgCrdnVectorOrbitNormal;
struct /* coclass */ AgCrdnVectorPeriapsis;
struct /* coclass */ AgCrdnVectorReflection;
struct /* coclass */ AgCrdnVectorDirectionToStar;
struct /* coclass */ AgCrdnVectorFixedAtTimeInstant;
struct /* coclass */ AgCrdnVectorLinearCombination;
struct /* coclass */ AgCrdnVectorProjectAlongVector;
struct /* coclass */ AgCrdnVectorScalarLinearCombination;
struct /* coclass */ AgCrdnVectorScalarScaled;
struct /* coclass */ AgCrdnVectorVelocityAcceleration;
struct /* coclass */ AgCrdnVectorPlugin;
struct /* coclass */ AgCrdnVectorFactory;
struct /* coclass */ AgCrdnAxesFactory;
struct /* coclass */ AgCrdnSystemFactory;
struct /* coclass */ AgCrdnPointFactory;
struct /* coclass */ AgCrdnPlaneFactory;
struct /* coclass */ AgCrdnAngleFactory;
struct /* coclass */ AgCrdnVectorGroup;
struct /* coclass */ AgCrdnPointGroup;
struct /* coclass */ AgCrdnAngleGroup;
struct /* coclass */ AgCrdnAxesGroup;
struct /* coclass */ AgCrdnPlaneGroup;
struct /* coclass */ AgCrdnSystemGroup;
struct /* coclass */ AgCrdnProvider;
struct /* coclass */ AgCrdnRoot;
struct /* coclass */ AgCrdnWellKnownEarthSystems;
struct /* coclass */ AgCrdnWellKnownEarthAxes;
struct /* coclass */ AgCrdnWellKnownSunSystems;
struct /* coclass */ AgCrdnWellKnownSunAxes;
struct /* coclass */ AgCrdnWellKnownSystems;
struct /* coclass */ AgCrdnWellKnownAxes;
struct /* coclass */ AgCrdnMethodCallResult;
struct /* coclass */ AgCrdnInterval;
struct /* coclass */ AgCrdnIntervalCollection;
struct /* coclass */ AgCrdnCentralBody;
struct /* coclass */ AgCrdnCentralBodyRefTo;
struct /* coclass */ AgCrdnCentralBodyCollection;
struct /* coclass */ AgCrdnCollection;
struct /* coclass */ AgCrdnPointSamplingResult;
struct /* coclass */ AgCrdnPointSamplingInterval;
struct /* coclass */ AgCrdnPointSamplingIntervalCollection;
struct /* coclass */ AgCrdnAxesSamplingResult;
struct /* coclass */ AgCrdnAxesSamplingInterval;
struct /* coclass */ AgCrdnAxesSamplingIntervalCollection;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgCrdnInterval, __uuidof(IAgCrdnInterval));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntervalCollection, __uuidof(IAgCrdnIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemFindInSystemResult, __uuidof(IAgCrdnSystemFindInSystemResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemTransformResult, __uuidof(IAgCrdnSystemTransformResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemTransformWithRateResult, __uuidof(IAgCrdnSystemTransformWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystem, __uuidof(IAgCrdnSystem));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointLocateInSystemWithRateResult, __uuidof(IAgCrdnPointLocateInSystemWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointLocateInSystemResult, __uuidof(IAgCrdnPointLocateInSystemResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPoint, __uuidof(IAgCrdnPoint));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFindInAxesWithRateResult, __uuidof(IAgCrdnAxesFindInAxesWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFindInAxesResult, __uuidof(IAgCrdnAxesFindInAxesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesLabels, __uuidof(IAgCrdnAxesLabels));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesTransformResult, __uuidof(IAgCrdnAxesTransformResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesTransformWithRateResult, __uuidof(IAgCrdnAxesTransformWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFindInAxesResult, __uuidof(IAgCrdnVectorFindInAxesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFindInAxesWithRateResult, __uuidof(IAgCrdnVectorFindInAxesWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindAngleResult, __uuidof(IAgCrdnAngleFindAngleResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindAngleWithRateResult, __uuidof(IAgCrdnAngleFindAngleWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindResult, __uuidof(IAgCrdnAngleFindResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindWithRateResult, __uuidof(IAgCrdnAngleFindWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInAxesResult, __uuidof(IAgCrdnPlaneFindInAxesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInAxesWithRateResult, __uuidof(IAgCrdnPlaneFindInAxesWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInSystemResult, __uuidof(IAgCrdnPlaneFindInSystemResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInSystemWithRateResult, __uuidof(IAgCrdnPlaneFindInSystemWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneLabels, __uuidof(IAgCrdnPlaneLabels));
_COM_SMARTPTR_TYPEDEF(IAgCrdnContext, __uuidof(IAgCrdnContext));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEvaluateResult, __uuidof(_IAgCrdnEvaluateResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEvaluateWithRateResult, __uuidof(_IAgCrdnEvaluateWithRateResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalResult, __uuidof(_IAgCrdnEventIntervalResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventFindOccurrenceResult, __uuidof(_IAgCrdnEventFindOccurrenceResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnFindTimesResult, __uuidof(_IAgCrdnFindTimesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntervalVectorCollection, __uuidof(IAgCrdnIntervalVectorCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnIntervalsVectorResult, __uuidof(_IAgCrdnIntervalsVectorResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalCollectionOccurredResult, __uuidof(_IAgCrdnEventIntervalCollectionOccurredResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnIntervalListResult, __uuidof(_IAgCrdnIntervalListResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnIntervalVectorCollection, __uuidof(_IAgCrdnIntervalVectorCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionSetEvaluateResult, __uuidof(_IAgCrdnConditionSetEvaluateResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionSetEvaluateWithRateResult, __uuidof(_IAgCrdnConditionSetEvaluateWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEvaluateResult, __uuidof(IAgCrdnEvaluateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEvaluateWithRateResult, __uuidof(IAgCrdnEvaluateWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnTypeInfo, __uuidof(IAgCrdnTypeInfo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnFindTimesResult, __uuidof(IAgCrdnFindTimesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArray, __uuidof(IAgCrdnEventArray));
_COM_SMARTPTR_TYPEDEF(IAgCrdnInterp, __uuidof(IAgCrdnInterp));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSampling, __uuidof(IAgCrdnSampling));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalar, __uuidof(IAgCrdnCalcScalar));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventFindOccurrenceResult, __uuidof(IAgCrdnEventFindOccurrenceResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEvent, __uuidof(IAgCrdnEvent));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarFactory, __uuidof(_IAgCrdnCalcScalarFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalResult, __uuidof(IAgCrdnEventIntervalResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConverge, __uuidof(IAgCrdnConverge));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntervalListResult, __uuidof(IAgCrdnIntervalListResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalList, __uuidof(IAgCrdnEventIntervalList));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntegral, __uuidof(IAgCrdnIntegral));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCondition, __uuidof(IAgCrdnCondition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionFactory, __uuidof(_IAgCrdnConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionSetEvaluateResult, __uuidof(IAgCrdnConditionSetEvaluateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionSetEvaluateWithRateResult, __uuidof(IAgCrdnConditionSetEvaluateWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionSet, __uuidof(IAgCrdnConditionSet));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionSetFactory, __uuidof(_IAgCrdnConditionSetFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayFactory, __uuidof(_IAgCrdnEventArrayFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSignalDelay, __uuidof(IAgCrdnSignalDelay));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventSmartEpoch, __uuidof(IAgCrdnEventSmartEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventFactory, __uuidof(_IAgCrdnEventFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntervalsVectorResult, __uuidof(IAgCrdnIntervalsVectorResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollectionOccurredResult, __uuidof(IAgCrdnEventIntervalCollectionOccurredResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollection, __uuidof(IAgCrdnEventIntervalCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalCollectionFactory, __uuidof(_IAgCrdnEventIntervalCollectionFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventInterval, __uuidof(IAgCrdnEventInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalFactory, __uuidof(_IAgCrdnEventIntervalFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListFactory, __uuidof(_IAgCrdnEventIntervalListFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPruneFilter, __uuidof(IAgCrdnPruneFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPruneFilterFactory, __uuidof(IAgCrdnPruneFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnFirstIntervalsFilter, __uuidof(_IAgCrdnFirstIntervalsFilter));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnGapsFilter, __uuidof(_IAgCrdnGapsFilter));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnIntervalsFilter, __uuidof(_IAgCrdnIntervalsFilter));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnLastIntervalsFilter, __uuidof(_IAgCrdnLastIntervalsFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSet, __uuidof(IAgCrdnParameterSet));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSetFactory, __uuidof(_IAgCrdnParameterSetFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPruneFilter, __uuidof(_IAgCrdnPruneFilter));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPruneFilterFactory, __uuidof(_IAgCrdnPruneFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnRelativeSatisfactionConditionFilter, __uuidof(_IAgCrdnRelativeSatisfactionConditionFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSamplingMethod, __uuidof(IAgCrdnSamplingMethod));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSamplingMethodFactory, __uuidof(IAgCrdnSamplingMethodFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSamplingCurvatureTolerance, __uuidof(_IAgCrdnSamplingCurvatureTolerance));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSamplingFixedStep, __uuidof(_IAgCrdnSamplingFixedStep));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSamplingMethod, __uuidof(_IAgCrdnSamplingMethod));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSamplingMethodFactory, __uuidof(_IAgCrdnSamplingMethodFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSamplingRelativeTolerance, __uuidof(_IAgCrdnSamplingRelativeTolerance));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSatisfactionConditionFilter, __uuidof(_IAgCrdnSatisfactionConditionFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolume, __uuidof(IAgCrdnVolume));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeFactory, __uuidof(_IAgCrdnVolumeFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGrid, __uuidof(IAgCrdnVolumeGrid));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridFactory, __uuidof(_IAgCrdnVolumeGridFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnGridValuesMethod, __uuidof(IAgCrdnGridValuesMethod));
_COM_SMARTPTR_TYPEDEF(IAgCrdnGridValuesFixedStep, __uuidof(IAgCrdnGridValuesFixedStep));
_COM_SMARTPTR_TYPEDEF(IAgCrdnGridValuesFixedNumberOfSteps, __uuidof(IAgCrdnGridValuesFixedNumberOfSteps));
_COM_SMARTPTR_TYPEDEF(IAgCrdnGridValuesCustom, __uuidof(IAgCrdnGridValuesCustom));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnGridCoordinateDefinition, __uuidof(_IAgCrdnGridCoordinateDefinition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnGridValuesCustom, __uuidof(_IAgCrdnGridValuesCustom));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnGridValuesFixedNumberOfSteps, __uuidof(_IAgCrdnGridValuesFixedNumberOfSteps));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnGridValuesFixedStep, __uuidof(_IAgCrdnGridValuesFixedStep));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnGridValuesMethod, __uuidof(_IAgCrdnGridValuesMethod));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnLightTimeDelay, __uuidof(_IAgCrdnLightTimeDelay));
_COM_SMARTPTR_TYPEDEF(IAgCrdnGridCoordinateDefinition, __uuidof(IAgCrdnGridCoordinateDefinition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridResult, __uuidof(_IAgCrdnVolumeGridResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnLightTimeDelay, __uuidof(IAgCrdnLightTimeDelay));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventFactory, __uuidof(IAgCrdnEventFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventGroup, __uuidof(IAgCrdnEventGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalFactory, __uuidof(IAgCrdnEventIntervalFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalGroup, __uuidof(IAgCrdnEventIntervalGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListFactory, __uuidof(IAgCrdnEventIntervalListFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListGroup, __uuidof(IAgCrdnEventIntervalListGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayFactory, __uuidof(IAgCrdnEventArrayFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayGroup, __uuidof(IAgCrdnEventArrayGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarFactory, __uuidof(IAgCrdnCalcScalarFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarGroup, __uuidof(IAgCrdnCalcScalarGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollectionFactory, __uuidof(IAgCrdnEventIntervalCollectionFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollectionGroup, __uuidof(IAgCrdnEventIntervalCollectionGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetFactory, __uuidof(IAgCrdnParameterSetFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetGroup, __uuidof(IAgCrdnParameterSetGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionFactory, __uuidof(IAgCrdnConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionGroup, __uuidof(IAgCrdnConditionGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionSetFactory, __uuidof(IAgCrdnConditionSetFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionSetGroup, __uuidof(IAgCrdnConditionSetGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridFactory, __uuidof(IAgCrdnVolumeGridFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridGroup, __uuidof(IAgCrdnVolumeGridGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeFactory, __uuidof(IAgCrdnVolumeFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGroup, __uuidof(IAgCrdnVolumeGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarConstant, __uuidof(IAgCrdnCalcScalarConstant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarCustom, __uuidof(IAgCrdnCalcScalarCustom));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarDataElement, __uuidof(IAgCrdnCalcScalarDataElement));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarDerivative, __uuidof(IAgCrdnCalcScalarDerivative));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarElapsedTime, __uuidof(IAgCrdnCalcScalarElapsedTime));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarFile, __uuidof(IAgCrdnCalcScalarFile));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarFixedAtTimeInstant, __uuidof(IAgCrdnCalcScalarFixedAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarFunction, __uuidof(IAgCrdnCalcScalarFunction));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarFunction2Var, __uuidof(IAgCrdnCalcScalarFunction2Var));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarIntegral, __uuidof(IAgCrdnCalcScalarIntegral));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarPlugin, __uuidof(IAgCrdnCalcScalarPlugin));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarSurfaceDistanceBetweenPoints, __uuidof(IAgCrdnCalcScalarSurfaceDistanceBetweenPoints));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionCombined, __uuidof(IAgCrdnConditionCombined));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionScalarBounds, __uuidof(IAgCrdnConditionScalarBounds));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConditionSetScalarThresholds, __uuidof(IAgCrdnConditionSetScalarThresholds));
_COM_SMARTPTR_TYPEDEF(IAgCrdnConvergeBasic, __uuidof(IAgCrdnConvergeBasic));
_COM_SMARTPTR_TYPEDEF(IAgCrdnDerivative, __uuidof(IAgCrdnDerivative));
_COM_SMARTPTR_TYPEDEF(IAgCrdnDerivativeBasic, __uuidof(IAgCrdnDerivativeBasic));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayConditionCrossings, __uuidof(IAgCrdnEventArrayConditionCrossings));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayExtrema, __uuidof(IAgCrdnEventArrayExtrema));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayFiltered, __uuidof(IAgCrdnEventArrayFiltered));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayFixedStep, __uuidof(IAgCrdnEventArrayFixedStep));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayFixedTimes, __uuidof(IAgCrdnEventArrayFixedTimes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayMerged, __uuidof(IAgCrdnEventArrayMerged));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArraySignaled, __uuidof(IAgCrdnEventArraySignaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventArrayStartStopTimes, __uuidof(IAgCrdnEventArrayStartStopTimes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventEpoch, __uuidof(IAgCrdnEventEpoch));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventExtremum, __uuidof(IAgCrdnEventExtremum));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalBetweenTimeInstants, __uuidof(IAgCrdnEventIntervalBetweenTimeInstants));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollectionCondition, __uuidof(IAgCrdnEventIntervalCollectionCondition));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollectionLighting, __uuidof(IAgCrdnEventIntervalCollectionLighting));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalCollectionSignaled, __uuidof(IAgCrdnEventIntervalCollectionSignaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalFixed, __uuidof(IAgCrdnEventIntervalFixed));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalFixedDuration, __uuidof(IAgCrdnEventIntervalFixedDuration));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalFromIntervalList, __uuidof(IAgCrdnEventIntervalFromIntervalList));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListCondition, __uuidof(IAgCrdnEventIntervalListCondition));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListFile, __uuidof(IAgCrdnEventIntervalListFile));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListFiltered, __uuidof(IAgCrdnEventIntervalListFiltered));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListFixed, __uuidof(IAgCrdnEventIntervalListFixed));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListScaled, __uuidof(IAgCrdnEventIntervalListScaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListSignaled, __uuidof(IAgCrdnEventIntervalListSignaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListTimeOffset, __uuidof(IAgCrdnEventIntervalListTimeOffset));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalScaled, __uuidof(IAgCrdnEventIntervalScaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalSignaled, __uuidof(IAgCrdnEventIntervalSignaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalSmartInterval, __uuidof(IAgCrdnEventIntervalSmartInterval));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalTimeOffset, __uuidof(IAgCrdnEventIntervalTimeOffset));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventSignaled, __uuidof(IAgCrdnEventSignaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventStartStopTime, __uuidof(IAgCrdnEventStartStopTime));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventTimeOffset, __uuidof(IAgCrdnEventTimeOffset));
_COM_SMARTPTR_TYPEDEF(IAgCrdnFirstIntervalsFilter, __uuidof(IAgCrdnFirstIntervalsFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnGapsFilter, __uuidof(IAgCrdnGapsFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntegralBasic, __uuidof(IAgCrdnIntegralBasic));
_COM_SMARTPTR_TYPEDEF(IAgCrdnInterpBasic, __uuidof(IAgCrdnInterpBasic));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntervalsFilter, __uuidof(IAgCrdnIntervalsFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnLastIntervalsFilter, __uuidof(IAgCrdnLastIntervalsFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetGroundTrajectory, __uuidof(IAgCrdnParameterSetGroundTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetOrbit, __uuidof(IAgCrdnParameterSetOrbit));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetTrajectory, __uuidof(IAgCrdnParameterSetTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnRelativeSatisfactionConditionFilter, __uuidof(IAgCrdnRelativeSatisfactionConditionFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSamplingBasic, __uuidof(IAgCrdnSamplingBasic));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSamplingCurvatureTolerance, __uuidof(IAgCrdnSamplingCurvatureTolerance));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSamplingFixedStep, __uuidof(IAgCrdnSamplingFixedStep));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSamplingRelativeTolerance, __uuidof(IAgCrdnSamplingRelativeTolerance));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSatisfactionConditionFilter, __uuidof(IAgCrdnSatisfactionConditionFilter));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSignalDelayBasic, __uuidof(IAgCrdnSignalDelayBasic));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeCombined, __uuidof(IAgCrdnVolumeCombined));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeFromCalc, __uuidof(IAgCrdnVolumeFromCalc));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeFromCondition, __uuidof(IAgCrdnVolumeFromCondition));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeFromGrid, __uuidof(IAgCrdnVolumeFromGrid));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeFromTimeSatisfaction, __uuidof(IAgCrdnVolumeFromTimeSatisfaction));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridBearingAlt, __uuidof(IAgCrdnVolumeGridBearingAlt));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridCartesian, __uuidof(IAgCrdnVolumeGridCartesian));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridConstrained, __uuidof(IAgCrdnVolumeGridConstrained));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridCylindrical, __uuidof(IAgCrdnVolumeGridCylindrical));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridLatLonAlt, __uuidof(IAgCrdnVolumeGridLatLonAlt));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridResult, __uuidof(IAgCrdnVolumeGridResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeGridSpherical, __uuidof(IAgCrdnVolumeGridSpherical));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeInview, __uuidof(IAgCrdnVolumeInview));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeLighting, __uuidof(IAgCrdnVolumeLighting));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVolumeOverTime, __uuidof(IAgCrdnVolumeOverTime));
_COM_SMARTPTR_TYPEDEF(IAgCrdnTimeProperties, __uuidof(IAgCrdnTimeProperties));
_COM_SMARTPTR_TYPEDEF(IAgCrdnRefTo, __uuidof(IAgCrdnRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnTemplate, __uuidof(IAgCrdnTemplate));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointRefTo, __uuidof(IAgCrdnPointRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemRefTo, __uuidof(IAgCrdnSystemRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCentralBody, __uuidof(IAgCrdnCentralBody));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCentralBodyRefTo, __uuidof(IAgCrdnCentralBodyRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAttitudeFile, __uuidof(IAgCrdnAxesAttitudeFile));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesModelAttach, __uuidof(IAgCrdnAxesModelAttach));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesOnSurface, __uuidof(IAgCrdnAxesOnSurface));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesTrajectory, __uuidof(IAgCrdnAxesTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCentralBodyCollection, __uuidof(IAgCrdnCentralBodyCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesLagrangeLibration, __uuidof(IAgCrdnAxesLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesSamplingInterval, __uuidof(IAgCrdnAxesSamplingInterval));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesSamplingIntervalCollection, __uuidof(IAgCrdnAxesSamplingIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesSamplingResult, __uuidof(IAgCrdnAxesSamplingResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesPlugin, __uuidof(IAgCrdnAxesPlugin));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneQuadrant, __uuidof(IAgCrdnPlaneQuadrant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneTrajectory, __uuidof(IAgCrdnPlaneTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneTriad, __uuidof(IAgCrdnPlaneTriad));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointBPlane, __uuidof(IAgCrdnPointBPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointFile, __uuidof(IAgCrdnPointFile));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointFixedInSystem, __uuidof(IAgCrdnPointFixedInSystem));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointGlint, __uuidof(IAgCrdnPointGlint));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointOnSurface, __uuidof(IAgCrdnPointOnSurface));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointModelAttach, __uuidof(IAgCrdnPointModelAttach));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointLagrangeLibration, __uuidof(IAgCrdnPointLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointSamplingInterval, __uuidof(IAgCrdnPointSamplingInterval));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointSamplingIntervalCollection, __uuidof(IAgCrdnPointSamplingIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointSamplingResult, __uuidof(IAgCrdnPointSamplingResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointCommonTasks, __uuidof(IAgCrdnPointCommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointAtTimeInstant, __uuidof(IAgCrdnPointAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointPlugin, __uuidof(IAgCrdnPointPlugin));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointCBFixedOffset, __uuidof(IAgCrdnPointCBFixedOffset));
_COM_SMARTPTR_TYPEDEF(IAgCrdnLLAPosition, __uuidof(IAgCrdnLLAPosition));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemOnSurface, __uuidof(IAgCrdnSystemOnSurface));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorApoapsis, __uuidof(IAgCrdnVectorApoapsis));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorDisplacement, __uuidof(IAgCrdnVectorDisplacement));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorModelAttach, __uuidof(IAgCrdnVectorModelAttach));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorEccentricity, __uuidof(IAgCrdnVectorEccentricity));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorLineOfNodes, __uuidof(IAgCrdnVectorLineOfNodes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorOrbitAngularMomentum, __uuidof(IAgCrdnVectorOrbitAngularMomentum));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorOrbitNormal, __uuidof(IAgCrdnVectorOrbitNormal));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorPeriapsis, __uuidof(IAgCrdnVectorPeriapsis));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorDirectionToStar, __uuidof(IAgCrdnVectorDirectionToStar));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorVelocityAcceleration, __uuidof(IAgCrdnVectorVelocityAcceleration));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorPlugin, __uuidof(IAgCrdnVectorPlugin));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemFactory, __uuidof(IAgCrdnSystemFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointFactory, __uuidof(IAgCrdnPointFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointGroup, __uuidof(IAgCrdnPointGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownEarthSystems, __uuidof(IAgCrdnWellKnownEarthSystems));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownSunSystems, __uuidof(IAgCrdnWellKnownSunSystems));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownSystems, __uuidof(IAgCrdnWellKnownSystems));
_COM_SMARTPTR_TYPEDEF(IAgCrdnMethodCallResult, __uuidof(IAgCrdnMethodCallResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnTypeInfo, __uuidof(_IAgCrdnTypeInfo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnTemplate, __uuidof(_IAgCrdnTemplate));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointRefTo, __uuidof(_IAgCrdnPointRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemRefTo, __uuidof(_IAgCrdnSystemRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesLabels, __uuidof(_IAgCrdnAxesLabels));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneLabels, __uuidof(_IAgCrdnPlaneLabels));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointCommonTasks, __uuidof(_IAgCrdnPointCommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnLLAPosition, __uuidof(_IAgCrdnLLAPosition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemFactory, __uuidof(_IAgCrdnSystemFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointFactory, __uuidof(_IAgCrdnPointFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownEarthSystems, __uuidof(_IAgCrdnWellKnownEarthSystems));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownSunSystems, __uuidof(_IAgCrdnWellKnownSunSystems));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownSystems, __uuidof(_IAgCrdnWellKnownSystems));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnMethodCallResult, __uuidof(_IAgCrdnMethodCallResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnInterval, __uuidof(_IAgCrdnInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCentralBody, __uuidof(_IAgCrdnCentralBody));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCentralBodyRefTo, __uuidof(_IAgCrdnCentralBodyRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointSamplingResult, __uuidof(_IAgCrdnPointSamplingResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointSamplingInterval, __uuidof(_IAgCrdnPointSamplingInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointSamplingIntervalCollection, __uuidof(_IAgCrdnPointSamplingIntervalCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesSamplingResult, __uuidof(_IAgCrdnAxesSamplingResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesSamplingInterval, __uuidof(_IAgCrdnAxesSamplingInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesSamplingIntervalCollection, __uuidof(_IAgCrdnAxesSamplingIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVector, __uuidof(IAgCrdnVector));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxes, __uuidof(IAgCrdnAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngle, __uuidof(IAgCrdnAngle));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlane, __uuidof(IAgCrdnPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarAngle, __uuidof(IAgCrdnCalcScalarAngle));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCalcScalarVectorMagnitude, __uuidof(IAgCrdnCalcScalarVectorMagnitude));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetAttitude, __uuidof(IAgCrdnParameterSetAttitude));
_COM_SMARTPTR_TYPEDEF(IAgCrdnParameterSetVector, __uuidof(IAgCrdnParameterSetVector));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorRefTo, __uuidof(IAgCrdnVectorRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesRefTo, __uuidof(IAgCrdnAxesRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleRefTo, __uuidof(IAgCrdnAngleRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneRefTo, __uuidof(IAgCrdnPlaneRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAlignedAndConstrained, __uuidof(IAgCrdnAxesAlignedAndConstrained));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAngularOffset, __uuidof(IAgCrdnAxesAngularOffset));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFixedAtEpoch, __uuidof(IAgCrdnAxesFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesBPlane, __uuidof(IAgCrdnAxesBPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesCustomScript, __uuidof(IAgCrdnAxesCustomScript));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFixed, __uuidof(IAgCrdnAxesFixed));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesSpinning, __uuidof(IAgCrdnAxesSpinning));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesCommonTasks, __uuidof(IAgCrdnAxesCommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAtTimeInstant, __uuidof(IAgCrdnAxesAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleBetweenVectors, __uuidof(IAgCrdnAngleBetweenVectors));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleBetweenPlanes, __uuidof(IAgCrdnAngleBetweenPlanes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleDihedral, __uuidof(IAgCrdnAngleDihedral));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleRotation, __uuidof(IAgCrdnAngleRotation));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleToPlane, __uuidof(IAgCrdnAngleToPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneNormal, __uuidof(IAgCrdnPlaneNormal));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointGrazing, __uuidof(IAgCrdnPointGrazing));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointCovarianceGrazing, __uuidof(IAgCrdnPointCovarianceGrazing));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointPlaneIntersection, __uuidof(IAgCrdnPointPlaneIntersection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointPlaneProjection, __uuidof(IAgCrdnPointPlaneProjection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointCentBodyIntersect, __uuidof(IAgCrdnPointCentBodyIntersect));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemAssembled, __uuidof(IAgCrdnSystemAssembled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemCommonTasks, __uuidof(IAgCrdnSystemCommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorAngleRate, __uuidof(IAgCrdnVectorAngleRate));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFixedAtEpoch, __uuidof(IAgCrdnVectorFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorAngularVelocity, __uuidof(IAgCrdnVectorAngularVelocity));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorConing, __uuidof(IAgCrdnVectorConing));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorCross, __uuidof(IAgCrdnVectorCross));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorCustomScript, __uuidof(IAgCrdnVectorCustomScript));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorDerivative, __uuidof(IAgCrdnVectorDerivative));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorTwoPlanesIntersection, __uuidof(IAgCrdnVectorTwoPlanesIntersection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorProjection, __uuidof(IAgCrdnVectorProjection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorScaled, __uuidof(IAgCrdnVectorScaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFixedInAxes, __uuidof(IAgCrdnVectorFixedInAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorReflection, __uuidof(IAgCrdnVectorReflection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFixedAtTimeInstant, __uuidof(IAgCrdnVectorFixedAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorLinearCombination, __uuidof(IAgCrdnVectorLinearCombination));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorProjectAlongVector, __uuidof(IAgCrdnVectorProjectAlongVector));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorScalarLinearCombination, __uuidof(IAgCrdnVectorScalarLinearCombination));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorScalarScaled, __uuidof(IAgCrdnVectorScalarScaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFactory, __uuidof(IAgCrdnVectorFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFactory, __uuidof(IAgCrdnAxesFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFactory, __uuidof(IAgCrdnPlaneFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFactory, __uuidof(IAgCrdnAngleFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorGroup, __uuidof(IAgCrdnVectorGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleGroup, __uuidof(IAgCrdnAngleGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesGroup, __uuidof(IAgCrdnAxesGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneGroup, __uuidof(IAgCrdnPlaneGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemGroup, __uuidof(IAgCrdnSystemGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownEarthAxes, __uuidof(IAgCrdnWellKnownEarthAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownSunAxes, __uuidof(IAgCrdnWellKnownSunAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownAxes, __uuidof(IAgCrdnWellKnownAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorRefTo, __uuidof(_IAgCrdnVectorRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesRefTo, __uuidof(_IAgCrdnAxesRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleRefTo, __uuidof(_IAgCrdnAngleRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneRefTo, __uuidof(_IAgCrdnPlaneRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesCommonTasks, __uuidof(_IAgCrdnAxesCommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemCommonTasks, __uuidof(_IAgCrdnSystemCommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFactory, __uuidof(_IAgCrdnVectorFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesFactory, __uuidof(_IAgCrdnAxesFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneFactory, __uuidof(_IAgCrdnPlaneFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleFactory, __uuidof(_IAgCrdnAngleFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownEarthAxes, __uuidof(_IAgCrdnWellKnownEarthAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownSunAxes, __uuidof(_IAgCrdnWellKnownSunAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownAxes, __uuidof(_IAgCrdnWellKnownAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalar, __uuidof(_IAgCrdnCalcScalar));
_COM_SMARTPTR_TYPEDEF(IAgCrdn, __uuidof(IAgCrdn));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCollection, __uuidof(IAgCrdnCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarAngle, __uuidof(_IAgCrdnCalcScalarAngle));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarConstant, __uuidof(_IAgCrdnCalcScalarConstant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarCustom, __uuidof(_IAgCrdnCalcScalarCustom));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarDataElement, __uuidof(_IAgCrdnCalcScalarDataElement));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarDerivative, __uuidof(_IAgCrdnCalcScalarDerivative));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarElapsedTime, __uuidof(_IAgCrdnCalcScalarElapsedTime));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarFile, __uuidof(_IAgCrdnCalcScalarFile));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarFixedAtTimeInstant, __uuidof(_IAgCrdnCalcScalarFixedAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarFunction, __uuidof(_IAgCrdnCalcScalarFunction));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarFunction2Var, __uuidof(_IAgCrdnCalcScalarFunction2Var));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarIntegral, __uuidof(_IAgCrdnCalcScalarIntegral));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarPlugin, __uuidof(_IAgCrdnCalcScalarPlugin));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarSurfaceDistanceBetweenPoints, __uuidof(_IAgCrdnCalcScalarSurfaceDistanceBetweenPoints));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCalcScalarVectorMagnitude, __uuidof(_IAgCrdnCalcScalarVectorMagnitude));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCondition, __uuidof(_IAgCrdnCondition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionCombined, __uuidof(_IAgCrdnConditionCombined));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionScalarBounds, __uuidof(_IAgCrdnConditionScalarBounds));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionSet, __uuidof(_IAgCrdnConditionSet));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConditionSetScalarThresholds, __uuidof(_IAgCrdnConditionSetScalarThresholds));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConverge, __uuidof(_IAgCrdnConverge));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnConvergeBasic, __uuidof(_IAgCrdnConvergeBasic));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnDerivative, __uuidof(_IAgCrdnDerivative));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnDerivativeBasic, __uuidof(_IAgCrdnDerivativeBasic));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEvent, __uuidof(_IAgCrdnEvent));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArray, __uuidof(_IAgCrdnEventArray));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayConditionCrossings, __uuidof(_IAgCrdnEventArrayConditionCrossings));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayExtrema, __uuidof(_IAgCrdnEventArrayExtrema));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayFiltered, __uuidof(_IAgCrdnEventArrayFiltered));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayFixedStep, __uuidof(_IAgCrdnEventArrayFixedStep));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayFixedTimes, __uuidof(_IAgCrdnEventArrayFixedTimes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayMerged, __uuidof(_IAgCrdnEventArrayMerged));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArraySignaled, __uuidof(_IAgCrdnEventArraySignaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventArrayStartStopTimes, __uuidof(_IAgCrdnEventArrayStartStopTimes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventEpoch, __uuidof(_IAgCrdnEventEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventExtremum, __uuidof(_IAgCrdnEventExtremum));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventInterval, __uuidof(_IAgCrdnEventInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalBetweenTimeInstants, __uuidof(_IAgCrdnEventIntervalBetweenTimeInstants));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalCollection, __uuidof(_IAgCrdnEventIntervalCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalCollectionCondition, __uuidof(_IAgCrdnEventIntervalCollectionCondition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalCollectionLighting, __uuidof(_IAgCrdnEventIntervalCollectionLighting));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalCollectionSignaled, __uuidof(_IAgCrdnEventIntervalCollectionSignaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalFixed, __uuidof(_IAgCrdnEventIntervalFixed));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalFixedDuration, __uuidof(_IAgCrdnEventIntervalFixedDuration));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalFromIntervalList, __uuidof(_IAgCrdnEventIntervalFromIntervalList));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalList, __uuidof(_IAgCrdnEventIntervalList));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListCondition, __uuidof(_IAgCrdnEventIntervalListCondition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListFile, __uuidof(_IAgCrdnEventIntervalListFile));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListFiltered, __uuidof(_IAgCrdnEventIntervalListFiltered));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListFixed, __uuidof(_IAgCrdnEventIntervalListFixed));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListMerged, __uuidof(_IAgCrdnEventIntervalListMerged));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListScaled, __uuidof(_IAgCrdnEventIntervalListScaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListSignaled, __uuidof(_IAgCrdnEventIntervalListSignaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalListTimeOffset, __uuidof(_IAgCrdnEventIntervalListTimeOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalScaled, __uuidof(_IAgCrdnEventIntervalScaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalSignaled, __uuidof(_IAgCrdnEventIntervalSignaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalSmartInterval, __uuidof(_IAgCrdnEventIntervalSmartInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventIntervalTimeOffset, __uuidof(_IAgCrdnEventIntervalTimeOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventSignaled, __uuidof(_IAgCrdnEventSignaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventSmartEpoch, __uuidof(_IAgCrdnEventSmartEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventStartStopTime, __uuidof(_IAgCrdnEventStartStopTime));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnEventTimeOffset, __uuidof(_IAgCrdnEventTimeOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnIntegral, __uuidof(_IAgCrdnIntegral));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnIntegralBasic, __uuidof(_IAgCrdnIntegralBasic));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnInterp, __uuidof(_IAgCrdnInterp));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnInterpBasic, __uuidof(_IAgCrdnInterpBasic));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSet, __uuidof(_IAgCrdnParameterSet));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSetAttitude, __uuidof(_IAgCrdnParameterSetAttitude));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSetGroundTrajectory, __uuidof(_IAgCrdnParameterSetGroundTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSetOrbit, __uuidof(_IAgCrdnParameterSetOrbit));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSetTrajectory, __uuidof(_IAgCrdnParameterSetTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnParameterSetVector, __uuidof(_IAgCrdnParameterSetVector));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSampling, __uuidof(_IAgCrdnSampling));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSamplingBasic, __uuidof(_IAgCrdnSamplingBasic));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSignalDelay, __uuidof(_IAgCrdnSignalDelay));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSignalDelayBasic, __uuidof(_IAgCrdnSignalDelayBasic));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolume, __uuidof(_IAgCrdnVolume));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeCombined, __uuidof(_IAgCrdnVolumeCombined));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeFromCalc, __uuidof(_IAgCrdnVolumeFromCalc));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeFromCondition, __uuidof(_IAgCrdnVolumeFromCondition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeFromGrid, __uuidof(_IAgCrdnVolumeFromGrid));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeFromTimeSatisfaction, __uuidof(_IAgCrdnVolumeFromTimeSatisfaction));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGrid, __uuidof(_IAgCrdnVolumeGrid));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridBearingAlt, __uuidof(_IAgCrdnVolumeGridBearingAlt));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridCartesian, __uuidof(_IAgCrdnVolumeGridCartesian));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridConstrained, __uuidof(_IAgCrdnVolumeGridConstrained));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridCylindrical, __uuidof(_IAgCrdnVolumeGridCylindrical));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridLatLonAlt, __uuidof(_IAgCrdnVolumeGridLatLonAlt));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeGridSpherical, __uuidof(_IAgCrdnVolumeGridSpherical));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeInview, __uuidof(_IAgCrdnVolumeInview));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeLighting, __uuidof(_IAgCrdnVolumeLighting));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVolumeOverTime, __uuidof(_IAgCrdnVolumeOverTime));
_COM_SMARTPTR_TYPEDEF(IAgCrdnEventIntervalListMerged, __uuidof(IAgCrdnEventIntervalListMerged));
_COM_SMARTPTR_TYPEDEF(IAgCrdnInstance, __uuidof(IAgCrdnInstance));
_COM_SMARTPTR_TYPEDEF(IAgCrdnProvider, __uuidof(IAgCrdnProvider));
_COM_SMARTPTR_TYPEDEF(IAgCrdnRoot, __uuidof(IAgCrdnRoot));
_COM_SMARTPTR_TYPEDEF(_IAgCrdn, __uuidof(_IAgCrdn));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnInstance, __uuidof(_IAgCrdnInstance));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVector, __uuidof(_IAgCrdnVector));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxes, __uuidof(_IAgCrdnAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPoint, __uuidof(_IAgCrdnPoint));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystem, __uuidof(_IAgCrdnSystem));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngle, __uuidof(_IAgCrdnAngle));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlane, __uuidof(_IAgCrdnPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAlignedAndConstrained, __uuidof(_IAgCrdnAxesAlignedAndConstrained));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAngularOffset, __uuidof(_IAgCrdnAxesAngularOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesFixedAtEpoch, __uuidof(_IAgCrdnAxesFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesBPlane, __uuidof(_IAgCrdnAxesBPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesCustomScript, __uuidof(_IAgCrdnAxesCustomScript));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAttitudeFile, __uuidof(_IAgCrdnAxesAttitudeFile));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesFixed, __uuidof(_IAgCrdnAxesFixed));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesModelAttach, __uuidof(_IAgCrdnAxesModelAttach));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesSpinning, __uuidof(_IAgCrdnAxesSpinning));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesOnSurface, __uuidof(_IAgCrdnAxesOnSurface));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesTrajectory, __uuidof(_IAgCrdnAxesTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesLagrangeLibration, __uuidof(_IAgCrdnAxesLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAtTimeInstant, __uuidof(_IAgCrdnAxesAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesPlugin, __uuidof(_IAgCrdnAxesPlugin));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleBetweenVectors, __uuidof(_IAgCrdnAngleBetweenVectors));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleBetweenPlanes, __uuidof(_IAgCrdnAngleBetweenPlanes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleDihedral, __uuidof(_IAgCrdnAngleDihedral));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleRotation, __uuidof(_IAgCrdnAngleRotation));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleToPlane, __uuidof(_IAgCrdnAngleToPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneNormal, __uuidof(_IAgCrdnPlaneNormal));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneQuadrant, __uuidof(_IAgCrdnPlaneQuadrant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneTrajectory, __uuidof(_IAgCrdnPlaneTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneTriad, __uuidof(_IAgCrdnPlaneTriad));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointBPlane, __uuidof(_IAgCrdnPointBPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointFile, __uuidof(_IAgCrdnPointFile));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointFixedInSystem, __uuidof(_IAgCrdnPointFixedInSystem));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointGrazing, __uuidof(_IAgCrdnPointGrazing));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointGlint, __uuidof(_IAgCrdnPointGlint));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointCovarianceGrazing, __uuidof(_IAgCrdnPointCovarianceGrazing));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointPlaneIntersection, __uuidof(_IAgCrdnPointPlaneIntersection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointOnSurface, __uuidof(_IAgCrdnPointOnSurface));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointModelAttach, __uuidof(_IAgCrdnPointModelAttach));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointPlaneProjection, __uuidof(_IAgCrdnPointPlaneProjection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointLagrangeLibration, __uuidof(_IAgCrdnPointLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointCentBodyIntersect, __uuidof(_IAgCrdnPointCentBodyIntersect));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointAtTimeInstant, __uuidof(_IAgCrdnPointAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointPlugin, __uuidof(_IAgCrdnPointPlugin));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointCBFixedOffset, __uuidof(_IAgCrdnPointCBFixedOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemAssembled, __uuidof(_IAgCrdnSystemAssembled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemOnSurface, __uuidof(_IAgCrdnSystemOnSurface));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorAngleRate, __uuidof(_IAgCrdnVectorAngleRate));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorApoapsis, __uuidof(_IAgCrdnVectorApoapsis));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFixedAtEpoch, __uuidof(_IAgCrdnVectorFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorAngularVelocity, __uuidof(_IAgCrdnVectorAngularVelocity));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorConing, __uuidof(_IAgCrdnVectorConing));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorCross, __uuidof(_IAgCrdnVectorCross));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorCustomScript, __uuidof(_IAgCrdnVectorCustomScript));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorDerivative, __uuidof(_IAgCrdnVectorDerivative));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorDisplacement, __uuidof(_IAgCrdnVectorDisplacement));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorTwoPlanesIntersection, __uuidof(_IAgCrdnVectorTwoPlanesIntersection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorModelAttach, __uuidof(_IAgCrdnVectorModelAttach));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorProjection, __uuidof(_IAgCrdnVectorProjection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorScaled, __uuidof(_IAgCrdnVectorScaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorEccentricity, __uuidof(_IAgCrdnVectorEccentricity));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFixedInAxes, __uuidof(_IAgCrdnVectorFixedInAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorLineOfNodes, __uuidof(_IAgCrdnVectorLineOfNodes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorOrbitAngularMomentum, __uuidof(_IAgCrdnVectorOrbitAngularMomentum));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorOrbitNormal, __uuidof(_IAgCrdnVectorOrbitNormal));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorPeriapsis, __uuidof(_IAgCrdnVectorPeriapsis));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorReflection, __uuidof(_IAgCrdnVectorReflection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorDirectionToStar, __uuidof(_IAgCrdnVectorDirectionToStar));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFixedAtTimeInstant, __uuidof(_IAgCrdnVectorFixedAtTimeInstant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorLinearCombination, __uuidof(_IAgCrdnVectorLinearCombination));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorProjectAlongVector, __uuidof(_IAgCrdnVectorProjectAlongVector));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorScalarLinearCombination, __uuidof(_IAgCrdnVectorScalarLinearCombination));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorScalarScaled, __uuidof(_IAgCrdnVectorScalarScaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorVelocityAcceleration, __uuidof(_IAgCrdnVectorVelocityAcceleration));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorPlugin, __uuidof(_IAgCrdnVectorPlugin));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnProvider, __uuidof(_IAgCrdnProvider));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnRoot, __uuidof(_IAgCrdnRoot));

//
// Type library items
//

struct __declspec(uuid("f12a71b9-7f54-4162-b742-27acdef49973"))
IAgCrdnInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("aca6a9d2-b2b8-439b-9576-f86fdff4b957"))
IAgCrdnIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgECrdnPointType
{
    eCrdnPointTypeUnknown = -1,
    eCrdnPointTypeBPlane = 0,
    eCrdnPointTypeGrazing = 1,
    eCrdnPointTypeCovarianceGrazing = 2,
    eCrdnPointTypeFromFile = 3,
    eCrdnPointTypeFixedInSystem = 4,
    eCrdnPointTypeGlint = 5,
    eCrdnPointTypePlaneIntersection = 6,
    eCrdnPointTypeModelAttachment = 7,
    eCrdnPointTypePlaneProjection = 8,
    eCrdnPointTypeOnSurface = 9,
    eCrdnPointTypeLagrangeLibration = 10,
    eCrdnPointTypeTemplate = 11,
    eCrdnPointTypeCentralBodyIntersect = 12,
    eCrdnPointTypeAtTimeInstant = 13,
    eCrdnPointTypePlugin = 14,
    eCrdnPointTypeFile = 3,
    eCrdnPointTypeFixedOnCentralBody = 15
};

enum AgECrdnSystemType
{
    eCrdnSystemTypeUnknown = -1,
    eCrdnSystemTypeAssembled = 0,
    eCrdnSystemTypeOnSurface = 1,
    eCrdnSystemTypeTemplate = 2
};

struct __declspec(uuid("e86a1015-8a3a-48e7-8256-6bb4556c6d3b"))
IAgCrdnSystemFindInSystemResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;
    __declspec(property(get=GetRate))
    STKUtil::IAgCartesian3VectorPtr Rate;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );
    STKUtil::IAgCartesian3VectorPtr GetRate ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("a4579666-eb3a-4690-a907-94bfe9cf5fde"))
IAgCrdnSystemTransformResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("df5065b7-ab26-463d-969b-5aac15b62816"))
IAgCrdnSystemTransformWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("ce6ae859-24ff-48a0-943d-6eaa6d13c9c3"))
IAgCrdnSystem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnSystemTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("45ec8d0c-93cd-4a11-a7c2-e25e80398cb3"))
IAgCrdnPointLocateInSystemWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("ae05da02-fbd3-419c-b595-a437ce6f2912"))
IAgCrdnPointLocateInSystemResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("56986b69-c1af-4d2b-9abb-70f7e17e0040"))
IAgCrdnPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
};

enum AgECrdnVectorType
{
    eCrdnVectorTypeUnknown = -1,
    eCrdnVectorTypeDisplacement = 0,
    eCrdnVectorTypeApoapsis = 1,
    eCrdnVectorTypeFixedAtEpoch = 2,
    eCrdnVectorTypeAngularVelocity = 3,
    eCrdnVectorTypeConing = 4,
    eCrdnVectorTypeCrossProduct = 5,
    eCrdnVectorTypeCustomScript = 6,
    eCrdnVectorTypeDerivative = 7,
    eCrdnVectorTypeAngleRate = 8,
    eCrdnVectorTypeEccentricity = 9,
    eCrdnVectorTypeFixedInAxes = 10,
    eCrdnVectorTypeTwoPlanesIntersection = 12,
    eCrdnVectorTypeLineOfNodes = 13,
    eCrdnVectorTypeModelAttachment = 14,
    eCrdnVectorTypeOrbitAngularMomentum = 15,
    eCrdnVectorTypeOrbitNormal = 16,
    eCrdnVectorTypePeriapsis = 17,
    eCrdnVectorTypeProjection = 18,
    eCrdnVectorTypeReflection = 19,
    eCrdnVectorTypeScaled = 20,
    eCrdnVectorTypeDirectionToStar = 21,
    eCrdnVectorTypeTemplate = 22,
    eCrdnVectorTypeAtTimeInstant = 23,
    eCrdnVectorTypeLinearCombination = 24,
    eCrdnVectorTypeProjectAlong = 25,
    eCrdnVectorTypeScalarLinearCombination = 26,
    eCrdnVectorTypeScalarScaled = 27,
    eCrdnVectorTypeVelocity = 28,
    eCrdnVectorTypePlugin = 29
};

enum AgECrdnAxesType
{
    eCrdnAxesTypeUnknown = -1,
    eCrdnAxesTypeLagrangeLibration = 0,
    eCrdnAxesTypeAngularOffset = 1,
    eCrdnAxesTypeFixedAtEpoch = 2,
    eCrdnAxesTypeBPlane = 3,
    eCrdnAxesTypeCustomScript = 4,
    eCrdnAxesTypeFromFile = 5,
    eCrdnAxesTypeFixed = 6,
    eCrdnAxesTypeAlignedAndConstrained = 7,
    eCrdnAxesTypeModelAttachment = 8,
    eCrdnAxesTypeSpinning = 9,
    eCrdnAxesTypeOnSurface = 10,
    eCrdnAxesTypeTrajectory = 11,
    eCrdnAxesTypeTemplate = 12,
    eCrdnAxesTypeAtTimeInstant = 13,
    eCrdnAxesTypePlugin = 14,
    eCrdnAxesTypeFile = 5
};

struct __declspec(uuid("45e20c8f-cc19-4c69-bd7a-dea601668e34"))
IAgCrdnAxesFindInAxesWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngularVelocity))
    STKUtil::IAgCartesian3VectorPtr AngularVelocity;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetAngularVelocity ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngularVelocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("d8b83f51-f4d7-438f-8d1f-5bac7fcc190d"))
IAgCrdnAxesFindInAxesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("b90c7093-7f80-4d23-8b90-67d852802fee"))
IAgCrdnAxesLabels : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelX,put=PutLabelX))
    _bstr_t LabelX;
    __declspec(property(get=GetLabelY,put=PutLabelY))
    _bstr_t LabelY;
    __declspec(property(get=GetLabelZ,put=PutLabelZ))
    _bstr_t LabelZ;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabelX ( );
    void PutLabelX (
        _bstr_t pRetVal );
    _bstr_t GetLabelY ( );
    void PutLabelY (
        _bstr_t pRetVal );
    _bstr_t GetLabelZ ( );
    void PutLabelZ (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelX (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelX (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelY (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelY (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelZ (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelZ (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("f75866c1-39af-44ce-bb8d-5b2dfedde5b7"))
IAgCrdnAxesTransformResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("ce2b2889-37f6-4d0d-be05-29d2c4f28a70"))
IAgCrdnAxesTransformWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("a4bf7ee2-45f9-4a60-9c40-106151dfa9ba"))
IAgCrdnVectorFindInAxesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("69e05bc0-f15d-4e5f-869b-b60eaa04a949"))
IAgCrdnVectorFindInAxesWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetRate))
    STKUtil::IAgCartesian3VectorPtr Rate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

enum AgECrdnAngleType
{
    eCrdnAngleTypeUnknown = -1,
    eCrdnAngleTypeBetweenVectors = 0,
    eCrdnAngleTypeBetweenPlanes = 1,
    eCrdnAngleTypeDihedralAngle = 2,
    eCrdnAngleTypeRotation = 3,
    eCrdnAngleTypeToPlane = 4,
    eCrdnAngleTypeTemplate = 5
};

struct __declspec(uuid("b1838a8b-e080-4dca-b27f-170c3501eb87"))
IAgCrdnAngleFindAngleResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    _variant_t Angle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    _variant_t GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("ce2e0e0d-f759-40ae-b27b-7e122926b4ce"))
IAgCrdnAngleFindAngleWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    _variant_t Angle;
    __declspec(property(get=GetAngleRate))
    _variant_t AngleRate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    _variant_t GetAngle ( );
    _variant_t GetAngleRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleRate (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("a9bac738-5600-41a4-a781-5a3637d62ecc"))
IAgCrdnAngleFindResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    _variant_t Angle;
    __declspec(property(get=GetVectorFrom))
    STKUtil::IAgCartesian3VectorPtr VectorFrom;
    __declspec(property(get=GetVectorTo))
    STKUtil::IAgCartesian3VectorPtr VectorTo;
    __declspec(property(get=GetVectorAbout))
    STKUtil::IAgCartesian3VectorPtr VectorAbout;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    _variant_t GetAngle ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorFrom ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorTo ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorAbout ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorFrom (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorTo (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorAbout (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("9e9617a5-faf7-4e7e-8274-3589bc6a7638"))
IAgCrdnAngleFindWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    _variant_t Angle;
    __declspec(property(get=GetAngleRate))
    _variant_t AngleRate;
    __declspec(property(get=GetVectorFrom))
    STKUtil::IAgCartesian3VectorPtr VectorFrom;
    __declspec(property(get=GetVectorTo))
    STKUtil::IAgCartesian3VectorPtr VectorTo;
    __declspec(property(get=GetVectorAbout))
    STKUtil::IAgCartesian3VectorPtr VectorAbout;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    _variant_t GetAngle ( );
    _variant_t GetAngleRate ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorFrom ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorTo ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorAbout ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleRate (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorFrom (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorTo (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorAbout (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

enum AgECrdnPlaneType
{
    eCrdnPlaneTypeUnknown = -1,
    eCrdnPlaneTypeNormal = 0,
    eCrdnPlaneTypeQuadrant = 1,
    eCrdnPlaneTypeTrajectory = 2,
    eCrdnPlaneTypeTriad = 3,
    eCrdnPlaneTypeTemplate = 4
};

struct __declspec(uuid("0690c045-dff8-4e73-bb79-66eb79ba43d5"))
IAgCrdnPlaneFindInAxesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("7ea9dfcf-2d40-4065-846f-c4f94ed9f26b"))
IAgCrdnPlaneFindInAxesWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetXAxisRate))
    STKUtil::IAgCartesian3VectorPtr XAxisRate;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;
    __declspec(property(get=GetYAxisRate))
    STKUtil::IAgCartesian3VectorPtr YAxisRate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxisRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("e2274ecd-7729-4c46-a513-04276243db80"))
IAgCrdnPlaneFindInSystemResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetOriginPosition))
    STKUtil::IAgCartesian3VectorPtr OriginPosition;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPosition (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("8f9a9ed2-4d72-438e-be8c-497f3f69432d"))
IAgCrdnPlaneFindInSystemWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetOriginPosition))
    STKUtil::IAgCartesian3VectorPtr OriginPosition;
    __declspec(property(get=GetOriginVelocity))
    STKUtil::IAgCartesian3VectorPtr OriginVelocity;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetXAxisRate))
    STKUtil::IAgCartesian3VectorPtr XAxisRate;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;
    __declspec(property(get=GetYAxisRate))
    STKUtil::IAgCartesian3VectorPtr YAxisRate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginVelocity ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxisRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPosition (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginVelocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("8407b3e6-b6d2-4bb3-89c7-b0d46645fe94"))
IAgCrdnPlaneLabels : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetXAxisLabel,put=PutXAxisLabel))
    _bstr_t XAxisLabel;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetXAxisLabel ( );
    void PutXAxisLabel (
        _bstr_t pRetVal );
    _bstr_t GetYAxisLabel ( );
    void PutYAxisLabel (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("023e87ad-73c0-4525-b428-45894a232f58"))
IAgCrdnContext : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTemplate))
    VARIANT_BOOL IsTemplate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("d31f841c-054b-4176-88c4-18ddf8ebc267"))
_IAgCrdnEvaluateResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ea8566c3-a79f-4c00-bd8a-d670b27b9ed0"))
_IAgCrdnEvaluateWithRateResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetRate))
    double Rate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetValue ( );
    double GetRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("e5ac174c-1fd8-4231-8b9e-12ad8c9a8705"))
_IAgCrdnEventIntervalResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetInterval))
    IAgCrdnIntervalPtr Interval;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalPtr GetInterval ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ struct IAgCrdnInterval * * ppRetVal ) = 0;
};

struct __declspec(uuid("2007f9f9-9769-4412-ae52-4fc4eda3c4d6"))
_IAgCrdnEventFindOccurrenceResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    _variant_t GetEpoch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("9872b7d3-5746-4a37-b37a-689785b9bbd5"))
_IAgCrdnFindTimesResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnIntervalCollectionPtr Intervals;
    __declspec(property(get=GetTimes))
    SAFEARRAY * Times;
    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalCollectionPtr GetIntervals ( );
    _variant_t GetStart ( );
    _variant_t GetStop ( );
    SAFEARRAY * GetTimes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Times (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c0e7d4e8-7cd9-453f-8812-01cbeca40e79"))
IAgCrdnIntervalVectorCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnIntervalCollectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnIntervalCollectionPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("73110f0f-b787-4a35-bd9d-f30cbe096747"))
_IAgCrdnIntervalsVectorResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervalCollections))
    IAgCrdnIntervalVectorCollectionPtr IntervalCollections;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalVectorCollectionPtr GetIntervalCollections ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalCollections (
        /*[out,retval]*/ struct IAgCrdnIntervalVectorCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("f969cac9-f110-4b17-819f-359858259593"))
_IAgCrdnEventIntervalCollectionOccurredResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("7fd79848-ed11-4f46-a079-52d578be1797"))
_IAgCrdnIntervalListResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("e15a240a-cc6b-4f89-b9a2-99a2b0aa3802"))
_IAgCrdnIntervalVectorCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnIntervalCollectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnIntervalCollectionPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("7c1c338f-987f-4e2d-9967-1c80dd58e4fc"))
_IAgCrdnConditionSetEvaluateResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValues))
    SAFEARRAY * Values;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    SAFEARRAY * GetValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("5d22194a-caf9-47d5-9816-b9dd4cead6d8"))
_IAgCrdnConditionSetEvaluateWithRateResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValues))
    SAFEARRAY * Values;
    __declspec(property(get=GetRates))
    SAFEARRAY * Rates;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    SAFEARRAY * GetValues ( );
    SAFEARRAY * GetRates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rates (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgECrdnCalcScalarType
{
    eCrdnCalcScalarTypeUnknown = -1,
    eCrdnCalcScalarTypeAngle = 0,
    eCrdnCalcScalarTypeFixedAtTimeInstant = 1,
    eCrdnCalcScalarTypeConstant = 2,
    eCrdnCalcScalarTypeDataElement = 3,
    eCrdnCalcScalarTypeDerivative = 4,
    eCrdnCalcScalarTypeElapsedTime = 5,
    eCrdnCalcScalarTypeFile = 6,
    eCrdnCalcScalarTypeFunction = 7,
    eCrdnCalcScalarTypeIntegral = 8,
    eCrdnCalcScalarTypeFunction2Var = 9,
    eCrdnCalcScalarTypeVectorMagnitude = 10,
    eCrdnCalcScalarTypePlugin = 11,
    eCrdnCalcScalarTypeCustomScript = 12,
    eCrdnCalcScalarTypeSurfaceDistanceBetweenPoints = 13
};

struct __declspec(uuid("33c9a2b6-243d-40bd-9b12-18b40dcf3db6"))
IAgCrdnEvaluateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("3fae0fff-f951-4c57-9196-0cd55308ec13"))
IAgCrdnEvaluateWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetRate))
    double Rate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetValue ( );
    double GetRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

enum AgECrdnKind
{
    eCrdnKindUnknown = -1,
    eCrdnKindInvalid = 0,
    eCrdnKindAxes = 1,
    eCrdnKindAngle = 2,
    eCrdnKindVector = 3,
    eCrdnKindPoint = 4,
    eCrdnKindPlane = 5,
    eCrdnKindSystem = 6,
    eCrdnKindEvent = 7,
    eCrdnKindEventArray = 8,
    eCrdnKindEventInterval = 9,
    eCrdnKindEventIntervalCollection = 10,
    eCrdnKindEventIntervalList = 11,
    eCrdnKindParameterSet = 12,
    eCrdnKindCalcScalar = 13,
    eCrdnKindCondition = 14,
    eCrdnKindConditionSet = 15,
    eCrdnKindVolumeGrid = 16,
    eCrdnKindVolume = 17
};

struct __declspec(uuid("33182920-ec43-40ce-989b-36c84476e307"))
IAgCrdnTypeInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeDescription))
    _bstr_t TypeDescription;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetShortTypeDescription))
    _bstr_t ShortTypeDescription;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTypeDescription ( );
    _bstr_t GetTypeName ( );
    _bstr_t GetShortTypeDescription ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortTypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

enum AgECrdnEventArrayType
{
    eCrdnEventArrayTypeUnknown = -1,
    eCrdnEventArrayTypeExtrema = 0,
    eCrdnEventArrayTypeStartStopTimes = 1,
    eCrdnEventArrayTypeMerged = 2,
    eCrdnEventArrayTypeFiltered = 3,
    eCrdnEventArrayTypeFixedStep = 4,
    eCrdnEventArrayTypeConditionCrossings = 5,
    eCrdnEventArrayTypeSignaled = 6,
    eCrdnEventArrayTypeFixedTimes = 7
};

struct __declspec(uuid("34bb38a4-28d5-4060-b1f6-c0634d66b786"))
IAgCrdnFindTimesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnIntervalCollectionPtr Intervals;
    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;
    __declspec(property(get=GetTimes))
    SAFEARRAY * Times;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalCollectionPtr GetIntervals ( );
    _variant_t GetStart ( );
    _variant_t GetStop ( );
    SAFEARRAY * GetTimes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Times (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("105bdfa9-38b4-4a9f-9e40-e582ca6a2e84"))
IAgCrdnEventArray : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("fe56d705-f750-4e1a-a44b-db81b2d7a25f"))
IAgCrdnInterp : IUnknown
{};

struct __declspec(uuid("7f3719ca-2ad8-449a-b5f5-11f7b493e93f"))
IAgCrdnSampling : IUnknown
{};

enum AgECrdnSaveDataOption
{
    eCrdnSaveDataOptionApplicationSettings = -1,
    eCrdnSaveDataOptionYes = 100,
    eCrdnSaveDataOptionNo = 10
};

struct __declspec(uuid("4318bd6c-46d2-40cd-aa10-d979048df4e5"))
IAgCrdnCalcScalar : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgECrdnEventType
{
    eCrdnEventTypeUnknown = -1,
    eCrdnEventTypeEpoch = 0,
    eCrdnEventTypeExtremum = 1,
    eCrdnEventTypeFromInterval = 2,
    eCrdnEventTypeSignaled = 3,
    eCrdnEventTypeTimeOffset = 4,
    eCrdnEventTypeSmartEpoch = 5
};

struct __declspec(uuid("c41e3f8a-f959-411c-bb6c-34f25cd9db6f"))
IAgCrdnEventFindOccurrenceResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    _variant_t GetEpoch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("97ebf8c3-5c4f-40fe-bfef-4d5dcb51d4fa"))
IAgCrdnEvent : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("775df1e3-76cf-4f16-84f4-342f4e23fa40"))
_IAgCrdnCalcScalarFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableCalcScalarPluginDisplayNames))
    SAFEARRAY * AvailableCalcScalarPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableCalcScalarPluginDisplayNames ( );
    IAgCrdnCalcScalarPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnCalcScalarType Type );
    IAgCrdnCalcScalarPtr CreateCalcScalarAngle (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarFixedAtTimeInstant (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarConstant (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarDataElement (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t DataProvider,
        _bstr_t ElementName );
    IAgCrdnCalcScalarPtr CreateCalcScalarDataElementWithGroup (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t DataProvider,
        _bstr_t GroupName,
        _bstr_t ElementName );
    IAgCrdnCalcScalarPtr CreateCalcScalarDerivative (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarElapsedTime (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarFile (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnCalcScalarPtr CreateCalcScalarFunction (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarIntegral (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarFunction2Var (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarVectorMagnitude (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarPluginFromDisplayName (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t DisplayName );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnCalcScalarType EType );
    IAgCrdnCalcScalarPtr CreateCalcScalarFromCustomScript (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnCalcScalarPtr CreateCalcScalarSurfaceDistanceBetweenPoints (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableCalcScalarPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnCalcScalarType Type,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarAngle (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFixedAtTimeInstant (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarConstant (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarDataElement (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR ElementName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarDataElementWithGroup (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR ElementName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarDerivative (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarElapsedTime (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFunction (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarIntegral (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFunction2Var (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarVectorMagnitude (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarPluginFromDisplayName (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnCalcScalarType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFromCustomScript (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarSurfaceDistanceBetweenPoints (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
};

struct __declspec(uuid("8b7f5f3d-907e-481c-8228-8d532c08be82"))
IAgCrdnEventIntervalResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetInterval))
    IAgCrdnIntervalPtr Interval;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalPtr GetInterval ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ struct IAgCrdnInterval * * ppRetVal ) = 0;
};

enum AgECrdnFileInterpolatorType
{
    eCrdnFileInterpolatorInvalid = -1,
    eCrdnFileInterpolatorTypeLagrange = 1,
    eCrdnFileInterpolatorTypeHermite = 2,
    eCrdnFileInterpolatorTypeHoldPrevious = 3,
    eCrdnFileInterpolatorTypeHoldNext = 4,
    eCrdnFileInterpolatorTypeHoldNearest = 5
};

struct __declspec(uuid("6dffaa52-acdb-46c7-989a-0bbceaf2b7f7"))
IAgCrdnConverge : IUnknown
{};

enum AgECrdnDimensionInheritance
{
    eCrdnDimensionInheritanceNone = 0,
    eCrdnDimensionInheritanceFromX = 1,
    eCrdnDimensionInheritanceFromY = 2
};

enum AgECrdnIntegrationWindowType
{
    eCrdnIntegrationWindowTypeTotal = 0,
    eCrdnIntegrationWindowTypeCumulativeToCurrent = 1,
    eCrdnIntegrationWindowTypeCumulativeFromCurrent = 2,
    eCrdnIntegrationWindowTypeSlidingWindow = 3
};

enum AgECrdnEventIntervalListType
{
    eCrdnEventIntervalListTypeUnknown = -1,
    eCrdnEventIntervalListTypeFromFile = 0,
    eCrdnEventIntervalListTypeMerged = 1,
    eCrdnEventIntervalListTypeFiltered = 2,
    eCrdnEventIntervalListTypeCondition = 3,
    eCrdnEventIntervalListTypeScaled = 4,
    eCrdnEventIntervalListTypeSignaled = 5,
    eCrdnEventIntervalListTypeTimeOffset = 6,
    eCrdnEventIntervalListTypeFile = 0,
    eCrdnEventIntervalListTypeFixed = 7
};

struct __declspec(uuid("ea887c81-377e-4867-833e-5a8615046cdd"))
IAgCrdnIntervalListResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("05336fc7-a0e0-4576-9f06-041020ab1a0e"))
IAgCrdnEventIntervalList : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9f4da27d-391e-44cb-814f-3031f80635ff"))
IAgCrdnIntegral : IUnknown
{};

enum AgECrdnConditionType
{
    eCrdnConditionTypeUnknown = -1,
    eCrdnConditionTypeScalarBounds = 0,
    eCrdnConditionTypeCombined = 1
};

enum AgECrdnConditionCombinedOperationType
{
    eCrdnConditionCombinedOperationTypeAND = 1,
    eCrdnConditionCombinedOperationTypeOR = 2,
    eCrdnConditionCombinedOperationTypeXOR = 3,
    eCrdnConditionCombinedOperationTypeMINUS = 4
};

struct __declspec(uuid("f2090f5c-8394-48ba-ae93-4d3ec6e9ccfe"))
IAgCrdnCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnConditionType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("a90627d1-60f5-43b7-a427-81c7c0f54a36"))
_IAgCrdnConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnConditionType Type );
    IAgCrdnConditionPtr CreateConditionScalarBounds (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnConditionType EType );
    IAgCrdnConditionPtr CreateConditionCombined (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnConditionType Type,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateConditionScalarBounds (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnConditionType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateConditionCombined (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
};

enum AgECrdnConditionThresholdOption
{
    eCrdnConditionThresholdOptionAboveMin = 1,
    eCrdnConditionThresholdOptionBelowMax = 2,
    eCrdnConditionThresholdOptionInsideMinMax = 3,
    eCrdnConditionThresholdOptionOutsideMinMax = 4
};

enum AgECrdnConditionSetType
{
    eCrdnConditionSetTypeUnknown = -1,
    eCrdnConditionSetTypeScalarThresholds = 0
};

struct __declspec(uuid("6ba91a0b-ee1a-45eb-ae9f-ee845a133b4f"))
IAgCrdnConditionSetEvaluateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValues))
    SAFEARRAY * Values;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    SAFEARRAY * GetValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("d077b2c6-087f-4891-87c7-2db5c8f3e1fb"))
IAgCrdnConditionSetEvaluateWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetValues))
    SAFEARRAY * Values;
    __declspec(property(get=GetRates))
    SAFEARRAY * Rates;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    SAFEARRAY * GetValues ( );
    SAFEARRAY * GetRates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rates (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("1ae76dc9-5dba-4a74-8c05-8638404e75a8"))
IAgCrdnConditionSet : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnConditionSetType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionSetType GetType ( );
    IAgCrdnConditionSetEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnConditionSetEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnConditionSetEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnConditionSetEvaluateWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("389a641e-6ffc-4b4c-838e-27c1ee3e2fcc"))
_IAgCrdnConditionSetFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionSetPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnConditionSetType Type );
    IAgCrdnConditionSetPtr CreateScalarThresholds (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnConditionSetType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnConditionSetType Type,
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateScalarThresholds (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnConditionSetType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgECrdnThreshConvergeSense
{
    eCrdnThreshConvergeSenseSimple = 0,
    eCrdnThreshConvergeSenseAbove = 1,
    eCrdnThreshConvergeSenseBelow = 2
};

enum AgECrdnSatisfactionCrossing
{
    eCrdnSatisfactionCrossingNone = 0,
    eCrdnSatisfactionCrossingIn = 1,
    eCrdnSatisfactionCrossingOut = 2
};

enum AgECrdnExtremumConstants
{
    eCrdnExtremumMinimum = 1,
    eCrdnExtremumMaximum = 2
};

struct __declspec(uuid("a2279830-ac20-4b90-9bff-f87297ee916c"))
_IAgCrdnEventArrayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventArrayPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventArrayType Type );
    IAgCrdnEventArrayPtr CreateEventArrayExtrema (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayStartStopTimes (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayMerged (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayFiltered (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayFixedStep (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayConditionCrossings (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArraySignaled (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventArrayType EType );
    IAgCrdnEventArrayPtr CreateEventArrayFixedTimes (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventArrayType Type,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayExtrema (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayStartStopTimes (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayMerged (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayFiltered (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayFixedStep (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayConditionCrossings (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArraySignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventArrayType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayFixedTimes (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
};

enum AgECrdnEventArrayFilterType
{
    eCrdnEventArrayFilterTypeSkipTimeStep = 0,
    eCrdnEventArrayFilterTypeSkipCount = 1
};

enum AgECrdnSampledReferenceTime
{
    eCrdnSampledReferenceTimeReferenceEvent = 0,
    eCrdnSampledReferenceTimeStartOfEachInterval = 1,
    eCrdnSampledReferenceTimeStopOfEachInterval = 2,
    eCrdnSampledReferenceTimeStartOfIntervalList = 3,
    eCrdnSampledReferenceTimeStopOfIntervalList = 4
};

enum AgECrdnSignalSense
{
    eCrdnSignalSenseReceive = 1,
    eCrdnSignalSenseTransmit = 2
};

struct __declspec(uuid("31f8ef59-5259-428e-b82f-05ec915d519a"))
IAgCrdnSignalDelay : IUnknown
{};

enum AgECrdnStartStopOption
{
    eCrdnStartStopOptionCountStartOnly = 1,
    eCrdnStartStopOptionCountStopOnly = 2,
    eCrdnStartStopOptionCountStartStop = 3
};

enum AgECrdnSmartEpochState
{
    eCrdnSmartEpochStateExplicit = 0,
    eCrdnSmartEpochStateImplicit = 3
};

struct __declspec(uuid("4359ff91-520d-4484-ac92-1b23d38698b7"))
IAgCrdnEventSmartEpoch : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeInstant))
    _variant_t TimeInstant;
    __declspec(property(get=GetReferenceEvent))
    IAgCrdnEventPtr ReferenceEvent;
    __declspec(property(get=GetState,put=PutState))
    enum AgECrdnSmartEpochState State;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTimeInstant ( );
    IAgCrdnEventPtr GetReferenceEvent ( );
    enum AgECrdnSmartEpochState GetState ( );
    void PutState (
        enum AgECrdnSmartEpochState pRetVal );
    HRESULT SetExplicitTime (
        const _variant_t & Epoch );
    HRESULT SetImplicitTime (
        struct IAgCrdnEvent * EventEpoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeInstant (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceEvent (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum AgECrdnSmartEpochState * pRetVal ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum AgECrdnSmartEpochState pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetExplicitTime (
        /*[in]*/ VARIANT Epoch ) = 0;
      virtual HRESULT __stdcall raw_SetImplicitTime (
        /*[in]*/ struct IAgCrdnEvent * EventEpoch ) = 0;
};

struct __declspec(uuid("ab92be81-0081-4631-8c76-898da1b09d33"))
_IAgCrdnEventFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventType Type );
    IAgCrdnEventPtr CreateEventEpoch (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventExtremum (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventStartStopTime (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventSignaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventTimeOffset (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventSmartEpochPtr CreateSmartEpochFromTime (
        const _variant_t & Epoch );
    IAgCrdnEventSmartEpochPtr CreateSmartEpochFromEvent (
        struct IAgCrdnEvent * RefEvent );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventType Type,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventEpoch (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventExtremum (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventStartStopTime (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventTimeOffset (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSmartEpochFromTime (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSmartEpochFromEvent (
        /*[in]*/ struct IAgCrdnEvent * RefEvent,
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgECrdnEventIntervalType
{
    eCrdnEventIntervalTypeUnknown = -1,
    eCrdnEventIntervalTypeFixed = 0,
    eCrdnEventIntervalTypeFixedDuration = 1,
    eCrdnEventIntervalTypeBetweenTimeInstants = 2,
    eCrdnEventIntervalTypeFromIntervalList = 3,
    eCrdnEventIntervalTypeScaled = 4,
    eCrdnEventIntervalTypeSignaled = 5,
    eCrdnEventIntervalTypeTimeOffset = 6,
    eCrdnEventIntervalTypeSmartInterval = 7
};

enum AgECrdnEventIntervalCollectionType
{
    eCrdnEventIntervalCollectionTypeUnknown = -1,
    eCrdnEventIntervalCollectionTypeLighting = 0,
    eCrdnEventIntervalCollectionTypeSignaled = 1,
    eCrdnEventIntervalCollectionTypeCondition = 2
};

struct __declspec(uuid("c8b0c679-523e-44f7-92d5-3aa4cbcb404f"))
IAgCrdnIntervalsVectorResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervalCollections))
    IAgCrdnIntervalVectorCollectionPtr IntervalCollections;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnIntervalVectorCollectionPtr GetIntervalCollections ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalCollections (
        /*[out,retval]*/ struct IAgCrdnIntervalVectorCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("dc3d45d7-0f86-4827-8668-94e2c6547779"))
IAgCrdnEventIntervalCollectionOccurredResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("03f42d68-83f1-485e-8274-c28f25a70fe3"))
IAgCrdnEventIntervalCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalCollectionType Type;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalCollectionType GetType ( );
    SAFEARRAY * GetLabels ( );
    IAgCrdnIntervalsVectorResultPtr FindIntervalCollection ( );
    IAgCrdnEventIntervalCollectionOccurredResultPtr Occurred (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalCollectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervalCollection (
        /*[out,retval]*/ struct IAgCrdnIntervalsVectorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionOccurredResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("3e49cc9a-3e99-4ede-8300-f84014b5145f"))
_IAgCrdnEventIntervalCollectionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalCollectionPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventIntervalCollectionType Type );
    IAgCrdnEventIntervalCollectionPtr CreateEventIntervalCollectionLighting (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalCollectionPtr CreateEventIntervalCollectionSignaled (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventIntervalCollectionType EType );
    IAgCrdnEventIntervalCollectionPtr CreateEventIntervalCollectionSatisfaction (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventIntervalCollectionType Type,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalCollectionLighting (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalCollectionSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventIntervalCollectionType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalCollectionSatisfaction (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("417650ed-02d8-4aab-945c-e3a62dfa5e53"))
IAgCrdnEventInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("931bb564-056a-4e4c-83b0-5e80e2b476a5"))
_IAgCrdnEventIntervalFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventIntervalType Type );
    IAgCrdnEventIntervalPtr CreateEventIntervalFixed (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalFixedDuration (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalBetweenTimeInstants (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalFromIntervalList (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalScaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalSignaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalTimeOffset (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventIntervalType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventIntervalType Type,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalFixed (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalFixedDuration (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalBetweenTimeInstants (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalFromIntervalList (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalScaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalTimeOffset (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventIntervalType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgECrdnIntervalSelection
{
    eCrdnIntervalSelectionFromStart = 1,
    eCrdnIntervalSelectionFromEnd = 2,
    eCrdnIntervalSelectionMaxDuration = 4,
    eCrdnIntervalSelectionMinDuration = 5,
    eCrdnIntervalSelectionMaxGap = 9,
    eCrdnIntervalSelectionMinGap = 10,
    eCrdnIntervalSelectionSpan = 100
};

struct __declspec(uuid("f3a8a2dd-3634-4a3c-a1fe-c4d2b546a524"))
_IAgCrdnEventIntervalListFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventIntervalListType Type );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFromFile (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListMerged (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFiltered (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListCondition (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListScaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListSignaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListTimeOffset (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventIntervalListType EType );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFile (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFixed (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventIntervalListType Type,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFromFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListMerged (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFiltered (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListCondition (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListScaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListTimeOffset (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventIntervalListType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFixed (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
};

enum AgECrdnPruneFilter
{
    eCrdnPruneFilterUnknown = 0,
    eCrdnPruneFilterFirstIntervals = 1,
    eCrdnPruneFilterLastIntervals = 2,
    eCrdnPruneFilterIntervals = 3,
    eCrdnPruneFilterGaps = 4,
    eCrdnPruneFilterSatisfactionIntervals = 5,
    eCrdnPruneFilterRelativeSatisfactionIntervals = 6
};

struct __declspec(uuid("e2e922af-bba6-455c-85e8-61a4871e28c2"))
IAgCrdnPruneFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
};

struct __declspec(uuid("e8d4771a-048d-480b-8ed0-d75af6a6cb94"))
IAgCrdnPruneFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPruneFilterPtr Create (
        enum AgECrdnPruneFilter EFilter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ enum AgECrdnPruneFilter EFilter,
        /*[out,retval]*/ struct IAgCrdnPruneFilter * * ppRetVal ) = 0;
};

enum AgECrdnEventListMergeOperation
{
    eCrdnEventListMergeOperationAND = 0,
    eCrdnEventListMergeOperationOR = 1,
    eCrdnEventListMergeOperationXOR = 2,
    eCrdnEventListMergeOperationMINUS = 3
};

enum AgECrdnSmartIntervalState
{
    eCrdnSmartIntervalStateExplicit = 0,
    eCrdnSmartIntervalStateImplicit = 1,
    eCrdnSmartIntervalStateStartStop = 2,
    eCrdnSmartIntervalStateStartDuration = 4,
    eCrdnSmartIntervalStateExplicitDuration = 3
};

struct __declspec(uuid("2fbb86ec-8414-415f-b059-6c6d7f7ebfcc"))
_IAgCrdnFirstIntervalsFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;
    __declspec(property(get=GetMaximumNumberOfIntervals,put=PutMaximumNumberOfIntervals))
    int MaximumNumberOfIntervals;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );
    int GetMaximumNumberOfIntervals ( );
    void PutMaximumNumberOfIntervals (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumNumberOfIntervals (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfIntervals (
        /*[in]*/ int pRetVal ) = 0;
};

enum AgECrdnIntervalDurationKind
{
    eCrdnIntervalDurationKindAtLeast = 0,
    eCrdnIntervalDurationKindAtMost = 1
};

struct __declspec(uuid("ebf2a703-8e80-4c7f-9da3-316c03d00860"))
_IAgCrdnGapsFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;
    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetGapDuration,put=PutGapDuration))
    double GapDuration;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );
    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetGapDuration ( );
    void PutGapDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_GapDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GapDuration (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECrdnIntegralType
{
    eCrdnIntegralTypeFixedStepSimpson = 2,
    eCrdnIntegralTypeFixedStepTrapz = 1,
    eCrdnIntegralTypeAdaptiveStep = 3
};

enum AgECrdnInterpolatorType
{
    eCrdnInterpolatorInvalid = -1,
    eCrdnInterpolatorTypeLagrange = 1,
    eCrdnInterpolatorTypeHermite = 2
};

struct __declspec(uuid("3a158d2a-016b-4059-a763-934f1859eb8e"))
_IAgCrdnIntervalsFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetIntervalDuration,put=PutIntervalDuration))
    double IntervalDuration;
    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );
    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetIntervalDuration ( );
    void PutIntervalDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalDuration (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("559c0f72-5c62-494a-aef0-d047d0f3da0d"))
_IAgCrdnLastIntervalsFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumNumberOfIntervals,put=PutMaximumNumberOfIntervals))
    int MaximumNumberOfIntervals;
    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );
    int GetMaximumNumberOfIntervals ( );
    void PutMaximumNumberOfIntervals (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumNumberOfIntervals (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfIntervals (
        /*[in]*/ int pRetVal ) = 0;
};

enum AgECrdnParameterSetType
{
    eCrdnParameterSetTypeUnknown = -1,
    eCrdnParameterSetTypeAttitude = 0,
    eCrdnParameterSetTypeGroundTrajectory = 1,
    eCrdnParameterSetTypeTrajectory = 2,
    eCrdnParameterSetTypeOrbit = 3,
    eCrdnParameterSetTypeVector = 4
};

struct __declspec(uuid("40e91ea6-63b0-4d3d-971c-2dc7b6a19c9d"))
IAgCrdnParameterSet : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("fe1f6c54-48b0-4f48-b978-fa05347bb5f1"))
_IAgCrdnParameterSetFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnParameterSetPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnParameterSetType Type );
    IAgCrdnParameterSetPtr CreateParameterSetAttitude (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetGroundTrajectory (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetTrajectory (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetOrbit (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetVector (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnParameterSetType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnParameterSetType Type,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetAttitude (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetGroundTrajectory (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetTrajectory (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetOrbit (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetVector (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnParameterSetType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("cba5ebc5-a631-41c3-b055-9fd2e2a3c689"))
_IAgCrdnPruneFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
};

struct __declspec(uuid("79b793d7-4773-4821-b010-8c77279e44d2"))
_IAgCrdnPruneFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPruneFilterPtr Create (
        enum AgECrdnPruneFilter EFilter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ enum AgECrdnPruneFilter EFilter,
        /*[out,retval]*/ struct IAgCrdnPruneFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("b519187a-c63e-4063-813a-f5bda850d918"))
_IAgCrdnRelativeSatisfactionConditionFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetRelativeIntervalDuration,put=PutRelativeIntervalDuration))
    double RelativeIntervalDuration;
    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );
    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetRelativeIntervalDuration ( );
    void PutRelativeIntervalDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeIntervalDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeIntervalDuration (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECrdnSamplingMethod
{
    eCrdnSamplingMethodUnknown = 0,
    eCrdnSamplingMethodFixedStep = 1,
    eCrdnSamplingMethodRelativeTolerance = 2,
    eCrdnSamplingMethodCurvatureTolerance = 3
};

struct __declspec(uuid("0f1d3bc0-70fb-4782-8aa8-37f247dcec56"))
IAgCrdnSamplingMethod : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType))
    enum AgECrdnSamplingMethod MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSamplingMethod GetMethodType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnSamplingMethod * pRetVal ) = 0;
};

struct __declspec(uuid("d05ba4a2-2154-470a-8fc0-b1772ee5a776"))
IAgCrdnSamplingMethodFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSamplingMethodPtr CreateFixedStep (
        double FixedStep );
    IAgCrdnSamplingMethodPtr CreateCurvatureTolerance (
        double CurvatureTolerance );
    IAgCrdnSamplingMethodPtr CreateRelativeTolerance (
        double RelativeTolerance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFixedStep (
        /*[in]*/ double FixedStep,
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurvatureTolerance (
        /*[in]*/ double CurvatureTolerance,
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRelativeTolerance (
        /*[in]*/ double RelativeTolerance,
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
};

struct __declspec(uuid("1ed10fd0-e26c-4eee-bd76-6bf1369fe6ea"))
_IAgCrdnSamplingCurvatureTolerance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetCurvatureTolerance,put=PutCurvatureTolerance))
    double CurvatureTolerance;
    __declspec(property(get=GetMethodType))
    enum AgECrdnSamplingMethod MethodType;
    __declspec(property(get=GetMinimumTimeStep,put=PutMinimumTimeStep))
    double MinimumTimeStep;
    __declspec(property(get=GetMaximumTimeStep,put=PutMaximumTimeStep))
    double MaximumTimeStep;
    __declspec(property(get=GetStepAtBoundaries,put=PutStepAtBoundaries))
    double StepAtBoundaries;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSamplingMethod GetMethodType ( );
    double GetMinimumTimeStep ( );
    void PutMinimumTimeStep (
        double pRetVal );
    double GetMaximumTimeStep ( );
    void PutMaximumTimeStep (
        double pRetVal );
    double GetStepAtBoundaries ( );
    void PutStepAtBoundaries (
        double pRetVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pRetVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pRetVal );
    double GetCurvatureTolerance ( );
    void PutCurvatureTolerance (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnSamplingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StepAtBoundaries (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StepAtBoundaries (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurvatureTolerance (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("63a6f441-5ffc-43b8-892b-dda92f045a22"))
_IAgCrdnSamplingFixedStep : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetMethodType))
    enum AgECrdnSamplingMethod MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSamplingMethod GetMethodType ( );
    double GetTimeStep ( );
    void PutTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnSamplingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ab22c1f4-825b-43a8-8bbc-e9d1353b5deb"))
_IAgCrdnSamplingMethod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType))
    enum AgECrdnSamplingMethod MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSamplingMethod GetMethodType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnSamplingMethod * pRetVal ) = 0;
};

struct __declspec(uuid("8e706576-1496-47fe-9c10-4c8b44128034"))
_IAgCrdnSamplingMethodFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSamplingMethodPtr CreateFixedStep (
        double FixedStep );
    IAgCrdnSamplingMethodPtr CreateCurvatureTolerance (
        double CurvatureTolerance );
    IAgCrdnSamplingMethodPtr CreateRelativeTolerance (
        double RelativeTolerance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFixedStep (
        /*[in]*/ double FixedStep,
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurvatureTolerance (
        /*[in]*/ double CurvatureTolerance,
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRelativeTolerance (
        /*[in]*/ double RelativeTolerance,
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
};

struct __declspec(uuid("5038da0f-7b35-40f9-8d52-4e94d2e9c498"))
_IAgCrdnSamplingRelativeTolerance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumTimeStep,put=PutMinimumTimeStep))
    double MinimumTimeStep;
    __declspec(property(get=GetMaximumTimeStep,put=PutMaximumTimeStep))
    double MaximumTimeStep;
    __declspec(property(get=GetStepAtBoundaries,put=PutStepAtBoundaries))
    double StepAtBoundaries;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetMethodType))
    enum AgECrdnSamplingMethod MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSamplingMethod GetMethodType ( );
    double GetMinimumTimeStep ( );
    void PutMinimumTimeStep (
        double pRetVal );
    double GetMaximumTimeStep ( );
    void PutMaximumTimeStep (
        double pRetVal );
    double GetStepAtBoundaries ( );
    void PutStepAtBoundaries (
        double pRetVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pRetVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnSamplingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StepAtBoundaries (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StepAtBoundaries (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d72ba182-46dc-42ce-b94f-5e689ff635bf"))
_IAgCrdnSatisfactionConditionFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetIntervalDuration,put=PutIntervalDuration))
    double IntervalDuration;
    __declspec(property(get=GetFilterType))
    enum AgECrdnPruneFilter FilterType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPruneFilter GetFilterType ( );
    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetIntervalDuration ( );
    void PutIntervalDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnPruneFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalDuration (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECrdnSignalPathReferenceSystem
{
    eCrdnSignalPathReferenceSystemUseAccessDefault = -1,
    eCrdnSignalPathReferenceSystemCentralBodyInertial = 0,
    eCrdnSignalPathReferenceSystemSolarSystemBarycenter = 1,
    eCrdnSignalPathReferenceSystemCustom = 2
};

enum AgECrdnSpeedOptions
{
    eCrdnLightTransmissionSpeed = 1,
    eCrdnCustomTransmissionSpeed = 2
};

enum AgECrdnVolumeType
{
    eCrdnVolumeTypeUnknown = -1,
    eCrdnVolumeTypeCombined = 0,
    eCrdnVolumeTypeLighting = 1,
    eCrdnVolumeTypeOverTime = 2,
    eCrdnVolumeTypeFromGrid = 3,
    eCrdnVolumeTypeFromCalc = 4,
    eCrdnVolumeTypeFromTimeSatisfaction = 5,
    eCrdnVolumeTypeFromCondition = 6,
    eCrdnVolumeTypeInview = 7
};

struct __declspec(uuid("e3bb7e4a-1e3a-429b-bcd3-40f2e469d28b"))
IAgCrdnVolume : IUnknown
{};

struct __declspec(uuid("0ef57e38-0333-4372-8c2e-c227ffb04963"))
_IAgCrdnVolumeFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVolumePtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnVolumeType Type );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVolumeType EType );
    IAgCrdnVolumePtr CreateVolumeCombined (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeLighting (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeOverTime (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromGrid (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromCalc (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromTimeSatisfaction (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromCondition (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeInview (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVolumeType Type,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVolumeType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeCombined (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeLighting (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeOverTime (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromGrid (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromCalc (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromTimeSatisfaction (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromCondition (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeInview (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
};

enum AgECrdnVolumeGridType
{
    eCrdnVolumeGridTypeUnknown = -1,
    eCrdnVolumeGridTypeCartesian = 0,
    eCrdnVolumeGridTypeCylindrical = 1,
    eCrdnVolumeGridTypeSpherical = 2,
    eCrdnVolumeGridTypeConstrained = 3,
    eCrdnVolumeGridTypeLatLonAlt = 4,
    eCrdnVolumeGridTypeBearingAlt = 5
};

struct __declspec(uuid("a896ca88-8eec-4922-b677-5f653380cad4"))
IAgCrdnVolumeGrid : IUnknown
{};

struct __declspec(uuid("93fa9c57-46f2-4457-a7e1-7b2e9dd0aa68"))
_IAgCrdnVolumeGridFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVolumeGridPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnVolumeGridType Type );
    IAgCrdnVolumeGridPtr CreateVolumeGridCartesian (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVolumeGridType EType );
    IAgCrdnVolumeGridPtr CreateVolumeGridCylindrical (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridSpherical (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridConstrained (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridLatLonAlt (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridBearingAlt (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVolumeGridType Type,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridCartesian (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVolumeGridType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridCylindrical (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridSpherical (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridConstrained (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridLatLonAlt (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridBearingAlt (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
};

enum AgECrdnVolumetricGridValuesMethodType
{
    eCrdnVolumetricGridValuesMethodMethodUnknown = -1,
    eCrdnVolumetricGridValuesMethodMethodFixedNumSteps = 0,
    eCrdnVolumetricGridValuesMethodMethodFixedStepSize = 1,
    eCrdnVolumetricGridValuesMethodMethodCustomValues = 2
};

struct __declspec(uuid("66f283d8-bd27-4cf3-9750-759e8ce9a889"))
IAgCrdnGridValuesMethod : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
};

struct __declspec(uuid("dab20e4c-5930-472e-9727-a2b6187c3619"))
IAgCrdnGridValuesFixedStep : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetIncludeMinMax,put=PutIncludeMinMax))
    VARIANT_BOOL IncludeMinMax;
    __declspec(property(get=GetReferenceValue,put=PutReferenceValue))
    double ReferenceValue;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;

    //
    // Wrapper methods for error-handling
    //

    double GetMin ( );
    void PutMin (
        double pRetVal );
    double GetMax ( );
    void PutMax (
        double pRetVal );
    VARIANT_BOOL GetIncludeMinMax ( );
    void PutIncludeMinMax (
        VARIANT_BOOL pRetVal );
    double GetReferenceValue ( );
    void PutReferenceValue (
        double pRetVal );
    double GetStep ( );
    void PutStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeMinMax (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeMinMax (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceValue (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("252af502-b1fa-447c-8a46-2c29cf8ea15e"))
IAgCrdnGridValuesFixedNumberOfSteps : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    int NumberOfSteps;

    //
    // Wrapper methods for error-handling
    //

    double GetMin ( );
    void PutMin (
        double pRetVal );
    double GetMax ( );
    void PutMax (
        double pRetVal );
    int GetNumberOfSteps ( );
    void PutNumberOfSteps (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("4a43f951-2954-4c31-9504-ef0c46cdcd77"))
IAgCrdnGridValuesCustom : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValues,put=PutValues))
    SAFEARRAY * Values;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetValues ( );
    void PutValues (
        SAFEARRAY * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
};

struct __declspec(uuid("520af2d5-a8bb-4f8c-84ef-8a6adfcbb790"))
_IAgCrdnGridCoordinateDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGridValuesMethod))
    IAgCrdnGridValuesMethodPtr GridValuesMethod;
    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );
    IAgCrdnGridValuesMethodPtr GetGridValuesMethod ( );
    IAgCrdnGridValuesFixedStepPtr SetGridValuesFixedStep (
        double Min,
        double Max,
        VARIANT_BOOL IncludeMinMax,
        double RefValue,
        double FixedStep );
    IAgCrdnGridValuesFixedNumberOfStepsPtr SetGridValuesFixedNumberOfSteps (
        double Min,
        double Max,
        int NumSteps );
    IAgCrdnGridValuesCustomPtr SetGridValuesCustom (
        SAFEARRAY * * Values );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GridValuesMethod (
        /*[out,retval]*/ struct IAgCrdnGridValuesMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetGridValuesFixedStep (
        /*[in]*/ double Min,
        /*[in]*/ double Max,
        /*[in]*/ VARIANT_BOOL IncludeMinMax,
        /*[in]*/ double RefValue,
        /*[in]*/ double FixedStep,
        /*[out,retval]*/ struct IAgCrdnGridValuesFixedStep * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetGridValuesFixedNumberOfSteps (
        /*[in]*/ double Min,
        /*[in]*/ double Max,
        /*[in]*/ int NumSteps,
        /*[out,retval]*/ struct IAgCrdnGridValuesFixedNumberOfSteps * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetGridValuesCustom (
        /*[in]*/ SAFEARRAY * * Values,
        /*[out,retval]*/ struct IAgCrdnGridValuesCustom * * ppRetVal ) = 0;
};

struct __declspec(uuid("84ffbea2-0915-4eb5-a3e7-5dc11d5e6763"))
_IAgCrdnGridValuesCustom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues,put=PutValues))
    SAFEARRAY * Values;
    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );
    SAFEARRAY * GetValues ( );
    void PutValues (
        SAFEARRAY * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
};

struct __declspec(uuid("0ba01255-f8de-4e48-b18e-ed1bac2e83f5"))
_IAgCrdnGridValuesFixedNumberOfSteps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    int NumberOfSteps;
    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );
    double GetMin ( );
    void PutMin (
        double pRetVal );
    double GetMax ( );
    void PutMax (
        double pRetVal );
    int GetNumberOfSteps ( );
    void PutNumberOfSteps (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("93abd809-9244-41b4-a1f7-2cf1130cb2eb"))
_IAgCrdnGridValuesFixedStep : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceValue,put=PutReferenceValue))
    double ReferenceValue;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;
    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetIncludeMinMax,put=PutIncludeMinMax))
    VARIANT_BOOL IncludeMinMax;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );
    double GetMin ( );
    void PutMin (
        double pRetVal );
    double GetMax ( );
    void PutMax (
        double pRetVal );
    VARIANT_BOOL GetIncludeMinMax ( );
    void PutIncludeMinMax (
        VARIANT_BOOL pRetVal );
    double GetReferenceValue ( );
    void PutReferenceValue (
        double pRetVal );
    double GetStep ( );
    void PutStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeMinMax (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeMinMax (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceValue (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c2eefba1-8348-4cd6-8801-5fdf5d743b28"))
_IAgCrdnGridValuesMethod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
};

enum AgECrdnVolumeAberrationType
{
    eCrdnVolumeAberrationUnknown = -1,
    eCrdnVolumeAberrationTotal = 0,
    eCrdnVolumeAberrationAnnual = 1,
    eCrdnVolumeAberrationNone = 2
};

enum AgECrdnVolumeClockHostType
{
    eCrdnVolumeClockHostUnknown = -1,
    eCrdnVolumeClockHostBase = 0,
    eCrdnVolumeClockHostTarget = 1
};

enum AgECrdnVolumeTimeSenseType
{
    eCrdnVolumeTimeSenseUnknown = -1,
    eCrdnVolumeTimeSenseTransmit = 0,
    eCrdnVolumeTimeSenseReceive = 1
};

struct __declspec(uuid("76a31198-2ded-4104-960c-b5d22ca0a8fc"))
_IAgCrdnLightTimeDelay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLightTimeDelay,put=PutUseLightTimeDelay))
    VARIANT_BOOL UseLightTimeDelay;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;
    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgECrdnVolumeAberrationType AberrationType;
    __declspec(property(get=GetClockHost,put=PutClockHost))
    enum AgECrdnVolumeClockHostType ClockHost;
    __declspec(property(get=GetTimeSense,put=PutTimeSense))
    enum AgECrdnVolumeTimeSenseType TimeSense;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLightTimeDelay ( );
    void PutUseLightTimeDelay (
        VARIANT_BOOL pRetVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pRetVal );
    enum AgECrdnVolumeAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgECrdnVolumeAberrationType pRetVal );
    enum AgECrdnVolumeClockHostType GetClockHost ( );
    void PutClockHost (
        enum AgECrdnVolumeClockHostType pRetVal );
    enum AgECrdnVolumeTimeSenseType GetTimeSense ( );
    void PutTimeSense (
        enum AgECrdnVolumeTimeSenseType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgECrdnVolumeAberrationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgECrdnVolumeAberrationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClockHost (
        /*[out,retval]*/ enum AgECrdnVolumeClockHostType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClockHost (
        /*[in]*/ enum AgECrdnVolumeClockHostType pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeSense (
        /*[out,retval]*/ enum AgECrdnVolumeTimeSenseType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeSense (
        /*[in]*/ enum AgECrdnVolumeTimeSenseType pRetVal ) = 0;
};

enum AgECrdnVolumeCombinedOperationType
{
    eCrdnVolumeCombinedOperationTypeAND = 1,
    eCrdnVolumeCombinedOperationTypeOR = 2,
    eCrdnVolumeCombinedOperationTypeXOR = 3,
    eCrdnVolumeCombinedOperationTypeMINUS = 4
};

enum AgECrdnVolumeFromGridEdgeType
{
    eCrdnVolumeFromGridEdgeTypeMaskPoints = 16,
    eCrdnVolumeFromGridEdgeTypeMaskVoxels = 32
};

struct __declspec(uuid("ba874a99-2a7a-43d8-9a2b-262d345997b4"))
IAgCrdnGridCoordinateDefinition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType))
    enum AgECrdnVolumetricGridValuesMethodType MethodType;
    __declspec(property(get=GetGridValuesMethod))
    IAgCrdnGridValuesMethodPtr GridValuesMethod;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumetricGridValuesMethodType GetMethodType ( );
    IAgCrdnGridValuesMethodPtr GetGridValuesMethod ( );
    IAgCrdnGridValuesFixedStepPtr SetGridValuesFixedStep (
        double Min,
        double Max,
        VARIANT_BOOL IncludeMinMax,
        double RefValue,
        double FixedStep );
    IAgCrdnGridValuesFixedNumberOfStepsPtr SetGridValuesFixedNumberOfSteps (
        double Min,
        double Max,
        int NumSteps );
    IAgCrdnGridValuesCustomPtr SetGridValuesCustom (
        SAFEARRAY * * Values );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgECrdnVolumetricGridValuesMethodType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GridValuesMethod (
        /*[out,retval]*/ struct IAgCrdnGridValuesMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetGridValuesFixedStep (
        /*[in]*/ double Min,
        /*[in]*/ double Max,
        /*[in]*/ VARIANT_BOOL IncludeMinMax,
        /*[in]*/ double RefValue,
        /*[in]*/ double FixedStep,
        /*[out,retval]*/ struct IAgCrdnGridValuesFixedStep * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetGridValuesFixedNumberOfSteps (
        /*[in]*/ double Min,
        /*[in]*/ double Max,
        /*[in]*/ int NumSteps,
        /*[out,retval]*/ struct IAgCrdnGridValuesFixedNumberOfSteps * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetGridValuesCustom (
        /*[in]*/ SAFEARRAY * * Values,
        /*[out,retval]*/ struct IAgCrdnGridValuesCustom * * ppRetVal ) = 0;
};

struct __declspec(uuid("4cef6b2e-6b2b-4f4c-a06c-5e9af26a9231"))
_IAgCrdnVolumeGridResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetSizeI))
    int SizeI;
    __declspec(property(get=GetSizeJ))
    int SizeJ;
    __declspec(property(get=GetSizeK))
    int SizeK;
    __declspec(property(get=GetVolumeMetricDataVector))
    SAFEARRAY * VolumeMetricDataVector;
    __declspec(property(get=GetVolumeMetricPositionVector))
    SAFEARRAY * VolumeMetricPositionVector;
    __declspec(property(get=GetVolumeMetricNativePositionVector))
    SAFEARRAY * VolumeMetricNativePositionVector;
    __declspec(property(get=GetVolumeMetricGradientVector))
    SAFEARRAY * VolumeMetricGradientVector;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    int GetSizeI ( );
    int GetSizeJ ( );
    int GetSizeK ( );
    SAFEARRAY * GetVolumeMetricDataVector ( );
    SAFEARRAY * GetVolumeMetricPositionVector ( );
    SAFEARRAY * GetVolumeMetricNativePositionVector ( );
    SAFEARRAY * GetVolumeMetricGradientVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeI (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeJ (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeK (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricDataVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricPositionVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricNativePositionVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricGradientVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c93a2ddb-d31b-4dfe-a50e-ee78724174b8"))
IAgCrdnLightTimeDelay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLightTimeDelay,put=PutUseLightTimeDelay))
    VARIANT_BOOL UseLightTimeDelay;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;
    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgECrdnVolumeAberrationType AberrationType;
    __declspec(property(get=GetClockHost,put=PutClockHost))
    enum AgECrdnVolumeClockHostType ClockHost;
    __declspec(property(get=GetTimeSense,put=PutTimeSense))
    enum AgECrdnVolumeTimeSenseType TimeSense;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLightTimeDelay ( );
    void PutUseLightTimeDelay (
        VARIANT_BOOL pRetVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pRetVal );
    enum AgECrdnVolumeAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgECrdnVolumeAberrationType pRetVal );
    enum AgECrdnVolumeClockHostType GetClockHost ( );
    void PutClockHost (
        enum AgECrdnVolumeClockHostType pRetVal );
    enum AgECrdnVolumeTimeSenseType GetTimeSense ( );
    void PutTimeSense (
        enum AgECrdnVolumeTimeSenseType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgECrdnVolumeAberrationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgECrdnVolumeAberrationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClockHost (
        /*[out,retval]*/ enum AgECrdnVolumeClockHostType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClockHost (
        /*[in]*/ enum AgECrdnVolumeClockHostType pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeSense (
        /*[out,retval]*/ enum AgECrdnVolumeTimeSenseType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeSense (
        /*[in]*/ enum AgECrdnVolumeTimeSenseType pRetVal ) = 0;
};

enum AgECrdnVolumeLightingConditionsType
{
    eCrdnVolumeLightingConditionTypeUndefined = 0,
    eCrdnVolumeLightingConditionTypeSunlight = 1,
    eCrdnVolumeLightingConditionTypePenumbra = 2,
    eCrdnVolumeLightingConditionTypeUmbra = 4
};

enum AgECrdnVolumeOverTimeDurationType
{
    eCrdnVolumeOverTimeDurationTypeStatic = 0,
    eCrdnVolumeOverTimeDurationTypeCumulativeToCurrent = 1,
    eCrdnVolumeOverTimeDurationTypeCumulativeFromCurrent = 2,
    eCrdnVolumeOverTimeDurationTypeSlidingWindow = 3
};

struct __declspec(uuid("0fff4188-5c52-487a-8d00-5b47476e81e8"))
IAgCrdnEventFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventType Type );
    IAgCrdnEventPtr CreateEventEpoch (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventExtremum (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventStartStopTime (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventSignaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventPtr CreateEventTimeOffset (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventSmartEpochPtr CreateSmartEpochFromTime (
        const _variant_t & Epoch );
    IAgCrdnEventSmartEpochPtr CreateSmartEpochFromEvent (
        struct IAgCrdnEvent * RefEvent );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventType Type,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventEpoch (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventExtremum (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventStartStopTime (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventTimeOffset (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSmartEpochFromTime (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSmartEpochFromEvent (
        /*[in]*/ struct IAgCrdnEvent * RefEvent,
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("14705c23-9ae9-423a-b7a6-b228111c3cea"))
IAgCrdnEventGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnEventPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnEventFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnEventFactoryPtr GetFactory ( );
    IAgCrdnEventPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnEventFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("c09f48d8-e8e4-4faa-b3a0-fe9e4b660a0d"))
IAgCrdnEventIntervalFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventIntervalType Type );
    IAgCrdnEventIntervalPtr CreateEventIntervalFixed (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalFixedDuration (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalBetweenTimeInstants (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalFromIntervalList (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalScaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalSignaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalPtr CreateEventIntervalTimeOffset (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventIntervalType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventIntervalType Type,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalFixed (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalFixedDuration (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalBetweenTimeInstants (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalFromIntervalList (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalScaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalTimeOffset (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventIntervalType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("1151e0b0-ed4f-4c9c-bb60-1a9b57fa5749"))
IAgCrdnEventIntervalGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnEventIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnEventIntervalFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventIntervalName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnEventIntervalFactoryPtr GetFactory ( );
    IAgCrdnEventIntervalPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventIntervalName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnEventIntervalFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("2b301efb-32ba-4eb8-a552-696a0ea96986"))
IAgCrdnEventIntervalListFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventIntervalListType Type );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFromFile (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListMerged (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFiltered (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListCondition (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListScaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListSignaled (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListTimeOffset (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventIntervalListType EType );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFile (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnEventIntervalListPtr CreateEventIntervalListFixed (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventIntervalListType Type,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFromFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListMerged (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFiltered (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListCondition (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListScaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListTimeOffset (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventIntervalListType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalListFixed (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
};

struct __declspec(uuid("c5a28f39-e4b2-4884-8348-e7eed53077d8"))
IAgCrdnEventIntervalListGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnEventIntervalListPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnEventIntervalListFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnEventIntervalListFactoryPtr GetFactory ( );
    IAgCrdnEventIntervalListPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnEventIntervalListFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("bd55ec98-aed7-4308-8009-cb875857a410"))
IAgCrdnEventArrayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventArrayPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventArrayType Type );
    IAgCrdnEventArrayPtr CreateEventArrayExtrema (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayStartStopTimes (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayMerged (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayFiltered (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayFixedStep (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArrayConditionCrossings (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventArrayPtr CreateEventArraySignaled (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventArrayType EType );
    IAgCrdnEventArrayPtr CreateEventArrayFixedTimes (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventArrayType Type,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayExtrema (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayStartStopTimes (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayMerged (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayFiltered (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayFixedStep (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayConditionCrossings (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArraySignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventArrayType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventArrayFixedTimes (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
};

struct __declspec(uuid("5487ee2b-0c06-4210-846c-fc6f96be2699"))
IAgCrdnEventArrayGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnEventArrayPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnEventArrayFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnEventArrayFactoryPtr GetFactory ( );
    IAgCrdnEventArrayPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnEventArrayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("b721cc07-4b96-41a8-adf5-9f593510556a"))
IAgCrdnCalcScalarFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableCalcScalarPluginDisplayNames))
    SAFEARRAY * AvailableCalcScalarPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableCalcScalarPluginDisplayNames ( );
    IAgCrdnCalcScalarPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnCalcScalarType Type );
    IAgCrdnCalcScalarPtr CreateCalcScalarAngle (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarFixedAtTimeInstant (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarConstant (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarDataElement (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t DataProvider,
        _bstr_t ElementName );
    IAgCrdnCalcScalarPtr CreateCalcScalarDataElementWithGroup (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t DataProvider,
        _bstr_t GroupName,
        _bstr_t ElementName );
    IAgCrdnCalcScalarPtr CreateCalcScalarDerivative (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarElapsedTime (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarFile (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnCalcScalarPtr CreateCalcScalarFunction (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarIntegral (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarFunction2Var (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarVectorMagnitude (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnCalcScalarPtr CreateCalcScalarPluginFromDisplayName (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t DisplayName );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnCalcScalarType EType );
    IAgCrdnCalcScalarPtr CreateCalcScalarFromCustomScript (
        _bstr_t Name,
        _bstr_t Description,
        _bstr_t Filepath );
    IAgCrdnCalcScalarPtr CreateCalcScalarSurfaceDistanceBetweenPoints (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableCalcScalarPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnCalcScalarType Type,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarAngle (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFixedAtTimeInstant (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarConstant (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarDataElement (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR ElementName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarDataElementWithGroup (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR ElementName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarDerivative (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarElapsedTime (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFunction (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarIntegral (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFunction2Var (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarVectorMagnitude (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarPluginFromDisplayName (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnCalcScalarType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarFromCustomScript (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Filepath,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCalcScalarSurfaceDistanceBetweenPoints (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
};

struct __declspec(uuid("0d0ada4a-4335-47ec-abba-53e7963cb29f"))
IAgCrdnCalcScalarGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnCalcScalarPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFactory))
    IAgCrdnCalcScalarFactoryPtr Factory;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnCalcScalarFactoryPtr GetFactory ( );
    IAgCrdnCalcScalarPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnCalcScalarFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("debf915f-f274-4947-9228-6c21811e28bb"))
IAgCrdnEventIntervalCollectionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalCollectionPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnEventIntervalCollectionType Type );
    IAgCrdnEventIntervalCollectionPtr CreateEventIntervalCollectionLighting (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnEventIntervalCollectionPtr CreateEventIntervalCollectionSignaled (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnEventIntervalCollectionType EType );
    IAgCrdnEventIntervalCollectionPtr CreateEventIntervalCollectionSatisfaction (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnEventIntervalCollectionType Type,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalCollectionLighting (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalCollectionSignaled (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnEventIntervalCollectionType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEventIntervalCollectionSatisfaction (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("b6efec55-4af0-4eb8-85de-2de3ef0e8026"))
IAgCrdnEventIntervalCollectionGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnEventIntervalCollectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnEventIntervalCollectionFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnEventIntervalCollectionFactoryPtr GetFactory ( );
    IAgCrdnEventIntervalCollectionPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("0fef5317-b241-4077-8ed3-784f94b97096"))
IAgCrdnParameterSetFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnParameterSetPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnParameterSetType Type );
    IAgCrdnParameterSetPtr CreateParameterSetAttitude (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetGroundTrajectory (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetTrajectory (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetOrbit (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnParameterSetPtr CreateParameterSetVector (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnParameterSetType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnParameterSetType Type,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetAttitude (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetGroundTrajectory (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetTrajectory (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetOrbit (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParameterSetVector (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnParameterSetType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("0c3e1aea-08cf-4550-aafc-5abb6b7a6ecb"))
IAgCrdnParameterSetGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnParameterSetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFactory))
    IAgCrdnParameterSetFactoryPtr Factory;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnParameterSetFactoryPtr GetFactory ( );
    IAgCrdnParameterSetPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnParameterSetFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnParameterSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("3d6d9a5a-2086-4fe6-8942-a1fe9724c660"))
IAgCrdnConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnConditionType Type );
    IAgCrdnConditionPtr CreateConditionScalarBounds (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnConditionType EType );
    IAgCrdnConditionPtr CreateConditionCombined (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnConditionType Type,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateConditionScalarBounds (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnConditionType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateConditionCombined (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("88590338-434e-440d-bee8-e87dc861a08c"))
IAgCrdnConditionGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnConditionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFactory))
    IAgCrdnConditionFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnConditionFactoryPtr GetFactory ( );
    IAgCrdnConditionPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("3941cb08-d1bc-4a27-8aaa-ffbf4ab7e313"))
IAgCrdnConditionSetFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionSetPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnConditionSetType Type );
    IAgCrdnConditionSetPtr CreateScalarThresholds (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnConditionSetType EType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnConditionSetType Type,
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateScalarThresholds (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnConditionSetType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("dc75e9b5-4cb3-4a98-ad6b-fbb6f4133a3f"))
IAgCrdnConditionSetGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnConditionSetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFactory))
    IAgCrdnConditionSetFactoryPtr Factory;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnConditionSetFactoryPtr GetFactory ( );
    IAgCrdnConditionSetPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnConditionSetFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("e4ec1b42-a11a-4d33-aab8-f0e2a49e713e"))
IAgCrdnVolumeGridFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVolumeGridPtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnVolumeGridType Type );
    IAgCrdnVolumeGridPtr CreateVolumeGridCartesian (
        _bstr_t Name,
        _bstr_t Description );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVolumeGridType EType );
    IAgCrdnVolumeGridPtr CreateVolumeGridCylindrical (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridSpherical (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridConstrained (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridLatLonAlt (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumeGridPtr CreateVolumeGridBearingAlt (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVolumeGridType Type,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridCartesian (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVolumeGridType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridCylindrical (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridSpherical (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridConstrained (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridLatLonAlt (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeGridBearingAlt (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
};

struct __declspec(uuid("62bfaa70-7c0a-4915-9e23-b2942e13424f"))
IAgCrdnVolumeGridGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnVolumeGridPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnVolumeGridFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnVolumeGridFactoryPtr GetFactory ( );
    IAgCrdnVolumeGridPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnVolumeGridFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("4e0163a7-c611-4724-afa0-e0cca42aac21"))
IAgCrdnVolumeFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVolumePtr Create (
        _bstr_t Name,
        _bstr_t Description,
        enum AgECrdnVolumeType Type );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVolumeType EType );
    IAgCrdnVolumePtr CreateVolumeCombined (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeLighting (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeOverTime (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromGrid (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromCalc (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromTimeSatisfaction (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeFromCondition (
        _bstr_t Name,
        _bstr_t Description );
    IAgCrdnVolumePtr CreateVolumeInview (
        _bstr_t Name,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVolumeType Type,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVolumeType EType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeCombined (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeLighting (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeOverTime (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromGrid (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromCalc (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromTimeSatisfaction (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeFromCondition (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVolumeInview (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
};

struct __declspec(uuid("b0b316a6-2d1b-47e8-9930-5e55a259787c"))
IAgCrdnVolumeGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnVolumePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnVolumeFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t EventName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnVolumeFactoryPtr GetFactory ( );
    IAgCrdnVolumePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR EventName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnVolumeFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("d90a78e7-f838-4a2a-a633-535b1946c3e2"))
IAgCrdnCalcScalarConstant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetDimension,put=PutDimension))
    _bstr_t Dimension;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pRetVal );
    _bstr_t GetDimension ( );
    void PutDimension (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimension (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("f9a780de-1313-4658-aceb-a7625ae81144"))
IAgCrdnCalcScalarCustom : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    HRESULT Reload ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
};

struct __declspec(uuid("17210592-1092-471c-ae93-a692bce967ec"))
IAgCrdnCalcScalarDataElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDataProvider))
    _bstr_t DataProvider;
    __declspec(property(get=GetElementName))
    _bstr_t ElementName;
    __declspec(property(get=GetGroup))
    _bstr_t Group;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    IAgCrdnInterpPtr Interpolation;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetUseSamples,put=PutUseSamples))
    VARIANT_BOOL UseSamples;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetInvalidDataIndicator,put=PutInvalidDataIndicator))
    double InvalidDataIndicator;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDataProvider ( );
    _bstr_t GetElementName ( );
    _bstr_t GetGroup ( );
    IAgCrdnInterpPtr GetInterpolation ( );
    void PutInterpolation (
        struct IAgCrdnInterp * ppRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    VARIANT_BOOL GetUseSamples ( );
    void PutUseSamples (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    HRESULT Set (
        _bstr_t DataProvider,
        _bstr_t ElementName );
    HRESULT SetWithGroup (
        _bstr_t DataProvider,
        _bstr_t TypeName,
        _bstr_t ElementName );
    double GetInvalidDataIndicator ( );
    void PutInvalidDataIndicator (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataProvider (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ struct IAgCrdnInterp * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolation (
        /*[in]*/ struct IAgCrdnInterp * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSamples (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSamples (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR ElementName ) = 0;
      virtual HRESULT __stdcall raw_SetWithGroup (
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR TypeName,
        /*[in]*/ BSTR ElementName ) = 0;
      virtual HRESULT __stdcall get_InvalidDataIndicator (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InvalidDataIndicator (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("0d735261-5f8c-417d-8715-e2a60b095a48"))
IAgCrdnCalcScalarDerivative : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScalar,put=PutScalar))
    IAgCrdnCalcScalarPtr Scalar;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCalcScalarPtr GetScalar ( );
    void PutScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8ac55c36-48b4-40b3-a495-e96fac2fd111"))
IAgCrdnCalcScalarElapsedTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
};

struct __declspec(uuid("bd2f45bb-8758-4673-93b1-aff7bb3c0d28"))
IAgCrdnCalcScalarFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetFileInterpolationType,put=PutFileInterpolationType))
    enum AgECrdnFileInterpolatorType FileInterpolationType;
    __declspec(property(get=GetFileInterpolationOrder,put=PutFileInterpolationOrder))
    int FileInterpolationOrder;
    __declspec(property(get=GetUseNativeFileInterpolationSettings,put=PutUseNativeFileInterpolationSettings))
    VARIANT_BOOL UseNativeFileInterpolationSettings;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    HRESULT Reload ( );
    IAgCrdnEventIntervalResultPtr GetFileSpan ( );
    enum AgECrdnFileInterpolatorType GetFileInterpolationType ( );
    void PutFileInterpolationType (
        enum AgECrdnFileInterpolatorType pRetVal );
    int GetFileInterpolationOrder ( );
    void PutFileInterpolationOrder (
        int pRetVal );
    VARIANT_BOOL GetUseNativeFileInterpolationSettings ( );
    void PutUseNativeFileInterpolationSettings (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_GetFileSpan (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FileInterpolationType (
        /*[out,retval]*/ enum AgECrdnFileInterpolatorType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileInterpolationType (
        /*[in]*/ enum AgECrdnFileInterpolatorType pRetVal ) = 0;
      virtual HRESULT __stdcall get_FileInterpolationOrder (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileInterpolationOrder (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseNativeFileInterpolationSettings (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseNativeFileInterpolationSettings (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("c03d8807-25e2-4999-98c6-079b6029d217"))
IAgCrdnCalcScalarFixedAtTimeInstant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
};

struct __declspec(uuid("ec1ace74-8efa-4cb3-9fad-0fc1c2a7c6fa"))
IAgCrdnCalcScalarFunction : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseScalar,put=PutUseScalar))
    VARIANT_BOOL UseScalar;
    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetInputTime,put=PutInputTime))
    IAgCrdnEventPtr InputTime;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetC,put=PutC))
    double C;
    __declspec(property(get=GetD,put=PutD))
    double D;
    __declspec(property(get=GetCoefficients,put=PutCoefficients))
    SAFEARRAY * Coefficients;
    __declspec(property(get=GetSelectedFunction,put=PutSelectedFunction))
    _bstr_t SelectedFunction;
    __declspec(property(get=GetAvailableFunctions))
    SAFEARRAY * AvailableFunctions;
    __declspec(property(get=GetInheritDimensionFromInput,put=PutInheritDimensionFromInput))
    VARIANT_BOOL InheritDimensionFromInput;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;
    __declspec(property(get=GetOutputUnit,put=PutOutputUnit))
    _bstr_t OutputUnit;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseScalar ( );
    void PutUseScalar (
        VARIANT_BOOL pRetVal );
    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventPtr GetInputTime ( );
    void PutInputTime (
        struct IAgCrdnEvent * ppRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double GetC ( );
    void PutC (
        double pRetVal );
    double GetD ( );
    void PutD (
        double pRetVal );
    SAFEARRAY * GetCoefficients ( );
    void PutCoefficients (
        SAFEARRAY * ppRetVal );
    _bstr_t GetSelectedFunction ( );
    void PutSelectedFunction (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFunctions ( );
    VARIANT_BOOL GetInheritDimensionFromInput ( );
    void PutInheritDimensionFromInput (
        VARIANT_BOOL pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );
    _bstr_t GetOutputUnit ( );
    void PutOutputUnit (
        _bstr_t pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseScalar (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScalar (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputTime (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputTime (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_D (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_D (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coefficients (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Coefficients (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedFunction (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedFunction (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFunctions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InheritDimensionFromInput (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InheritDimensionFromInput (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputUnit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputUnit (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("5c7cc61b-0ce3-4e53-9ee8-d3e024a5fadf"))
IAgCrdnCalcScalarFunction2Var : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    IAgCrdnCalcScalarPtr X;
    __declspec(property(get=GetUnitX,put=PutUnitX))
    _bstr_t UnitX;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetY,put=PutY))
    IAgCrdnCalcScalarPtr Y;
    __declspec(property(get=GetUnitY,put=PutUnitY))
    _bstr_t UnitY;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetC,put=PutC))
    double C;
    __declspec(property(get=GetOutputDimensionInheritance,put=PutOutputDimensionInheritance))
    enum AgECrdnDimensionInheritance OutputDimensionInheritance;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;
    __declspec(property(get=GetAvailableFunctions))
    SAFEARRAY * AvailableFunctions;
    __declspec(property(get=GetSelectedFunction,put=PutSelectedFunction))
    _bstr_t SelectedFunction;
    __declspec(property(get=GetOutputUnit,put=PutOutputUnit))
    _bstr_t OutputUnit;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCalcScalarPtr GetX ( );
    void PutX (
        struct IAgCrdnCalcScalar * ppRetVal );
    _bstr_t GetUnitX ( );
    void PutUnitX (
        _bstr_t pRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    IAgCrdnCalcScalarPtr GetY ( );
    void PutY (
        struct IAgCrdnCalcScalar * ppRetVal );
    _bstr_t GetUnitY ( );
    void PutUnitY (
        _bstr_t pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double GetC ( );
    void PutC (
        double pRetVal );
    enum AgECrdnDimensionInheritance GetOutputDimensionInheritance ( );
    void PutOutputDimensionInheritance (
        enum AgECrdnDimensionInheritance pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFunctions ( );
    _bstr_t GetSelectedFunction ( );
    void PutSelectedFunction (
        _bstr_t pRetVal );
    _bstr_t GetOutputUnit ( );
    void PutOutputUnit (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitX (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UnitX (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitY (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UnitY (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimensionInheritance (
        /*[out,retval]*/ enum AgECrdnDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimensionInheritance (
        /*[in]*/ enum AgECrdnDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFunctions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedFunction (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedFunction (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputUnit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputUnit (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("e40885ec-4849-4350-b692-e403bd5114b8"))
IAgCrdnCalcScalarIntegral : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetComputeAsAverage,put=PutComputeAsAverage))
    VARIANT_BOOL ComputeAsAverage;
    __declspec(property(get=GetIntegrationWindowType,put=PutIntegrationWindowType))
    enum AgECrdnIntegrationWindowType IntegrationWindowType;
    __declspec(property(get=GetStartOffset,put=PutStartOffset))
    double StartOffset;
    __declspec(property(get=GetStopOffset,put=PutStopOffset))
    double StopOffset;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    IAgCrdnInterpPtr Interpolation;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetIntegral,put=PutIntegral))
    IAgCrdnIntegralPtr Integral;
    __declspec(property(get=GetKeepConstantOutsideTimeLimits,put=PutKeepConstantOutsideTimeLimits))
    VARIANT_BOOL KeepConstantOutsideTimeLimits;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    VARIANT_BOOL GetComputeAsAverage ( );
    void PutComputeAsAverage (
        VARIANT_BOOL pRetVal );
    enum AgECrdnIntegrationWindowType GetIntegrationWindowType ( );
    void PutIntegrationWindowType (
        enum AgECrdnIntegrationWindowType pRetVal );
    double GetStartOffset ( );
    void PutStartOffset (
        double pRetVal );
    double GetStopOffset ( );
    void PutStopOffset (
        double pRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnInterpPtr GetInterpolation ( );
    void PutInterpolation (
        struct IAgCrdnInterp * ppRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnIntegralPtr GetIntegral ( );
    void PutIntegral (
        struct IAgCrdnIntegral * ppRetVal );
    VARIANT_BOOL GetKeepConstantOutsideTimeLimits ( );
    void PutKeepConstantOutsideTimeLimits (
        VARIANT_BOOL pRetVal );
    HRESULT SetOffsets (
        double StartOffset,
        double StopOffset );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeAsAverage (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ComputeAsAverage (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntegrationWindowType (
        /*[out,retval]*/ enum AgECrdnIntegrationWindowType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntegrationWindowType (
        /*[in]*/ enum AgECrdnIntegrationWindowType pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ struct IAgCrdnInterp * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolation (
        /*[in]*/ struct IAgCrdnInterp * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Integral (
        /*[out,retval]*/ struct IAgCrdnIntegral * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Integral (
        /*[in]*/ struct IAgCrdnIntegral * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_KeepConstantOutsideTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_KeepConstantOutsideTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffsets (
        /*[in]*/ double StartOffset,
        /*[in]*/ double StopOffset ) = 0;
};

struct __declspec(uuid("8fa2e8e8-2173-4cec-8f53-d4ca79a7c9ae"))
IAgCrdnCalcScalarPlugin : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("90fffbf2-81b2-43d2-bfd7-ffb049d195c6"))
IAgCrdnCalcScalarSurfaceDistanceBetweenPoints : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint1,put=PutPoint1))
    IAgCrdnPointPtr Point1;
    __declspec(property(get=GetPoint2,put=PutPoint2))
    IAgCrdnPointPtr Point2;
    __declspec(property(get=GetSurfaceCentralBody,put=PutSurfaceCentralBody))
    _bstr_t SurfaceCentralBody;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr GetPoint1 ( );
    void PutPoint1 (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetPoint2 ( );
    void PutPoint2 (
        struct IAgCrdnPoint * ppRetVal );
    _bstr_t GetSurfaceCentralBody ( );
    void PutSurfaceCentralBody (
        _bstr_t pRetVal );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point1 (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point1 (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point2 (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point2 (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceCentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceCentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("7fb43b48-0809-4e46-9bba-58c139d30048"))
IAgCrdnConditionCombined : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCombineOperation,put=PutCombineOperation))
    enum AgECrdnConditionCombinedOperationType CombineOperation;
    __declspec(property(get=GetConditionCount))
    int ConditionCount;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionCombinedOperationType GetCombineOperation ( );
    void PutCombineOperation (
        enum AgECrdnConditionCombinedOperationType pRetVal );
    int GetConditionCount ( );
    SAFEARRAY * GetAllConditions ( );
    HRESULT SetAllConditions (
        SAFEARRAY * * Conditions );
    IAgCrdnConditionPtr GetCondition (
        int Pos );
    HRESULT SetCondition (
        struct IAgCrdnCondition * Ref,
        int Pos );
    HRESULT RemoveCondition (
        int Pos );
    HRESULT AddCondition (
        struct IAgCrdnCondition * Ref );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CombineOperation (
        /*[out,retval]*/ enum AgECrdnConditionCombinedOperationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CombineOperation (
        /*[in]*/ enum AgECrdnConditionCombinedOperationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionCount (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllConditions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllConditions (
        /*[in]*/ SAFEARRAY * * Conditions ) = 0;
      virtual HRESULT __stdcall raw_GetCondition (
        /*[in]*/ int Pos,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCondition (
        /*[in]*/ struct IAgCrdnCondition * Ref,
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall raw_RemoveCondition (
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall raw_AddCondition (
        /*[in]*/ struct IAgCrdnCondition * Ref ) = 0;
};

struct __declspec(uuid("6cf360c7-967b-4535-a584-06fe767211e4"))
IAgCrdnConditionScalarBounds : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScalar,put=PutScalar))
    IAgCrdnCalcScalarPtr Scalar;
    __declspec(property(get=GetOperation,put=PutOperation))
    enum AgECrdnConditionThresholdOption Operation;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCalcScalarPtr GetScalar ( );
    void PutScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    enum AgECrdnConditionThresholdOption GetOperation ( );
    void PutOperation (
        enum AgECrdnConditionThresholdOption pRetVal );
    STKUtil::IAgQuantityPtr GetMinimum ( );
    HRESULT SetMinimum (
        struct STKUtil::IAgQuantity * Value );
    STKUtil::IAgQuantityPtr GetMaximum ( );
    HRESULT SetMaximum (
        struct STKUtil::IAgQuantity * Value );
    HRESULT Set (
        struct STKUtil::IAgQuantity * Min,
        struct STKUtil::IAgQuantity * Max );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Operation (
        /*[out,retval]*/ enum AgECrdnConditionThresholdOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Operation (
        /*[in]*/ enum AgECrdnConditionThresholdOption pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMinimum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMinimum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_GetMaximum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaximum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ struct STKUtil::IAgQuantity * Min,
        /*[in]*/ struct STKUtil::IAgQuantity * Max ) = 0;
};

struct __declspec(uuid("45a85086-3cbe-4292-bdde-297920da12a5"))
IAgCrdnConditionSetScalarThresholds : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScalar,put=PutScalar))
    IAgCrdnCalcScalarPtr Scalar;
    __declspec(property(get=GetThresholds))
    SAFEARRAY * Thresholds;
    __declspec(property(get=GetThresholdLabels))
    SAFEARRAY * ThresholdLabels;
    __declspec(property(get=GetIncludeAboveHighestThreshold,put=PutIncludeAboveHighestThreshold))
    VARIANT_BOOL IncludeAboveHighestThreshold;
    __declspec(property(get=GetIncludeBelowLowestThreshold,put=PutIncludeBelowLowestThreshold))
    VARIANT_BOOL IncludeBelowLowestThreshold;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCalcScalarPtr GetScalar ( );
    void PutScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    SAFEARRAY * GetThresholds ( );
    SAFEARRAY * GetThresholdLabels ( );
    VARIANT_BOOL GetIncludeAboveHighestThreshold ( );
    void PutIncludeAboveHighestThreshold (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIncludeBelowLowestThreshold ( );
    void PutIncludeBelowLowestThreshold (
        VARIANT_BOOL pRetVal );
    HRESULT SetThresholdsAndLabels (
        SAFEARRAY * * Thresholds,
        SAFEARRAY * * ThresholdLabels );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Thresholds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ThresholdLabels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeAboveHighestThreshold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeAboveHighestThreshold (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeBelowLowestThreshold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeBelowLowestThreshold (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetThresholdsAndLabels (
        /*[in]*/ SAFEARRAY * * Thresholds,
        /*[in]*/ SAFEARRAY * * ThresholdLabels ) = 0;
};

struct __declspec(uuid("f2763c04-0b38-46f1-8313-2d54e6611280"))
IAgCrdnConvergeBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSense,put=PutSense))
    enum AgECrdnThreshConvergeSense Sense;
    __declspec(property(get=GetTimeTolerance,put=PutTimeTolerance))
    double TimeTolerance;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnThreshConvergeSense GetSense ( );
    void PutSense (
        enum AgECrdnThreshConvergeSense pRetVal );
    double GetTimeTolerance ( );
    void PutTimeTolerance (
        double pRetVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pRetVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sense (
        /*[out,retval]*/ enum AgECrdnThreshConvergeSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sense (
        /*[in]*/ enum AgECrdnThreshConvergeSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8c5f72d2-855f-4eb2-b3bd-0fcc6c957abb"))
IAgCrdnDerivative : IUnknown
{};

struct __declspec(uuid("79deb489-ab82-40a5-8def-66b2cf433ac5"))
IAgCrdnDerivativeBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeStep ( );
    void PutTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("03baf2c3-e001-4ca2-8b79-c880a92a2eb9"))
IAgCrdnEventArrayConditionCrossings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSatisfactionCrossing,put=PutSatisfactionCrossing))
    enum AgECrdnSatisfactionCrossing SatisfactionCrossing;
    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSatisfactionCrossing GetSatisfactionCrossing ( );
    void PutSatisfactionCrossing (
        enum AgECrdnSatisfactionCrossing pRetVal );
    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SatisfactionCrossing (
        /*[out,retval]*/ enum AgECrdnSatisfactionCrossing * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SatisfactionCrossing (
        /*[in]*/ enum AgECrdnSatisfactionCrossing pRetVal ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("0593f5f4-2714-494d-ad0b-c82fe134922e"))
IAgCrdnEventArrayExtrema : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetExtremumType,put=PutExtremumType))
    enum AgECrdnExtremumConstants ExtremumType;
    __declspec(property(get=GetIsGlobal,put=PutIsGlobal))
    VARIANT_BOOL IsGlobal;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    IAgCrdnCalcScalarPtr Calculation;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnExtremumConstants GetExtremumType ( );
    void PutExtremumType (
        enum AgECrdnExtremumConstants pRetVal );
    VARIANT_BOOL GetIsGlobal ( );
    void PutIsGlobal (
        VARIANT_BOOL pRetVal );
    IAgCrdnCalcScalarPtr GetCalculation ( );
    void PutCalculation (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtremumType (
        /*[out,retval]*/ enum AgECrdnExtremumConstants * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtremumType (
        /*[in]*/ enum AgECrdnExtremumConstants pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsGlobal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsGlobal (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("14a981f0-4366-40b9-a808-9fd6838e7fd6"))
IAgCrdnEventArrayFiltered : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalTimeArray,put=PutOriginalTimeArray))
    IAgCrdnEventArrayPtr OriginalTimeArray;
    __declspec(property(get=GetFilterType,put=PutFilterType))
    enum AgECrdnEventArrayFilterType FilterType;
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetIncludeIntervalStopTimes,put=PutIncludeIntervalStopTimes))
    VARIANT_BOOL IncludeIntervalStopTimes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventArrayPtr GetOriginalTimeArray ( );
    void PutOriginalTimeArray (
        struct IAgCrdnEventArray * ppRetVal );
    enum AgECrdnEventArrayFilterType GetFilterType ( );
    void PutFilterType (
        enum AgECrdnEventArrayFilterType pRetVal );
    int GetCount ( );
    void PutCount (
        int pRetVal );
    double GetStep ( );
    void PutStep (
        double pRetVal );
    VARIANT_BOOL GetIncludeIntervalStopTimes ( );
    void PutIncludeIntervalStopTimes (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalTimeArray (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalTimeArray (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnEventArrayFilterType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FilterType (
        /*[in]*/ enum AgECrdnEventArrayFilterType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeIntervalStopTimes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeIntervalStopTimes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("660c4d05-8204-42d8-ac4a-f0bbc5ea8bf9"))
IAgCrdnEventArrayFixedStep : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBoundingIntervalList,put=PutBoundingIntervalList))
    IAgCrdnEventIntervalListPtr BoundingIntervalList;
    __declspec(property(get=GetSamplingTimeStep,put=PutSamplingTimeStep))
    double SamplingTimeStep;
    __declspec(property(get=GetIncludeIntervalEdges,put=PutIncludeIntervalEdges))
    VARIANT_BOOL IncludeIntervalEdges;
    __declspec(property(get=GetReferenceType,put=PutReferenceType))
    enum AgECrdnSampledReferenceTime ReferenceType;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetBoundingIntervalList ( );
    void PutBoundingIntervalList (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetSamplingTimeStep ( );
    void PutSamplingTimeStep (
        double pRetVal );
    VARIANT_BOOL GetIncludeIntervalEdges ( );
    void PutIncludeIntervalEdges (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSampledReferenceTime GetReferenceType ( );
    void PutReferenceType (
        enum AgECrdnSampledReferenceTime pRetVal );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoundingIntervalList (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingIntervalList (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SamplingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeIntervalEdges (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeIntervalEdges (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceType (
        /*[out,retval]*/ enum AgECrdnSampledReferenceTime * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceType (
        /*[in]*/ enum AgECrdnSampledReferenceTime pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
};

struct __declspec(uuid("ff98c921-92f9-4f59-9654-475c9c5fa8a1"))
IAgCrdnEventArrayFixedTimes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetArrayTimes))
    SAFEARRAY * ArrayTimes;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetArrayTimes ( );
    HRESULT SetArrayTimes (
        SAFEARRAY * * Times );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrayTimes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetArrayTimes (
        /*[in]*/ SAFEARRAY * * Times ) = 0;
};

struct __declspec(uuid("4291b7a5-dfe6-4945-b17d-8baac53ba1c0"))
IAgCrdnEventArrayMerged : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeArrayA,put=PutTimeArrayA))
    IAgCrdnEventArrayPtr TimeArrayA;
    __declspec(property(get=GetTimeArrayB,put=PutTimeArrayB))
    IAgCrdnEventArrayPtr TimeArrayB;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventArrayPtr GetTimeArrayA ( );
    void PutTimeArrayA (
        struct IAgCrdnEventArray * ppRetVal );
    IAgCrdnEventArrayPtr GetTimeArrayB ( );
    void PutTimeArrayB (
        struct IAgCrdnEventArray * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeArrayA (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeArrayA (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeArrayB (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeArrayB (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
};

struct __declspec(uuid("26efa01f-3fa3-46a2-bcf4-aac32d889371"))
IAgCrdnEventArraySignaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalTimeArray,put=PutOriginalTimeArray))
    IAgCrdnEventArrayPtr OriginalTimeArray;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventArrayPtr GetOriginalTimeArray ( );
    void PutOriginalTimeArray (
        struct IAgCrdnEventArray * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalTimeArray (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalTimeArray (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
};

struct __declspec(uuid("dfde7497-2b48-49f6-9706-e307f20416a5"))
IAgCrdnEventArrayStartStopTimes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartStopOption,put=PutStartStopOption))
    enum AgECrdnStartStopOption StartStopOption;
    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnStartStopOption GetStartStopOption ( );
    void PutStartStopOption (
        enum AgECrdnStartStopOption pRetVal );
    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartStopOption (
        /*[out,retval]*/ enum AgECrdnStartStopOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartStopOption (
        /*[in]*/ enum AgECrdnStartStopOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
};

struct __declspec(uuid("0dac5013-afb1-40e0-a958-d48fdc514edd"))
IAgCrdnEventEpoch : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("c009ba0d-3451-4220-b00d-a99f376b4937"))
IAgCrdnEventExtremum : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetExtremumType,put=PutExtremumType))
    enum AgECrdnExtremumConstants ExtremumType;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    IAgCrdnCalcScalarPtr Calculation;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnExtremumConstants GetExtremumType ( );
    void PutExtremumType (
        enum AgECrdnExtremumConstants pRetVal );
    IAgCrdnCalcScalarPtr GetCalculation ( );
    void PutCalculation (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtremumType (
        /*[out,retval]*/ enum AgECrdnExtremumConstants * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtremumType (
        /*[in]*/ enum AgECrdnExtremumConstants pRetVal ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("a85eda97-303d-4074-8fd7-6a01099577f8"))
IAgCrdnEventIntervalBetweenTimeInstants : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTimeInstant,put=PutStartTimeInstant))
    IAgCrdnEventPtr StartTimeInstant;
    __declspec(property(get=GetStopTimeInstant,put=PutStopTimeInstant))
    IAgCrdnEventPtr StopTimeInstant;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetStartTimeInstant ( );
    void PutStartTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnEventPtr GetStopTimeInstant ( );
    void PutStopTimeInstant (
        struct IAgCrdnEvent * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_StartTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_StopTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
};

struct __declspec(uuid("147862fb-718e-4d18-8ee0-7e9ffbcebad9"))
IAgCrdnEventIntervalCollectionCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetConditionSet,put=PutConditionSet))
    IAgCrdnConditionSetPtr ConditionSet;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionSetPtr GetConditionSet ( );
    void PutConditionSet (
        struct IAgCrdnConditionSet * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConditionSet (
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ConditionSet (
        /*[in]*/ struct IAgCrdnConditionSet * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("df1f03e1-fe58-4e9d-bd06-97731cc06d47"))
IAgCrdnEventIntervalCollectionLighting : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLocation,put=PutLocation))
    IAgCrdnPointPtr Location;
    __declspec(property(get=GetEclipsingBodies,put=PutEclipsingBodies))
    SAFEARRAY * EclipsingBodies;
    __declspec(property(get=GetUseObjectEclipsingBodies,put=PutUseObjectEclipsingBodies))
    VARIANT_BOOL UseObjectEclipsingBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr GetLocation ( );
    void PutLocation (
        struct IAgCrdnPoint * ppRetVal );
    SAFEARRAY * GetEclipsingBodies ( );
    void PutEclipsingBodies (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetUseObjectEclipsingBodies ( );
    void PutUseObjectEclipsingBodies (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EclipsingBodies (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseObjectEclipsingBodies (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseObjectEclipsingBodies (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("2843017e-c869-47ad-8925-5a0506fca9a3"))
IAgCrdnEventIntervalCollectionSignaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalCollection,put=PutOriginalCollection))
    IAgCrdnEventIntervalCollectionPtr OriginalCollection;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalCollectionPtr GetOriginalCollection ( );
    void PutOriginalCollection (
        struct IAgCrdnEventIntervalCollection * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalCollection (
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalCollection (
        /*[in]*/ struct IAgCrdnEventIntervalCollection * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
};

struct __declspec(uuid("bcafe1b0-724a-43e4-9ff9-efd7d1e01a91"))
IAgCrdnEventIntervalFixed : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    HRESULT SetInterval (
        const _variant_t & StartEpoch,
        const _variant_t & StopEpoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetInterval (
        /*[in]*/ VARIANT StartEpoch,
        /*[in]*/ VARIANT StopEpoch ) = 0;
};

struct __declspec(uuid("df16d0f8-9caa-4b58-992e-08ed9871eedf"))
IAgCrdnEventIntervalFixedDuration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetStartOffset,put=PutStartOffset))
    double StartOffset;
    __declspec(property(get=GetStopOffset,put=PutStopOffset))
    double StopOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    double GetStartOffset ( );
    void PutStartOffset (
        double pRetVal );
    double GetStopOffset ( );
    void PutStopOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c10d6d58-a095-45a4-b72e-d9dd35d06e6b"))
IAgCrdnEventIntervalFromIntervalList : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;
    __declspec(property(get=GetIntervalSelection,put=PutIntervalSelection))
    enum AgECrdnIntervalSelection IntervalSelection;
    __declspec(property(get=GetIntervalNumber,put=PutIntervalNumber))
    int IntervalNumber;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnIntervalSelection GetIntervalSelection ( );
    void PutIntervalSelection (
        enum AgECrdnIntervalSelection pRetVal );
    int GetIntervalNumber ( );
    void PutIntervalNumber (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalSelection (
        /*[out,retval]*/ enum AgECrdnIntervalSelection * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalSelection (
        /*[in]*/ enum AgECrdnIntervalSelection pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalNumber (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalNumber (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("d6c3e35a-2cac-4189-8654-8052b1adc2e4"))
IAgCrdnEventIntervalListCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("cdd73f4b-2dfc-4369-92d1-8e8da2e530df"))
IAgCrdnEventIntervalListFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    HRESULT Reload ( );
    IAgCrdnEventIntervalResultPtr GetFileSpan ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_GetFileSpan (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("9c3731e0-3707-4c6d-a588-62944ad229cb"))
IAgCrdnEventIntervalListFiltered : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalIntervals,put=PutOriginalIntervals))
    IAgCrdnEventIntervalListPtr OriginalIntervals;
    __declspec(property(get=GetFilterFactory))
    IAgCrdnPruneFilterFactoryPtr FilterFactory;
    __declspec(property(get=GetFilter,put=PutFilter))
    IAgCrdnPruneFilterPtr Filter;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetOriginalIntervals ( );
    void PutOriginalIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    IAgCrdnPruneFilterFactoryPtr GetFilterFactory ( );
    IAgCrdnPruneFilterPtr GetFilter ( );
    void PutFilter (
        struct IAgCrdnPruneFilter * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FilterFactory (
        /*[out,retval]*/ struct IAgCrdnPruneFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ struct IAgCrdnPruneFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ struct IAgCrdnPruneFilter * ppRetVal ) = 0;
};

struct __declspec(uuid("534ae4c1-5149-4916-813b-c62e4823db25"))
IAgCrdnEventIntervalListFixed : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetIntervals ( );
    HRESULT SetIntervals (
        SAFEARRAY * * Intervals );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetIntervals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetIntervals (
        /*[in]*/ SAFEARRAY * * Intervals ) = 0;
};

struct __declspec(uuid("ee42809a-71e5-4175-8b74-3aebc934d9fc"))
IAgCrdnEventIntervalListScaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalIntervals,put=PutOriginalIntervals))
    IAgCrdnEventIntervalListPtr OriginalIntervals;
    __declspec(property(get=GetAbsoluteIncrement,put=PutAbsoluteIncrement))
    double AbsoluteIncrement;
    __declspec(property(get=GetRelativeIncrement,put=PutRelativeIncrement))
    double RelativeIncrement;
    __declspec(property(get=GetUseAbsoluteIncrement,put=PutUseAbsoluteIncrement))
    VARIANT_BOOL UseAbsoluteIncrement;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetOriginalIntervals ( );
    void PutOriginalIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetAbsoluteIncrement ( );
    void PutAbsoluteIncrement (
        double pRetVal );
    double GetRelativeIncrement ( );
    void PutRelativeIncrement (
        double pRetVal );
    VARIANT_BOOL GetUseAbsoluteIncrement ( );
    void PutUseAbsoluteIncrement (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAbsoluteIncrement (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAbsoluteIncrement (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("04cecb39-8578-439a-a425-7a8e73a23166"))
IAgCrdnEventIntervalListSignaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalIntervals,put=PutOriginalIntervals))
    IAgCrdnEventIntervalListPtr OriginalIntervals;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetOriginalIntervals ( );
    void PutOriginalIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
};

struct __declspec(uuid("6acabfdf-25ff-4724-91e9-c42499013ecc"))
IAgCrdnEventIntervalListTimeOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;
    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetTimeOffset ( );
    void PutTimeOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("96df1693-2dce-4a29-b184-954b96cb7b5a"))
IAgCrdnEventIntervalScaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalInterval,put=PutOriginalInterval))
    IAgCrdnEventIntervalPtr OriginalInterval;
    __declspec(property(get=GetAbsoluteIncrement,put=PutAbsoluteIncrement))
    double AbsoluteIncrement;
    __declspec(property(get=GetRelativeIncrement,put=PutRelativeIncrement))
    double RelativeIncrement;
    __declspec(property(get=GetUseAbsoluteIncrement,put=PutUseAbsoluteIncrement))
    VARIANT_BOOL UseAbsoluteIncrement;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalPtr GetOriginalInterval ( );
    void PutOriginalInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    double GetAbsoluteIncrement ( );
    void PutAbsoluteIncrement (
        double pRetVal );
    double GetRelativeIncrement ( );
    void PutRelativeIncrement (
        double pRetVal );
    VARIANT_BOOL GetUseAbsoluteIncrement ( );
    void PutUseAbsoluteIncrement (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAbsoluteIncrement (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAbsoluteIncrement (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("d653ece5-3591-4050-9aa6-43cd31d13382"))
IAgCrdnEventIntervalSignaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalInterval,put=PutOriginalInterval))
    IAgCrdnEventIntervalPtr OriginalInterval;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalPtr GetOriginalInterval ( );
    void PutOriginalInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
};

struct __declspec(uuid("9a3cbccf-8658-40e0-b570-90ce6b8c39ae"))
IAgCrdnEventIntervalSmartInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceInterval))
    IAgCrdnEventIntervalPtr ReferenceInterval;
    __declspec(property(get=GetDurationAsString,put=PutDurationAsString))
    _bstr_t DurationAsString;
    __declspec(property(get=GetState,put=PutState))
    enum AgECrdnSmartIntervalState State;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalPtr GetReferenceInterval ( );
    _bstr_t GetDurationAsString ( );
    void PutDurationAsString (
        _bstr_t pRetVal );
    enum AgECrdnSmartIntervalState GetState ( );
    void PutState (
        enum AgECrdnSmartIntervalState pRetVal );
    HRESULT SetImplicitInterval (
        struct IAgCrdnEventInterval * EventInterval );
    _variant_t FindStartTime ( );
    _variant_t FindStopTime ( );
    IAgCrdnEventSmartEpochPtr GetStartEpoch ( );
    HRESULT SetStartEpoch (
        struct IAgCrdnEventSmartEpoch * StartEpoch );
    IAgCrdnEventSmartEpochPtr GetStopEpoch ( );
    HRESULT SetStopEpoch (
        struct IAgCrdnEventSmartEpoch * StopEpoch );
    HRESULT SetExplicitInterval (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT SetStartAndStopEpochs (
        struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        struct IAgCrdnEventSmartEpoch * RefStopEpoch );
    HRESULT SetStartAndStopTimes (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    HRESULT SetStartEpochAndDuration (
        struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        _bstr_t DurationStr );
    HRESULT SetStartTimeAndDuration (
        const _variant_t & Epoch,
        _bstr_t DurationStr );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationAsString (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum AgECrdnSmartIntervalState * pRetVal ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum AgECrdnSmartIntervalState pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetImplicitInterval (
        /*[in]*/ struct IAgCrdnEventInterval * EventInterval ) = 0;
      virtual HRESULT __stdcall raw_FindStartTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindStopTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetStartEpoch (
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetStartEpoch (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * StartEpoch ) = 0;
      virtual HRESULT __stdcall raw_GetStopEpoch (
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetStopEpoch (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * StopEpoch ) = 0;
      virtual HRESULT __stdcall raw_SetExplicitInterval (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_SetStartAndStopEpochs (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        /*[in]*/ struct IAgCrdnEventSmartEpoch * RefStopEpoch ) = 0;
      virtual HRESULT __stdcall raw_SetStartAndStopTimes (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall raw_SetStartEpochAndDuration (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        /*[in]*/ BSTR DurationStr ) = 0;
      virtual HRESULT __stdcall raw_SetStartTimeAndDuration (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ BSTR DurationStr ) = 0;
};

struct __declspec(uuid("87552842-f6b9-49a4-bc7f-e4e9061be83b"))
IAgCrdnEventIntervalTimeOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceInterval,put=PutReferenceInterval))
    IAgCrdnEventIntervalPtr ReferenceInterval;
    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalPtr GetReferenceInterval ( );
    void PutReferenceInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    double GetTimeOffset ( );
    void PutTimeOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("f1050833-737e-46b9-a3ea-6dbd1a83fe61"))
IAgCrdnEventSignaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalTimeInstant,put=PutOriginalTimeInstant))
    IAgCrdnEventPtr OriginalTimeInstant;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetOriginalTimeInstant ( );
    void PutOriginalTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginalTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
};

struct __declspec(uuid("1745b133-0030-43e5-b8c2-d9c7d664c1c7"))
IAgCrdnEventStartStopTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseStart,put=PutUseStart))
    VARIANT_BOOL UseStart;
    __declspec(property(get=GetReferenceEventInterval,put=PutReferenceEventInterval))
    IAgCrdnEventIntervalPtr ReferenceEventInterval;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseStart ( );
    void PutUseStart (
        VARIANT_BOOL pRetVal );
    IAgCrdnEventIntervalPtr GetReferenceEventInterval ( );
    void PutReferenceEventInterval (
        struct IAgCrdnEventInterval * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseStart (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseStart (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceEventInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceEventInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
};

struct __declspec(uuid("fb4cece9-c0bc-4847-9ae6-b5e85536b6e9"))
IAgCrdnEventTimeOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetTimeOffset2,put=PutTimeOffset2))
    double TimeOffset2;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeOffset ( );
    void PutTimeOffset (
        double pRetVal );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    double GetTimeOffset2 ( );
    void PutTimeOffset2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8fccb82d-0faf-4455-9b7f-58ee56c9687c"))
IAgCrdnFirstIntervalsFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumNumberOfIntervals,put=PutMaximumNumberOfIntervals))
    int MaximumNumberOfIntervals;

    //
    // Wrapper methods for error-handling
    //

    int GetMaximumNumberOfIntervals ( );
    void PutMaximumNumberOfIntervals (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumNumberOfIntervals (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfIntervals (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("983abdbd-bc24-461a-b6cb-03d628a52ca2"))
IAgCrdnGapsFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetGapDuration,put=PutGapDuration))
    double GapDuration;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetGapDuration ( );
    void PutGapDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_GapDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GapDuration (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("3c992a8b-5045-492c-8c10-dcc7d9d48bc8"))
IAgCrdnIntegralBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum AgECrdnIntegralType Type;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    double Tolerance;
    __declspec(property(get=GetMaximumIterations,put=PutMaximumIterations))
    int MaximumIterations;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnIntegralType GetType ( );
    void PutType (
        enum AgECrdnIntegralType pRetVal );
    double GetTolerance ( );
    void PutTolerance (
        double pRetVal );
    int GetMaximumIterations ( );
    void PutMaximumIterations (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnIntegralType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AgECrdnIntegralType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumIterations (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumIterations (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("9313f744-eb98-422e-b397-3628b2c69288"))
IAgCrdnInterpBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum AgECrdnInterpolatorType Type;
    __declspec(property(get=GetOrder,put=PutOrder))
    int Order;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnInterpolatorType GetType ( );
    void PutType (
        enum AgECrdnInterpolatorType pRetVal );
    int GetOrder ( );
    void PutOrder (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnInterpolatorType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AgECrdnInterpolatorType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("c1c50016-68de-4166-aa51-11d6d0687798"))
IAgCrdnIntervalsFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetIntervalDuration,put=PutIntervalDuration))
    double IntervalDuration;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetIntervalDuration ( );
    void PutIntervalDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalDuration (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("462f1294-5223-456d-a3e1-dca54ac0df1b"))
IAgCrdnLastIntervalsFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumNumberOfIntervals,put=PutMaximumNumberOfIntervals))
    int MaximumNumberOfIntervals;

    //
    // Wrapper methods for error-handling
    //

    int GetMaximumNumberOfIntervals ( );
    void PutMaximumNumberOfIntervals (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumNumberOfIntervals (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfIntervals (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("c08238ea-f46b-45c6-84cb-362f3ee55ad0"))
IAgCrdnParameterSetGroundTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLocation,put=PutLocation))
    IAgCrdnPointPtr Location;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr GetLocation ( );
    void PutLocation (
        struct IAgCrdnPoint * ppRetVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("262d287a-26bb-40f7-8ad4-671a27d59a1d"))
IAgCrdnParameterSetOrbit : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrbitingPoint,put=PutOrbitingPoint))
    IAgCrdnPointPtr OrbitingPoint;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetGravitationalParameter,put=PutGravitationalParameter))
    double GravitationalParameter;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetUseCentralBodyGravitationalParameter,put=PutUseCentralBodyGravitationalParameter))
    VARIANT_BOOL UseCentralBodyGravitationalParameter;
    __declspec(property(get=GetUseCentralBodyInertial,put=PutUseCentralBodyInertial))
    VARIANT_BOOL UseCentralBodyInertial;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr GetOrbitingPoint ( );
    void PutOrbitingPoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    double GetGravitationalParameter ( );
    void PutGravitationalParameter (
        double pRetVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    VARIANT_BOOL GetUseCentralBodyGravitationalParameter ( );
    void PutUseCentralBodyGravitationalParameter (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseCentralBodyInertial ( );
    void PutUseCentralBodyInertial (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OrbitingPoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OrbitingPoint (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GravitationalParameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GravitationalParameter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCentralBodyGravitationalParameter (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentralBodyGravitationalParameter (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCentralBodyInertial (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentralBodyInertial (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("78eac44f-b0af-4f81-829d-333a541cf42c"))
IAgCrdnParameterSetTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    IAgCrdnPointPtr Point;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr GetPoint ( );
    void PutPoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
};

struct __declspec(uuid("9bb14aa5-6900-4027-a2f9-5c12edecb221"))
IAgCrdnRelativeSatisfactionConditionFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetRelativeIntervalDuration,put=PutRelativeIntervalDuration))
    double RelativeIntervalDuration;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetRelativeIntervalDuration ( );
    void PutRelativeIntervalDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeIntervalDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeIntervalDuration (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("19a5b028-1cfd-42e6-b5c2-c46b3b509362"))
IAgCrdnSamplingBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSamplingMethod,put=PutSamplingMethod))
    IAgCrdnSamplingMethodPtr SamplingMethod;
    __declspec(property(get=GetMethodFactory))
    IAgCrdnSamplingMethodFactoryPtr MethodFactory;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSamplingMethodPtr GetSamplingMethod ( );
    void PutSamplingMethod (
        struct IAgCrdnSamplingMethod * ppRetVal );
    IAgCrdnSamplingMethodFactoryPtr GetMethodFactory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SamplingMethod (
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingMethod (
        /*[in]*/ struct IAgCrdnSamplingMethod * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MethodFactory (
        /*[out,retval]*/ struct IAgCrdnSamplingMethodFactory * * ppRetVal ) = 0;
};

struct __declspec(uuid("9b3751b6-2f00-4d9b-8c86-67f64f9a8180"))
IAgCrdnSamplingCurvatureTolerance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumTimeStep,put=PutMinimumTimeStep))
    double MinimumTimeStep;
    __declspec(property(get=GetMaximumTimeStep,put=PutMaximumTimeStep))
    double MaximumTimeStep;
    __declspec(property(get=GetStepAtBoundaries,put=PutStepAtBoundaries))
    double StepAtBoundaries;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetCurvatureTolerance,put=PutCurvatureTolerance))
    double CurvatureTolerance;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumTimeStep ( );
    void PutMinimumTimeStep (
        double pRetVal );
    double GetMaximumTimeStep ( );
    void PutMaximumTimeStep (
        double pRetVal );
    double GetStepAtBoundaries ( );
    void PutStepAtBoundaries (
        double pRetVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pRetVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pRetVal );
    double GetCurvatureTolerance ( );
    void PutCurvatureTolerance (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StepAtBoundaries (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StepAtBoundaries (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurvatureTolerance (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cab2c4f4-3712-4f09-ba1b-33907d91b9c7"))
IAgCrdnSamplingFixedStep : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeStep ( );
    void PutTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ed00c8f4-c58e-4c91-983e-57b84555da4f"))
IAgCrdnSamplingRelativeTolerance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumTimeStep,put=PutMinimumTimeStep))
    double MinimumTimeStep;
    __declspec(property(get=GetMaximumTimeStep,put=PutMaximumTimeStep))
    double MaximumTimeStep;
    __declspec(property(get=GetStepAtBoundaries,put=PutStepAtBoundaries))
    double StepAtBoundaries;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumTimeStep ( );
    void PutMinimumTimeStep (
        double pRetVal );
    double GetMaximumTimeStep ( );
    void PutMaximumTimeStep (
        double pRetVal );
    double GetStepAtBoundaries ( );
    void PutStepAtBoundaries (
        double pRetVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pRetVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StepAtBoundaries (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StepAtBoundaries (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6657fbc2-4d70-42cd-aa95-71019373549a"))
IAgCrdnSatisfactionConditionFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetDurationKind,put=PutDurationKind))
    enum AgECrdnIntervalDurationKind DurationKind;
    __declspec(property(get=GetIntervalDuration,put=PutIntervalDuration))
    double IntervalDuration;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    enum AgECrdnIntervalDurationKind GetDurationKind ( );
    void PutDurationKind (
        enum AgECrdnIntervalDurationKind pRetVal );
    double GetIntervalDuration ( );
    void PutIntervalDuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationKind (
        /*[out,retval]*/ enum AgECrdnIntervalDurationKind * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationKind (
        /*[in]*/ enum AgECrdnIntervalDurationKind pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalDuration (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c57a69fe-370c-4d41-b821-25efd70b87ed"))
IAgCrdnSignalDelayBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSignalPathReferenceSystem,put=PutSignalPathReferenceSystem))
    enum AgECrdnSignalPathReferenceSystem SignalPathReferenceSystem;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetSpeedOption,put=PutSpeedOption))
    enum AgECrdnSpeedOptions SpeedOption;
    __declspec(property(get=GetTransferSpeed,put=PutTransferSpeed))
    double TransferSpeed;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSignalPathReferenceSystem GetSignalPathReferenceSystem ( );
    void PutSignalPathReferenceSystem (
        enum AgECrdnSignalPathReferenceSystem pRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    enum AgECrdnSpeedOptions GetSpeedOption ( );
    void PutSpeedOption (
        enum AgECrdnSpeedOptions pRetVal );
    double GetTransferSpeed ( );
    void PutTransferSpeed (
        double pRetVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SignalPathReferenceSystem (
        /*[out,retval]*/ enum AgECrdnSignalPathReferenceSystem * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalPathReferenceSystem (
        /*[in]*/ enum AgECrdnSignalPathReferenceSystem pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpeedOption (
        /*[out,retval]*/ enum AgECrdnSpeedOptions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpeedOption (
        /*[in]*/ enum AgECrdnSpeedOptions pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransferSpeed (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransferSpeed (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("0d3642fd-5252-4c80-ab0d-c87809f06862"))
IAgCrdnVolumeCombined : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCombineOperation,put=PutCombineOperation))
    enum AgECrdnVolumeCombinedOperationType CombineOperation;
    __declspec(property(get=GetConditionCount))
    int ConditionCount;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumeCombinedOperationType GetCombineOperation ( );
    void PutCombineOperation (
        enum AgECrdnVolumeCombinedOperationType pRetVal );
    int GetConditionCount ( );
    SAFEARRAY * GetAllConditions ( );
    HRESULT SetAllConditions (
        SAFEARRAY * * Conditions );
    HRESULT SetCondition (
        struct IAgCrdnVolume * Ref,
        int Pos );
    IAgCrdnVolumePtr GetCondition (
        int Pos );
    HRESULT RemoveCondition (
        int Pos );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CombineOperation (
        /*[out,retval]*/ enum AgECrdnVolumeCombinedOperationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CombineOperation (
        /*[in]*/ enum AgECrdnVolumeCombinedOperationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionCount (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllConditions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllConditions (
        /*[in]*/ SAFEARRAY * * Conditions ) = 0;
      virtual HRESULT __stdcall raw_SetCondition (
        /*[in]*/ struct IAgCrdnVolume * Ref,
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall raw_GetCondition (
        /*[in]*/ int Pos,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveCondition (
        /*[in]*/ int Pos ) = 0;
};

struct __declspec(uuid("a1210bff-c5c3-4551-a4d9-3473baf5b929"))
IAgCrdnVolumeFromCalc : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOperation,put=PutOperation))
    enum AgECrdnConditionThresholdOption Operation;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionThresholdOption GetOperation ( );
    void PutOperation (
        enum AgECrdnConditionThresholdOption pRetVal );
    STKUtil::IAgQuantityPtr GetMinimum ( );
    HRESULT SetMinimum (
        struct STKUtil::IAgQuantity * Value );
    STKUtil::IAgQuantityPtr GetMaximum ( );
    HRESULT SetMaximum (
        struct STKUtil::IAgQuantity * Value );
    HRESULT Set (
        struct STKUtil::IAgQuantity * Min,
        struct STKUtil::IAgQuantity * Max );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Operation (
        /*[out,retval]*/ enum AgECrdnConditionThresholdOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Operation (
        /*[in]*/ enum AgECrdnConditionThresholdOption pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMinimum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMinimum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_GetMaximum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaximum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ struct STKUtil::IAgQuantity * Min,
        /*[in]*/ struct STKUtil::IAgQuantity * Max ) = 0;
};

struct __declspec(uuid("84303f43-9955-4879-a42a-1aaa747891a4"))
IAgCrdnVolumeFromCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
};

struct __declspec(uuid("ac31cf77-28de-458e-8d76-836b431a5d91"))
IAgCrdnVolumeFromGrid : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEdgeType,put=PutEdgeType))
    enum AgECrdnVolumeFromGridEdgeType EdgeType;
    __declspec(property(get=GetVolumeGrid,put=PutVolumeGrid))
    IAgCrdnVolumeGridPtr VolumeGrid;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumeFromGridEdgeType GetEdgeType ( );
    void PutEdgeType (
        enum AgECrdnVolumeFromGridEdgeType pRetVal );
    IAgCrdnVolumeGridPtr GetVolumeGrid ( );
    void PutVolumeGrid (
        struct IAgCrdnVolumeGrid * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EdgeType (
        /*[out,retval]*/ enum AgECrdnVolumeFromGridEdgeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EdgeType (
        /*[in]*/ enum AgECrdnVolumeFromGridEdgeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeGrid (
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VolumeGrid (
        /*[in]*/ struct IAgCrdnVolumeGrid * ppRetVal ) = 0;
};

struct __declspec(uuid("e4b03775-990c-4d79-bdad-e121e0526953"))
IAgCrdnVolumeFromTimeSatisfaction : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeSatisfaction,put=PutTimeSatisfaction))
    IAgCrdnEventIntervalListPtr TimeSatisfaction;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetTimeSatisfaction ( );
    void PutTimeSatisfaction (
        struct IAgCrdnEventIntervalList * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeSatisfaction (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeSatisfaction (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
};

struct __declspec(uuid("596939d4-d287-4a58-aef0-b8d43ac6b784"))
IAgCrdnVolumeGridBearingAlt : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceCentralBody,put=PutReferenceCentralBody))
    _bstr_t ReferenceCentralBody;
    __declspec(property(get=GetAlongBearingCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AlongBearingCoordinates;
    __declspec(property(get=GetCrossBearingCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr CrossBearingCoordinates;
    __declspec(property(get=GetAltitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AltitudeCoordinates;
    __declspec(property(get=GetAutoFitBounds,put=PutAutoFitBounds))
    VARIANT_BOOL AutoFitBounds;
    __declspec(property(get=GetBearingAngle,put=PutBearingAngle))
    double BearingAngle;
    __declspec(property(get=GetReferenceLocation,put=PutReferenceLocation))
    SAFEARRAY * ReferenceLocation;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceCentralBody ( );
    void PutReferenceCentralBody (
        _bstr_t pRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetAlongBearingCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetCrossBearingCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetAltitudeCoordinates ( );
    VARIANT_BOOL GetAutoFitBounds ( );
    void PutAutoFitBounds (
        VARIANT_BOOL pRetVal );
    double GetBearingAngle ( );
    void PutBearingAngle (
        double pRetVal );
    SAFEARRAY * GetReferenceLocation ( );
    void PutReferenceLocation (
        SAFEARRAY * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceCentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceCentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlongBearingCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CrossBearingCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoFitBounds (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoFitBounds (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_BearingAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BearingAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceLocation (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceLocation (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
};

struct __declspec(uuid("e5212616-3f37-4c40-9e0b-f925f199d4de"))
IAgCrdnVolumeGridCartesian : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetXCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr XCoordinates;
    __declspec(property(get=GetYCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr YCoordinates;
    __declspec(property(get=GetZCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr ZCoordinates;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetXCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetYCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetZCoordinates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ZCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
};

struct __declspec(uuid("1a7c195f-c976-40a1-bfe0-a6672eae8dee"))
IAgCrdnVolumeGridConstrained : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceGrid,put=PutReferenceGrid))
    IAgCrdnVolumeGridPtr ReferenceGrid;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    IAgCrdnVolumePtr Constraint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVolumeGridPtr GetReferenceGrid ( );
    void PutReferenceGrid (
        struct IAgCrdnVolumeGrid * ppRetVal );
    IAgCrdnVolumePtr GetConstraint ( );
    void PutConstraint (
        struct IAgCrdnVolume * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceGrid (
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceGrid (
        /*[in]*/ struct IAgCrdnVolumeGrid * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ struct IAgCrdnVolume * ppRetVal ) = 0;
};

struct __declspec(uuid("d2da83c9-cd3d-4c77-abee-4a9fd4eaeb38"))
IAgCrdnVolumeGridCylindrical : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetThetaCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr ThetaCoordinates;
    __declspec(property(get=GetRadiusCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr RadiusCoordinates;
    __declspec(property(get=GetHeightCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr HeightCoordinates;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetThetaCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetRadiusCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetHeightCoordinates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ThetaCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
};

struct __declspec(uuid("0d9fde14-4912-4512-b961-f587bf69c3ba"))
IAgCrdnVolumeGridLatLonAlt : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceCentralBody,put=PutReferenceCentralBody))
    _bstr_t ReferenceCentralBody;
    __declspec(property(get=GetLatitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr LatitudeCoordinates;
    __declspec(property(get=GetLongitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr LongitudeCoordinates;
    __declspec(property(get=GetAltitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AltitudeCoordinates;
    __declspec(property(get=GetAutoFitBounds,put=PutAutoFitBounds))
    VARIANT_BOOL AutoFitBounds;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceCentralBody ( );
    void PutReferenceCentralBody (
        _bstr_t pRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetLatitudeCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetLongitudeCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetAltitudeCoordinates ( );
    VARIANT_BOOL GetAutoFitBounds ( );
    void PutAutoFitBounds (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceCentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceCentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LatitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LongitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoFitBounds (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoFitBounds (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("39d7fd06-c18a-4b35-bb2e-5801e89facd4"))
IAgCrdnVolumeGridResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetSizeI))
    int SizeI;
    __declspec(property(get=GetSizeJ))
    int SizeJ;
    __declspec(property(get=GetSizeK))
    int SizeK;
    __declspec(property(get=GetVolumeMetricDataVector))
    SAFEARRAY * VolumeMetricDataVector;
    __declspec(property(get=GetVolumeMetricPositionVector))
    SAFEARRAY * VolumeMetricPositionVector;
    __declspec(property(get=GetVolumeMetricNativePositionVector))
    SAFEARRAY * VolumeMetricNativePositionVector;
    __declspec(property(get=GetVolumeMetricGradientVector))
    SAFEARRAY * VolumeMetricGradientVector;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    int GetSizeI ( );
    int GetSizeJ ( );
    int GetSizeK ( );
    SAFEARRAY * GetVolumeMetricDataVector ( );
    SAFEARRAY * GetVolumeMetricPositionVector ( );
    SAFEARRAY * GetVolumeMetricNativePositionVector ( );
    SAFEARRAY * GetVolumeMetricGradientVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeI (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeJ (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeK (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricDataVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricPositionVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricNativePositionVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeMetricGradientVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("dcd0a443-1a4f-4e56-9077-2a439a78fffe"))
IAgCrdnVolumeGridSpherical : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetAzimuthCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AzimuthCoordinates;
    __declspec(property(get=GetElevationCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr ElevationCoordinates;
    __declspec(property(get=GetRangeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr RangeCoordinates;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetAzimuthCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetElevationCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetRangeCoordinates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AzimuthCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ElevationCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RangeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
};

struct __declspec(uuid("d4ec9566-d108-44dc-a75f-e9137f2f3b35"))
IAgCrdnVolumeInview : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintObject,put=PutConstraintObject))
    _variant_t ConstraintObject;
    __declspec(property(get=GetLightTimeDelay))
    IAgCrdnLightTimeDelayPtr LightTimeDelay;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetConstraintObject ( );
    void PutConstraintObject (
        const _variant_t & pRetVal );
    IAgCrdnLightTimeDelayPtr GetLightTimeDelay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintObject (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintObject (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightTimeDelay (
        /*[out,retval]*/ struct IAgCrdnLightTimeDelay * * ppRetVal ) = 0;
};

struct __declspec(uuid("2bd23c45-f637-4ae8-ab18-fadd8eec2559"))
IAgCrdnVolumeLighting : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEclipsingBodies,put=PutEclipsingBodies))
    SAFEARRAY * EclipsingBodies;
    __declspec(property(get=GetUseObjectEclipsingBodies,put=PutUseObjectEclipsingBodies))
    VARIANT_BOOL UseObjectEclipsingBodies;
    __declspec(property(get=GetLightingConditions,put=PutLightingConditions))
    enum AgECrdnVolumeLightingConditionsType LightingConditions;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetEclipsingBodies ( );
    void PutEclipsingBodies (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetUseObjectEclipsingBodies ( );
    void PutUseObjectEclipsingBodies (
        VARIANT_BOOL pRetVal );
    enum AgECrdnVolumeLightingConditionsType GetLightingConditions ( );
    void PutLightingConditions (
        enum AgECrdnVolumeLightingConditionsType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EclipsingBodies (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseObjectEclipsingBodies (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseObjectEclipsingBodies (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightingConditions (
        /*[out,retval]*/ enum AgECrdnVolumeLightingConditionsType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LightingConditions (
        /*[in]*/ enum AgECrdnVolumeLightingConditionsType pRetVal ) = 0;
};

struct __declspec(uuid("424054e9-e380-4a75-ad97-738c9e2fae75"))
IAgCrdnVolumeOverTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDurationType,put=PutDurationType))
    enum AgECrdnVolumeOverTimeDurationType DurationType;
    __declspec(property(get=GetReferenceVolume,put=PutReferenceVolume))
    IAgCrdnVolumePtr ReferenceVolume;
    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;
    __declspec(property(get=GetStartOffset,put=PutStartOffset))
    double StartOffset;
    __declspec(property(get=GetStopOffset,put=PutStopOffset))
    double StopOffset;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumeOverTimeDurationType GetDurationType ( );
    void PutDurationType (
        enum AgECrdnVolumeOverTimeDurationType pRetVal );
    IAgCrdnVolumePtr GetReferenceVolume ( );
    void PutReferenceVolume (
        struct IAgCrdnVolume * ppRetVal );
    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetStartOffset ( );
    void PutStartOffset (
        double pRetVal );
    double GetStopOffset ( );
    void PutStopOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DurationType (
        /*[out,retval]*/ enum AgECrdnVolumeOverTimeDurationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationType (
        /*[in]*/ enum AgECrdnVolumeOverTimeDurationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVolume (
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVolume (
        /*[in]*/ struct IAgCrdnVolume * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOffset (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECrdnVolumeResultVectorRequest
{
    eCrdnVolumeResultVectorRequestPos = 1,
    eCrdnVolumeResultVectorRequestNativePos = 2,
    eCrdnVolumeResultVectorRequestMetric = 16,
    eCrdnVolumeResultVectorRequestSatisfaction = 32,
    eCrdnVolumeResultVectorRequestGradient = 256
};

struct __declspec(uuid("49a41d78-efeb-4440-b3c9-dee734b13d85"))
AgCrdnEvaluateResult;
    // [ default ] interface _IAgCrdnEvaluateResult
    // interface IAgCrdnEvaluateResult

struct __declspec(uuid("5cbbfb4c-5db7-4578-8c13-9c0a952ca99f"))
AgCrdnEvaluateWithRateResult;
    // [ default ] interface _IAgCrdnEvaluateWithRateResult
    // interface IAgCrdnEvaluateWithRateResult

struct __declspec(uuid("a91f9056-6a49-40bb-a8df-53ea02461ae5"))
AgCrdnEventIntervalResult;
    // [ default ] interface _IAgCrdnEventIntervalResult
    // interface IAgCrdnEventIntervalResult

struct __declspec(uuid("d5a483b4-9347-415a-a499-21a67694ad61"))
AgCrdnEventFindOccurrenceResult;
    // [ default ] interface _IAgCrdnEventFindOccurrenceResult
    // interface IAgCrdnEventFindOccurrenceResult

struct __declspec(uuid("a592350c-ab17-4ccc-a427-0d795e058452"))
AgCrdnFindTimesResult;
    // [ default ] interface _IAgCrdnFindTimesResult
    // interface IAgCrdnFindTimesResult

struct __declspec(uuid("fd73a622-cc26-404f-8e15-864e49fb9a3b"))
AgCrdnIntervalsVectorResult;
    // [ default ] interface _IAgCrdnIntervalsVectorResult
    // interface IAgCrdnIntervalsVectorResult

struct __declspec(uuid("f4750d11-f028-410a-ae3b-0d89d5e853e7"))
AgCrdnEventIntervalCollectionOccurredResult;
    // [ default ] interface _IAgCrdnEventIntervalCollectionOccurredResult
    // interface IAgCrdnEventIntervalCollectionOccurredResult

struct __declspec(uuid("4f59d401-5e26-45df-8068-2b63396b455e"))
AgCrdnIntervalListResult;
    // [ default ] interface _IAgCrdnIntervalListResult
    // interface IAgCrdnIntervalListResult

struct __declspec(uuid("b084309f-7657-4cd1-878f-5d1dc6f565ea"))
AgCrdnIntervalVectorCollection;
    // interface IAgCrdnIntervalVectorCollection
    // [ default ] interface _IAgCrdnIntervalVectorCollection

struct __declspec(uuid("915a4a40-9edb-4b61-b8bb-51f7a8013ddc"))
AgCrdnEventGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnEventGroup

struct __declspec(uuid("48102fb2-6a8c-4a74-8a93-5589b25102ea"))
AgCrdnEventIntervalGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnEventIntervalGroup

struct __declspec(uuid("fd4b5ff7-b5ae-4f97-8a76-e00df85179ae"))
AgCrdnEventIntervalListGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnEventIntervalListGroup

struct __declspec(uuid("689b8b45-3432-4e79-a649-e8290bfcaf40"))
AgCrdnEventArrayGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnEventArrayGroup

struct __declspec(uuid("8502a0e4-0c61-4fd7-801e-979f16dc684a"))
AgCrdnCalcScalarGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnCalcScalarGroup

struct __declspec(uuid("8a893b40-4600-4530-84e2-e7733dde1679"))
AgCrdnEventIntervalCollectionGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnEventIntervalCollectionGroup

struct __declspec(uuid("5b93788e-6cf7-4169-82a7-1cf32fda371d"))
AgCrdnParameterSetGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnParameterSetGroup

struct __declspec(uuid("eb22d291-1c06-46b5-9b26-f93a7985c0c7"))
AgCrdnConditionGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnConditionGroup

struct __declspec(uuid("2c02fc9f-ca3f-4c4e-bdfb-619175e6198e"))
AgCrdnConditionSetGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnConditionSetGroup

struct __declspec(uuid("ad65031a-0cfb-4296-92d1-16d48ab2b1a5"))
AgCrdnConditionSetEvaluateResult;
    // [ default ] interface _IAgCrdnConditionSetEvaluateResult
    // interface IAgCrdnConditionSetEvaluateResult

struct __declspec(uuid("6b6bba12-606e-4531-a6c0-cbdebd651e84"))
AgCrdnConditionSetEvaluateWithRateResult;
    // [ default ] interface _IAgCrdnConditionSetEvaluateWithRateResult
    // interface IAgCrdnConditionSetEvaluateWithRateResult

struct __declspec(uuid("ee2b818c-6fef-4b2b-abc0-6b38ee69e5c8"))
AgCrdnVolumeGridGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnVolumeGridGroup

struct __declspec(uuid("8d958e74-bb2e-4b83-8edc-bf6a9fb43d61"))
AgCrdnVolumeGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnVolumeGroup

struct __declspec(uuid("e65458dd-ac1a-4e93-b7c2-7016060197eb"))
AgCrdnCalcScalar;
    // [ default ] interface _IAgCrdnCalcScalar
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("8d2c3e23-c3b7-48ab-91f7-c845c6b2d09a"))
AgCrdnCalcScalarAngle;
    // [ default ] interface _IAgCrdnCalcScalarAngle
    // interface IAgCrdnCalcScalarAngle
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("7b3e3439-15d7-4d65-897a-dc24204d7a82"))
AgCrdnCalcScalarConstant;
    // [ default ] interface _IAgCrdnCalcScalarConstant
    // interface IAgCrdnCalcScalarConstant
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("078da10f-bd29-4af4-acc3-a4008f5c95e1"))
AgCrdnCalcScalarCustom;
    // [ default ] interface _IAgCrdnCalcScalarCustom
    // interface IAgCrdnCalcScalarCustom
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("b42b5feb-781f-44b4-9a8a-784a97d38e80"))
AgCrdnCalcScalarDataElement;
    // [ default ] interface _IAgCrdnCalcScalarDataElement
    // interface IAgCrdnCalcScalarDataElement
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("6ef0b3e4-da82-4c63-9bf8-1976cb7c7638"))
AgCrdnCalcScalarDerivative;
    // [ default ] interface _IAgCrdnCalcScalarDerivative
    // interface IAgCrdnCalcScalarDerivative
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("1f57eb63-985b-4ba9-abd5-53aa93ccaf5f"))
AgCrdnCalcScalarElapsedTime;
    // [ default ] interface _IAgCrdnCalcScalarElapsedTime
    // interface IAgCrdnCalcScalarElapsedTime
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("53a7aa00-2ce3-4765-99e9-e1e6bef48a4b"))
AgCrdnCalcScalarFactory;
    // [ default ] interface _IAgCrdnCalcScalarFactory
    // interface IAgCrdnCalcScalarFactory

struct __declspec(uuid("c05383f4-b639-4436-b410-1221c15c1300"))
AgCrdnCalcScalarFile;
    // [ default ] interface _IAgCrdnCalcScalarFile
    // interface IAgCrdnCalcScalarFile
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("b05c9982-01f7-466c-a6bb-8beb6320ac30"))
AgCrdnCalcScalarFixedAtTimeInstant;
    // [ default ] interface _IAgCrdnCalcScalarFixedAtTimeInstant
    // interface IAgCrdnCalcScalarFixedAtTimeInstant
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("1da72855-c7f8-4a25-bdb1-1e4c74782188"))
AgCrdnCalcScalarFunction;
    // [ default ] interface _IAgCrdnCalcScalarFunction
    // interface IAgCrdnCalcScalarFunction
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("2ee19a08-5c22-4077-b7eb-f66dad168a9a"))
AgCrdnCalcScalarFunction2Var;
    // [ default ] interface _IAgCrdnCalcScalarFunction2Var
    // interface IAgCrdnCalcScalarFunction2Var
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("f2e81a2a-c833-42ce-aabe-070cc15998e5"))
AgCrdnCalcScalarIntegral;
    // [ default ] interface _IAgCrdnCalcScalarIntegral
    // interface IAgCrdnCalcScalarIntegral
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("7d36e658-2e98-4fb0-89e0-9b53e29b69ff"))
AgCrdnCalcScalarPlugin;
    // [ default ] interface _IAgCrdnCalcScalarPlugin
    // interface IAgCrdnCalcScalarPlugin
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("17ce0916-f73b-4006-8fc1-23099ebf5860"))
AgCrdnCalcScalarSurfaceDistanceBetweenPoints;
    // [ default ] interface _IAgCrdnCalcScalarSurfaceDistanceBetweenPoints
    // interface IAgCrdnCalcScalarSurfaceDistanceBetweenPoints
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("195f9d2d-d4db-4221-a5eb-979a4c1a3aad"))
AgCrdnCalcScalarVectorMagnitude;
    // [ default ] interface _IAgCrdnCalcScalarVectorMagnitude
    // interface IAgCrdnCalcScalarVectorMagnitude
    // interface IAgCrdnCalcScalar
    // interface IAgCrdn

struct __declspec(uuid("071e5309-f7c5-4199-b02d-a94a5db14e09"))
AgCrdnCondition;
    // [ default ] interface _IAgCrdnCondition
    // interface IAgCrdnCondition
    // interface IAgCrdn

struct __declspec(uuid("b6de113d-bd63-4139-ba57-c03ad6d80ed9"))
AgCrdnConditionCombined;
    // [ default ] interface _IAgCrdnConditionCombined
    // interface IAgCrdnConditionCombined
    // interface IAgCrdnCondition
    // interface IAgCrdn

struct __declspec(uuid("391579de-585d-4a0c-bf39-0f51dfa9655d"))
AgCrdnConditionFactory;
    // [ default ] interface _IAgCrdnConditionFactory
    // interface IAgCrdnConditionFactory

struct __declspec(uuid("c0e00d3e-c8fa-40b9-b8eb-c13cf3c5af65"))
AgCrdnConditionScalarBounds;
    // [ default ] interface _IAgCrdnConditionScalarBounds
    // interface IAgCrdnConditionScalarBounds
    // interface IAgCrdnCondition
    // interface IAgCrdn

struct __declspec(uuid("fff6df8a-2947-4859-8bfe-94e905c114a4"))
AgCrdnConditionSet;
    // [ default ] interface _IAgCrdnConditionSet
    // interface IAgCrdnConditionSet
    // interface IAgCrdn

struct __declspec(uuid("f4d7a8d6-deb8-4846-9525-897fe27185d7"))
AgCrdnConditionSetFactory;
    // [ default ] interface _IAgCrdnConditionSetFactory
    // interface IAgCrdnConditionSetFactory

struct __declspec(uuid("dfff6864-3352-451f-89d9-1356ecf830ca"))
AgCrdnConditionSetScalarThresholds;
    // [ default ] interface _IAgCrdnConditionSetScalarThresholds
    // interface IAgCrdnConditionSetScalarThresholds
    // interface IAgCrdnConditionSet
    // interface IAgCrdn

struct __declspec(uuid("133cdcbc-e06e-4c48-bf1a-888e78253cc5"))
AgCrdnConverge;
    // [ default ] interface _IAgCrdnConverge
    // interface IAgCrdnConverge
    // interface IAgCrdn

struct __declspec(uuid("1d3cbb04-d011-411c-8d2e-d8e7a7ce808b"))
AgCrdnConvergeBasic;
    // [ default ] interface _IAgCrdnConvergeBasic
    // interface IAgCrdnConvergeBasic
    // interface IAgCrdnConverge
    // interface IAgCrdn

struct __declspec(uuid("ac5f654d-b694-45a2-8adf-5ec63ddea8f1"))
AgCrdnDerivative;
    // [ default ] interface _IAgCrdnDerivative
    // interface IAgCrdnDerivative
    // interface IAgCrdn

struct __declspec(uuid("577a35ad-8ba9-4c13-afbb-f16cbe85fd91"))
AgCrdnDerivativeBasic;
    // [ default ] interface _IAgCrdnDerivativeBasic
    // interface IAgCrdnDerivativeBasic
    // interface IAgCrdnDerivative
    // interface IAgCrdn

struct __declspec(uuid("6c2ebebd-3deb-4362-b347-c3da33fb37e3"))
AgCrdnEvent;
    // [ default ] interface _IAgCrdnEvent
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("94a82330-c95e-4ff8-809a-7677c45786aa"))
AgCrdnEventArray;
    // [ default ] interface _IAgCrdnEventArray
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("4078ff34-0e50-4104-99a2-7f7b302e2a7b"))
AgCrdnEventArrayConditionCrossings;
    // [ default ] interface _IAgCrdnEventArrayConditionCrossings
    // interface IAgCrdnEventArrayConditionCrossings
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("ef0e6bb2-9ac0-4e88-a4d4-ab0ed34e925d"))
AgCrdnEventArrayExtrema;
    // [ default ] interface _IAgCrdnEventArrayExtrema
    // interface IAgCrdnEventArrayExtrema
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("1d0db444-a862-4333-b6a5-9f1d52003274"))
AgCrdnEventArrayFactory;
    // [ default ] interface _IAgCrdnEventArrayFactory
    // interface IAgCrdnEventArrayFactory

struct __declspec(uuid("737bd1d1-1d22-4eb0-b851-de8413f5fff2"))
AgCrdnEventArrayFiltered;
    // [ default ] interface _IAgCrdnEventArrayFiltered
    // interface IAgCrdnEventArrayFiltered
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("a714de92-4439-436d-ae6b-56c98cabb287"))
AgCrdnEventArrayFixedStep;
    // [ default ] interface _IAgCrdnEventArrayFixedStep
    // interface IAgCrdnEventArrayFixedStep
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("da044dd2-71f6-4d12-8f23-29c8f7744791"))
AgCrdnEventArrayFixedTimes;
    // [ default ] interface _IAgCrdnEventArrayFixedTimes
    // interface IAgCrdnEventArrayFixedTimes
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("99ac9a70-4251-447e-bbd0-b5fd9e459a1c"))
AgCrdnEventArrayMerged;
    // [ default ] interface _IAgCrdnEventArrayMerged
    // interface IAgCrdnEventArrayMerged
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("b874e5df-4087-4056-8c20-c951b3192bc4"))
AgCrdnEventArraySignaled;
    // [ default ] interface _IAgCrdnEventArraySignaled
    // interface IAgCrdnEventArraySignaled
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("cd0e07d5-958a-48fb-987f-a115bf5d5a9b"))
AgCrdnEventArrayStartStopTimes;
    // [ default ] interface _IAgCrdnEventArrayStartStopTimes
    // interface IAgCrdnEventArrayStartStopTimes
    // interface IAgCrdnEventArray
    // interface IAgCrdn

struct __declspec(uuid("0c942b11-016e-4dde-814c-f847b1d230ff"))
AgCrdnEventEpoch;
    // [ default ] interface _IAgCrdnEventEpoch
    // interface IAgCrdnEventEpoch
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("6d3afad7-0fda-4241-95f7-b92fd269f8eb"))
AgCrdnEventExtremum;
    // [ default ] interface _IAgCrdnEventExtremum
    // interface IAgCrdnEventExtremum
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("48f634f4-2b50-4669-8544-6fc5e1adc3bc"))
AgCrdnEventFactory;
    // [ default ] interface _IAgCrdnEventFactory
    // interface IAgCrdnEventFactory

struct __declspec(uuid("c48f3469-b27a-4e77-a0d9-30265b50b548"))
AgCrdnEventInterval;
    // [ default ] interface _IAgCrdnEventInterval
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("172efdb1-c6c6-472c-99c4-e09b28f29f5d"))
AgCrdnEventIntervalBetweenTimeInstants;
    // [ default ] interface _IAgCrdnEventIntervalBetweenTimeInstants
    // interface IAgCrdnEventIntervalBetweenTimeInstants
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("01a0acbb-3552-498e-958a-14177bf4f77c"))
AgCrdnEventIntervalCollection;
    // [ default ] interface _IAgCrdnEventIntervalCollection
    // interface IAgCrdnEventIntervalCollection
    // interface IAgCrdn

struct __declspec(uuid("6c4def48-1ea1-46b9-ab15-0d77576abbf3"))
AgCrdnEventIntervalCollectionCondition;
    // [ default ] interface _IAgCrdnEventIntervalCollectionCondition
    // interface IAgCrdnEventIntervalCollectionCondition
    // interface IAgCrdnEventIntervalCollection
    // interface IAgCrdn

struct __declspec(uuid("7b88c1cc-262d-4e46-8f65-5817c15c7a7c"))
AgCrdnEventIntervalCollectionFactory;
    // [ default ] interface _IAgCrdnEventIntervalCollectionFactory
    // interface IAgCrdnEventIntervalCollectionFactory

struct __declspec(uuid("c1e078c3-a47f-4a4a-a3f6-05002130f944"))
AgCrdnEventIntervalCollectionLighting;
    // [ default ] interface _IAgCrdnEventIntervalCollectionLighting
    // interface IAgCrdnEventIntervalCollectionLighting
    // interface IAgCrdnEventIntervalCollection
    // interface IAgCrdn

struct __declspec(uuid("95a0d64b-7986-49b7-8733-1341c9b16f15"))
AgCrdnEventIntervalCollectionSignaled;
    // [ default ] interface _IAgCrdnEventIntervalCollectionSignaled
    // interface IAgCrdnEventIntervalCollectionSignaled
    // interface IAgCrdnEventIntervalCollection
    // interface IAgCrdn

struct __declspec(uuid("ca10105b-e7a8-44e8-9530-e48d68a96f6e"))
AgCrdnEventIntervalFactory;
    // [ default ] interface _IAgCrdnEventIntervalFactory
    // interface IAgCrdnEventIntervalFactory

struct __declspec(uuid("178b0661-8eaf-4c79-80be-012171d73704"))
AgCrdnEventIntervalFixed;
    // [ default ] interface _IAgCrdnEventIntervalFixed
    // interface IAgCrdnEventIntervalFixed
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("d35699ab-8974-48d9-8969-88abbf42eb49"))
AgCrdnEventIntervalFixedDuration;
    // [ default ] interface _IAgCrdnEventIntervalFixedDuration
    // interface IAgCrdnEventIntervalFixedDuration
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("db1b5b7c-f282-47ee-87ee-d86baa59f6c9"))
AgCrdnEventIntervalFromIntervalList;
    // [ default ] interface _IAgCrdnEventIntervalFromIntervalList
    // interface IAgCrdnEventIntervalFromIntervalList
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("ade49926-8de8-4b6f-96de-312d1c0e2ac4"))
AgCrdnEventIntervalList;
    // [ default ] interface _IAgCrdnEventIntervalList
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("0e93f884-cc73-445d-9fe5-dc5b5f2e3f2a"))
AgCrdnEventIntervalListCondition;
    // [ default ] interface _IAgCrdnEventIntervalListCondition
    // interface IAgCrdnEventIntervalListCondition
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("5988f872-f35d-4a69-bd14-2931567b2e13"))
AgCrdnEventIntervalListFactory;
    // [ default ] interface _IAgCrdnEventIntervalListFactory
    // interface IAgCrdnEventIntervalListFactory

struct __declspec(uuid("60aa6e76-6ca8-4a06-93ba-7d136ee3c6dc"))
AgCrdnEventIntervalListFile;
    // [ default ] interface _IAgCrdnEventIntervalListFile
    // interface IAgCrdnEventIntervalListFile
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("4c74d839-21ef-402a-a276-63c6b43e1dac"))
AgCrdnEventIntervalListFiltered;
    // [ default ] interface _IAgCrdnEventIntervalListFiltered
    // interface IAgCrdnEventIntervalListFiltered
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("6c2db5bd-43f1-49d3-b5a8-9fd5d67f452e"))
AgCrdnEventIntervalListFixed;
    // [ default ] interface _IAgCrdnEventIntervalListFixed
    // interface IAgCrdnEventIntervalListFixed
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("8c4553e3-d10c-46f3-98b5-1a63fb3200e6"))
AgCrdnEventIntervalListMerged;
    // [ default ] interface _IAgCrdnEventIntervalListMerged
    // interface IAgCrdnEventIntervalListMerged
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("04c38fbf-a36f-4999-8bb2-533decca213e"))
AgCrdnEventIntervalListScaled;
    // [ default ] interface _IAgCrdnEventIntervalListScaled
    // interface IAgCrdnEventIntervalListScaled
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("bca47ef4-7869-4000-ac55-68530be08019"))
AgCrdnEventIntervalListSignaled;
    // [ default ] interface _IAgCrdnEventIntervalListSignaled
    // interface IAgCrdnEventIntervalListSignaled
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("b13dfa3e-cc28-4147-b2f8-829953e51526"))
AgCrdnEventIntervalListTimeOffset;
    // [ default ] interface _IAgCrdnEventIntervalListTimeOffset
    // interface IAgCrdnEventIntervalListTimeOffset
    // interface IAgCrdnEventIntervalList
    // interface IAgCrdn

struct __declspec(uuid("e542711a-4152-4f06-9d86-0d496fd08f52"))
AgCrdnEventIntervalScaled;
    // [ default ] interface _IAgCrdnEventIntervalScaled
    // interface IAgCrdnEventIntervalScaled
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("b8aa12fa-0b1f-404f-a24f-b2fd6e274262"))
AgCrdnEventIntervalSignaled;
    // [ default ] interface _IAgCrdnEventIntervalSignaled
    // interface IAgCrdnEventIntervalSignaled
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("428e74be-36e4-4a1a-9301-c0a0ef2975f5"))
AgCrdnEventIntervalSmartInterval;
    // [ default ] interface _IAgCrdnEventIntervalSmartInterval
    // interface IAgCrdnEventIntervalSmartInterval
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("5dbc92d8-a8a8-4ca4-b9f6-101548940f8c"))
AgCrdnEventIntervalTimeOffset;
    // [ default ] interface _IAgCrdnEventIntervalTimeOffset
    // interface IAgCrdnEventIntervalTimeOffset
    // interface IAgCrdnEventInterval
    // interface IAgCrdn

struct __declspec(uuid("e0d60049-2703-4931-9563-b6eee4aac10c"))
AgCrdnEventSignaled;
    // [ default ] interface _IAgCrdnEventSignaled
    // interface IAgCrdnEventSignaled
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("c44b1be6-51e3-4035-a197-318932c8576f"))
AgCrdnEventSmartEpoch;
    // [ default ] interface _IAgCrdnEventSmartEpoch
    // interface IAgCrdnEventSmartEpoch
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("ffb1c411-8273-4947-a0c0-5a9835047a0d"))
AgCrdnEventStartStopTime;
    // [ default ] interface _IAgCrdnEventStartStopTime
    // interface IAgCrdnEventStartStopTime
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("ccca4110-f163-4294-aa1d-8da2b7582dfc"))
AgCrdnEventTimeOffset;
    // [ default ] interface _IAgCrdnEventTimeOffset
    // interface IAgCrdnEventTimeOffset
    // interface IAgCrdnEvent
    // interface IAgCrdn

struct __declspec(uuid("2338aba2-b57a-46e7-8297-4ec371c8a6aa"))
AgCrdnFirstIntervalsFilter;
    // [ default ] interface _IAgCrdnFirstIntervalsFilter
    // interface IAgCrdnFirstIntervalsFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("e9e417d0-c9a6-4420-b198-c5a6dd2fe62f"))
AgCrdnGapsFilter;
    // [ default ] interface _IAgCrdnGapsFilter
    // interface IAgCrdnGapsFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("5291298c-62e1-4f3e-9678-d817ccb58722"))
AgCrdnIntegral;
    // [ default ] interface _IAgCrdnIntegral
    // interface IAgCrdnIntegral
    // interface IAgCrdn

struct __declspec(uuid("62b4149d-bc27-418a-ab91-dea942910d2c"))
AgCrdnIntegralBasic;
    // [ default ] interface _IAgCrdnIntegralBasic
    // interface IAgCrdnIntegralBasic
    // interface IAgCrdnIntegral
    // interface IAgCrdn

struct __declspec(uuid("25b45c4c-fac8-4bbd-8c4c-e1c054020bff"))
AgCrdnInterp;
    // [ default ] interface _IAgCrdnInterp
    // interface IAgCrdnInterp
    // interface IAgCrdn

struct __declspec(uuid("0f799cac-2bde-483a-88c8-635eaaba3b5d"))
AgCrdnInterpBasic;
    // [ default ] interface _IAgCrdnInterpBasic
    // interface IAgCrdnInterpBasic
    // interface IAgCrdnInterp
    // interface IAgCrdn

struct __declspec(uuid("8b24360c-fe72-4231-98ee-0701a9f31d2f"))
AgCrdnIntervalsFilter;
    // [ default ] interface _IAgCrdnIntervalsFilter
    // interface IAgCrdnIntervalsFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("6ef91b96-7800-422d-ada4-fe35da4e896e"))
AgCrdnLastIntervalsFilter;
    // [ default ] interface _IAgCrdnLastIntervalsFilter
    // interface IAgCrdnLastIntervalsFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("5d45770f-1ee9-4663-94e8-842d37cf749c"))
AgCrdnParameterSet;
    // [ default ] interface _IAgCrdnParameterSet
    // interface IAgCrdnParameterSet
    // interface IAgCrdn

struct __declspec(uuid("b0984a54-ae88-45ab-8b9b-12340d30ec2f"))
AgCrdnParameterSetAttitude;
    // [ default ] interface _IAgCrdnParameterSetAttitude
    // interface IAgCrdnParameterSetAttitude
    // interface IAgCrdnParameterSet
    // interface IAgCrdn

struct __declspec(uuid("9e2b9170-1cc5-47c7-b276-ad3a7b097358"))
AgCrdnParameterSetFactory;
    // [ default ] interface _IAgCrdnParameterSetFactory
    // interface IAgCrdnParameterSetFactory

struct __declspec(uuid("d3e99dbc-b76d-4782-9a3c-c0addf396afe"))
AgCrdnParameterSetGroundTrajectory;
    // [ default ] interface _IAgCrdnParameterSetGroundTrajectory
    // interface IAgCrdnParameterSetGroundTrajectory
    // interface IAgCrdnParameterSet
    // interface IAgCrdn

struct __declspec(uuid("7741d8ad-dc8a-4c3a-94cc-3090bba4bcbf"))
AgCrdnParameterSetOrbit;
    // [ default ] interface _IAgCrdnParameterSetOrbit
    // interface IAgCrdnParameterSetOrbit
    // interface IAgCrdnParameterSet
    // interface IAgCrdn

struct __declspec(uuid("90db6ea5-a2e0-447b-87d9-364366ea80d4"))
AgCrdnParameterSetTrajectory;
    // [ default ] interface _IAgCrdnParameterSetTrajectory
    // interface IAgCrdnParameterSetTrajectory
    // interface IAgCrdnParameterSet
    // interface IAgCrdn

struct __declspec(uuid("67a694ac-4c0d-42b2-883d-83b4282c1371"))
AgCrdnParameterSetVector;
    // [ default ] interface _IAgCrdnParameterSetVector
    // interface IAgCrdnParameterSetVector
    // interface IAgCrdnParameterSet
    // interface IAgCrdn

struct __declspec(uuid("753cef78-7613-47eb-b5d3-4c4bec7ecee3"))
AgCrdnPruneFilter;
    // [ default ] interface _IAgCrdnPruneFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("80cfcebc-689c-4a02-ae76-870486474152"))
AgCrdnPruneFilterFactory;
    // [ default ] interface _IAgCrdnPruneFilterFactory
    // interface IAgCrdnPruneFilterFactory

struct __declspec(uuid("eed6ec2c-cdb2-4d7c-b62f-774e09f884ad"))
AgCrdnRelativeSatisfactionConditionFilter;
    // [ default ] interface _IAgCrdnRelativeSatisfactionConditionFilter
    // interface IAgCrdnRelativeSatisfactionConditionFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("c853d212-4387-4977-b3ad-c910b65e5406"))
AgCrdnSampling;
    // [ default ] interface _IAgCrdnSampling
    // interface IAgCrdnSampling
    // interface IAgCrdn

struct __declspec(uuid("fdd61bd9-71c7-4c56-aa64-0b56288b84f8"))
AgCrdnSamplingBasic;
    // [ default ] interface _IAgCrdnSamplingBasic
    // interface IAgCrdnSamplingBasic
    // interface IAgCrdnSampling
    // interface IAgCrdn

struct __declspec(uuid("5137feb2-0881-43d3-95a4-3cb85c5c5e18"))
AgCrdnSamplingCurvatureTolerance;
    // [ default ] interface _IAgCrdnSamplingCurvatureTolerance
    // interface IAgCrdnSamplingCurvatureTolerance
    // interface IAgCrdnSamplingMethod

struct __declspec(uuid("5a5aab91-6631-41cc-a6ed-bc7d9e60bc42"))
AgCrdnSamplingFixedStep;
    // [ default ] interface _IAgCrdnSamplingFixedStep
    // interface IAgCrdnSamplingFixedStep
    // interface IAgCrdnSamplingMethod

struct __declspec(uuid("d5ea0ccf-4e90-49f1-bbc2-1748ebb6e3db"))
AgCrdnSamplingMethod;
    // [ default ] interface _IAgCrdnSamplingMethod
    // interface IAgCrdnSamplingMethod

struct __declspec(uuid("c2784e36-28b8-42fb-a528-882adef027e8"))
AgCrdnSamplingMethodFactory;
    // [ default ] interface _IAgCrdnSamplingMethodFactory
    // interface IAgCrdnSamplingMethodFactory

struct __declspec(uuid("316b64f6-b0a8-4bdc-8642-ddb84e21eba1"))
AgCrdnSamplingRelativeTolerance;
    // [ default ] interface _IAgCrdnSamplingRelativeTolerance
    // interface IAgCrdnSamplingRelativeTolerance
    // interface IAgCrdnSamplingMethod

struct __declspec(uuid("6a5cc875-9971-4d7b-9b7f-effd2dd82107"))
AgCrdnSatisfactionConditionFilter;
    // [ default ] interface _IAgCrdnSatisfactionConditionFilter
    // interface IAgCrdnSatisfactionConditionFilter
    // interface IAgCrdnPruneFilter

struct __declspec(uuid("30f3c8d2-59de-4fe6-aa1c-c1eb666e72b9"))
AgCrdnSignalDelay;
    // [ default ] interface _IAgCrdnSignalDelay
    // interface IAgCrdnSignalDelay
    // interface IAgCrdn

struct __declspec(uuid("d30caa32-9974-4a84-a939-858857c8ecde"))
AgCrdnSignalDelayBasic;
    // [ default ] interface _IAgCrdnSignalDelayBasic
    // interface IAgCrdnSignalDelayBasic
    // interface IAgCrdnSignalDelay
    // interface IAgCrdn

struct __declspec(uuid("261cbf18-1b30-4e85-8231-1cb92952ae30"))
AgCrdnVolumeFactory;
    // [ default ] interface _IAgCrdnVolumeFactory
    // interface IAgCrdnVolumeFactory

struct __declspec(uuid("377dba65-c3ec-4935-a9d8-9ea444666c11"))
AgCrdnVolumeGridFactory;
    // [ default ] interface _IAgCrdnVolumeGridFactory
    // interface IAgCrdnVolumeGridFactory

struct __declspec(uuid("4db06cf7-c051-4683-94f7-f5544408b533"))
AgCrdnGridCoordinateDefinition;
    // [ default ] interface _IAgCrdnGridCoordinateDefinition
    // interface IAgCrdnGridCoordinateDefinition

struct __declspec(uuid("73ff3fd7-f9ff-4c80-bd13-3abf3ad81c47"))
AgCrdnGridValuesCustom;
    // [ default ] interface _IAgCrdnGridValuesCustom
    // interface IAgCrdnGridValuesCustom
    // interface IAgCrdnGridValuesMethod

struct __declspec(uuid("d05ae60e-6136-4ec1-a32c-96d9cb126efa"))
AgCrdnGridValuesFixedNumberOfSteps;
    // [ default ] interface _IAgCrdnGridValuesFixedNumberOfSteps
    // interface IAgCrdnGridValuesFixedNumberOfSteps
    // interface IAgCrdnGridValuesMethod

struct __declspec(uuid("1e1ab1c2-18b5-4cec-8098-4743b7ea0eff"))
AgCrdnGridValuesFixedStep;
    // [ default ] interface _IAgCrdnGridValuesFixedStep
    // interface IAgCrdnGridValuesFixedStep
    // interface IAgCrdnGridValuesMethod

struct __declspec(uuid("0e76e3be-c05f-4d91-968a-15ad02b73783"))
AgCrdnGridValuesMethod;
    // [ default ] interface _IAgCrdnGridValuesMethod
    // interface IAgCrdnGridValuesMethod

struct __declspec(uuid("8ea46825-d788-4993-8248-bd6f203f83a4"))
AgCrdnLightTimeDelay;
    // [ default ] interface _IAgCrdnLightTimeDelay
    // interface IAgCrdnLightTimeDelay

struct __declspec(uuid("9098a1ce-1a53-4a8d-8812-b2984dad1cc3"))
AgCrdnVolume;
    // [ default ] interface _IAgCrdnVolume
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("ebe84503-ab27-4015-9341-a806313409b9"))
AgCrdnVolumeCombined;
    // [ default ] interface _IAgCrdnVolumeCombined
    // interface IAgCrdnVolumeCombined
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("f0410110-7ac2-45f8-888e-9bf050c5991d"))
AgCrdnVolumeFromCalc;
    // [ default ] interface _IAgCrdnVolumeFromCalc
    // interface IAgCrdnVolumeFromCalc
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("4e493d3f-30b7-4557-abee-e4ba850b7f67"))
AgCrdnVolumeFromCondition;
    // [ default ] interface _IAgCrdnVolumeFromCondition
    // interface IAgCrdnVolumeFromCondition
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("0d7cf142-5f3d-4d61-9479-8f59422749ba"))
AgCrdnVolumeFromGrid;
    // [ default ] interface _IAgCrdnVolumeFromGrid
    // interface IAgCrdnVolumeFromGrid
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("85df8619-0fdc-4b24-a83f-5b7f395cff40"))
AgCrdnVolumeFromTimeSatisfaction;
    // [ default ] interface _IAgCrdnVolumeFromTimeSatisfaction
    // interface IAgCrdnVolumeFromTimeSatisfaction
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("4d796aac-7ce9-453c-b1e7-2b5e0c23befc"))
AgCrdnVolumeGrid;
    // [ default ] interface _IAgCrdnVolumeGrid
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("ad047811-e685-4318-8a7d-92d40bea5761"))
AgCrdnVolumeGridBearingAlt;
    // [ default ] interface _IAgCrdnVolumeGridBearingAlt
    // interface IAgCrdnVolumeGridBearingAlt
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("651a9954-bec2-4c48-a93b-8b7e3dd3064e"))
AgCrdnVolumeGridCartesian;
    // [ default ] interface _IAgCrdnVolumeGridCartesian
    // interface IAgCrdnVolumeGridCartesian
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("68bdf64a-4f1d-429c-a98b-f9c2f36e9c9f"))
AgCrdnVolumeGridConstrained;
    // [ default ] interface _IAgCrdnVolumeGridConstrained
    // interface IAgCrdnVolumeGridConstrained
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("c1f5d2cf-4831-4c9f-84d4-a0a7f1a56cf7"))
AgCrdnVolumeGridCylindrical;
    // [ default ] interface _IAgCrdnVolumeGridCylindrical
    // interface IAgCrdnVolumeGridCylindrical
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("6b5da385-6958-4728-8e93-9edc34545d09"))
AgCrdnVolumeGridLatLonAlt;
    // [ default ] interface _IAgCrdnVolumeGridLatLonAlt
    // interface IAgCrdnVolumeGridLatLonAlt
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("19bc13ac-3035-4106-a36a-adf4b7a4f3e4"))
AgCrdnVolumeGridResult;
    // [ default ] interface _IAgCrdnVolumeGridResult
    // interface IAgCrdnVolumeGridResult

struct __declspec(uuid("091ea6ce-30c5-4c85-8948-7bc97f8a79b2"))
AgCrdnVolumeGridSpherical;
    // [ default ] interface _IAgCrdnVolumeGridSpherical
    // interface IAgCrdnVolumeGridSpherical
    // interface IAgCrdnVolumeGrid
    // interface IAgCrdn

struct __declspec(uuid("2f2a695e-445a-40b9-b9cb-40ee126f83b8"))
AgCrdnVolumeInview;
    // [ default ] interface _IAgCrdnVolumeInview
    // interface IAgCrdnVolumeInview
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("901f0620-68bb-4e11-9a79-9864e4a22a73"))
AgCrdnVolumeLighting;
    // [ default ] interface _IAgCrdnVolumeLighting
    // interface IAgCrdnVolumeLighting
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("1b0f2374-257b-4624-8918-5bd1d7be1462"))
AgCrdnVolumeOverTime;
    // [ default ] interface _IAgCrdnVolumeOverTime
    // interface IAgCrdnVolumeOverTime
    // interface IAgCrdnVolume
    // interface IAgCrdn

struct __declspec(uuid("42bfcb93-fbe1-4353-a5ff-af079c590dd0"))
IAgCrdnTimeProperties : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnIntervalCollectionPtr GetAvailability ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("1f7d829d-6d18-42a8-81e0-d244e6cefcfb"))
IAgCrdnRefTo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("acb36377-3892-43be-9424-3c1ddcf18136"))
IAgCrdnTemplate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetClassName))
    _bstr_t ClassName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetClassName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("a3440ec7-3a82-46cd-b9eb-0a18cbdc0d56"))
IAgCrdnPointRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPoint (
        struct IAgCrdnPoint * Point );
    IAgCrdnPointPtr GetPoint ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnPoint * Point );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ struct IAgCrdnPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnPoint * Point,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("af863b51-5186-4e13-a465-b503b66abc10"))
IAgCrdnSystemRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetSystem (
        struct IAgCrdnSystem * System );
    IAgCrdnSystemPtr GetSystem ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetSystem (
        /*[in]*/ struct IAgCrdnSystem * System ) = 0;
      virtual HRESULT __stdcall raw_GetSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("c35a2058-0d3f-4f95-aaa4-ae8e6d9a1026"))
IAgCrdnCentralBody : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("88481483-f927-4def-897a-c8319ddd1582"))
IAgCrdnCentralBodyRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetCentralBody (
        struct IAgCrdnCentralBody * CentralBody );
    IAgCrdnCentralBodyPtr GetCentralBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetCentralBody (
        /*[in]*/ struct IAgCrdnCentralBody * CentralBody ) = 0;
      virtual HRESULT __stdcall raw_GetCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBody * * ppRetVal ) = 0;
};

enum AgECrdnDirectionType
{
    eCrdnDirectionIncomingAsymptote = 1,
    eCrdnDirectionOutgoingAsymptote = 2
};

struct __declspec(uuid("bd66f711-35f9-47d7-8c78-05c95889c011"))
IAgCrdnAxesAttitudeFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("4e2d3a19-fbe1-4d41-ae43-38daac653edb"))
IAgCrdnAxesModelAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("6bb4fef3-3932-45e9-b52a-5c36820ef0a5"))
IAgCrdnAxesOnSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum AgECrdnTrajectoryAxesType
{
    eCrdnTrajectoryAxesICR = 0,
    eCrdnTrajectoryAxesVNC = 1,
    eCrdnTrajectoryAxesRIC = 2,
    eCrdnTrajectoryAxesLVLH = 3,
    eCrdnTrajectoryAxesVVLH = 4,
    eCrdnTrajectoryAxesBBR = 5
};

struct __declspec(uuid("0c91bf49-1b71-45d7-abd0-98dbdad34107"))
IAgCrdnAxesTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectoryPoint))
    IAgCrdnPointRefToPtr TrajectoryPoint;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetTrajectoryAxesType,put=PutTrajectoryAxesType))
    enum AgECrdnTrajectoryAxesType TrajectoryAxesType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetTrajectoryPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnTrajectoryAxesType GetTrajectoryAxesType ( );
    void PutTrajectoryAxesType (
        enum AgECrdnTrajectoryAxesType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryAxesType (
        /*[out,retval]*/ enum AgECrdnTrajectoryAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TrajectoryAxesType (
        /*[in]*/ enum AgECrdnTrajectoryAxesType pRetVal ) = 0;
};

enum AgECrdnLagrangeLibrationPointType
{
    eCrdnLagrangeLibrationPointTypeL1 = 1,
    eCrdnLagrangeLibrationPointTypeL2 = 2,
    eCrdnLagrangeLibrationPointTypeL3 = 3,
    eCrdnLagrangeLibrationPointTypeL4 = 4,
    eCrdnLagrangeLibrationPointTypeL5 = 5
};

struct __declspec(uuid("ba4417ea-d6da-456d-803e-75543bf30a3b"))
IAgCrdnCentralBodyCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Add (
        _bstr_t CentralBodyName );
    HRESULT Remove (
        _bstr_t CentralBodyName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR CentralBodyName ) = 0;
};

struct __declspec(uuid("21bbdc68-9a88-47a3-8e18-4401cfec0111"))
IAgCrdnAxesLagrangeLibration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimaryCentralBody))
    IAgCrdnCentralBodyRefToPtr PrimaryCentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetPrimaryCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PrimaryCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("b10c89e4-3e2e-48ae-a7d8-b6e863ee48fe"))
IAgCrdnAxesSamplingInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimes))
    SAFEARRAY * Times;
    __declspec(property(get=GetQuaternions))
    SAFEARRAY * Quaternions;
    __declspec(property(get=GetVelocities))
    SAFEARRAY * Velocities;
    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetTimes ( );
    SAFEARRAY * GetQuaternions ( );
    SAFEARRAY * GetVelocities ( );
    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Times (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Quaternions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocities (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("204eda76-8e12-4e0c-9b32-d42dad61ee8b"))
IAgCrdnAxesSamplingIntervalCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnAxesSamplingIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnAxesSamplingIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnAxesSamplingInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("1862720f-767c-467f-a911-2905853515ff"))
IAgCrdnAxesSamplingResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnAxesSamplingIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnAxesSamplingIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnAxesSamplingIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("98256780-18af-4b9d-8b43-156a16a689d4"))
IAgCrdnAxesPlugin : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

enum AgECrdnDisplayAxisSelector
{
    eCrdnDisplayAxisX = 0,
    eCrdnDisplayAxisY = 1,
    eCrdnDisplayAxisZ = 2
};

enum AgECrdnSignedAngleType
{
    eCrdnSignedAngleNone = 0,
    eCrdnSignedAnglePositive = 1,
    eCrdnSignedAngleNegative = 2
};

enum AgECrdnQuadrantType
{
    eCrdnQuadrantXY = 1,
    eCrdnQuadrantYX = 2,
    eCrdnQuadrantXZ = 3,
    eCrdnQuadrantZX = 4,
    eCrdnQuadrantYZ = 5,
    eCrdnQuadrantZY = 6
};

struct __declspec(uuid("2e56315e-9245-4afb-babc-b05164996a75"))
IAgCrdnPlaneQuadrant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetQuadrant,put=PutQuadrant))
    enum AgECrdnQuadrantType Quadrant;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnQuadrantType GetQuadrant ( );
    void PutQuadrant (
        enum AgECrdnQuadrantType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Quadrant (
        /*[out,retval]*/ enum AgECrdnQuadrantType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Quadrant (
        /*[in]*/ enum AgECrdnQuadrantType pRetVal ) = 0;
};

struct __declspec(uuid("56482904-d0a0-45fe-b208-69e1ba0b981a"))
IAgCrdnPlaneTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint))
    IAgCrdnPointRefToPtr Point;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("0b7c56bd-9808-4f0e-82de-c2689411bfd1"))
IAgCrdnPlaneTriad : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointA))
    IAgCrdnPointRefToPtr PointA;
    __declspec(property(get=GetPointB))
    IAgCrdnPointRefToPtr PointB;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetPointA ( );
    IAgCrdnPointRefToPtr GetPointB ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointA (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointB (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECrdnPointBPlaneType
{
    eCrdnPointBPlaneAsymptote = 1,
    eCrdnPointBPlaneATwoBody = 2
};

struct __declspec(uuid("f45c47e9-c6b9-4b90-a275-94b37554f0a0"))
IAgCrdnPointBPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnPointBPlaneType PointType;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    IAgCrdnPointRefToPtr GetTrajectory ( );
    enum AgECrdnPointBPlaneType GetPointType ( );
    void PutPointType (
        enum AgECrdnPointBPlaneType pRetVal );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnPointBPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnPointBPlaneType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
};

struct __declspec(uuid("92ebd1f9-3cbb-4a3f-aba2-e1ec2fdc890b"))
IAgCrdnPointFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("eeb578e7-29c8-4c61-93f7-3f662d2123df"))
IAgCrdnPointFixedInSystem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReference))
    IAgCrdnSystemRefToPtr Reference;
    __declspec(property(get=GetFixedPoint))
    STKUtil::IAgPositionPtr FixedPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemRefToPtr GetReference ( );
    STKUtil::IAgPositionPtr GetFixedPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedPoint (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("35499fce-d8d0-40e6-884e-c9e527e5d84d"))
IAgCrdnPointGlint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetObserverPoint))
    IAgCrdnPointRefToPtr ObserverPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPointRefToPtr GetObserverPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObserverPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

enum AgECrdnReferenceShapeType
{
    eCrdnReferenceShapeEllipsoid = 1,
    eCrdnReferenceShapeTerrain = 2,
    eCrdnReferenceShapeMSL = 3
};

enum AgECrdnSurfaceType
{
    eCrdnSurfaceDetic = 1,
    eCrdnSurfaceCentric = 2
};

struct __declspec(uuid("66fd09f9-17e7-4bf7-8509-a72b3022f71d"))
IAgCrdnPointOnSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetReferenceShape,put=PutReferenceShape))
    enum AgECrdnReferenceShapeType ReferenceShape;
    __declspec(property(get=GetSurfaceType,put=PutSurfaceType))
    enum AgECrdnSurfaceType SurfaceType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnReferenceShapeType GetReferenceShape ( );
    void PutReferenceShape (
        enum AgECrdnReferenceShapeType pRetVal );
    enum AgECrdnSurfaceType GetSurfaceType ( );
    void PutSurfaceType (
        enum AgECrdnSurfaceType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceShape (
        /*[out,retval]*/ enum AgECrdnReferenceShapeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceShape (
        /*[in]*/ enum AgECrdnReferenceShapeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceType (
        /*[out,retval]*/ enum AgECrdnSurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceType (
        /*[in]*/ enum AgECrdnSurfaceType pRetVal ) = 0;
};

struct __declspec(uuid("be73aa6d-87d7-4f6f-bd16-89a930d8dc52"))
IAgCrdnPointModelAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetUseScale,put=PutUseScale))
    VARIANT_BOOL UseScale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );
    VARIANT_BOOL GetUseScale ( );
    void PutUseScale (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScale (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("d0244d49-f0de-44a2-a275-9cd0e0fc5af3"))
IAgCrdnPointLagrangeLibration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("38475e97-53bd-4e11-ac30-9ac653994f51"))
IAgCrdnPointSamplingInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimes))
    SAFEARRAY * Times;
    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetVelocities))
    SAFEARRAY * Velocities;
    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetTimes ( );
    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetVelocities ( );
    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Times (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocities (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("e89bb7d2-2dc1-49a4-8cc9-bdcba8c1c91f"))
IAgCrdnPointSamplingIntervalCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPointSamplingIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnPointSamplingIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnPointSamplingInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("66b7efaf-92bd-473a-9f3f-94af085536a6"))
IAgCrdnPointSamplingResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnPointSamplingIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnPointSamplingIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnPointSamplingIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("342624b6-ce5f-4591-8cdf-66925f1175e1"))
IAgCrdnPointCommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointFixedInSystemPtr CreateFixedInSystemCartographic (
        struct IAgCrdnSystem * ReferenceSystem,
        const _variant_t & Latitude,
        const _variant_t & Longitude,
        double Altitude );
    IAgCrdnPointFixedInSystemPtr CreateFixedInSystemCartesian (
        struct IAgCrdnSystem * ReferenceSystem,
        double X,
        double Y,
        double Z );
    IAgCrdnPointSamplingResultPtr Sample (
        struct IAgCrdnPoint * Point,
        struct IAgCrdnSystem * ReferenceSystem,
        SAFEARRAY * * Intervals,
        double MinStep,
        double MaxStep,
        const _variant_t & TargetRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFixedInSystemCartographic (
        /*[in]*/ struct IAgCrdnSystem * ReferenceSystem,
        /*[in]*/ VARIANT Latitude,
        /*[in]*/ VARIANT Longitude,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgCrdnPointFixedInSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFixedInSystemCartesian (
        /*[in]*/ struct IAgCrdnSystem * ReferenceSystem,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ struct IAgCrdnPointFixedInSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Sample (
        /*[in]*/ struct IAgCrdnPoint * Point,
        /*[in]*/ struct IAgCrdnSystem * ReferenceSystem,
        /*[in]*/ SAFEARRAY * * Intervals,
        /*[in]*/ double MinStep,
        /*[in]*/ double MaxStep,
        /*[in]*/ VARIANT TargetRate,
        /*[out,retval]*/ struct IAgCrdnPointSamplingResult * * ppRetVal ) = 0;
};

enum AgECrdnIntersectionSurface
{
    eCrdnIntersectionSurfaceAtCentralBodyEllipsoid = 0,
    eCrdnIntersectionSurfaceAtAltitudeAboveEllipsoid = 1,
    eCrdnIntersectionSurfaceAtTerrain = 2
};

struct __declspec(uuid("3d97f8e6-7cde-4e1e-a55b-fa6d276842dc"))
IAgCrdnPointAtTimeInstant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetSourcePoint,put=PutSourcePoint))
    IAgCrdnPointPtr SourcePoint;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnPointPtr GetSourcePoint ( );
    void PutSourcePoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourcePoint (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
};

struct __declspec(uuid("ae5062e5-6d60-4065-aec0-850d37363040"))
IAgCrdnPointPlugin : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("c1bc8e47-7a99-4c64-a78e-e255a6dd3d06"))
IAgCrdnPointCBFixedOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetReferenceShape,put=PutReferenceShape))
    enum AgECrdnReferenceShapeType ReferenceShape;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    enum AgECrdnReferenceShapeType GetReferenceShape ( );
    void PutReferenceShape (
        enum AgECrdnReferenceShapeType pRetVal );
    STKUtil::IAgPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceShape (
        /*[out,retval]*/ enum AgECrdnReferenceShapeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceShape (
        /*[in]*/ enum AgECrdnReferenceShapeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("2403d36f-dcbb-4aa1-83d0-d23e6a6b3995"))
IAgCrdnLLAPosition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLatitude ( );
    void PutLatitude (
        double pRetVal );
    double GetLongitude ( );
    void PutLongitude (
        double pRetVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("44b483ff-3c51-4b5a-bf1d-aeffeaa2738c"))
IAgCrdnSystemOnSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetAzimuthAngle,put=PutAzimuthAngle))
    double AzimuthAngle;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;
    __declspec(property(get=GetPosition))
    IAgCrdnLLAPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    double GetAzimuthAngle ( );
    void PutAzimuthAngle (
        double pRetVal );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );
    IAgCrdnLLAPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AzimuthAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AzimuthAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgCrdnLLAPosition * * ppRetVal ) = 0;
};

enum AgECrdnMeanElementTheory
{
    eCrdnMeanElementTheoryOsculating = 1,
    eCrdnMeanElementTheoryKozai = 2,
    eCrdnMeanElementTheoryBrouwerLyddane_Long = 3,
    eCrdnMeanElementTheoryBrouwerLyddane_Short = 4
};

struct __declspec(uuid("bc6612f1-ee40-478a-844a-0a78cfabab43"))
IAgCrdnVectorApoapsis : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

enum AgECrdnSweepMode
{
    eCrdnSweepModeBidirectional = 1,
    eCrdnSweepModeUnidirectional = 2
};

struct __declspec(uuid("fe75da7b-95ca-40d5-9157-dfdbff37afe0"))
IAgCrdnVectorDisplacement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrigin))
    IAgCrdnPointRefToPtr Origin;
    __declspec(property(get=GetDestination))
    IAgCrdnPointRefToPtr Destination;
    __declspec(property(get=GetApparent,put=PutApparent))
    VARIANT_BOOL Apparent;
    __declspec(property(get=GetIgnoreAbberation,put=PutIgnoreAbberation))
    VARIANT_BOOL IgnoreAbberation;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetOrigin ( );
    IAgCrdnPointRefToPtr GetDestination ( );
    VARIANT_BOOL GetApparent ( );
    void PutApparent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreAbberation ( );
    void PutIgnoreAbberation (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Apparent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Apparent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreAbberation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreAbberation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("6b18ba87-6002-43df-b47f-fc98483b017b"))
IAgCrdnVectorModelAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("4441e2e8-0693-4d33-afa6-d21dc4edca08"))
IAgCrdnVectorEccentricity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("dece7ece-8e15-44f7-81ff-2446156c8870"))
IAgCrdnVectorLineOfNodes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("73d75810-5870-441c-8a18-4ac3c63c9ef7"))
IAgCrdnVectorOrbitAngularMomentum : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("e0d9a87f-af7e-4878-9ffc-546f5e72c6e7"))
IAgCrdnVectorOrbitNormal : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("8230ae2e-44dd-462f-ad5e-e361de4b9d7b"))
IAgCrdnVectorPeriapsis : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("9f5cb9a3-3304-4d66-a2c3-3512f2e0dcdb"))
IAgCrdnVectorDirectionToStar : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedStar,put=PutSelectedStar))
    _bstr_t SelectedStar;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSelectedStar ( );
    void PutSelectedStar (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedStar (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedStar (
        /*[in]*/ BSTR pRetVal ) = 0;
};

enum AgECrdnVectorScaledDimensionInheritance
{
    eCrdnVectorScaledDimensionInheritanceNone = 0,
    eCrdnVectorScaledDimensionInheritanceFromScalar = 1,
    eCrdnVectorScaledDimensionInheritanceFromVector = 2
};

struct __declspec(uuid("79ce4395-6ed0-4d34-9cf1-809fbcb07624"))
IAgCrdnVectorVelocityAcceleration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetPoint,put=PutPoint))
    IAgCrdnPointPtr Point;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnPointPtr GetPoint ( );
    void PutPoint (
        struct IAgCrdnPoint * ppRetVal );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b8a213a9-c314-401e-bfbe-bf6bb1e73b49"))
IAgCrdnVectorPlugin : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("8ccfed8a-aa26-455d-bff2-dbe1442d8260"))
IAgCrdnSystemFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr Create (
        _bstr_t SystemName,
        _bstr_t Description,
        enum AgECrdnSystemType SystemType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnSystemType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR SystemName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnSystemType SystemType,
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnSystemType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("297eba15-4759-413c-bc71-cbadd3d2188a"))
IAgCrdnPointFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailablePointPluginDisplayNames))
    SAFEARRAY * AvailablePointPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr Create (
        _bstr_t PointName,
        _bstr_t Description,
        enum AgECrdnPointType PointType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPointType Type );
    SAFEARRAY * GetAvailablePointPluginDisplayNames ( );
    IAgCrdnPointPtr CreatePointPluginFromDisplayName (
        _bstr_t PointName,
        _bstr_t Description,
        _bstr_t DisplayName );
    IAgCrdnPointPtr CreatePointFixedOnCentralBody (
        _bstr_t PointName,
        _bstr_t Description,
        const _variant_t & Longitude,
        const _variant_t & Latitude,
        double Altitude,
        enum AgECrdnReferenceShapeType ReferenceShape );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPointType PointType,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPointType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePointPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointPluginFromDisplayName (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointFixedOnCentralBody (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ VARIANT Longitude,
        /*[in]*/ VARIANT Latitude,
        /*[in]*/ double Altitude,
        /*[in]*/ enum AgECrdnReferenceShapeType ReferenceShape,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
};

struct __declspec(uuid("c37a21e9-3889-4755-bcb0-b61e0d26a494"))
IAgCrdnPointGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnPointFactoryPtr Factory;
    __declspec(property(get=GetCommonTasks))
    IAgCrdnPointCommonTasksPtr CommonTasks;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t PointName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnPointFactoryPtr GetFactory ( );
    IAgCrdnPointPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    IAgCrdnPointCommonTasksPtr GetCommonTasks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR PointName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnPointFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgCrdnPointCommonTasks * * ppRetVal ) = 0;
};

struct __declspec(uuid("59deacdd-6dd1-4511-9188-acce55a35c59"))
IAgCrdnWellKnownEarthSystems : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("8291275d-e3ca-4e66-97d7-a8e00aa36fa3"))
IAgCrdnWellKnownSunSystems : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnSystemPtr J2000;
    __declspec(property(get=GetBarycenter))
    IAgCrdnSystemPtr Barycenter;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );
    IAgCrdnSystemPtr GetJ2000 ( );
    IAgCrdnSystemPtr GetBarycenter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Barycenter (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("e7bfd4df-41ee-4b0a-beb7-b794ec04e940"))
IAgCrdnWellKnownSystems : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthSystemsPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunSystemsPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthSystemsPtr GetEarth ( );
    IAgCrdnWellKnownSunSystemsPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunSystems * * ppRetVal ) = 0;
};

struct __declspec(uuid("00129044-9364-4a92-94aa-469bac097f69"))
IAgCrdnMethodCallResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("84bdbac2-f89d-4bec-9d96-bfbb071cb2b4"))
_IAgCrdnTypeInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeDescription))
    _bstr_t TypeDescription;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetShortTypeDescription))
    _bstr_t ShortTypeDescription;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTypeDescription ( );
    _bstr_t GetTypeName ( );
    _bstr_t GetShortTypeDescription ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortTypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("734ddad0-8a01-43bd-869b-79acbab62db0"))
_IAgCrdnTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTemplate))
    VARIANT_BOOL IsTemplate;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTemplate ( );
    _bstr_t GetClassName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("22f80d9e-4098-42ce-b89e-9fcbe079f962"))
_IAgCrdnPointRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPoint (
        struct IAgCrdnPoint * Point );
    IAgCrdnPointPtr GetPoint ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnPoint * Point );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ struct IAgCrdnPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnPoint * Point,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("f9520e0c-81da-4a0d-ae00-fe6f13b21f33"))
_IAgCrdnSystemRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetSystem (
        struct IAgCrdnSystem * System );
    IAgCrdnSystemPtr GetSystem ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetSystem (
        /*[in]*/ struct IAgCrdnSystem * System ) = 0;
      virtual HRESULT __stdcall raw_GetSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("29895bef-9c71-4d8b-91d5-ac46e47ea2e5"))
_IAgCrdnAxesLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelX,put=PutLabelX))
    _bstr_t LabelX;
    __declspec(property(get=GetLabelY,put=PutLabelY))
    _bstr_t LabelY;
    __declspec(property(get=GetLabelZ,put=PutLabelZ))
    _bstr_t LabelZ;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabelX ( );
    void PutLabelX (
        _bstr_t pRetVal );
    _bstr_t GetLabelY ( );
    void PutLabelY (
        _bstr_t pRetVal );
    _bstr_t GetLabelZ ( );
    void PutLabelZ (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelX (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelX (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelY (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelY (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelZ (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelZ (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("9e0169fa-03b6-42c8-bc0e-bf9bedae8725"))
_IAgCrdnPlaneLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXAxisLabel,put=PutXAxisLabel))
    _bstr_t XAxisLabel;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetXAxisLabel ( );
    void PutXAxisLabel (
        _bstr_t pRetVal );
    _bstr_t GetYAxisLabel ( );
    void PutYAxisLabel (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("bcb8b69c-46b3-4abd-bdb2-02a291925f0e"))
_IAgCrdnPointCommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointFixedInSystemPtr CreateFixedInSystemCartographic (
        struct IAgCrdnSystem * ReferenceSystem,
        const _variant_t & Latitude,
        const _variant_t & Longitude,
        double Altitude );
    IAgCrdnPointFixedInSystemPtr CreateFixedInSystemCartesian (
        struct IAgCrdnSystem * ReferenceSystem,
        double X,
        double Y,
        double Z );
    IAgCrdnPointSamplingResultPtr Sample (
        struct IAgCrdnPoint * Point,
        struct IAgCrdnSystem * ReferenceSystem,
        SAFEARRAY * * Intervals,
        double MinStep,
        double MaxStep,
        const _variant_t & TargetRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFixedInSystemCartographic (
        /*[in]*/ struct IAgCrdnSystem * ReferenceSystem,
        /*[in]*/ VARIANT Latitude,
        /*[in]*/ VARIANT Longitude,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgCrdnPointFixedInSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFixedInSystemCartesian (
        /*[in]*/ struct IAgCrdnSystem * ReferenceSystem,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ struct IAgCrdnPointFixedInSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Sample (
        /*[in]*/ struct IAgCrdnPoint * Point,
        /*[in]*/ struct IAgCrdnSystem * ReferenceSystem,
        /*[in]*/ SAFEARRAY * * Intervals,
        /*[in]*/ double MinStep,
        /*[in]*/ double MaxStep,
        /*[in]*/ VARIANT TargetRate,
        /*[out,retval]*/ struct IAgCrdnPointSamplingResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("cbb42f76-887a-41a0-a641-2c940b3cede4"))
_IAgCrdnLLAPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLatitude ( );
    void PutLatitude (
        double pRetVal );
    double GetLongitude ( );
    void PutLongitude (
        double pRetVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("31a664b9-a0c1-4a27-a014-5f94cbb91d3f"))
_IAgCrdnSystemFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr Create (
        _bstr_t SystemName,
        _bstr_t Description,
        enum AgECrdnSystemType SystemType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnSystemType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR SystemName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnSystemType SystemType,
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnSystemType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("4014f206-7af8-4c25-8593-57b741e1f080"))
_IAgCrdnPointFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailablePointPluginDisplayNames))
    SAFEARRAY * AvailablePointPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr Create (
        _bstr_t PointName,
        _bstr_t Description,
        enum AgECrdnPointType PointType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPointType Type );
    SAFEARRAY * GetAvailablePointPluginDisplayNames ( );
    IAgCrdnPointPtr CreatePointPluginFromDisplayName (
        _bstr_t PointName,
        _bstr_t Description,
        _bstr_t DisplayName );
    IAgCrdnPointPtr CreatePointFixedOnCentralBody (
        _bstr_t PointName,
        _bstr_t Description,
        const _variant_t & Longitude,
        const _variant_t & Latitude,
        double Altitude,
        enum AgECrdnReferenceShapeType ReferenceShape );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPointType PointType,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPointType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePointPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointPluginFromDisplayName (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointFixedOnCentralBody (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ VARIANT Longitude,
        /*[in]*/ VARIANT Latitude,
        /*[in]*/ double Altitude,
        /*[in]*/ enum AgECrdnReferenceShapeType ReferenceShape,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
};

struct __declspec(uuid("dbdd94c5-07fc-474d-aa9d-353c820f94c2"))
_IAgCrdnWellKnownEarthSystems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("8700e0f9-73d7-4b2c-a698-faada6db7260"))
_IAgCrdnWellKnownSunSystems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnSystemPtr J2000;
    __declspec(property(get=GetBarycenter))
    IAgCrdnSystemPtr Barycenter;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );
    IAgCrdnSystemPtr GetJ2000 ( );
    IAgCrdnSystemPtr GetBarycenter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Barycenter (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("26de0981-60cc-456e-825a-88a01c82cef2"))
_IAgCrdnWellKnownSystems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthSystemsPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunSystemsPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthSystemsPtr GetEarth ( );
    IAgCrdnWellKnownSunSystemsPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunSystems * * ppRetVal ) = 0;
};

struct __declspec(uuid("c08b5b79-651c-4d3e-b63d-a5570d687614"))
_IAgCrdnMethodCallResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle))
    _variant_t Angle;
    __declspec(property(get=GetVectorFrom))
    STKUtil::IAgCartesian3VectorPtr VectorFrom;
    __declspec(property(get=GetVectorTo))
    STKUtil::IAgCartesian3VectorPtr VectorTo;
    __declspec(property(get=GetVectorAbout))
    STKUtil::IAgCartesian3VectorPtr VectorAbout;
    __declspec(property(get=GetOriginPosition))
    STKUtil::IAgCartesian3VectorPtr OriginPosition;
    __declspec(property(get=GetOriginVelocity))
    STKUtil::IAgCartesian3VectorPtr OriginVelocity;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetXAxisRate))
    STKUtil::IAgCartesian3VectorPtr XAxisRate;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;
    __declspec(property(get=GetYAxisRate))
    STKUtil::IAgCartesian3VectorPtr YAxisRate;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetRate))
    STKUtil::IAgCartesian3VectorPtr Rate;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngleRate))
    _variant_t AngleRate;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAngleRate ( );
    _variant_t GetAngle ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorFrom ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorTo ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorAbout ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginVelocity ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetRate ( );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleRate (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorFrom (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorTo (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorAbout (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPosition (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginVelocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("bf28e8be-e0ca-41b8-83ca-7f44dff12088"))
_IAgCrdnInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("536ea481-2b29-4c4b-a51b-7bda6901664f"))
_IAgCrdnCentralBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("970a9a97-f1b9-4454-b979-c217ffd2fffb"))
_IAgCrdnCentralBodyRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetCentralBody (
        struct IAgCrdnCentralBody * CentralBody );
    IAgCrdnCentralBodyPtr GetCentralBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetCentralBody (
        /*[in]*/ struct IAgCrdnCentralBody * CentralBody ) = 0;
      virtual HRESULT __stdcall raw_GetCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBody * * ppRetVal ) = 0;
};

struct __declspec(uuid("bde0e568-a251-4aa2-b520-02e379ca7035"))
_IAgCrdnPointSamplingResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnPointSamplingIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnPointSamplingIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnPointSamplingIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("7aa0f683-0858-411e-a303-e80e27e3ef5a"))
_IAgCrdnPointSamplingInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;
    __declspec(property(get=GetTimes))
    SAFEARRAY * Times;
    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetVelocities))
    SAFEARRAY * Velocities;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetTimes ( );
    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetVelocities ( );
    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Times (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocities (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("9f3a4cd3-1770-47b2-937d-44dcb7b2cd73"))
_IAgCrdnPointSamplingIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPointSamplingIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnPointSamplingIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnPointSamplingInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("e227c3e6-d68b-4384-99a0-df06b91fd26f"))
_IAgCrdnAxesSamplingResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIntervals))
    IAgCrdnAxesSamplingIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    IAgCrdnAxesSamplingIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgCrdnAxesSamplingIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("161d1930-dc69-48b8-801a-9039953d0882"))
_IAgCrdnAxesSamplingInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQuaternions))
    SAFEARRAY * Quaternions;
    __declspec(property(get=GetVelocities))
    SAFEARRAY * Velocities;
    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;
    __declspec(property(get=GetTimes))
    SAFEARRAY * Times;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetTimes ( );
    SAFEARRAY * GetQuaternions ( );
    SAFEARRAY * GetVelocities ( );
    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Times (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Quaternions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocities (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("6dfb8265-5d6c-4aff-b970-5c71fbc15091"))
_IAgCrdnAxesSamplingIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnAxesSamplingIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnAxesSamplingIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnAxesSamplingInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("f8721428-2e68-4842-a08f-2f28c3536ffe"))
AgCrdnGeneric;
    // [ default ] interface _IAgCrdn
    // interface IAgCrdn

struct __declspec(uuid("976b14ec-5dc7-42e7-9217-18482902ef47"))
AgCrdnTypeInfo;
    // [ default ] interface _IAgCrdnTypeInfo
    // interface IAgCrdnTypeInfo

struct __declspec(uuid("6fb9ab9b-a6db-4288-8680-b39f4c3d5155"))
AgCrdnInstance;
    // [ default ] interface _IAgCrdnInstance
    // interface IAgCrdnContext
    // interface IAgCrdnInstance

struct __declspec(uuid("e024aa6d-d202-4f06-a17b-b62950065cc6"))
AgCrdnTemplate;
    // [ default ] interface _IAgCrdnTemplate
    // interface IAgCrdnContext
    // interface IAgCrdnTemplate

struct __declspec(uuid("53d58a83-8782-4ba8-8980-fd980c6aff6f"))
AgCrdnPointRefTo;
    // [ default ] interface _IAgCrdnPointRefTo
    // interface IAgCrdnPointRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("8d5149ca-9784-4b86-b574-10ecae81c07e"))
AgCrdnVectorRefTo;
    // [ default ] interface _IAgCrdnVectorRefTo
    // interface IAgCrdnVectorRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("a5ec0aae-35b8-4fbe-8fc6-a45f04a2b62c"))
AgCrdnAxesRefTo;
    // [ default ] interface _IAgCrdnAxesRefTo
    // interface IAgCrdnAxesRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("53d1cbde-a159-4b4f-be2e-5d4b8f01e8d3"))
AgCrdnAngleRefTo;
    // [ default ] interface _IAgCrdnAngleRefTo
    // interface IAgCrdnAngleRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("8c3f07f7-438f-4586-ac78-099d8c53ac04"))
AgCrdnSystemRefTo;
    // [ default ] interface _IAgCrdnSystemRefTo
    // interface IAgCrdnSystemRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("c15ef139-9727-4d58-9d57-e4783c74e38b"))
AgCrdnPlaneRefTo;
    // [ default ] interface _IAgCrdnPlaneRefTo
    // interface IAgCrdnPlaneRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("16eff315-2122-4c7c-86ec-5bc3e6498f29"))
AgCrdnVector;
    // [ default ] interface _IAgCrdnVector
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("25fd8eff-82cd-4588-98a2-6bf0b67f0517"))
AgCrdnAxesLabels;
    // [ default ] interface _IAgCrdnAxesLabels
    // interface IAgCrdnAxesLabels

struct __declspec(uuid("f321902a-2b82-49d3-a533-1d676f29d8a0"))
AgCrdnAxes;
    // [ default ] interface _IAgCrdnAxes
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("ff096adb-328e-4687-8c02-3a76225c6ac2"))
AgCrdnPoint;
    // [ default ] interface _IAgCrdnPoint
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("7bc9d483-628c-4064-8fed-581c96512d22"))
AgCrdnSystem;
    // [ default ] interface _IAgCrdnSystem
    // interface IAgCrdnSystem
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("831b699f-6013-4a47-b2e4-0109d1585163"))
AgCrdnAngle;
    // [ default ] interface _IAgCrdnAngle
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("3b5ad720-a166-49bd-ba52-182474fd4648"))
AgCrdnPlaneLabels;
    // [ default ] interface _IAgCrdnPlaneLabels
    // interface IAgCrdnPlaneLabels

struct __declspec(uuid("f4eff82a-3ba2-48d3-814d-00fcd941f657"))
AgCrdnPlane;
    // [ default ] interface _IAgCrdnPlane
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("9d10a4e1-f3e6-4c85-abfd-2132a67cf640"))
AgCrdnAxesAlignedAndConstrained;
    // [ default ] interface _IAgCrdnAxesAlignedAndConstrained
    // interface IAgCrdnAxesAlignedAndConstrained
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f13ca29f-9595-4f44-847d-5f3199c3295a"))
AgCrdnAxesAngularOffset;
    // [ default ] interface _IAgCrdnAxesAngularOffset
    // interface IAgCrdnAxesAngularOffset
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("735b2058-6d7a-4a1c-9d28-4212c457a312"))
AgCrdnAxesFixedAtEpoch;
    // [ default ] interface _IAgCrdnAxesFixedAtEpoch
    // interface IAgCrdnAxesFixedAtEpoch
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("ebb973a1-ab54-4a59-b900-f41ee7927a4a"))
AgCrdnAxesBPlane;
    // [ default ] interface _IAgCrdnAxesBPlane
    // interface IAgCrdnAxesBPlane
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a0cacb8d-b9c0-4257-92ee-9575e93b3908"))
AgCrdnAxesCustomScript;
    // [ default ] interface _IAgCrdnAxesCustomScript
    // interface IAgCrdnAxesCustomScript
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("3deeddfe-4860-4990-8c31-0786e9c48eda"))
AgCrdnAxesAttitudeFile;
    // [ default ] interface _IAgCrdnAxesAttitudeFile
    // interface IAgCrdnAxesAttitudeFile
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("4bbd431d-3d84-43ca-b14b-045b1f8bda1a"))
AgCrdnAxesFixed;
    // [ default ] interface _IAgCrdnAxesFixed
    // interface IAgCrdnAxesFixed
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("fbb41825-bda8-4e7d-b77b-2254a1a2f775"))
AgCrdnAxesModelAttach;
    // [ default ] interface _IAgCrdnAxesModelAttach
    // interface IAgCrdnAxesModelAttach
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("09f1db55-0b6f-4238-9ee7-6e3ddd920850"))
AgCrdnAxesSpinning;
    // [ default ] interface _IAgCrdnAxesSpinning
    // interface IAgCrdnAxesSpinning
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("76db8fe0-2086-436c-90ad-3ac078153b0d"))
AgCrdnAxesOnSurface;
    // [ default ] interface _IAgCrdnAxesOnSurface
    // interface IAgCrdnAxesOnSurface
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("df0c4108-61ad-49ff-be6b-23e1dbf7c8ca"))
AgCrdnAxesTrajectory;
    // [ default ] interface _IAgCrdnAxesTrajectory
    // interface IAgCrdnAxesTrajectory
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("da1dd6ce-291b-4c12-b44a-a0df3189cca9"))
AgCrdnAxesLagrangeLibration;
    // [ default ] interface _IAgCrdnAxesLagrangeLibration
    // interface IAgCrdnAxesLagrangeLibration
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("ef31f342-2805-4793-a90a-ca26585ad147"))
AgCrdnAxesCommonTasks;
    // [ default ] interface _IAgCrdnAxesCommonTasks
    // interface IAgCrdnAxesCommonTasks

struct __declspec(uuid("b62cfc29-07a0-4c80-85d8-d539a5073c7e"))
AgCrdnAxesAtTimeInstant;
    // [ default ] interface _IAgCrdnAxesAtTimeInstant
    // interface IAgCrdnAxesAtTimeInstant
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnAxes

struct __declspec(uuid("f0172fb8-62aa-478d-80b2-ba5301ed4470"))
AgCrdnAxesPlugin;
    // [ default ] interface _IAgCrdnAxesPlugin
    // interface IAgCrdnAxesPlugin
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnAxes

struct __declspec(uuid("30c6ee80-ef1f-4c22-bb41-a716df5fb75b"))
AgCrdnAngleBetweenVectors;
    // [ default ] interface _IAgCrdnAngleBetweenVectors
    // interface IAgCrdnAngleBetweenVectors
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("07113984-e15b-4253-9ccc-b8ff5dab9767"))
AgCrdnAngleBetweenPlanes;
    // [ default ] interface _IAgCrdnAngleBetweenPlanes
    // interface IAgCrdnAngleBetweenPlanes
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("4507c453-cb01-44cc-a869-8c898d58911f"))
AgCrdnAngleDihedral;
    // [ default ] interface _IAgCrdnAngleDihedral
    // interface IAgCrdnAngleDihedral
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a77e9b18-1472-469a-bf29-00ebc282099e"))
AgCrdnAngleRotation;
    // [ default ] interface _IAgCrdnAngleRotation
    // interface IAgCrdnAngleRotation
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e5d5251e-c285-49b0-9979-f7038a4108a1"))
AgCrdnAngleToPlane;
    // [ default ] interface _IAgCrdnAngleToPlane
    // interface IAgCrdnAngleToPlane
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("0c464731-95b8-4af9-a7a3-c537cb4e0dde"))
AgCrdnPlaneNormal;
    // [ default ] interface _IAgCrdnPlaneNormal
    // interface IAgCrdnPlaneNormal
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("5811178b-6872-47ac-8afb-c9f05d625be3"))
AgCrdnPlaneQuadrant;
    // [ default ] interface _IAgCrdnPlaneQuadrant
    // interface IAgCrdnPlaneQuadrant
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("5fd3bd3a-4035-471e-ba91-b2177855a90f"))
AgCrdnPlaneTrajectory;
    // [ default ] interface _IAgCrdnPlaneTrajectory
    // interface IAgCrdnPlaneTrajectory
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("754f21db-5c64-4ed8-bd32-4de7abffa456"))
AgCrdnPlaneTriad;
    // [ default ] interface _IAgCrdnPlaneTriad
    // interface IAgCrdnPlaneTriad
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("0cebf2fd-82a0-4739-a637-7bba544c7fe3"))
AgCrdnPointBPlane;
    // [ default ] interface _IAgCrdnPointBPlane
    // interface IAgCrdnPointBPlane
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("06c47f31-a43a-46f4-a6d0-dbb598e78faa"))
AgCrdnPointFile;
    // [ default ] interface _IAgCrdnPointFile
    // interface IAgCrdnPointFile
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("936eb09c-7fd9-4d4c-b3ac-51bbbd943c55"))
AgCrdnPointFixedInSystem;
    // [ default ] interface _IAgCrdnPointFixedInSystem
    // interface IAgCrdnPointFixedInSystem
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("0abd932c-106b-4651-a54d-2cdda2409496"))
AgCrdnPointGrazing;
    // [ default ] interface _IAgCrdnPointGrazing
    // interface IAgCrdnPointGrazing
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("2017de19-4862-4d4f-a170-74e32a318ff4"))
AgCrdnPointGlint;
    // [ default ] interface _IAgCrdnPointGlint
    // interface IAgCrdnPointGlint
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("5d9dbbfc-d662-4e8f-9eac-bb20eb2c2139"))
AgCrdnPointCovarianceGrazing;
    // [ default ] interface _IAgCrdnPointCovarianceGrazing
    // interface IAgCrdnPointCovarianceGrazing
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("60e16b73-10bf-496f-93a2-0707c31e71d5"))
AgCrdnPointPlaneIntersection;
    // [ default ] interface _IAgCrdnPointPlaneIntersection
    // interface IAgCrdnPointPlaneIntersection
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("36ad72da-9fd8-49f3-80a1-80b446930507"))
AgCrdnPointOnSurface;
    // [ default ] interface _IAgCrdnPointOnSurface
    // interface IAgCrdnPointOnSurface
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("d83d263f-100a-466e-8544-a7e5e991fc79"))
AgCrdnPointModelAttach;
    // [ default ] interface _IAgCrdnPointModelAttach
    // interface IAgCrdnPointModelAttach
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f9dad412-a794-4ee0-a054-62fc179b0101"))
AgCrdnPointPlaneProjection;
    // [ default ] interface _IAgCrdnPointPlaneProjection
    // interface IAgCrdnPointPlaneProjection
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("b537ba6b-ad3b-4985-939b-af651bc8fb36"))
AgCrdnPointLagrangeLibration;
    // [ default ] interface _IAgCrdnPointLagrangeLibration
    // interface IAgCrdnPointLagrangeLibration
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("9c13529a-a9d9-4680-840d-0760eab6532f"))
AgCrdnPointCommonTasks;
    // [ default ] interface _IAgCrdnPointCommonTasks
    // interface IAgCrdnPointCommonTasks

struct __declspec(uuid("b339c48b-cd83-4f4c-b0f8-2cd8ae461d5f"))
AgCrdnPointCentBodyIntersect;
    // [ default ] interface _IAgCrdnPointCentBodyIntersect
    // interface IAgCrdnPointCentBodyIntersect
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnPoint

struct __declspec(uuid("3d792692-b078-410a-8f7c-b3c0de8ae432"))
AgCrdnPointAtTimeInstant;
    // [ default ] interface _IAgCrdnPointAtTimeInstant
    // interface IAgCrdnPointAtTimeInstant
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnPoint

struct __declspec(uuid("5f535260-9cbe-4ade-a2a9-ac65d902c921"))
AgCrdnPointPlugin;
    // [ default ] interface _IAgCrdnPointPlugin
    // interface IAgCrdnPointPlugin
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnPoint

struct __declspec(uuid("55015f91-ef62-47f3-90de-2f3a7df98649"))
AgCrdnPointCBFixedOffset;
    // [ default ] interface _IAgCrdnPointCBFixedOffset
    // interface IAgCrdnPointCBFixedOffset
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnPoint

struct __declspec(uuid("bffd3cd1-c65e-487a-a137-6544b3adc57f"))
AgCrdnSystemAssembled;
    // [ default ] interface _IAgCrdnSystemAssembled
    // interface IAgCrdnSystemAssembled
    // interface IAgCrdnSystem
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("6a2e9503-6ff2-4100-9b83-d2069d9556dc"))
AgCrdnSystemOnSurface;
    // [ default ] interface _IAgCrdnSystemOnSurface
    // interface IAgCrdnSystemOnSurface
    // interface IAgCrdnSystem
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("b5fc4253-52c7-40c9-949b-f089e70a1cf5"))
AgCrdnLLAPosition;
    // [ default ] interface _IAgCrdnLLAPosition
    // interface IAgCrdnLLAPosition

struct __declspec(uuid("1da621a3-bfd0-46ea-81bb-8ae251dd4afd"))
AgCrdnSystemCommonTasks;
    // [ default ] interface _IAgCrdnSystemCommonTasks
    // interface IAgCrdnSystemCommonTasks

struct __declspec(uuid("c08e3a97-e60b-47c9-886c-7610d8e8bd1c"))
AgCrdnVectorAngleRate;
    // [ default ] interface _IAgCrdnVectorAngleRate
    // interface IAgCrdnVectorAngleRate
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("c1cd84e9-0f34-443f-becc-fef06c52caa7"))
AgCrdnVectorApoapsis;
    // [ default ] interface _IAgCrdnVectorApoapsis
    // interface IAgCrdnVectorApoapsis
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("4b64fad9-4c3e-4f55-ba3c-92ed2ba15e02"))
AgCrdnVectorFixedAtEpoch;
    // [ default ] interface _IAgCrdnVectorFixedAtEpoch
    // interface IAgCrdnVectorFixedAtEpoch
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("217de3f6-70ed-4d86-84c4-da9434cd8006"))
AgCrdnVectorAngularVelocity;
    // [ default ] interface _IAgCrdnVectorAngularVelocity
    // interface IAgCrdnVectorAngularVelocity
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("324321fa-9a4b-49da-a1c9-f74f397f1967"))
AgCrdnVectorConing;
    // [ default ] interface _IAgCrdnVectorConing
    // interface IAgCrdnVectorConing
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a6363da0-a2cb-4d3d-aace-6f4f135f2136"))
AgCrdnVectorCross;
    // [ default ] interface _IAgCrdnVectorCross
    // interface IAgCrdnVectorCross
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("c153a4e6-801a-4712-9ba3-0391dc751d7e"))
AgCrdnVectorCustomScript;
    // [ default ] interface _IAgCrdnVectorCustomScript
    // interface IAgCrdnVectorCustomScript
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("6215fc7f-a647-45ec-99b4-92a47f5161ef"))
AgCrdnVectorDerivative;
    // [ default ] interface _IAgCrdnVectorDerivative
    // interface IAgCrdnVectorDerivative
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("9f09248f-96e0-44c7-aeb2-0e4efa6099b4"))
AgCrdnVectorDisplacement;
    // [ default ] interface _IAgCrdnVectorDisplacement
    // interface IAgCrdnVectorDisplacement
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("ba27498e-cd04-4b49-a465-317630554bdc"))
AgCrdnVectorTwoPlanesIntersection;
    // [ default ] interface _IAgCrdnVectorTwoPlanesIntersection
    // interface IAgCrdnVectorTwoPlanesIntersection
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("afc19f3c-4b2c-4126-9c0b-4ebf512940ef"))
AgCrdnVectorModelAttach;
    // [ default ] interface _IAgCrdnVectorModelAttach
    // interface IAgCrdnVectorModelAttach
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("8e07374b-8d15-410b-9460-1810d0b06123"))
AgCrdnVectorProjection;
    // [ default ] interface _IAgCrdnVectorProjection
    // interface IAgCrdnVectorProjection
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("2084d272-dc49-4c9f-b233-353eb56a1471"))
AgCrdnVectorScaled;
    // [ default ] interface _IAgCrdnVectorScaled
    // interface IAgCrdnVectorScaled
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f08649cf-f8c7-421e-a838-0ccde3b46f78"))
AgCrdnVectorEccentricity;
    // [ default ] interface _IAgCrdnVectorEccentricity
    // interface IAgCrdnVectorEccentricity
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("0a8df503-7dbd-437d-a0d4-239dc25dcc06"))
AgCrdnVectorFixedInAxes;
    // [ default ] interface _IAgCrdnVectorFixedInAxes
    // interface IAgCrdnVectorFixedInAxes
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a0397735-e571-42a8-9fba-36751ff632b7"))
AgCrdnVectorLineOfNodes;
    // [ default ] interface _IAgCrdnVectorLineOfNodes
    // interface IAgCrdnVectorLineOfNodes
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("c8620c71-3095-4619-a7ad-43ad462aa87b"))
AgCrdnVectorOrbitAngularMomentum;
    // [ default ] interface _IAgCrdnVectorOrbitAngularMomentum
    // interface IAgCrdnVectorOrbitAngularMomentum
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("9ca64e7f-72f9-4bcd-9269-555508559f21"))
AgCrdnVectorOrbitNormal;
    // [ default ] interface _IAgCrdnVectorOrbitNormal
    // interface IAgCrdnVectorOrbitNormal
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("6e6719c0-3fb3-4cc3-a0bf-9c807e3cb9c3"))
AgCrdnVectorPeriapsis;
    // [ default ] interface _IAgCrdnVectorPeriapsis
    // interface IAgCrdnVectorPeriapsis
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e20b7b8e-4ffe-480f-add8-4b4e3782faac"))
AgCrdnVectorReflection;
    // [ default ] interface _IAgCrdnVectorReflection
    // interface IAgCrdnVectorReflection
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("d835b323-0085-43dc-956c-b4ab3fbabb26"))
AgCrdnVectorDirectionToStar;
    // [ default ] interface _IAgCrdnVectorDirectionToStar
    // interface IAgCrdnVectorDirectionToStar
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("9da2bba3-811b-4a65-8974-cce81e7698bf"))
AgCrdnVectorFixedAtTimeInstant;
    // [ default ] interface _IAgCrdnVectorFixedAtTimeInstant
    // interface IAgCrdnVectorFixedAtTimeInstant
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("23eb9cc8-f688-4858-838d-46db3c1b6704"))
AgCrdnVectorLinearCombination;
    // [ default ] interface _IAgCrdnVectorLinearCombination
    // interface IAgCrdnVectorLinearCombination
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("b50a22ba-9ce0-404c-9c09-aec5aa63094f"))
AgCrdnVectorProjectAlongVector;
    // [ default ] interface _IAgCrdnVectorProjectAlongVector
    // interface IAgCrdnVectorProjectAlongVector
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("465bd593-ebf6-44d8-8a88-ef37b7e5c67d"))
AgCrdnVectorScalarLinearCombination;
    // [ default ] interface _IAgCrdnVectorScalarLinearCombination
    // interface IAgCrdnVectorScalarLinearCombination
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("849d2f74-b1d4-4ee8-9c34-716afa9f189e"))
AgCrdnVectorScalarScaled;
    // [ default ] interface _IAgCrdnVectorScalarScaled
    // interface IAgCrdnVectorScalarScaled
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("f8d2bb56-256b-4ece-ba98-42890ef5b223"))
AgCrdnVectorVelocityAcceleration;
    // [ default ] interface _IAgCrdnVectorVelocityAcceleration
    // interface IAgCrdnVectorVelocityAcceleration
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("32007747-8be0-452a-b002-5bcba7ff1fa3"))
AgCrdnVectorPlugin;
    // [ default ] interface _IAgCrdnVectorPlugin
    // interface IAgCrdnVectorPlugin
    // interface IAgCrdn
    // interface IAgCrdnTimeProperties
    // interface IAgCrdnVector

struct __declspec(uuid("9396a732-c578-4f6f-90da-bffef8ea0288"))
AgCrdnVectorFactory;
    // [ default ] interface _IAgCrdnVectorFactory
    // interface IAgCrdnVectorFactory

struct __declspec(uuid("8fb0c324-feb4-49ca-99d8-69862ee56ca3"))
AgCrdnAxesFactory;
    // [ default ] interface _IAgCrdnAxesFactory
    // interface IAgCrdnAxesFactory

struct __declspec(uuid("74a75333-ca57-487b-886d-04a70a302013"))
AgCrdnSystemFactory;
    // [ default ] interface _IAgCrdnSystemFactory
    // interface IAgCrdnSystemFactory

struct __declspec(uuid("5ab77fcf-57ce-41a1-8ad3-85fdaf0b7104"))
AgCrdnPointFactory;
    // [ default ] interface _IAgCrdnPointFactory
    // interface IAgCrdnPointFactory

struct __declspec(uuid("5606d84b-57a1-471e-b7c5-19e76c4b6cd3"))
AgCrdnPlaneFactory;
    // [ default ] interface _IAgCrdnPlaneFactory
    // interface IAgCrdnPlaneFactory

struct __declspec(uuid("879ca681-bf3d-4caa-8197-6ef31290ea3a"))
AgCrdnAngleFactory;
    // [ default ] interface _IAgCrdnAngleFactory
    // interface IAgCrdnAngleFactory

struct __declspec(uuid("b7e6edcc-89d4-4c81-80fc-630d5535ba1a"))
AgCrdnVectorGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnVectorGroup

struct __declspec(uuid("b1aad2ac-1aaa-40a9-b91b-3f8112112ec5"))
AgCrdnPointGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnPointGroup

struct __declspec(uuid("741c5a80-129d-441d-9511-4641865e9a3d"))
AgCrdnAngleGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnAngleGroup

struct __declspec(uuid("7893cd35-bd57-406d-bbc3-15c9b4452758"))
AgCrdnAxesGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnAxesGroup

struct __declspec(uuid("086ddb29-22a1-48e1-96bd-a6dfcb478fec"))
AgCrdnPlaneGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnPlaneGroup

struct __declspec(uuid("5eb5cce7-33be-4b73-9d02-7bc4bbfff1e1"))
AgCrdnSystemGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnSystemGroup

struct __declspec(uuid("852f6698-6a7e-41fb-90d7-bb49ea10b2d5"))
AgCrdnProvider;
    // [ default ] interface _IAgCrdnProvider
    // interface IAgCrdnProvider

struct __declspec(uuid("efb22156-de1a-4385-bcdd-1a8e9898ca02"))
AgCrdnRoot;
    // [ default ] interface _IAgCrdnRoot
    // interface IAgCrdnRoot

struct __declspec(uuid("3b38d54c-b092-46b0-aa26-f81a15a83a45"))
AgCrdnWellKnownEarthSystems;
    // [ default ] interface _IAgCrdnWellKnownEarthSystems
    // interface IAgCrdnWellKnownEarthSystems

struct __declspec(uuid("ccc40b7f-8910-4f9e-8a23-acf97d91ba20"))
AgCrdnWellKnownEarthAxes;
    // [ default ] interface _IAgCrdnWellKnownEarthAxes
    // interface IAgCrdnWellKnownEarthAxes

struct __declspec(uuid("66e2c27d-4975-484e-9612-62470de8232f"))
AgCrdnWellKnownSunSystems;
    // [ default ] interface _IAgCrdnWellKnownSunSystems
    // interface IAgCrdnWellKnownSunSystems

struct __declspec(uuid("2e6743e8-cf68-4e72-a7c4-40ffee658bc3"))
AgCrdnWellKnownSunAxes;
    // [ default ] interface _IAgCrdnWellKnownSunAxes
    // interface IAgCrdnWellKnownSunAxes

struct __declspec(uuid("ed9a2df7-cc10-4178-8fae-f2128dbaf49b"))
AgCrdnWellKnownSystems;
    // [ default ] interface _IAgCrdnWellKnownSystems
    // interface IAgCrdnWellKnownSystems

struct __declspec(uuid("31dee21f-fd43-478d-bbf1-c5f33c6d59ca"))
AgCrdnWellKnownAxes;
    // [ default ] interface _IAgCrdnWellKnownAxes
    // interface IAgCrdnWellKnownAxes

struct __declspec(uuid("64f15541-c02d-49b2-81e1-fe0a49df7125"))
AgCrdnMethodCallResult;
    // [ default ] interface _IAgCrdnMethodCallResult
    // interface IAgCrdnMethodCallResult

struct __declspec(uuid("0197df6d-9ada-4bc7-9610-41077c3a479f"))
AgCrdnInterval;
    // [ default ] interface _IAgCrdnInterval
    // interface IAgCrdnInterval

struct __declspec(uuid("a0e6dff5-f5d0-4c72-bd13-ece7acd05096"))
AgCrdnIntervalCollection;
    // [ default ] interface IUnknown
    // interface IAgCrdnIntervalCollection

struct __declspec(uuid("c69413f1-a082-4489-8bbb-fdb5d968fbaa"))
AgCrdnCentralBody;
    // [ default ] interface _IAgCrdnCentralBody
    // interface IAgCrdnCentralBody

struct __declspec(uuid("f6d4ad32-332b-4f1f-a262-a8b0a6268355"))
AgCrdnCentralBodyRefTo;
    // [ default ] interface _IAgCrdnCentralBodyRefTo
    // interface IAgCrdnCentralBodyRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("50537705-6e03-47ff-87fa-44bd985cdd51"))
AgCrdnCentralBodyCollection;
    // [ default ] interface IUnknown
    // interface IAgCrdnCentralBodyCollection

struct __declspec(uuid("9e594755-c8ee-4c82-94af-5bb4cb93ed37"))
AgCrdnCollection;
    // [ default ] interface IUnknown
    // interface IAgCrdnCollection

struct __declspec(uuid("eb112f43-8e0b-40c2-8b0a-2d46ae7041c9"))
AgCrdnPointSamplingResult;
    // [ default ] interface _IAgCrdnPointSamplingResult
    // interface IAgCrdnPointSamplingResult

struct __declspec(uuid("d8e9ecef-2856-4763-8b23-3aa2d63c9cba"))
AgCrdnPointSamplingInterval;
    // [ default ] interface _IAgCrdnPointSamplingInterval
    // interface IAgCrdnPointSamplingInterval

struct __declspec(uuid("c1b18cff-9b64-4ddb-850e-c1a95e9c43b1"))
AgCrdnPointSamplingIntervalCollection;
    // [ default ] interface _IAgCrdnPointSamplingIntervalCollection
    // interface IAgCrdnPointSamplingIntervalCollection

struct __declspec(uuid("6ab7c82e-971a-4696-bc74-e0e82e079e77"))
AgCrdnAxesSamplingResult;
    // [ default ] interface _IAgCrdnAxesSamplingResult
    // interface IAgCrdnAxesSamplingResult

struct __declspec(uuid("03580b9d-f516-4ae0-af2c-49533853d69b"))
AgCrdnAxesSamplingInterval;
    // [ default ] interface _IAgCrdnAxesSamplingInterval
    // interface IAgCrdnAxesSamplingInterval

struct __declspec(uuid("5149225a-b65d-46e4-b1a2-69caeb60c45b"))
AgCrdnAxesSamplingIntervalCollection;
    // [ default ] interface _IAgCrdnAxesSamplingIntervalCollection
    // interface IAgCrdnAxesSamplingIntervalCollection

struct __declspec(uuid("e39a2aaf-4c13-49ee-aa42-6e57db1f8d79"))
IAgCrdnVector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("a74d39ba-89d9-478e-8097-07731f64e027"))
IAgCrdnAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("ccc77a45-a50a-4f6c-bfb7-fe9dde89a34d"))
IAgCrdnAngle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("72638cb1-a2f9-4541-9002-7303c4171824"))
IAgCrdnPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
};

struct __declspec(uuid("4318a512-9878-43ff-b164-0468de5d0489"))
IAgCrdnCalcScalarAngle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInputAngle,put=PutInputAngle))
    IAgCrdnAnglePtr InputAngle;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAnglePtr GetInputAngle ( );
    void PutInputAngle (
        struct IAgCrdnAngle * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InputAngle (
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputAngle (
        /*[in]*/ struct IAgCrdnAngle * ppRetVal ) = 0;
};

struct __declspec(uuid("438e4e85-6018-4105-ae10-b774229297e1"))
IAgCrdnCalcScalarVectorMagnitude : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInputVector,put=PutInputVector))
    IAgCrdnVectorPtr InputVector;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr GetInputVector ( );
    void PutInputVector (
        struct IAgCrdnVector * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InputVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
};

struct __declspec(uuid("b9f1cde2-233b-42ee-a1c6-416cddc535e9"))
IAgCrdnParameterSetAttitude : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAxes,put=PutAxes))
    IAgCrdnAxesPtr Axes;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetAxes ( );
    void PutAxes (
        struct IAgCrdnAxes * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
};

struct __declspec(uuid("4771409b-8c6f-4381-a7b3-d7b90eda79ec"))
IAgCrdnParameterSetVector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVector,put=PutVector))
    IAgCrdnVectorPtr Vector;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr GetVector ( );
    void PutVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Vector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
};

struct __declspec(uuid("24bf4c8a-0812-44d4-bdb0-9cef948d00a1"))
IAgCrdnVectorRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetVector (
        struct IAgCrdnVector * Vector );
    IAgCrdnVectorPtr GetVector ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnVector * Vector );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ struct IAgCrdnVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnVector * Vector,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("05c81762-066f-4d5a-9988-727506df1229"))
IAgCrdnAxesRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAxes (
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesPtr GetAxes ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAxes (
        /*[in]*/ struct IAgCrdnAxes * Axes ) = 0;
      virtual HRESULT __stdcall raw_GetAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("7dac2622-4e37-401b-b281-8cfe8046b69d"))
IAgCrdnAngleRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAngle (
        struct IAgCrdnAngle * Angle );
    IAgCrdnAnglePtr GetAngle ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnAngle * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAngle (
        /*[in]*/ struct IAgCrdnAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetAngle (
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnAngle * Angle,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9c321218-16da-4d15-bea8-56a2245b7e7d"))
IAgCrdnPlaneRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPlane (
        struct IAgCrdnPlane * Plane );
    IAgCrdnPlanePtr GetPlane ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnPlane * Plane );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPlane (
        /*[in]*/ struct IAgCrdnPlane * Plane ) = 0;
      virtual HRESULT __stdcall raw_GetPlane (
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnPlane * Plane,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("d8145fd4-79c7-4a6d-ba2c-5247abf7a063"))
IAgCrdnAxesAlignedAndConstrained : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignmentReferenceVector))
    IAgCrdnVectorRefToPtr AlignmentReferenceVector;
    __declspec(property(get=GetConstraintReferenceVector))
    IAgCrdnVectorRefToPtr ConstraintReferenceVector;
    __declspec(property(get=GetAlignmentDirection))
    STKUtil::IAgDirectionPtr AlignmentDirection;
    __declspec(property(get=GetConstraintDirection))
    STKUtil::IAgDirectionPtr ConstraintDirection;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetAlignmentReferenceVector ( );
    IAgCrdnVectorRefToPtr GetConstraintReferenceVector ( );
    STKUtil::IAgDirectionPtr GetAlignmentDirection ( );
    STKUtil::IAgDirectionPtr GetConstraintDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlignmentReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
};

struct __declspec(uuid("f6a0f14a-7803-43ca-a898-2634735b8728"))
IAgCrdnAxesAngularOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetRotationAngle))
    IAgCrdnAngleRefToPtr RotationAngle;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOffsetAngle,put=PutFixedOffsetAngle))
    double FixedOffsetAngle;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAngleRefToPtr GetRotationAngle ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    double GetFixedOffsetAngle ( );
    void PutFixedOffsetAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOffsetAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FixedOffsetAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e0dcee9c-7a5b-4b11-9f3a-db252af8064d"))
IAgCrdnAxesFixedAtEpoch : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceAxes))
    IAgCrdnAxesRefToPtr SourceAxes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetSourceAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("e6277f29-a5d7-46f6-99c7-9698e30f9960"))
IAgCrdnAxesBPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetTrajectory ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
};

struct __declspec(uuid("b73ace31-c908-4878-bea4-944d65846c4c"))
IAgCrdnAxesCustomScript : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("e3731911-f146-4eb2-834f-9affdbfff281"))
IAgCrdnAxesFixed : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOrientation))
    STKUtil::IAgOrientationPtr FixedOrientation;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgOrientationPtr GetFixedOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("b2200d86-5e02-4791-b94e-7c229b0a2182"))
IAgCrdnAxesSpinning : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetInitialOffset,put=PutInitialOffset))
    double InitialOffset;
    __declspec(property(get=GetSpinRate,put=PutSpinRate))
    double SpinRate;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    double GetInitialOffset ( );
    void PutInitialOffset (
        double pRetVal );
    double GetSpinRate ( );
    void PutSpinRate (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitialOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpinRate (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("f8279298-ed5c-4655-b642-6b85661959ee"))
IAgCrdnAxesCommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesFixedPtr CreateTopocentricAxesQuaternion (
        struct IAgCrdnPoint * OriginPoint,
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgCrdnAxesFixedPtr CreateTopocentricAxesEulerAngles (
        struct IAgCrdnPoint * OriginPoint,
        enum STKUtil::AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgCrdnAxesFixedPtr CreateFixed (
        struct IAgCrdnAxes * ReferenceAxes );
    IAgCrdnAxesSamplingResultPtr Sample (
        struct IAgCrdnAxes * Axes,
        struct IAgCrdnAxes * ReferenceAxes,
        SAFEARRAY * * Intervals,
        double MinStep,
        double MaxStep,
        const _variant_t & TargetRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateTopocentricAxesQuaternion (
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS,
        /*[out,retval]*/ struct IAgCrdnAxesFixed * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTopocentricAxesEulerAngles (
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ enum STKUtil::AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[out,retval]*/ struct IAgCrdnAxesFixed * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFixed (
        /*[in]*/ struct IAgCrdnAxes * ReferenceAxes,
        /*[out,retval]*/ struct IAgCrdnAxesFixed * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Sample (
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[in]*/ struct IAgCrdnAxes * ReferenceAxes,
        /*[in]*/ SAFEARRAY * * Intervals,
        /*[in]*/ double MinStep,
        /*[in]*/ double MaxStep,
        /*[in]*/ VARIANT TargetRate,
        /*[out,retval]*/ struct IAgCrdnAxesSamplingResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("8f500ad6-9487-4385-92f0-bf2fb4671994"))
IAgCrdnAxesAtTimeInstant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetSourceAxes,put=PutSourceAxes))
    IAgCrdnAxesPtr SourceAxes;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnAxesPtr GetSourceAxes ( );
    void PutSourceAxes (
        struct IAgCrdnAxes * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
};

struct __declspec(uuid("58cdacf2-a1b1-4eb4-a42e-2968db2c23a7"))
IAgCrdnAngleBetweenVectors : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("71a95217-e717-4a05-a1db-1ef4f1594356"))
IAgCrdnAngleBetweenPlanes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromPlane))
    IAgCrdnPlaneRefToPtr FromPlane;
    __declspec(property(get=GetToPlane))
    IAgCrdnPlaneRefToPtr ToPlane;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlaneRefToPtr GetFromPlane ( );
    IAgCrdnPlaneRefToPtr GetToPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("fd019b8b-3181-4ad7-bc55-a4c605f49189"))
IAgCrdnAngleDihedral : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;
    __declspec(property(get=GetPoleAbout))
    IAgCrdnVectorRefToPtr PoleAbout;
    __declspec(property(get=GetCounterClockwiseRotation,put=PutCounterClockwiseRotation))
    VARIANT_BOOL CounterClockwiseRotation;
    __declspec(property(get=GetSignedAngle,put=PutSignedAngle))
    VARIANT_BOOL SignedAngle;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );
    IAgCrdnVectorRefToPtr GetPoleAbout ( );
    VARIANT_BOOL GetCounterClockwiseRotation ( );
    void PutCounterClockwiseRotation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSignedAngle ( );
    void PutSignedAngle (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PoleAbout (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterClockwiseRotation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CounterClockwiseRotation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignedAngle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignedAngle (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("44ee6a16-5aa4-448f-91d6-9c06dee06f9f"))
IAgCrdnAngleRotation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromAxes))
    IAgCrdnAxesRefToPtr FromAxes;
    __declspec(property(get=GetToAxes))
    IAgCrdnAxesRefToPtr ToAxes;
    __declspec(property(get=GetReferenceDirection,put=PutReferenceDirection))
    enum AgECrdnDisplayAxisSelector ReferenceDirection;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetFromAxes ( );
    IAgCrdnAxesRefToPtr GetToAxes ( );
    enum AgECrdnDisplayAxisSelector GetReferenceDirection ( );
    void PutReferenceDirection (
        enum AgECrdnDisplayAxisSelector pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceDirection (
        /*[out,retval]*/ enum AgECrdnDisplayAxisSelector * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDirection (
        /*[in]*/ enum AgECrdnDisplayAxisSelector pRetVal ) = 0;
};

struct __declspec(uuid("9bbca03c-7746-4b88-addd-2d7de43d146c"))
IAgCrdnAngleToPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetSigned,put=PutSigned))
    enum AgECrdnSignedAngleType Signed;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    enum AgECrdnSignedAngleType GetSigned ( );
    void PutSigned (
        enum AgECrdnSignedAngleType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Signed (
        /*[out,retval]*/ enum AgECrdnSignedAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Signed (
        /*[in]*/ enum AgECrdnSignedAngleType pRetVal ) = 0;
};

struct __declspec(uuid("c2d0b928-45c3-4816-81ad-24977b49ede5"))
IAgCrdnPlaneNormal : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetNormalVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("278a5b79-66b3-4f52-af6b-8eac49ba3c15"))
IAgCrdnPointGrazing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e1f764f2-ba4d-4c7b-a529-60c89c8fde65"))
IAgCrdnPointCovarianceGrazing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetTargetName,put=PutTargetName))
    _bstr_t TargetName;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetProbability,put=PutProbability))
    double Probability;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUseProbability,put=PutUseProbability))
    VARIANT_BOOL UseProbability;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    _bstr_t GetTargetName ( );
    void PutTargetName (
        _bstr_t pRetVal );
    double GetDistance ( );
    void PutDistance (
        double pRetVal );
    double GetProbability ( );
    void PutProbability (
        double pRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetUseProbability ( );
    void PutUseProbability (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Probability (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Probability (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseProbability (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseProbability (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("c25bb12f-a1f6-4e77-9f25-a3aeddda9336"))
IAgCrdnPointPlaneIntersection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    IAgCrdnPointRefToPtr GetOriginPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("0e4c6c72-9940-41d7-b31f-96cfab560d29"))
IAgCrdnPointPlaneProjection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("11cfbb8d-a84a-414e-b09a-82fb0ca20560"))
IAgCrdnPointCentBodyIntersect : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetReferencePoint,put=PutReferencePoint))
    IAgCrdnPointPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    IAgCrdnVectorPtr DirectionVector;
    __declspec(property(get=GetIntersectionSurface,put=PutIntersectionSurface))
    enum AgECrdnIntersectionSurface IntersectionSurface;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetUseRangeConstraint,put=PutUseRangeConstraint))
    VARIANT_BOOL UseRangeConstraint;
    __declspec(property(get=GetMinimumRange,put=PutMinimumRange))
    double MinimumRange;
    __declspec(property(get=GetMaximumRange,put=PutMaximumRange))
    double MaximumRange;
    __declspec(property(get=GetUseMinimumRange,put=PutUseMinimumRange))
    VARIANT_BOOL UseMinimumRange;
    __declspec(property(get=GetUseMaximumRange,put=PutUseMaximumRange))
    VARIANT_BOOL UseMaximumRange;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    IAgCrdnPointPtr GetReferencePoint ( );
    void PutReferencePoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnVectorPtr GetDirectionVector ( );
    void PutDirectionVector (
        struct IAgCrdnVector * ppRetVal );
    enum AgECrdnIntersectionSurface GetIntersectionSurface ( );
    void PutIntersectionSurface (
        enum AgECrdnIntersectionSurface pRetVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );
    VARIANT_BOOL GetUseRangeConstraint ( );
    void PutUseRangeConstraint (
        VARIANT_BOOL pRetVal );
    double GetMinimumRange ( );
    void PutMinimumRange (
        double pRetVal );
    double GetMaximumRange ( );
    void PutMaximumRange (
        double pRetVal );
    VARIANT_BOOL GetUseMinimumRange ( );
    void PutUseMinimumRange (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseMaximumRange ( );
    void PutUseMaximumRange (
        VARIANT_BOOL pRetVal );
    HRESULT SetRange (
        double Minimum,
        double Maximum );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferencePoint (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DirectionVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionSurface (
        /*[out,retval]*/ enum AgECrdnIntersectionSurface * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionSurface (
        /*[in]*/ enum AgECrdnIntersectionSurface pRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRangeConstraint (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseRangeConstraint (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumRange (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumRange (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumRange (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumRange (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMinimumRange (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMinimumRange (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMaximumRange (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMaximumRange (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRange (
        /*[in]*/ double Minimum,
        /*[in]*/ double Maximum ) = 0;
};

struct __declspec(uuid("fd28496d-0692-4a17-b23c-25db611f10ff"))
IAgCrdnSystemAssembled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetOriginPoint ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("de1c4334-6702-4138-bae3-f309f9c4f7ec"))
IAgCrdnSystemCommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemAssembledPtr CreateEastNorthUpCartographic (
        const _variant_t & Latitude,
        const _variant_t & Longitude,
        double Altitude );
    IAgCrdnSystemAssembledPtr CreateAssembled (
        struct IAgCrdnPoint * OriginPoint,
        struct IAgCrdnAxes * ReferenceAxes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateEastNorthUpCartographic (
        /*[in]*/ VARIANT Latitude,
        /*[in]*/ VARIANT Longitude,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgCrdnSystemAssembled * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAssembled (
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ struct IAgCrdnAxes * ReferenceAxes,
        /*[out,retval]*/ struct IAgCrdnSystemAssembled * * ppRetVal ) = 0;
};

struct __declspec(uuid("291a8c3a-75a5-4875-851c-a8d8a7268f6e"))
IAgCrdnVectorAngleRate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle))
    IAgCrdnAngleRefToPtr Angle;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAngleRefToPtr GetAngle ( );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("bbc197bf-d2dc-4271-b2b2-fbb3bd977e4d"))
IAgCrdnVectorFixedAtEpoch : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetSourceVector))
    IAgCrdnVectorRefToPtr SourceVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    IAgCrdnVectorRefToPtr GetSourceVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("43107159-4a44-4a79-b0e9-6bc78fdf8d0f"))
IAgCrdnVectorAngularVelocity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAxes))
    IAgCrdnAxesRefToPtr Axes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("abf7c2fa-53ca-4fc3-b6e4-c7903a27cd7f"))
IAgCrdnVectorConing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAboutVector))
    IAgCrdnVectorRefToPtr AboutVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetStartClockAngle,put=PutStartClockAngle))
    double StartClockAngle;
    __declspec(property(get=GetStopClockAngle,put=PutStopClockAngle))
    double StopClockAngle;
    __declspec(property(get=GetStartEpoch,put=PutStartEpoch))
    _variant_t StartEpoch;
    __declspec(property(get=GetClockAngleRate,put=PutClockAngleRate))
    double ClockAngleRate;
    __declspec(property(get=GetMode,put=PutMode))
    enum AgECrdnSweepMode Mode;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetAboutVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetStartClockAngle ( );
    void PutStartClockAngle (
        double pRetVal );
    double GetStopClockAngle ( );
    void PutStopClockAngle (
        double pRetVal );
    _variant_t GetStartEpoch ( );
    void PutStartEpoch (
        const _variant_t & pRetVal );
    double GetClockAngleRate ( );
    void PutClockAngleRate (
        double pRetVal );
    enum AgECrdnSweepMode GetMode ( );
    void PutMode (
        enum AgECrdnSweepMode pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AboutVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartEpoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartEpoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum AgECrdnSweepMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum AgECrdnSweepMode pRetVal ) = 0;
};

struct __declspec(uuid("1a3b7ac3-2641-4f15-b911-665ad2cacaea"))
IAgCrdnVectorCross : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFrom))
    IAgCrdnVectorRefToPtr From;
    __declspec(property(get=GetTo))
    IAgCrdnVectorRefToPtr To;
    __declspec(property(get=GetIsNormalized,put=PutIsNormalized))
    VARIANT_BOOL IsNormalized;
    __declspec(property(get=GetDimension,put=PutDimension))
    _bstr_t Dimension;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetFrom ( );
    IAgCrdnVectorRefToPtr GetTo ( );
    VARIANT_BOOL GetIsNormalized ( );
    void PutIsNormalized (
        VARIANT_BOOL pRetVal );
    _bstr_t GetDimension ( );
    void PutDimension (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNormalized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsNormalized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimension (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("1be4bb24-c01d-4bcb-acda-0bcd1662e195"))
IAgCrdnVectorCustomScript : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetScriptFile,put=PutScriptFile))
    _bstr_t ScriptFile;
    __declspec(property(get=GetInitializationScriptFile,put=PutInitializationScriptFile))
    _bstr_t InitializationScriptFile;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetScriptFile ( );
    void PutScriptFile (
        _bstr_t pRetVal );
    _bstr_t GetInitializationScriptFile ( );
    void PutInitializationScriptFile (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitializationScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("73a634fd-887f-49cf-b264-ee195cf5a310"))
IAgCrdnVectorDerivative : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVector))
    IAgCrdnVectorRefToPtr Vector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("142042ce-e1c1-48f4-a5ce-435424e9c35b"))
IAgCrdnVectorTwoPlanesIntersection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPlaneA))
    IAgCrdnPlaneRefToPtr PlaneA;
    __declspec(property(get=GetPlaneB))
    IAgCrdnPlaneRefToPtr PlaneB;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlaneRefToPtr GetPlaneA ( );
    IAgCrdnPlaneRefToPtr GetPlaneB ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlaneA (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneB (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("d7feed45-c34d-4425-9f82-dd031d7a34e0"))
IAgCrdnVectorProjection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSource))
    IAgCrdnVectorRefToPtr Source;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetSource ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("6da9245c-c8ca-4bd3-838a-da3f0acc0174"))
IAgCrdnVectorScaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsNormalized,put=PutIsNormalized))
    VARIANT_BOOL IsNormalized;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsNormalized ( );
    void PutIsNormalized (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNormalized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsNormalized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("681bc23d-31f2-4a99-ab6a-4084147b57f1"))
IAgCrdnVectorFixedInAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetDirection))
    STKUtil::IAgDirectionPtr Direction;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgDirectionPtr GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
};

struct __declspec(uuid("5997268f-57db-44dd-84c7-a64297f08243"))
IAgCrdnVectorReflection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIncomingVector))
    IAgCrdnVectorRefToPtr IncomingVector;
    __declspec(property(get=GetUseOppositeOfSelectedVector,put=PutUseOppositeOfSelectedVector))
    VARIANT_BOOL UseOppositeOfSelectedVector;
    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetAllowReflectionsOnBackside,put=PutAllowReflectionsOnBackside))
    VARIANT_BOOL AllowReflectionsOnBackside;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetIncomingVector ( );
    VARIANT_BOOL GetUseOppositeOfSelectedVector ( );
    void PutUseOppositeOfSelectedVector (
        VARIANT_BOOL pRetVal );
    IAgCrdnVectorRefToPtr GetNormalVector ( );
    VARIANT_BOOL GetAllowReflectionsOnBackside ( );
    void PutAllowReflectionsOnBackside (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncomingVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseOppositeOfSelectedVector (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseOppositeOfSelectedVector (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowReflectionsOnBackside (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowReflectionsOnBackside (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("f4c852d0-fa44-4400-957e-94af113df4d1"))
IAgCrdnVectorFixedAtTimeInstant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetSourceVector,put=PutSourceVector))
    IAgCrdnVectorPtr SourceVector;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnVectorPtr GetSourceVector ( );
    void PutSourceVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
};

struct __declspec(uuid("31609bff-fb51-44f0-bb0d-f3b91e0db1fd"))
IAgCrdnVectorLinearCombination : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVectorA,put=PutVectorA))
    IAgCrdnVectorPtr VectorA;
    __declspec(property(get=GetScaleFactorA,put=PutScaleFactorA))
    double ScaleFactorA;
    __declspec(property(get=GetNormalizeVectorA,put=PutNormalizeVectorA))
    VARIANT_BOOL NormalizeVectorA;
    __declspec(property(get=GetVectorB,put=PutVectorB))
    IAgCrdnVectorPtr VectorB;
    __declspec(property(get=GetScaleFactorB,put=PutScaleFactorB))
    double ScaleFactorB;
    __declspec(property(get=GetNormalizeVectorB,put=PutNormalizeVectorB))
    VARIANT_BOOL NormalizeVectorB;
    __declspec(property(get=GetOutputDimensionInheritance,put=PutOutputDimensionInheritance))
    enum AgECrdnDimensionInheritance OutputDimensionInheritance;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr GetVectorA ( );
    void PutVectorA (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorA ( );
    void PutScaleFactorA (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorA ( );
    void PutNormalizeVectorA (
        VARIANT_BOOL pRetVal );
    IAgCrdnVectorPtr GetVectorB ( );
    void PutVectorB (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorB ( );
    void PutScaleFactorB (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorB ( );
    void PutNormalizeVectorB (
        VARIANT_BOOL pRetVal );
    enum AgECrdnDimensionInheritance GetOutputDimensionInheritance ( );
    void PutOutputDimensionInheritance (
        enum AgECrdnDimensionInheritance pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VectorA (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorA (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorB (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorB (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorB (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorB (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorB (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimensionInheritance (
        /*[out,retval]*/ enum AgECrdnDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimensionInheritance (
        /*[in]*/ enum AgECrdnDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("858b354b-829f-4e6c-a190-00bc3d029d1a"))
IAgCrdnVectorProjectAlongVector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceVector,put=PutSourceVector))
    IAgCrdnVectorPtr SourceVector;
    __declspec(property(get=GetAlongVector,put=PutAlongVector))
    IAgCrdnVectorPtr AlongVector;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr GetSourceVector ( );
    void PutSourceVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnVectorPtr GetAlongVector ( );
    void PutAlongVector (
        struct IAgCrdnVector * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlongVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_AlongVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
};

struct __declspec(uuid("99c901af-bb66-425e-8c71-191a7a1efe2a"))
IAgCrdnVectorScalarLinearCombination : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVectorA,put=PutVectorA))
    IAgCrdnVectorPtr VectorA;
    __declspec(property(get=GetScaleFactorA,put=PutScaleFactorA))
    double ScaleFactorA;
    __declspec(property(get=GetNormalizeVectorA,put=PutNormalizeVectorA))
    VARIANT_BOOL NormalizeVectorA;
    __declspec(property(get=GetUseScaleFromScalarA,put=PutUseScaleFromScalarA))
    VARIANT_BOOL UseScaleFromScalarA;
    __declspec(property(get=GetUseScaleFromScalarB,put=PutUseScaleFromScalarB))
    VARIANT_BOOL UseScaleFromScalarB;
    __declspec(property(get=GetScalarA,put=PutScalarA))
    IAgCrdnCalcScalarPtr ScalarA;
    __declspec(property(get=GetScalarB,put=PutScalarB))
    IAgCrdnCalcScalarPtr ScalarB;
    __declspec(property(get=GetVectorB,put=PutVectorB))
    IAgCrdnVectorPtr VectorB;
    __declspec(property(get=GetScaleFactorB,put=PutScaleFactorB))
    double ScaleFactorB;
    __declspec(property(get=GetNormalizeVectorB,put=PutNormalizeVectorB))
    VARIANT_BOOL NormalizeVectorB;
    __declspec(property(get=GetOutputDimensionInheritance,put=PutOutputDimensionInheritance))
    enum AgECrdnDimensionInheritance OutputDimensionInheritance;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr GetVectorA ( );
    void PutVectorA (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorA ( );
    void PutScaleFactorA (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorA ( );
    void PutNormalizeVectorA (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseScaleFromScalarA ( );
    void PutUseScaleFromScalarA (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseScaleFromScalarB ( );
    void PutUseScaleFromScalarB (
        VARIANT_BOOL pRetVal );
    IAgCrdnCalcScalarPtr GetScalarA ( );
    void PutScalarA (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnCalcScalarPtr GetScalarB ( );
    void PutScalarB (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnVectorPtr GetVectorB ( );
    void PutVectorB (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorB ( );
    void PutScaleFactorB (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorB ( );
    void PutNormalizeVectorB (
        VARIANT_BOOL pRetVal );
    enum AgECrdnDimensionInheritance GetOutputDimensionInheritance ( );
    void PutOutputDimensionInheritance (
        enum AgECrdnDimensionInheritance pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VectorA (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorA (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScaleFromScalarA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScaleFromScalarA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScaleFromScalarB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScaleFromScalarB (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarA (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ScalarA (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarB (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ScalarB (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorB (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorB (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorB (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorB (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorB (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimensionInheritance (
        /*[out,retval]*/ enum AgECrdnDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimensionInheritance (
        /*[in]*/ enum AgECrdnDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("717d7d9d-8b09-4917-8c5d-7187172ed6eb"))
IAgCrdnVectorScalarScaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInputVector,put=PutInputVector))
    IAgCrdnVectorPtr InputVector;
    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetNormalize,put=PutNormalize))
    VARIANT_BOOL Normalize;
    __declspec(property(get=GetDimensionInheritance,put=PutDimensionInheritance))
    enum AgECrdnVectorScaledDimensionInheritance DimensionInheritance;
    __declspec(property(get=GetDimension,put=PutDimension))
    _bstr_t Dimension;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr GetInputVector ( );
    void PutInputVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    VARIANT_BOOL GetNormalize ( );
    void PutNormalize (
        VARIANT_BOOL pRetVal );
    enum AgECrdnVectorScaledDimensionInheritance GetDimensionInheritance ( );
    void PutDimensionInheritance (
        enum AgECrdnVectorScaledDimensionInheritance pRetVal );
    _bstr_t GetDimension ( );
    void PutDimension (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InputVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normalize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DimensionInheritance (
        /*[out,retval]*/ enum AgECrdnVectorScaledDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DimensionInheritance (
        /*[in]*/ enum AgECrdnVectorScaledDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimension (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("779484ea-9df4-457d-b706-df26accb4d62"))
IAgCrdnVectorFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableVectorPluginDisplayNames))
    SAFEARRAY * AvailableVectorPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr Create (
        _bstr_t VectorName,
        _bstr_t Description,
        enum AgECrdnVectorType VectorType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVectorType Type );
    IAgCrdnVectorDisplacementPtr CreateDisplacementVector (
        _bstr_t VectorName,
        struct IAgCrdnPoint * OriginPoint,
        struct IAgCrdnPoint * DestPoint );
    SAFEARRAY * GetAvailableVectorPluginDisplayNames ( );
    IAgCrdnVectorPtr CreateVectorPluginFromDisplayName (
        _bstr_t VectorName,
        _bstr_t Description,
        _bstr_t DisplayName );
    IAgCrdnVectorCrossPtr CreateCrossProductVector (
        _bstr_t VectorName,
        struct IAgCrdnVector * VectorA,
        struct IAgCrdnVector * VectorB );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVectorType VectorType,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVectorType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDisplacementVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ struct IAgCrdnPoint * DestPoint,
        /*[out,retval]*/ struct IAgCrdnVectorDisplacement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVectorPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVectorPluginFromDisplayName (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCrossProductVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnVector * VectorA,
        /*[in]*/ struct IAgCrdnVector * VectorB,
        /*[out,retval]*/ struct IAgCrdnVectorCross * * ppRetVal ) = 0;
};

struct __declspec(uuid("c9b581c8-924b-4b02-8200-afdb9e5ccbe0"))
IAgCrdnAxesFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableAxesPluginDisplayNames))
    SAFEARRAY * AvailableAxesPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr Create (
        _bstr_t AxesName,
        _bstr_t Description,
        enum AgECrdnAxesType AxesType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAxesType Type );
    SAFEARRAY * GetAvailableAxesPluginDisplayNames ( );
    IAgCrdnAxesPtr CreateAxesPluginFromDisplayName (
        _bstr_t AxesName,
        _bstr_t Description,
        _bstr_t DisplayName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AxesName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAxesType AxesType,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAxesType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxesPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAxesPluginFromDisplayName (
        /*[in]*/ BSTR AxesName,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("4d5f9a02-f1c2-453f-80f3-c4060a631b0e"))
IAgCrdnPlaneFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlanePtr Create (
        _bstr_t PlaneName,
        _bstr_t Description,
        enum AgECrdnPlaneType PlaneType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPlaneType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PlaneName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPlaneType PlaneType,
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPlaneType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ae8d2b4b-280f-4add-b10d-2cec8f9b1c96"))
IAgCrdnAngleFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAnglePtr Create (
        _bstr_t AngleName,
        _bstr_t Description,
        enum AgECrdnAngleType AngleType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAngleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AngleName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAngleType AngleType,
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAngleType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("3716db65-5320-4f8b-afff-f8e327d402ab"))
IAgCrdnVectorGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnVectorPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnVectorFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t VectorName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnVectorFactoryPtr GetFactory ( );
    IAgCrdnVectorPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR VectorName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnVectorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("ddf7e8de-9591-4576-bdb2-625df4284bf9"))
IAgCrdnAngleGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnAnglePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnAngleFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t AngleName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnAngleFactoryPtr GetFactory ( );
    IAgCrdnAnglePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR AngleName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnAngleFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("4575eeb5-14eb-42a2-ac6d-adc7bca7b019"))
IAgCrdnAxesGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnAxesPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnAxesFactoryPtr Factory;
    __declspec(property(get=GetCommonTasks))
    IAgCrdnAxesCommonTasksPtr CommonTasks;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t AxesName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnAxesFactoryPtr GetFactory ( );
    IAgCrdnAxesPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    IAgCrdnAxesCommonTasksPtr GetCommonTasks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR AxesName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnAxesFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgCrdnAxesCommonTasks * * ppRetVal ) = 0;
};

struct __declspec(uuid("7763447a-fa3e-4735-bb9b-bd65364ad155"))
IAgCrdnPlaneGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPlanePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnPlaneFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t PlaneName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnPlaneFactoryPtr GetFactory ( );
    IAgCrdnPlanePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR PlaneName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnPlaneFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("891b3190-8a13-4c42-915d-e35ebacb085e"))
IAgCrdnSystemGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnSystemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCommonTasks))
    IAgCrdnSystemCommonTasksPtr CommonTasks;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFactory))
    IAgCrdnSystemFactoryPtr Factory;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t SystemName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnSystemFactoryPtr GetFactory ( );
    IAgCrdnSystemPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    IAgCrdnSystemCommonTasksPtr GetCommonTasks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR SystemName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnSystemFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgCrdnSystemCommonTasks * * ppRetVal ) = 0;
};

struct __declspec(uuid("e7969854-a78e-4e79-8e22-69b288a25901"))
IAgCrdnWellKnownEarthAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("f2b371da-53ac-4c40-bc26-ce65b477255e"))
IAgCrdnWellKnownSunAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("c5082aa3-7a3b-4693-98ee-c7d1f5c43fa7"))
IAgCrdnWellKnownAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthAxesPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunAxesPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthAxesPtr GetEarth ( );
    IAgCrdnWellKnownSunAxesPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("42a01f63-a4fb-489c-ae33-6357c2ec4e94"))
_IAgCrdnVectorRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetVector (
        struct IAgCrdnVector * Vector );
    IAgCrdnVectorPtr GetVector ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnVector * Vector );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ struct IAgCrdnVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnVector * Vector,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("933acb2b-8db8-4508-a570-ebf286e01fe3"))
_IAgCrdnAxesRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAxes (
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesPtr GetAxes ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAxes (
        /*[in]*/ struct IAgCrdnAxes * Axes ) = 0;
      virtual HRESULT __stdcall raw_GetAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("5d7d691b-7159-4c31-9c92-e8ca0ce55c78"))
_IAgCrdnAngleRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAngle (
        struct IAgCrdnAngle * Angle );
    IAgCrdnAnglePtr GetAngle ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnAngle * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAngle (
        /*[in]*/ struct IAgCrdnAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetAngle (
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnAngle * Angle,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("12a213e0-09b3-4dc5-a9a7-970e3aee5266"))
_IAgCrdnPlaneRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPlane (
        struct IAgCrdnPlane * Plane );
    IAgCrdnPlanePtr GetPlane ( );
    VARIANT_BOOL HasCyclicDependency (
        struct IAgCrdnPlane * Plane );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPlane (
        /*[in]*/ struct IAgCrdnPlane * Plane ) = 0;
      virtual HRESULT __stdcall raw_GetPlane (
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasCyclicDependency (
        /*[in]*/ struct IAgCrdnPlane * Plane,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("eee8bd1f-5429-4447-a50a-95497769bda8"))
_IAgCrdnAxesCommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesFixedPtr CreateTopocentricAxesQuaternion (
        struct IAgCrdnPoint * OriginPoint,
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgCrdnAxesFixedPtr CreateTopocentricAxesEulerAngles (
        struct IAgCrdnPoint * OriginPoint,
        enum STKUtil::AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgCrdnAxesFixedPtr CreateFixed (
        struct IAgCrdnAxes * ReferenceAxes );
    IAgCrdnAxesSamplingResultPtr Sample (
        struct IAgCrdnAxes * Axes,
        struct IAgCrdnAxes * ReferenceAxes,
        SAFEARRAY * * Intervals,
        double MinStep,
        double MaxStep,
        const _variant_t & TargetRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateTopocentricAxesQuaternion (
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS,
        /*[out,retval]*/ struct IAgCrdnAxesFixed * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTopocentricAxesEulerAngles (
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ enum STKUtil::AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[out,retval]*/ struct IAgCrdnAxesFixed * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFixed (
        /*[in]*/ struct IAgCrdnAxes * ReferenceAxes,
        /*[out,retval]*/ struct IAgCrdnAxesFixed * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Sample (
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[in]*/ struct IAgCrdnAxes * ReferenceAxes,
        /*[in]*/ SAFEARRAY * * Intervals,
        /*[in]*/ double MinStep,
        /*[in]*/ double MaxStep,
        /*[in]*/ VARIANT TargetRate,
        /*[out,retval]*/ struct IAgCrdnAxesSamplingResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("6ccb8283-f2e7-4fcd-9b9c-02c92075690e"))
_IAgCrdnSystemCommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemAssembledPtr CreateEastNorthUpCartographic (
        const _variant_t & Latitude,
        const _variant_t & Longitude,
        double Altitude );
    IAgCrdnSystemAssembledPtr CreateAssembled (
        struct IAgCrdnPoint * OriginPoint,
        struct IAgCrdnAxes * ReferenceAxes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateEastNorthUpCartographic (
        /*[in]*/ VARIANT Latitude,
        /*[in]*/ VARIANT Longitude,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgCrdnSystemAssembled * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAssembled (
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ struct IAgCrdnAxes * ReferenceAxes,
        /*[out,retval]*/ struct IAgCrdnSystemAssembled * * ppRetVal ) = 0;
};

struct __declspec(uuid("950401c6-7058-49a7-b79c-4e48900258e7"))
_IAgCrdnVectorFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableVectorPluginDisplayNames))
    SAFEARRAY * AvailableVectorPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr Create (
        _bstr_t VectorName,
        _bstr_t Description,
        enum AgECrdnVectorType VectorType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVectorType Type );
    IAgCrdnVectorDisplacementPtr CreateDisplacementVector (
        _bstr_t VectorName,
        struct IAgCrdnPoint * OriginPoint,
        struct IAgCrdnPoint * DestPoint );
    SAFEARRAY * GetAvailableVectorPluginDisplayNames ( );
    IAgCrdnVectorPtr CreateVectorPluginFromDisplayName (
        _bstr_t VectorName,
        _bstr_t Description,
        _bstr_t DisplayName );
    IAgCrdnVectorCrossPtr CreateCrossProductVector (
        _bstr_t VectorName,
        struct IAgCrdnVector * VectorA,
        struct IAgCrdnVector * VectorB );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVectorType VectorType,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVectorType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDisplacementVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ struct IAgCrdnPoint * DestPoint,
        /*[out,retval]*/ struct IAgCrdnVectorDisplacement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVectorPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVectorPluginFromDisplayName (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCrossProductVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnVector * VectorA,
        /*[in]*/ struct IAgCrdnVector * VectorB,
        /*[out,retval]*/ struct IAgCrdnVectorCross * * ppRetVal ) = 0;
};

struct __declspec(uuid("7e07b2da-e83d-4623-a4e4-79966a4be21a"))
_IAgCrdnAxesFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableAxesPluginDisplayNames))
    SAFEARRAY * AvailableAxesPluginDisplayNames;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr Create (
        _bstr_t AxesName,
        _bstr_t Description,
        enum AgECrdnAxesType AxesType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAxesType Type );
    SAFEARRAY * GetAvailableAxesPluginDisplayNames ( );
    IAgCrdnAxesPtr CreateAxesPluginFromDisplayName (
        _bstr_t AxesName,
        _bstr_t Description,
        _bstr_t DisplayName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AxesName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAxesType AxesType,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAxesType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxesPluginDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAxesPluginFromDisplayName (
        /*[in]*/ BSTR AxesName,
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("9ee81b3f-a979-4932-9b34-9a4391d12f8a"))
_IAgCrdnPlaneFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlanePtr Create (
        _bstr_t PlaneName,
        _bstr_t Description,
        enum AgECrdnPlaneType PlaneType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPlaneType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PlaneName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPlaneType PlaneType,
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPlaneType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("c00a055f-2aeb-4922-a7f8-2b74cda79f84"))
_IAgCrdnAngleFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAnglePtr Create (
        _bstr_t AngleName,
        _bstr_t Description,
        enum AgECrdnAngleType AngleType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAngleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AngleName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAngleType AngleType,
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAngleType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("635003c5-db7b-48b9-a615-bc23f41be7dd"))
_IAgCrdnWellKnownEarthAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("9e0178ef-fefc-4174-9bfb-b44a6b2d80b3"))
_IAgCrdnWellKnownSunAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("4f4fd026-0478-464f-9faf-981c2e58f663"))
_IAgCrdnWellKnownAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthAxesPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunAxesPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthAxesPtr GetEarth ( );
    IAgCrdnWellKnownSunAxesPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("cb7768a9-5e60-4e01-8dfe-5191c4cc68a1"))
_IAgCrdnCalcScalar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("467d32e8-c564-480f-9be4-6a051e719771"))
IAgCrdn : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d4dd0e8d-bca5-40df-bcec-03a812851d7b"))
IAgCrdnCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("074125f8-1653-41d5-9d99-a426c521dbfe"))
_IAgCrdnCalcScalarAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetInputAngle,put=PutInputAngle))
    IAgCrdnAnglePtr InputAngle;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnAnglePtr GetInputAngle ( );
    void PutInputAngle (
        struct IAgCrdnAngle * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputAngle (
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputAngle (
        /*[in]*/ struct IAgCrdnAngle * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("19da7d2b-382f-4209-b712-e4f33b2235b2"))
_IAgCrdnCalcScalarConstant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetDimension,put=PutDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    double GetValue ( );
    void PutValue (
        double pRetVal );
    _bstr_t GetDimension ( );
    void PutDimension (
        _bstr_t pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e8f09ece-beeb-4d26-beaf-e2ad42f55c7a"))
_IAgCrdnCalcScalarCustom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    HRESULT Reload ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("6793731d-9f01-45da-b33b-7bac84a74683"))
_IAgCrdnCalcScalarDataElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    IAgCrdnInterpPtr Interpolation;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetDataProvider))
    _bstr_t DataProvider;
    __declspec(property(get=GetElementName))
    _bstr_t ElementName;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetGroup))
    _bstr_t Group;
    __declspec(property(get=GetInvalidDataIndicator,put=PutInvalidDataIndicator))
    double InvalidDataIndicator;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUseSamples,put=PutUseSamples))
    VARIANT_BOOL UseSamples;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    _bstr_t GetDataProvider ( );
    _bstr_t GetElementName ( );
    _bstr_t GetGroup ( );
    IAgCrdnInterpPtr GetInterpolation ( );
    void PutInterpolation (
        struct IAgCrdnInterp * ppRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    VARIANT_BOOL GetUseSamples ( );
    void PutUseSamples (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    HRESULT Set (
        _bstr_t DataProvider,
        _bstr_t ElementName );
    HRESULT SetWithGroup (
        _bstr_t DataProvider,
        _bstr_t TypeName,
        _bstr_t ElementName );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    double GetInvalidDataIndicator ( );
    void PutInvalidDataIndicator (
        double pRetVal );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProvider (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ struct IAgCrdnInterp * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolation (
        /*[in]*/ struct IAgCrdnInterp * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSamples (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSamples (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR ElementName ) = 0;
      virtual HRESULT __stdcall raw_SetWithGroup (
        /*[in]*/ BSTR DataProvider,
        /*[in]*/ BSTR TypeName,
        /*[in]*/ BSTR ElementName ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InvalidDataIndicator (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InvalidDataIndicator (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("b70b81f2-d40d-4848-a9aa-f2b19a54ce84"))
_IAgCrdnCalcScalarDerivative : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetScalar,put=PutScalar))
    IAgCrdnCalcScalarPtr Scalar;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnCalcScalarPtr GetScalar ( );
    void PutScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("7c040ac7-7aac-4686-818c-0e418efa8568"))
_IAgCrdnCalcScalarElapsedTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("754ebfd4-0357-4d10-b7bb-6c94c82d35b1"))
_IAgCrdnCalcScalarFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetFileInterpolationType,put=PutFileInterpolationType))
    enum AgECrdnFileInterpolatorType FileInterpolationType;
    __declspec(property(get=GetFileInterpolationOrder,put=PutFileInterpolationOrder))
    int FileInterpolationOrder;
    __declspec(property(get=GetUseNativeFileInterpolationSettings,put=PutUseNativeFileInterpolationSettings))
    VARIANT_BOOL UseNativeFileInterpolationSettings;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    HRESULT Reload ( );
    IAgCrdnEventIntervalResultPtr GetFileSpan ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );
    enum AgECrdnFileInterpolatorType GetFileInterpolationType ( );
    void PutFileInterpolationType (
        enum AgECrdnFileInterpolatorType pRetVal );
    int GetFileInterpolationOrder ( );
    void PutFileInterpolationOrder (
        int pRetVal );
    VARIANT_BOOL GetUseNativeFileInterpolationSettings ( );
    void PutUseNativeFileInterpolationSettings (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_GetFileSpan (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FileInterpolationType (
        /*[out,retval]*/ enum AgECrdnFileInterpolatorType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileInterpolationType (
        /*[in]*/ enum AgECrdnFileInterpolatorType pRetVal ) = 0;
      virtual HRESULT __stdcall get_FileInterpolationOrder (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileInterpolationOrder (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseNativeFileInterpolationSettings (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseNativeFileInterpolationSettings (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("4e26b9d4-5f7f-4be0-8475-2b95e299a62a"))
_IAgCrdnCalcScalarFixedAtTimeInstant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ba8e4911-2281-4ea1-9814-815cd825630c"))
_IAgCrdnCalcScalarFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseScalar,put=PutUseScalar))
    VARIANT_BOOL UseScalar;
    __declspec(property(get=GetCoefficients,put=PutCoefficients))
    SAFEARRAY * Coefficients;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetC,put=PutC))
    double C;
    __declspec(property(get=GetD,put=PutD))
    double D;
    __declspec(property(get=GetAvailableFunctions))
    SAFEARRAY * AvailableFunctions;
    __declspec(property(get=GetOutputUnit,put=PutOutputUnit))
    _bstr_t OutputUnit;
    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetInputTime,put=PutInputTime))
    IAgCrdnEventPtr InputTime;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;
    __declspec(property(get=GetSelectedFunction,put=PutSelectedFunction))
    _bstr_t SelectedFunction;
    __declspec(property(get=GetInheritDimensionFromInput,put=PutInheritDimensionFromInput))
    VARIANT_BOOL InheritDimensionFromInput;
    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    VARIANT_BOOL GetUseScalar ( );
    void PutUseScalar (
        VARIANT_BOOL pRetVal );
    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventPtr GetInputTime ( );
    void PutInputTime (
        struct IAgCrdnEvent * ppRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double GetC ( );
    void PutC (
        double pRetVal );
    double GetD ( );
    void PutD (
        double pRetVal );
    SAFEARRAY * GetCoefficients ( );
    void PutCoefficients (
        SAFEARRAY * ppRetVal );
    _bstr_t GetSelectedFunction ( );
    void PutSelectedFunction (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFunctions ( );
    VARIANT_BOOL GetInheritDimensionFromInput ( );
    void PutInheritDimensionFromInput (
        VARIANT_BOOL pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );
    _bstr_t GetOutputUnit ( );
    void PutOutputUnit (
        _bstr_t pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScalar (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScalar (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputTime (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputTime (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_D (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_D (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coefficients (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Coefficients (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedFunction (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedFunction (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFunctions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InheritDimensionFromInput (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InheritDimensionFromInput (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputUnit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputUnit (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("914d41a1-343e-4f5a-836f-74f1ccd97e0a"))
_IAgCrdnCalcScalarFunction2Var : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetX,put=PutX))
    IAgCrdnCalcScalarPtr X;
    __declspec(property(get=GetUnitX,put=PutUnitX))
    _bstr_t UnitX;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetY,put=PutY))
    IAgCrdnCalcScalarPtr Y;
    __declspec(property(get=GetUnitY,put=PutUnitY))
    _bstr_t UnitY;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetC,put=PutC))
    double C;
    __declspec(property(get=GetOutputDimensionInheritance,put=PutOutputDimensionInheritance))
    enum AgECrdnDimensionInheritance OutputDimensionInheritance;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;
    __declspec(property(get=GetAvailableFunctions))
    SAFEARRAY * AvailableFunctions;
    __declspec(property(get=GetSelectedFunction,put=PutSelectedFunction))
    _bstr_t SelectedFunction;
    __declspec(property(get=GetOutputUnit,put=PutOutputUnit))
    _bstr_t OutputUnit;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnCalcScalarPtr GetX ( );
    void PutX (
        struct IAgCrdnCalcScalar * ppRetVal );
    _bstr_t GetUnitX ( );
    void PutUnitX (
        _bstr_t pRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    IAgCrdnCalcScalarPtr GetY ( );
    void PutY (
        struct IAgCrdnCalcScalar * ppRetVal );
    _bstr_t GetUnitY ( );
    void PutUnitY (
        _bstr_t pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double GetC ( );
    void PutC (
        double pRetVal );
    enum AgECrdnDimensionInheritance GetOutputDimensionInheritance ( );
    void PutOutputDimensionInheritance (
        enum AgECrdnDimensionInheritance pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFunctions ( );
    _bstr_t GetSelectedFunction ( );
    void PutSelectedFunction (
        _bstr_t pRetVal );
    _bstr_t GetOutputUnit ( );
    void PutOutputUnit (
        _bstr_t pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitX (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UnitX (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitY (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UnitY (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimensionInheritance (
        /*[out,retval]*/ enum AgECrdnDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimensionInheritance (
        /*[in]*/ enum AgECrdnDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFunctions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedFunction (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedFunction (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputUnit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputUnit (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("58f240ca-fcbe-435d-8337-cb6743b48979"))
_IAgCrdnCalcScalarIntegral : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    IAgCrdnInterpPtr Interpolation;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetIntegral,put=PutIntegral))
    IAgCrdnIntegralPtr Integral;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetIntegrationWindowType,put=PutIntegrationWindowType))
    enum AgECrdnIntegrationWindowType IntegrationWindowType;
    __declspec(property(get=GetComputeAsAverage,put=PutComputeAsAverage))
    VARIANT_BOOL ComputeAsAverage;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetStartOffset,put=PutStartOffset))
    double StartOffset;
    __declspec(property(get=GetStopOffset,put=PutStopOffset))
    double StopOffset;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetKeepConstantOutsideTimeLimits,put=PutKeepConstantOutsideTimeLimits))
    VARIANT_BOOL KeepConstantOutsideTimeLimits;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    VARIANT_BOOL GetComputeAsAverage ( );
    void PutComputeAsAverage (
        VARIANT_BOOL pRetVal );
    enum AgECrdnIntegrationWindowType GetIntegrationWindowType ( );
    void PutIntegrationWindowType (
        enum AgECrdnIntegrationWindowType pRetVal );
    double GetStartOffset ( );
    void PutStartOffset (
        double pRetVal );
    double GetStopOffset ( );
    void PutStopOffset (
        double pRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnInterpPtr GetInterpolation ( );
    void PutInterpolation (
        struct IAgCrdnInterp * ppRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnIntegralPtr GetIntegral ( );
    void PutIntegral (
        struct IAgCrdnIntegral * ppRetVal );
    VARIANT_BOOL GetKeepConstantOutsideTimeLimits ( );
    void PutKeepConstantOutsideTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT SetOffsets (
        double StartOffset,
        double StopOffset );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeAsAverage (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ComputeAsAverage (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntegrationWindowType (
        /*[out,retval]*/ enum AgECrdnIntegrationWindowType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntegrationWindowType (
        /*[in]*/ enum AgECrdnIntegrationWindowType pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ struct IAgCrdnInterp * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolation (
        /*[in]*/ struct IAgCrdnInterp * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Integral (
        /*[out,retval]*/ struct IAgCrdnIntegral * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Integral (
        /*[in]*/ struct IAgCrdnIntegral * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_KeepConstantOutsideTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_KeepConstantOutsideTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffsets (
        /*[in]*/ double StartOffset,
        /*[in]*/ double StopOffset ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("cdba106f-8103-4aeb-ac20-a4621fc6a8dd"))
_IAgCrdnCalcScalarPlugin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("7b27e927-748d-4ac8-831e-61e29e955bab"))
_IAgCrdnCalcScalarSurfaceDistanceBetweenPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;
    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetPoint1,put=PutPoint1))
    IAgCrdnPointPtr Point1;
    __declspec(property(get=GetPoint2,put=PutPoint2))
    IAgCrdnPointPtr Point2;
    __declspec(property(get=GetSurfaceCentralBody,put=PutSurfaceCentralBody))
    _bstr_t SurfaceCentralBody;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnPointPtr GetPoint1 ( );
    void PutPoint1 (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetPoint2 ( );
    void PutPoint2 (
        struct IAgCrdnPoint * ppRetVal );
    _bstr_t GetSurfaceCentralBody ( );
    void PutSurfaceCentralBody (
        _bstr_t pRetVal );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point1 (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point1 (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point2 (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point2 (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceCentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceCentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("41073fa5-9719-424f-8679-074966bb5e56"))
_IAgCrdnCalcScalarVectorMagnitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnCalcScalarType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetInputVector,put=PutInputVector))
    IAgCrdnVectorPtr InputVector;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetUnitOfMeasure))
    _bstr_t UnitOfMeasure;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnCalcScalarType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    SAFEARRAY * QuickEvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnVectorPtr GetInputVector ( );
    void PutInputVector (
        struct IAgCrdnVector * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    _bstr_t GetUnitOfMeasure ( );
    HRESULT Rename (
        _bstr_t NewName );
    SAFEARRAY * QuickEvaluateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateWithRateArray (
        SAFEARRAY * * Times );
    SAFEARRAY * QuickEvaluateEventArray (
        struct IAgCrdnEventArray * RefArray );
    SAFEARRAY * QuickEvaluateWithRateEventArray (
        struct IAgCrdnEventArray * RefArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnCalcScalarType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UnitOfMeasure (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateArray (
        /*[in]*/ SAFEARRAY * * Times,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuickEvaluateWithRateEventArray (
        /*[in]*/ struct IAgCrdnEventArray * RefArray,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("bd54d9da-fed8-461c-b558-c8c958d07e73"))
_IAgCrdnCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnConditionType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b853cfc2-f21a-44c4-a332-bd6b442142e2"))
_IAgCrdnConditionCombined : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCombineOperation,put=PutCombineOperation))
    enum AgECrdnConditionCombinedOperationType CombineOperation;
    __declspec(property(get=GetConditionCount))
    int ConditionCount;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnConditionType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    enum AgECrdnConditionCombinedOperationType GetCombineOperation ( );
    void PutCombineOperation (
        enum AgECrdnConditionCombinedOperationType pRetVal );
    int GetConditionCount ( );
    SAFEARRAY * GetAllConditions ( );
    HRESULT SetAllConditions (
        SAFEARRAY * * Conditions );
    IAgCrdnConditionPtr GetCondition (
        int Pos );
    HRESULT SetCondition (
        struct IAgCrdnCondition * Ref,
        int Pos );
    HRESULT RemoveCondition (
        int Pos );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );
    HRESULT AddCondition (
        struct IAgCrdnCondition * Ref );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CombineOperation (
        /*[out,retval]*/ enum AgECrdnConditionCombinedOperationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CombineOperation (
        /*[in]*/ enum AgECrdnConditionCombinedOperationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionCount (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllConditions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllConditions (
        /*[in]*/ SAFEARRAY * * Conditions ) = 0;
      virtual HRESULT __stdcall raw_GetCondition (
        /*[in]*/ int Pos,
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCondition (
        /*[in]*/ struct IAgCrdnCondition * Ref,
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall raw_RemoveCondition (
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_AddCondition (
        /*[in]*/ struct IAgCrdnCondition * Ref ) = 0;
};

struct __declspec(uuid("afd205bc-c0ce-4179-9405-c0a5d82d86aa"))
_IAgCrdnConditionScalarBounds : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScalar,put=PutScalar))
    IAgCrdnCalcScalarPtr Scalar;
    __declspec(property(get=GetOperation,put=PutOperation))
    enum AgECrdnConditionThresholdOption Operation;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnConditionType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionType GetType ( );
    IAgCrdnEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnCalcScalarPtr GetScalar ( );
    void PutScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    enum AgECrdnConditionThresholdOption GetOperation ( );
    void PutOperation (
        enum AgECrdnConditionThresholdOption pRetVal );
    STKUtil::IAgQuantityPtr GetMinimum ( );
    HRESULT SetMinimum (
        struct STKUtil::IAgQuantity * Value );
    STKUtil::IAgQuantityPtr GetMaximum ( );
    HRESULT SetMaximum (
        struct STKUtil::IAgQuantity * Value );
    HRESULT Set (
        struct STKUtil::IAgQuantity * Min,
        struct STKUtil::IAgQuantity * Max );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Operation (
        /*[out,retval]*/ enum AgECrdnConditionThresholdOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Operation (
        /*[in]*/ enum AgECrdnConditionThresholdOption pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMinimum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMinimum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_GetMaximum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaximum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ struct STKUtil::IAgQuantity * Min,
        /*[in]*/ struct STKUtil::IAgQuantity * Max ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("aa0903d2-653f-4476-ab53-a8cfad6548d2"))
_IAgCrdnConditionSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnConditionSetType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionSetType GetType ( );
    IAgCrdnConditionSetEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnConditionSetEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnConditionSetEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnConditionSetEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fcbc85a4-335e-4daf-a9d0-a43126adcef2"))
_IAgCrdnConditionSetScalarThresholds : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnConditionSetType Type;
    __declspec(property(get=GetScalar,put=PutScalar))
    IAgCrdnCalcScalarPtr Scalar;
    __declspec(property(get=GetThresholds))
    SAFEARRAY * Thresholds;
    __declspec(property(get=GetThresholdLabels))
    SAFEARRAY * ThresholdLabels;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetIncludeAboveHighestThreshold,put=PutIncludeAboveHighestThreshold))
    VARIANT_BOOL IncludeAboveHighestThreshold;
    __declspec(property(get=GetIncludeBelowLowestThreshold,put=PutIncludeBelowLowestThreshold))
    VARIANT_BOOL IncludeBelowLowestThreshold;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionSetType GetType ( );
    IAgCrdnConditionSetEvaluateResultPtr Evaluate (
        const _variant_t & Epoch );
    IAgCrdnConditionSetEvaluateWithRateResultPtr EvaluateWithRate (
        const _variant_t & Epoch );
    IAgCrdnCalcScalarPtr GetScalar ( );
    void PutScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    SAFEARRAY * GetThresholds ( );
    SAFEARRAY * GetThresholdLabels ( );
    VARIANT_BOOL GetIncludeAboveHighestThreshold ( );
    void PutIncludeAboveHighestThreshold (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIncludeBelowLowestThreshold ( );
    void PutIncludeBelowLowestThreshold (
        VARIANT_BOOL pRetVal );
    HRESULT SetThresholdsAndLabels (
        SAFEARRAY * * Thresholds,
        SAFEARRAY * * ThresholdLabels );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnConditionSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnConditionSetEvaluateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnConditionSetEvaluateWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Thresholds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ThresholdLabels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeAboveHighestThreshold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeAboveHighestThreshold (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeBelowLowestThreshold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeBelowLowestThreshold (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetThresholdsAndLabels (
        /*[in]*/ SAFEARRAY * * Thresholds,
        /*[in]*/ SAFEARRAY * * ThresholdLabels ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("525393f6-aa73-48cc-b2e6-6fe874b8a68c"))
_IAgCrdnConverge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("da99cc65-f15d-46b8-8431-d9bd4eec2855"))
_IAgCrdnConvergeBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSense,put=PutSense))
    enum AgECrdnThreshConvergeSense Sense;
    __declspec(property(get=GetTimeTolerance,put=PutTimeTolerance))
    double TimeTolerance;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnThreshConvergeSense GetSense ( );
    void PutSense (
        enum AgECrdnThreshConvergeSense pRetVal );
    double GetTimeTolerance ( );
    void PutTimeTolerance (
        double pRetVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pRetVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sense (
        /*[out,retval]*/ enum AgECrdnThreshConvergeSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sense (
        /*[in]*/ enum AgECrdnThreshConvergeSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("02571950-2396-4596-b35f-0aef51b02aab"))
_IAgCrdnDerivative : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a387e6a5-acbe-4d35-b38e-3ae7de45aa16"))
_IAgCrdnDerivativeBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeStep ( );
    void PutTimeStep (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("e280dce3-df5f-4e53-914c-2c4a883b326d"))
_IAgCrdnEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("5675a754-f8c4-4515-ad6f-4cbd96363652"))
_IAgCrdnEventArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("4b63989e-c9b7-4c65-ab13-2051aa109dab"))
_IAgCrdnEventArrayConditionCrossings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSatisfactionCrossing,put=PutSatisfactionCrossing))
    enum AgECrdnSatisfactionCrossing SatisfactionCrossing;
    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    enum AgECrdnSatisfactionCrossing GetSatisfactionCrossing ( );
    void PutSatisfactionCrossing (
        enum AgECrdnSatisfactionCrossing pRetVal );
    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SatisfactionCrossing (
        /*[out,retval]*/ enum AgECrdnSatisfactionCrossing * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SatisfactionCrossing (
        /*[in]*/ enum AgECrdnSatisfactionCrossing pRetVal ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b9fd61a7-d2eb-4f44-acdc-ff8738a9b8d6"))
_IAgCrdnEventArrayExtrema : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;
    __declspec(property(get=GetExtremumType,put=PutExtremumType))
    enum AgECrdnExtremumConstants ExtremumType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    IAgCrdnCalcScalarPtr Calculation;
    __declspec(property(get=GetIsGlobal,put=PutIsGlobal))
    VARIANT_BOOL IsGlobal;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    enum AgECrdnExtremumConstants GetExtremumType ( );
    void PutExtremumType (
        enum AgECrdnExtremumConstants pRetVal );
    VARIANT_BOOL GetIsGlobal ( );
    void PutIsGlobal (
        VARIANT_BOOL pRetVal );
    IAgCrdnCalcScalarPtr GetCalculation ( );
    void PutCalculation (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtremumType (
        /*[out,retval]*/ enum AgECrdnExtremumConstants * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtremumType (
        /*[in]*/ enum AgECrdnExtremumConstants pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsGlobal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsGlobal (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("5d9a771f-480d-485e-b4ec-d4f331891639"))
_IAgCrdnEventArrayFiltered : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginalTimeArray,put=PutOriginalTimeArray))
    IAgCrdnEventArrayPtr OriginalTimeArray;
    __declspec(property(get=GetFilterType,put=PutFilterType))
    enum AgECrdnEventArrayFilterType FilterType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetIncludeIntervalStopTimes,put=PutIncludeIntervalStopTimes))
    VARIANT_BOOL IncludeIntervalStopTimes;
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    IAgCrdnEventArrayPtr GetOriginalTimeArray ( );
    void PutOriginalTimeArray (
        struct IAgCrdnEventArray * ppRetVal );
    enum AgECrdnEventArrayFilterType GetFilterType ( );
    void PutFilterType (
        enum AgECrdnEventArrayFilterType pRetVal );
    int GetCount ( );
    void PutCount (
        int pRetVal );
    double GetStep ( );
    void PutStep (
        double pRetVal );
    VARIANT_BOOL GetIncludeIntervalStopTimes ( );
    void PutIncludeIntervalStopTimes (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalTimeArray (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalTimeArray (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum AgECrdnEventArrayFilterType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FilterType (
        /*[in]*/ enum AgECrdnEventArrayFilterType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeIntervalStopTimes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeIntervalStopTimes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("cde53017-4ce4-4d36-b54e-e5ce42af6f28"))
_IAgCrdnEventArrayFixedStep : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetBoundingIntervalList,put=PutBoundingIntervalList))
    IAgCrdnEventIntervalListPtr BoundingIntervalList;
    __declspec(property(get=GetSamplingTimeStep,put=PutSamplingTimeStep))
    double SamplingTimeStep;
    __declspec(property(get=GetIncludeIntervalEdges,put=PutIncludeIntervalEdges))
    VARIANT_BOOL IncludeIntervalEdges;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetReferenceType,put=PutReferenceType))
    enum AgECrdnSampledReferenceTime ReferenceType;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    IAgCrdnEventIntervalListPtr GetBoundingIntervalList ( );
    void PutBoundingIntervalList (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetSamplingTimeStep ( );
    void PutSamplingTimeStep (
        double pRetVal );
    VARIANT_BOOL GetIncludeIntervalEdges ( );
    void PutIncludeIntervalEdges (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSampledReferenceTime GetReferenceType ( );
    void PutReferenceType (
        enum AgECrdnSampledReferenceTime pRetVal );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingIntervalList (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingIntervalList (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SamplingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeIntervalEdges (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeIntervalEdges (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceType (
        /*[out,retval]*/ enum AgECrdnSampledReferenceTime * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceType (
        /*[in]*/ enum AgECrdnSampledReferenceTime pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("7e78db73-bb4e-4ee8-94c3-1eb905201e26"))
_IAgCrdnEventArrayFixedTimes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArrayTimes))
    SAFEARRAY * ArrayTimes;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    SAFEARRAY * GetArrayTimes ( );
    HRESULT SetArrayTimes (
        SAFEARRAY * * Times );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayTimes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetArrayTimes (
        /*[in]*/ SAFEARRAY * * Times ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("03ff21a3-5901-49d2-a456-c46e31190b37"))
_IAgCrdnEventArrayMerged : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeArrayA,put=PutTimeArrayA))
    IAgCrdnEventArrayPtr TimeArrayA;
    __declspec(property(get=GetTimeArrayB,put=PutTimeArrayB))
    IAgCrdnEventArrayPtr TimeArrayB;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    IAgCrdnEventArrayPtr GetTimeArrayA ( );
    void PutTimeArrayA (
        struct IAgCrdnEventArray * ppRetVal );
    IAgCrdnEventArrayPtr GetTimeArrayB ( );
    void PutTimeArrayB (
        struct IAgCrdnEventArray * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeArrayA (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeArrayA (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeArrayB (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeArrayB (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("91fabb8a-8825-4062-a543-91be12d08d05"))
_IAgCrdnEventArraySignaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;
    __declspec(property(get=GetOriginalTimeArray,put=PutOriginalTimeArray))
    IAgCrdnEventArrayPtr OriginalTimeArray;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    IAgCrdnEventArrayPtr GetOriginalTimeArray ( );
    void PutOriginalTimeArray (
        struct IAgCrdnEventArray * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalTimeArray (
        /*[out,retval]*/ struct IAgCrdnEventArray * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalTimeArray (
        /*[in]*/ struct IAgCrdnEventArray * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("90da99da-d56e-48a6-a5d8-c5efc0f946d4"))
_IAgCrdnEventArrayStartStopTimes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetStartStopOption,put=PutStartStopOption))
    enum AgECrdnStartStopOption StartStopOption;
    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventArrayType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventArrayType GetType ( );
    IAgCrdnFindTimesResultPtr FindTimes ( );
    enum AgECrdnStartStopOption GetStartStopOption ( );
    void PutStartStopOption (
        enum AgECrdnStartStopOption pRetVal );
    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventArrayType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindTimes (
        /*[out,retval]*/ struct IAgCrdnFindTimesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartStopOption (
        /*[out,retval]*/ enum AgECrdnStartStopOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartStopOption (
        /*[in]*/ enum AgECrdnStartStopOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a446d8f3-4d1d-4025-ac82-9c4625c1c9e9"))
_IAgCrdnEventEpoch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f53e912f-53bc-4afe-b0f1-569e8f52331a"))
_IAgCrdnEventExtremum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtremumType,put=PutExtremumType))
    enum AgECrdnExtremumConstants ExtremumType;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    IAgCrdnCalcScalarPtr Calculation;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    enum AgECrdnExtremumConstants GetExtremumType ( );
    void PutExtremumType (
        enum AgECrdnExtremumConstants pRetVal );
    IAgCrdnCalcScalarPtr GetCalculation ( );
    void PutCalculation (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtremumType (
        /*[out,retval]*/ enum AgECrdnExtremumConstants * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtremumType (
        /*[in]*/ enum AgECrdnExtremumConstants pRetVal ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("8310b06a-6f21-4d10-bdf5-0affc153e7b2"))
_IAgCrdnEventInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("c4c30b96-2547-40d4-b903-2104c1b5ad47"))
_IAgCrdnEventIntervalBetweenTimeInstants : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetStartTimeInstant,put=PutStartTimeInstant))
    IAgCrdnEventPtr StartTimeInstant;
    __declspec(property(get=GetStopTimeInstant,put=PutStopTimeInstant))
    IAgCrdnEventPtr StopTimeInstant;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventPtr GetStartTimeInstant ( );
    void PutStartTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnEventPtr GetStopTimeInstant ( );
    void PutStopTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_StartTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_StopTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("24094317-6dbe-4718-a35a-d7c30ea951fa"))
_IAgCrdnEventIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalCollectionType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalCollectionType GetType ( );
    SAFEARRAY * GetLabels ( );
    IAgCrdnIntervalsVectorResultPtr FindIntervalCollection ( );
    IAgCrdnEventIntervalCollectionOccurredResultPtr Occurred (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalCollectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervalCollection (
        /*[out,retval]*/ struct IAgCrdnIntervalsVectorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionOccurredResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("96b1b03b-7949-4a38-a9d6-7839fb7ff943"))
_IAgCrdnEventIntervalCollectionCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetConditionSet,put=PutConditionSet))
    IAgCrdnConditionSetPtr ConditionSet;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalCollectionType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalCollectionType GetType ( );
    SAFEARRAY * GetLabels ( );
    IAgCrdnIntervalsVectorResultPtr FindIntervalCollection ( );
    IAgCrdnEventIntervalCollectionOccurredResultPtr Occurred (
        const _variant_t & Epoch );
    IAgCrdnConditionSetPtr GetConditionSet ( );
    void PutConditionSet (
        struct IAgCrdnConditionSet * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalCollectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervalCollection (
        /*[out,retval]*/ struct IAgCrdnIntervalsVectorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionOccurredResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionSet (
        /*[out,retval]*/ struct IAgCrdnConditionSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ConditionSet (
        /*[in]*/ struct IAgCrdnConditionSet * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("4fed7bc5-a624-4bd0-874b-708a36cfa60e"))
_IAgCrdnEventIntervalCollectionLighting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetLocation,put=PutLocation))
    IAgCrdnPointPtr Location;
    __declspec(property(get=GetEclipsingBodies,put=PutEclipsingBodies))
    SAFEARRAY * EclipsingBodies;
    __declspec(property(get=GetUseObjectEclipsingBodies,put=PutUseObjectEclipsingBodies))
    VARIANT_BOOL UseObjectEclipsingBodies;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalCollectionType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalCollectionType GetType ( );
    SAFEARRAY * GetLabels ( );
    IAgCrdnIntervalsVectorResultPtr FindIntervalCollection ( );
    IAgCrdnEventIntervalCollectionOccurredResultPtr Occurred (
        const _variant_t & Epoch );
    IAgCrdnPointPtr GetLocation ( );
    void PutLocation (
        struct IAgCrdnPoint * ppRetVal );
    SAFEARRAY * GetEclipsingBodies ( );
    void PutEclipsingBodies (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetUseObjectEclipsingBodies ( );
    void PutUseObjectEclipsingBodies (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalCollectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervalCollection (
        /*[out,retval]*/ struct IAgCrdnIntervalsVectorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionOccurredResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EclipsingBodies (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseObjectEclipsingBodies (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseObjectEclipsingBodies (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("8b2e52a3-0417-4ea8-94ed-847986a0032a"))
_IAgCrdnEventIntervalCollectionSignaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetOriginalCollection,put=PutOriginalCollection))
    IAgCrdnEventIntervalCollectionPtr OriginalCollection;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalCollectionType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalCollectionType GetType ( );
    SAFEARRAY * GetLabels ( );
    IAgCrdnIntervalsVectorResultPtr FindIntervalCollection ( );
    IAgCrdnEventIntervalCollectionOccurredResultPtr Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalCollectionPtr GetOriginalCollection ( );
    void PutOriginalCollection (
        struct IAgCrdnEventIntervalCollection * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalCollectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervalCollection (
        /*[out,retval]*/ struct IAgCrdnIntervalsVectorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionOccurredResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalCollection (
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalCollection (
        /*[in]*/ struct IAgCrdnEventIntervalCollection * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b650978b-229b-49a0-9f40-bd54103d61aa"))
_IAgCrdnEventIntervalFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    HRESULT SetInterval (
        const _variant_t & StartEpoch,
        const _variant_t & StopEpoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetInterval (
        /*[in]*/ VARIANT StartEpoch,
        /*[in]*/ VARIANT StopEpoch ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9739b28e-e67e-4995-9383-d89f53a57d92"))
_IAgCrdnEventIntervalFixedDuration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetStartOffset,put=PutStartOffset))
    double StartOffset;
    __declspec(property(get=GetStopOffset,put=PutStopOffset))
    double StopOffset;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    double GetStartOffset ( );
    void PutStartOffset (
        double pRetVal );
    double GetStopOffset ( );
    void PutStopOffset (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("17ffb697-50ca-418f-b6fd-2c6855d1d1cd"))
_IAgCrdnEventIntervalFromIntervalList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;
    __declspec(property(get=GetIntervalSelection,put=PutIntervalSelection))
    enum AgECrdnIntervalSelection IntervalSelection;
    __declspec(property(get=GetIntervalNumber,put=PutIntervalNumber))
    int IntervalNumber;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnIntervalSelection GetIntervalSelection ( );
    void PutIntervalSelection (
        enum AgECrdnIntervalSelection pRetVal );
    int GetIntervalNumber ( );
    void PutIntervalNumber (
        int pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalSelection (
        /*[out,retval]*/ enum AgECrdnIntervalSelection * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalSelection (
        /*[in]*/ enum AgECrdnIntervalSelection pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalNumber (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalNumber (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a0b50b60-b42e-4346-90a2-12d06f348a94"))
_IAgCrdnEventIntervalList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d53464df-6d97-47c6-b455-85443047a6a1"))
_IAgCrdnEventIntervalListCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetSaveDataOption,put=PutSaveDataOption))
    enum AgECrdnSaveDataOption SaveDataOption;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;
    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSaveDataOption GetSaveDataOption ( );
    void PutSaveDataOption (
        enum AgECrdnSaveDataOption pRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveDataOption (
        /*[out,retval]*/ enum AgECrdnSaveDataOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveDataOption (
        /*[in]*/ enum AgECrdnSaveDataOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("82c7f754-e2d9-4f84-a56a-d75d100ae3c4"))
_IAgCrdnEventIntervalListFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    HRESULT Reload ( );
    IAgCrdnEventIntervalResultPtr GetFileSpan ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_GetFileSpan (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a0b46faf-046d-4ae4-a38d-d9c3320de936"))
_IAgCrdnEventIntervalListFiltered : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilterFactory))
    IAgCrdnPruneFilterFactoryPtr FilterFactory;
    __declspec(property(get=GetFilter,put=PutFilter))
    IAgCrdnPruneFilterPtr Filter;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetOriginalIntervals,put=PutOriginalIntervals))
    IAgCrdnEventIntervalListPtr OriginalIntervals;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalListPtr GetOriginalIntervals ( );
    void PutOriginalIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    IAgCrdnPruneFilterFactoryPtr GetFilterFactory ( );
    IAgCrdnPruneFilterPtr GetFilter ( );
    void PutFilter (
        struct IAgCrdnPruneFilter * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FilterFactory (
        /*[out,retval]*/ struct IAgCrdnPruneFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ struct IAgCrdnPruneFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ struct IAgCrdnPruneFilter * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d62fb700-753f-4c2a-8740-6b577262cfce"))
_IAgCrdnEventIntervalListFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    SAFEARRAY * GetIntervals ( );
    HRESULT SetIntervals (
        SAFEARRAY * * Intervals );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetIntervals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetIntervals (
        /*[in]*/ SAFEARRAY * * Intervals ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("1f335b30-06db-4c63-b278-70034b4cc93c"))
_IAgCrdnEventIntervalListMerged : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMergeOperation,put=PutMergeOperation))
    enum AgECrdnEventListMergeOperation MergeOperation;
    __declspec(property(get=GetIntervalListOrIntervalA))
    IAgCrdnPtr IntervalListOrIntervalA;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetIntervalListOrIntervalB))
    IAgCrdnPtr IntervalListOrIntervalB;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnPtr GetIntervalListOrIntervalA ( );
    IAgCrdnPtr GetIntervalListOrIntervalB ( );
    enum AgECrdnEventListMergeOperation GetMergeOperation ( );
    void PutMergeOperation (
        enum AgECrdnEventListMergeOperation pRetVal );
    HRESULT SetIntervalListA (
        struct IAgCrdnEventIntervalList * RefIntervals );
    HRESULT SetIntervalA (
        struct IAgCrdnEventInterval * RefIntervals );
    HRESULT SetIntervalListB (
        struct IAgCrdnEventIntervalList * RefIntervals );
    HRESULT SetIntervalB (
        struct IAgCrdnEventInterval * RefIntervals );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalListOrIntervalA (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalListOrIntervalB (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MergeOperation (
        /*[out,retval]*/ enum AgECrdnEventListMergeOperation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MergeOperation (
        /*[in]*/ enum AgECrdnEventListMergeOperation pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalListA (
        /*[in]*/ struct IAgCrdnEventIntervalList * RefIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalA (
        /*[in]*/ struct IAgCrdnEventInterval * RefIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalListB (
        /*[in]*/ struct IAgCrdnEventIntervalList * RefIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalB (
        /*[in]*/ struct IAgCrdnEventInterval * RefIntervals ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("441c52e1-6c82-46f2-ad95-548a13422b8c"))
_IAgCrdnEventIntervalListScaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetOriginalIntervals,put=PutOriginalIntervals))
    IAgCrdnEventIntervalListPtr OriginalIntervals;
    __declspec(property(get=GetAbsoluteIncrement,put=PutAbsoluteIncrement))
    double AbsoluteIncrement;
    __declspec(property(get=GetRelativeIncrement,put=PutRelativeIncrement))
    double RelativeIncrement;
    __declspec(property(get=GetUseAbsoluteIncrement,put=PutUseAbsoluteIncrement))
    VARIANT_BOOL UseAbsoluteIncrement;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalListPtr GetOriginalIntervals ( );
    void PutOriginalIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetAbsoluteIncrement ( );
    void PutAbsoluteIncrement (
        double pRetVal );
    double GetRelativeIncrement ( );
    void PutRelativeIncrement (
        double pRetVal );
    VARIANT_BOOL GetUseAbsoluteIncrement ( );
    void PutUseAbsoluteIncrement (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAbsoluteIncrement (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAbsoluteIncrement (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("e0d5b2d0-4fe7-4348-9d0d-19eb7430d9ac"))
_IAgCrdnEventIntervalListSignaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetOriginalIntervals,put=PutOriginalIntervals))
    IAgCrdnEventIntervalListPtr OriginalIntervals;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalListPtr GetOriginalIntervals ( );
    void PutOriginalIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fdcb0697-040f-4eb6-8ab4-dc3602f4eb6c"))
_IAgCrdnEventIntervalListTimeOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalListType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;
    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetDescriptions))
    SAFEARRAY * Descriptions;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalListType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDescriptions ( );
    IAgCrdnIntervalListResultPtr FindIntervals ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetTimeOffset ( );
    void PutTimeOffset (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalListType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Descriptions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindIntervals (
        /*[out,retval]*/ struct IAgCrdnIntervalListResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9052a14f-7df9-4093-a9c2-6022dd7cb0ea"))
_IAgCrdnEventIntervalScaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetRelativeIncrement,put=PutRelativeIncrement))
    double RelativeIncrement;
    __declspec(property(get=GetUseAbsoluteIncrement,put=PutUseAbsoluteIncrement))
    VARIANT_BOOL UseAbsoluteIncrement;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetOriginalInterval,put=PutOriginalInterval))
    IAgCrdnEventIntervalPtr OriginalInterval;
    __declspec(property(get=GetAbsoluteIncrement,put=PutAbsoluteIncrement))
    double AbsoluteIncrement;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalPtr GetOriginalInterval ( );
    void PutOriginalInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    double GetAbsoluteIncrement ( );
    void PutAbsoluteIncrement (
        double pRetVal );
    double GetRelativeIncrement ( );
    void PutRelativeIncrement (
        double pRetVal );
    VARIANT_BOOL GetUseAbsoluteIncrement ( );
    void PutUseAbsoluteIncrement (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeIncrement (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeIncrement (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAbsoluteIncrement (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAbsoluteIncrement (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("404ba9c6-75df-453b-8d1c-62253f555b09"))
_IAgCrdnEventIntervalSignaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetOriginalInterval,put=PutOriginalInterval))
    IAgCrdnEventIntervalPtr OriginalInterval;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalPtr GetOriginalInterval ( );
    void PutOriginalInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9ad522cd-2270-4da3-a523-3b2a5c7af214"))
_IAgCrdnEventIntervalSmartInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetState,put=PutState))
    enum AgECrdnSmartIntervalState State;
    __declspec(property(get=GetDurationAsString,put=PutDurationAsString))
    _bstr_t DurationAsString;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferenceInterval))
    IAgCrdnEventIntervalPtr ReferenceInterval;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalPtr GetReferenceInterval ( );
    _bstr_t GetDurationAsString ( );
    void PutDurationAsString (
        _bstr_t pRetVal );
    enum AgECrdnSmartIntervalState GetState ( );
    void PutState (
        enum AgECrdnSmartIntervalState pRetVal );
    HRESULT SetImplicitInterval (
        struct IAgCrdnEventInterval * EventInterval );
    _variant_t FindStartTime ( );
    _variant_t FindStopTime ( );
    IAgCrdnEventSmartEpochPtr GetStartEpoch ( );
    HRESULT SetStartEpoch (
        struct IAgCrdnEventSmartEpoch * StartEpoch );
    IAgCrdnEventSmartEpochPtr GetStopEpoch ( );
    HRESULT SetStopEpoch (
        struct IAgCrdnEventSmartEpoch * StopEpoch );
    HRESULT SetExplicitInterval (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT SetStartAndStopEpochs (
        struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        struct IAgCrdnEventSmartEpoch * RefStopEpoch );
    HRESULT SetStartAndStopTimes (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    HRESULT SetStartEpochAndDuration (
        struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        _bstr_t DurationStr );
    HRESULT SetStartTimeAndDuration (
        const _variant_t & Epoch,
        _bstr_t DurationStr );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationAsString (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum AgECrdnSmartIntervalState * pRetVal ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum AgECrdnSmartIntervalState pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetImplicitInterval (
        /*[in]*/ struct IAgCrdnEventInterval * EventInterval ) = 0;
      virtual HRESULT __stdcall raw_FindStartTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindStopTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetStartEpoch (
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetStartEpoch (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * StartEpoch ) = 0;
      virtual HRESULT __stdcall raw_GetStopEpoch (
        /*[out,retval]*/ struct IAgCrdnEventSmartEpoch * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetStopEpoch (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * StopEpoch ) = 0;
      virtual HRESULT __stdcall raw_SetExplicitInterval (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_SetStartAndStopEpochs (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        /*[in]*/ struct IAgCrdnEventSmartEpoch * RefStopEpoch ) = 0;
      virtual HRESULT __stdcall raw_SetStartAndStopTimes (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall raw_SetStartEpochAndDuration (
        /*[in]*/ struct IAgCrdnEventSmartEpoch * RefStartEpoch,
        /*[in]*/ BSTR DurationStr ) = 0;
      virtual HRESULT __stdcall raw_SetStartTimeAndDuration (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ BSTR DurationStr ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("5a59dc0e-9491-425f-a0f2-6927df3dc84b"))
_IAgCrdnEventIntervalTimeOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceInterval,put=PutReferenceInterval))
    IAgCrdnEventIntervalPtr ReferenceInterval;
    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;
    __declspec(property(get=GetType))
    enum AgECrdnEventIntervalType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabelStartDescription))
    _bstr_t LabelStartDescription;
    __declspec(property(get=GetLabelStopDescription))
    _bstr_t LabelStopDescription;
    __declspec(property(get=GetLabelStart))
    _bstr_t LabelStart;
    __declspec(property(get=GetLabelStop))
    _bstr_t LabelStop;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventIntervalType GetType ( );
    _bstr_t GetLabelStartDescription ( );
    _bstr_t GetLabelStopDescription ( );
    _bstr_t GetLabelStart ( );
    _bstr_t GetLabelStop ( );
    IAgCrdnEventIntervalResultPtr FindInterval ( );
    VARIANT_BOOL Occurred (
        const _variant_t & Epoch );
    IAgCrdnEventIntervalPtr GetReferenceInterval ( );
    void PutReferenceInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    double GetTimeOffset ( );
    void PutTimeOffset (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventIntervalType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStartDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStopDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStart (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelStop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInterval (
        /*[out,retval]*/ struct IAgCrdnEventIntervalResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Occurred (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("359189be-a12e-47cd-86ba-2fa73a0c86f7"))
_IAgCrdnEventSignaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetOriginalTimeInstant,put=PutOriginalTimeInstant))
    IAgCrdnEventPtr OriginalTimeInstant;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetBaseClockLocation,put=PutBaseClockLocation))
    IAgCrdnPointPtr BaseClockLocation;
    __declspec(property(get=GetTargetClockLocation,put=PutTargetClockLocation))
    IAgCrdnPointPtr TargetClockLocation;
    __declspec(property(get=GetSignalDelay,put=PutSignalDelay))
    IAgCrdnSignalDelayPtr SignalDelay;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    IAgCrdnEventPtr GetOriginalTimeInstant ( );
    void PutOriginalTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnPointPtr GetBaseClockLocation ( );
    void PutBaseClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnPointPtr GetTargetClockLocation ( );
    void PutTargetClockLocation (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSignalDelayPtr GetSignalDelay ( );
    void PutSignalDelay (
        struct IAgCrdnSignalDelay * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginalTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OriginalTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetClockLocation (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetClockLocation (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalDelay (
        /*[out,retval]*/ struct IAgCrdnSignalDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalDelay (
        /*[in]*/ struct IAgCrdnSignalDelay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("54a7c574-9048-4a4a-80da-265d8c0dd183"))
_IAgCrdnEventSmartEpoch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetState,put=PutState))
    enum AgECrdnSmartEpochState State;
    __declspec(property(get=GetReferenceEvent))
    IAgCrdnEventPtr ReferenceEvent;
    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetTimeInstant))
    _variant_t TimeInstant;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    _variant_t GetTimeInstant ( );
    IAgCrdnEventPtr GetReferenceEvent ( );
    enum AgECrdnSmartEpochState GetState ( );
    void PutState (
        enum AgECrdnSmartEpochState pRetVal );
    HRESULT SetExplicitTime (
        const _variant_t & Epoch );
    HRESULT SetImplicitTime (
        struct IAgCrdnEvent * EventEpoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeInstant (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceEvent (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum AgECrdnSmartEpochState * pRetVal ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum AgECrdnSmartEpochState pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetExplicitTime (
        /*[in]*/ VARIANT Epoch ) = 0;
      virtual HRESULT __stdcall raw_SetImplicitTime (
        /*[in]*/ struct IAgCrdnEvent * EventEpoch ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("bf63d2e2-d488-4a92-867d-8330356eb761"))
_IAgCrdnEventStartStopTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetUseStart,put=PutUseStart))
    VARIANT_BOOL UseStart;
    __declspec(property(get=GetReferenceEventInterval,put=PutReferenceEventInterval))
    IAgCrdnEventIntervalPtr ReferenceEventInterval;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    VARIANT_BOOL GetUseStart ( );
    void PutUseStart (
        VARIANT_BOOL pRetVal );
    IAgCrdnEventIntervalPtr GetReferenceEventInterval ( );
    void PutReferenceEventInterval (
        struct IAgCrdnEventInterval * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseStart (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseStart (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceEventInterval (
        /*[out,retval]*/ struct IAgCrdnEventInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceEventInterval (
        /*[in]*/ struct IAgCrdnEventInterval * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("5d345587-5249-4f7e-9454-bbc2193fcea0"))
_IAgCrdnEventTimeOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetTimeOffset2,put=PutTimeOffset2))
    double TimeOffset2;
    __declspec(property(get=GetToday))
    IAgCrdnEventPtr Today;
    __declspec(property(get=GetTomorrow))
    IAgCrdnEventPtr Tomorrow;
    __declspec(property(get=GetNoonToday))
    IAgCrdnEventPtr NoonToday;
    __declspec(property(get=GetNoonTomorrow))
    IAgCrdnEventPtr NoonTomorrow;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetType))
    enum AgECrdnEventType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnEventType GetType ( );
    IAgCrdnEventPtr GetToday ( );
    IAgCrdnEventPtr GetTomorrow ( );
    IAgCrdnEventPtr GetNoonToday ( );
    IAgCrdnEventPtr GetNoonTomorrow ( );
    IAgCrdnEventFindOccurrenceResultPtr FindOccurrence ( );
    VARIANT_BOOL OccursBefore (
        const _variant_t & Epoch );
    double GetTimeOffset ( );
    void PutTimeOffset (
        double pRetVal );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );
    double GetTimeOffset2 ( );
    void PutTimeOffset2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnEventType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonToday (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NoonTomorrow (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindOccurrence (
        /*[out,retval]*/ struct IAgCrdnEventFindOccurrenceResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_OccursBefore (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall get_TimeOffset2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d8c8531d-86b9-41e9-ad8b-a802597561c4"))
_IAgCrdnIntegral : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a6cfab24-dde3-4e97-b9e5-910b05448ff5"))
_IAgCrdnIntegralBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType,put=PutType))
    enum AgECrdnIntegralType Type;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    double Tolerance;
    __declspec(property(get=GetMaximumIterations,put=PutMaximumIterations))
    int MaximumIterations;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnIntegralType GetType ( );
    void PutType (
        enum AgECrdnIntegralType pRetVal );
    double GetTolerance ( );
    void PutTolerance (
        double pRetVal );
    int GetMaximumIterations ( );
    void PutMaximumIterations (
        int pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnIntegralType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AgECrdnIntegralType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumIterations (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumIterations (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("ae8023ba-43a2-428f-8426-0ee67ac03277"))
_IAgCrdnInterp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("8ecf9751-7619-4987-830c-b8ae19616f61"))
_IAgCrdnInterpBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType,put=PutType))
    enum AgECrdnInterpolatorType Type;
    __declspec(property(get=GetOrder,put=PutOrder))
    int Order;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnInterpolatorType GetType ( );
    void PutType (
        enum AgECrdnInterpolatorType pRetVal );
    int GetOrder ( );
    void PutOrder (
        int pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnInterpolatorType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AgECrdnInterpolatorType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("355cf23f-56e2-4006-b1dd-6f582eb38794"))
_IAgCrdnParameterSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;
    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("0ffd0699-8757-4575-b2f8-5dfa7903bd48"))
_IAgCrdnParameterSetAttitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;
    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetAxes,put=PutAxes))
    IAgCrdnAxesPtr Axes;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );
    IAgCrdnAxesPtr GetAxes ( );
    void PutAxes (
        struct IAgCrdnAxes * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("49f4df9f-ab69-4008-8f37-b25b44953021"))
_IAgCrdnParameterSetGroundTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocation,put=PutLocation))
    IAgCrdnPointPtr Location;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;
    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );
    IAgCrdnPointPtr GetLocation ( );
    void PutLocation (
        struct IAgCrdnPoint * ppRetVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fb3136c2-87dc-49b0-a8cb-dea63e9789e7"))
_IAgCrdnParameterSetOrbit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetGravitationalParameter,put=PutGravitationalParameter))
    double GravitationalParameter;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetOrbitingPoint,put=PutOrbitingPoint))
    IAgCrdnPointPtr OrbitingPoint;
    __declspec(property(get=GetUseCentralBodyInertial,put=PutUseCentralBodyInertial))
    VARIANT_BOOL UseCentralBodyInertial;
    __declspec(property(get=GetUseCentralBodyGravitationalParameter,put=PutUseCentralBodyGravitationalParameter))
    VARIANT_BOOL UseCentralBodyGravitationalParameter;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;
    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );
    IAgCrdnPointPtr GetOrbitingPoint ( );
    void PutOrbitingPoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    double GetGravitationalParameter ( );
    void PutGravitationalParameter (
        double pRetVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    VARIANT_BOOL GetUseCentralBodyGravitationalParameter ( );
    void PutUseCentralBodyGravitationalParameter (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseCentralBodyInertial ( );
    void PutUseCentralBodyInertial (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OrbitingPoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_OrbitingPoint (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GravitationalParameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GravitationalParameter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCentralBodyGravitationalParameter (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentralBodyGravitationalParameter (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCentralBodyInertial (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentralBodyInertial (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("3ba59fc3-4d4d-4a0f-bf98-7fccb4fd161e"))
_IAgCrdnParameterSetTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    IAgCrdnPointPtr Point;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;
    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );
    IAgCrdnPointPtr GetPoint ( );
    void PutPoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("02c0ff90-1cd1-4a47-8648-39979b0b20b3"))
_IAgCrdnParameterSetVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVector,put=PutVector))
    IAgCrdnVectorPtr Vector;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetLabels))
    SAFEARRAY * Labels;
    __declspec(property(get=GetScalarNames))
    SAFEARRAY * ScalarNames;
    __declspec(property(get=GetType))
    enum AgECrdnParameterSetType Type;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDimensions))
    SAFEARRAY * Dimensions;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnParameterSetType GetType ( );
    SAFEARRAY * GetLabels ( );
    SAFEARRAY * GetDimensions ( );
    SAFEARRAY * GetScalarNames ( );
    SAFEARRAY * Calculate (
        const _variant_t & Epoch );
    SAFEARRAY * CalculateWithDerivative (
        const _variant_t & Epoch );
    IAgCrdnVectorPtr GetVector ( );
    void PutVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnParameterSetType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateWithDerivative (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Vector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fed414bf-7e31-4911-bcd3-7b8a524d6c91"))
_IAgCrdnSampling : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("2a3c7fc3-dcf4-465c-a918-8e5ca4d8c63b"))
_IAgCrdnSamplingBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSamplingMethod,put=PutSamplingMethod))
    IAgCrdnSamplingMethodPtr SamplingMethod;
    __declspec(property(get=GetMethodFactory))
    IAgCrdnSamplingMethodFactoryPtr MethodFactory;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSamplingMethodPtr GetSamplingMethod ( );
    void PutSamplingMethod (
        struct IAgCrdnSamplingMethod * ppRetVal );
    IAgCrdnSamplingMethodFactoryPtr GetMethodFactory ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SamplingMethod (
        /*[out,retval]*/ struct IAgCrdnSamplingMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingMethod (
        /*[in]*/ struct IAgCrdnSamplingMethod * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MethodFactory (
        /*[out,retval]*/ struct IAgCrdnSamplingMethodFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f3dfb221-7723-4bc3-aed6-f5df59d39ded"))
_IAgCrdnSignalDelay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b08e7e7b-8e78-48ff-9143-3e5d1df8b832"))
_IAgCrdnSignalDelayBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSignalPathReferenceSystem,put=PutSignalPathReferenceSystem))
    enum AgECrdnSignalPathReferenceSystem SignalPathReferenceSystem;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetSpeedOption,put=PutSpeedOption))
    enum AgECrdnSpeedOptions SpeedOption;
    __declspec(property(get=GetTransferSpeed,put=PutTransferSpeed))
    double TransferSpeed;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSignalPathReferenceSystem GetSignalPathReferenceSystem ( );
    void PutSignalPathReferenceSystem (
        enum AgECrdnSignalPathReferenceSystem pRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    enum AgECrdnSpeedOptions GetSpeedOption ( );
    void PutSpeedOption (
        enum AgECrdnSpeedOptions pRetVal );
    double GetTransferSpeed ( );
    void PutTransferSpeed (
        double pRetVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SignalPathReferenceSystem (
        /*[out,retval]*/ enum AgECrdnSignalPathReferenceSystem * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalPathReferenceSystem (
        /*[in]*/ enum AgECrdnSignalPathReferenceSystem pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpeedOption (
        /*[out,retval]*/ enum AgECrdnSpeedOptions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpeedOption (
        /*[in]*/ enum AgECrdnSpeedOptions pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransferSpeed (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransferSpeed (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9a9baf58-07f3-41da-9a8a-9e1f3ace5e7b"))
_IAgCrdnVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("cbd3a811-206c-4c3f-a202-028f6d0ad56d"))
_IAgCrdnVolumeCombined : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetCombineOperation,put=PutCombineOperation))
    enum AgECrdnVolumeCombinedOperationType CombineOperation;
    __declspec(property(get=GetConditionCount))
    int ConditionCount;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumeCombinedOperationType GetCombineOperation ( );
    void PutCombineOperation (
        enum AgECrdnVolumeCombinedOperationType pRetVal );
    int GetConditionCount ( );
    SAFEARRAY * GetAllConditions ( );
    HRESULT SetAllConditions (
        SAFEARRAY * * Conditions );
    HRESULT SetCondition (
        struct IAgCrdnVolume * Ref,
        int Pos );
    IAgCrdnVolumePtr GetCondition (
        int Pos );
    HRESULT RemoveCondition (
        int Pos );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CombineOperation (
        /*[out,retval]*/ enum AgECrdnVolumeCombinedOperationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CombineOperation (
        /*[in]*/ enum AgECrdnVolumeCombinedOperationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionCount (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllConditions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllConditions (
        /*[in]*/ SAFEARRAY * * Conditions ) = 0;
      virtual HRESULT __stdcall raw_SetCondition (
        /*[in]*/ struct IAgCrdnVolume * Ref,
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall raw_GetCondition (
        /*[in]*/ int Pos,
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveCondition (
        /*[in]*/ int Pos ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("dc911540-53d2-43d2-9459-70937c58e4ff"))
_IAgCrdnVolumeFromCalc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperation,put=PutOperation))
    enum AgECrdnConditionThresholdOption Operation;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnConditionThresholdOption GetOperation ( );
    void PutOperation (
        enum AgECrdnConditionThresholdOption pRetVal );
    STKUtil::IAgQuantityPtr GetMinimum ( );
    HRESULT SetMinimum (
        struct STKUtil::IAgQuantity * Value );
    STKUtil::IAgQuantityPtr GetMaximum ( );
    HRESULT SetMaximum (
        struct STKUtil::IAgQuantity * Value );
    HRESULT Set (
        struct STKUtil::IAgQuantity * Min,
        struct STKUtil::IAgQuantity * Max );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Operation (
        /*[out,retval]*/ enum AgECrdnConditionThresholdOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Operation (
        /*[in]*/ enum AgECrdnConditionThresholdOption pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMinimum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMinimum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_GetMaximum (
        /*[out,retval]*/ struct STKUtil::IAgQuantity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaximum (
        /*[in]*/ struct STKUtil::IAgQuantity * Value ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ struct STKUtil::IAgQuantity * Min,
        /*[in]*/ struct STKUtil::IAgQuantity * Max ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d9a9b8bd-a993-4eed-bd8a-87acaf3787ab"))
_IAgCrdnVolumeFromCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetCondition,put=PutCondition))
    IAgCrdnConditionPtr Condition;
    __declspec(property(get=GetUseCustomTimeLimits,put=PutUseCustomTimeLimits))
    VARIANT_BOOL UseCustomTimeLimits;
    __declspec(property(get=GetCustomTimeLimits,put=PutCustomTimeLimits))
    IAgCrdnEventIntervalListPtr CustomTimeLimits;
    __declspec(property(get=GetSampling,put=PutSampling))
    IAgCrdnSamplingPtr Sampling;
    __declspec(property(get=GetConvergence,put=PutConvergence))
    IAgCrdnConvergePtr Convergence;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnConditionPtr GetCondition ( );
    void PutCondition (
        struct IAgCrdnCondition * ppRetVal );
    VARIANT_BOOL GetUseCustomTimeLimits ( );
    void PutUseCustomTimeLimits (
        VARIANT_BOOL pRetVal );
    IAgCrdnEventIntervalListPtr GetCustomTimeLimits ( );
    void PutCustomTimeLimits (
        struct IAgCrdnEventIntervalList * ppRetVal );
    IAgCrdnSamplingPtr GetSampling ( );
    void PutSampling (
        struct IAgCrdnSampling * ppRetVal );
    IAgCrdnConvergePtr GetConvergence ( );
    void PutConvergence (
        struct IAgCrdnConverge * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ struct IAgCrdnCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ struct IAgCrdnCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomTimeLimits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomTimeLimits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomTimeLimits (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_CustomTimeLimits (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgCrdnSampling * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ struct IAgCrdnSampling * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Convergence (
        /*[out,retval]*/ struct IAgCrdnConverge * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Convergence (
        /*[in]*/ struct IAgCrdnConverge * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9c11661a-9022-4fad-999d-9cb9ae78829e"))
_IAgCrdnVolumeFromGrid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEdgeType,put=PutEdgeType))
    enum AgECrdnVolumeFromGridEdgeType EdgeType;
    __declspec(property(get=GetVolumeGrid,put=PutVolumeGrid))
    IAgCrdnVolumeGridPtr VolumeGrid;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumeFromGridEdgeType GetEdgeType ( );
    void PutEdgeType (
        enum AgECrdnVolumeFromGridEdgeType pRetVal );
    IAgCrdnVolumeGridPtr GetVolumeGrid ( );
    void PutVolumeGrid (
        struct IAgCrdnVolumeGrid * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EdgeType (
        /*[out,retval]*/ enum AgECrdnVolumeFromGridEdgeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EdgeType (
        /*[in]*/ enum AgECrdnVolumeFromGridEdgeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeGrid (
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VolumeGrid (
        /*[in]*/ struct IAgCrdnVolumeGrid * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("520120b0-55ab-4980-8c05-5d6ced7c5b71"))
_IAgCrdnVolumeFromTimeSatisfaction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeSatisfaction,put=PutTimeSatisfaction))
    IAgCrdnEventIntervalListPtr TimeSatisfaction;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnEventIntervalListPtr GetTimeSatisfaction ( );
    void PutTimeSatisfaction (
        struct IAgCrdnEventIntervalList * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeSatisfaction (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeSatisfaction (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a1b09deb-3317-4693-ae28-b4f3e075006e"))
_IAgCrdnVolumeGrid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("5cfb81ed-5057-45f0-9aae-448a9348c6f0"))
_IAgCrdnVolumeGridBearingAlt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceCentralBody,put=PutReferenceCentralBody))
    _bstr_t ReferenceCentralBody;
    __declspec(property(get=GetAlongBearingCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AlongBearingCoordinates;
    __declspec(property(get=GetCrossBearingCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr CrossBearingCoordinates;
    __declspec(property(get=GetAltitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AltitudeCoordinates;
    __declspec(property(get=GetAutoFitBounds,put=PutAutoFitBounds))
    VARIANT_BOOL AutoFitBounds;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetBearingAngle,put=PutBearingAngle))
    double BearingAngle;
    __declspec(property(get=GetReferenceLocation,put=PutReferenceLocation))
    SAFEARRAY * ReferenceLocation;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceCentralBody ( );
    void PutReferenceCentralBody (
        _bstr_t pRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetAlongBearingCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetCrossBearingCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetAltitudeCoordinates ( );
    VARIANT_BOOL GetAutoFitBounds ( );
    void PutAutoFitBounds (
        VARIANT_BOOL pRetVal );
    double GetBearingAngle ( );
    void PutBearingAngle (
        double pRetVal );
    SAFEARRAY * GetReferenceLocation ( );
    void PutReferenceLocation (
        SAFEARRAY * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceCentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceCentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlongBearingCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CrossBearingCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoFitBounds (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoFitBounds (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_BearingAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BearingAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceLocation (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceLocation (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9f90bc50-170c-4bbb-b584-9c5c0a06d9f3"))
_IAgCrdnVolumeGridCartesian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetXCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr XCoordinates;
    __declspec(property(get=GetYCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr YCoordinates;
    __declspec(property(get=GetZCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr ZCoordinates;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetXCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetYCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetZCoordinates ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ZCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("bd3ab594-49ac-4caa-a8f0-359855fce7a2"))
_IAgCrdnVolumeGridConstrained : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraint,put=PutConstraint))
    IAgCrdnVolumePtr Constraint;
    __declspec(property(get=GetReferenceGrid,put=PutReferenceGrid))
    IAgCrdnVolumeGridPtr ReferenceGrid;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVolumeGridPtr GetReferenceGrid ( );
    void PutReferenceGrid (
        struct IAgCrdnVolumeGrid * ppRetVal );
    IAgCrdnVolumePtr GetConstraint ( );
    void PutConstraint (
        struct IAgCrdnVolume * ppRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceGrid (
        /*[out,retval]*/ struct IAgCrdnVolumeGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceGrid (
        /*[in]*/ struct IAgCrdnVolumeGrid * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ struct IAgCrdnVolume * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("6cb2b2c8-9597-421f-b14e-4a34846a0ef9"))
_IAgCrdnVolumeGridCylindrical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetThetaCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr ThetaCoordinates;
    __declspec(property(get=GetRadiusCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr RadiusCoordinates;
    __declspec(property(get=GetHeightCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr HeightCoordinates;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetThetaCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetRadiusCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetHeightCoordinates ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ThetaCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f4254fed-d01a-431e-b491-6ddabee16d7f"))
_IAgCrdnVolumeGridLatLonAlt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceCentralBody,put=PutReferenceCentralBody))
    _bstr_t ReferenceCentralBody;
    __declspec(property(get=GetLatitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr LatitudeCoordinates;
    __declspec(property(get=GetLongitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr LongitudeCoordinates;
    __declspec(property(get=GetAltitudeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AltitudeCoordinates;
    __declspec(property(get=GetAutoFitBounds,put=PutAutoFitBounds))
    VARIANT_BOOL AutoFitBounds;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceCentralBody ( );
    void PutReferenceCentralBody (
        _bstr_t pRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetLatitudeCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetLongitudeCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetAltitudeCoordinates ( );
    VARIANT_BOOL GetAutoFitBounds ( );
    void PutAutoFitBounds (
        VARIANT_BOOL pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceCentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceCentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LatitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LongitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoFitBounds (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoFitBounds (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("bd75470f-6215-4ca0-8298-5405cced6666"))
_IAgCrdnVolumeGridSpherical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRangeCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr RangeCoordinates;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetAzimuthCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr AzimuthCoordinates;
    __declspec(property(get=GetElevationCoordinates))
    IAgCrdnGridCoordinateDefinitionPtr ElevationCoordinates;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnGridCoordinateDefinitionPtr GetAzimuthCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetElevationCoordinates ( );
    IAgCrdnGridCoordinateDefinitionPtr GetRangeCoordinates ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AzimuthCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ElevationCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RangeCoordinates (
        /*[out,retval]*/ struct IAgCrdnGridCoordinateDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a69cb73b-0f94-4307-855a-50893af14723"))
_IAgCrdnVolumeInview : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetConstraintObject,put=PutConstraintObject))
    _variant_t ConstraintObject;
    __declspec(property(get=GetLightTimeDelay))
    IAgCrdnLightTimeDelayPtr LightTimeDelay;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetConstraintObject ( );
    void PutConstraintObject (
        const _variant_t & pRetVal );
    IAgCrdnLightTimeDelayPtr GetLightTimeDelay ( );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintObject (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintObject (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightTimeDelay (
        /*[out,retval]*/ struct IAgCrdnLightTimeDelay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("55ab8542-1ade-47d2-a27c-d9661b5bd544"))
_IAgCrdnVolumeLighting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEclipsingBodies,put=PutEclipsingBodies))
    SAFEARRAY * EclipsingBodies;
    __declspec(property(get=GetUseObjectEclipsingBodies,put=PutUseObjectEclipsingBodies))
    VARIANT_BOOL UseObjectEclipsingBodies;
    __declspec(property(get=GetLightingConditions,put=PutLightingConditions))
    enum AgECrdnVolumeLightingConditionsType LightingConditions;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetEclipsingBodies ( );
    void PutEclipsingBodies (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetUseObjectEclipsingBodies ( );
    void PutUseObjectEclipsingBodies (
        VARIANT_BOOL pRetVal );
    enum AgECrdnVolumeLightingConditionsType GetLightingConditions ( );
    void PutLightingConditions (
        enum AgECrdnVolumeLightingConditionsType pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EclipsingBodies (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseObjectEclipsingBodies (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseObjectEclipsingBodies (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightingConditions (
        /*[out,retval]*/ enum AgECrdnVolumeLightingConditionsType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LightingConditions (
        /*[in]*/ enum AgECrdnVolumeLightingConditionsType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("0e20b24f-35c0-422a-a898-71ab55871ff6"))
_IAgCrdnVolumeOverTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartOffset,put=PutStartOffset))
    double StartOffset;
    __declspec(property(get=GetStopOffset,put=PutStopOffset))
    double StopOffset;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetDurationType,put=PutDurationType))
    enum AgECrdnVolumeOverTimeDurationType DurationType;
    __declspec(property(get=GetReferenceVolume,put=PutReferenceVolume))
    IAgCrdnVolumePtr ReferenceVolume;
    __declspec(property(get=GetReferenceIntervals,put=PutReferenceIntervals))
    IAgCrdnEventIntervalListPtr ReferenceIntervals;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVolumeOverTimeDurationType GetDurationType ( );
    void PutDurationType (
        enum AgECrdnVolumeOverTimeDurationType pRetVal );
    IAgCrdnVolumePtr GetReferenceVolume ( );
    void PutReferenceVolume (
        struct IAgCrdnVolume * ppRetVal );
    IAgCrdnEventIntervalListPtr GetReferenceIntervals ( );
    void PutReferenceIntervals (
        struct IAgCrdnEventIntervalList * ppRetVal );
    double GetStartOffset ( );
    void PutStartOffset (
        double pRetVal );
    double GetStopOffset ( );
    void PutStopOffset (
        double pRetVal );
    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DurationType (
        /*[out,retval]*/ enum AgECrdnVolumeOverTimeDurationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DurationType (
        /*[in]*/ enum AgECrdnVolumeOverTimeDurationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVolume (
        /*[out,retval]*/ struct IAgCrdnVolume * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVolume (
        /*[in]*/ struct IAgCrdnVolume * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalList * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceIntervals (
        /*[in]*/ struct IAgCrdnEventIntervalList * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("7ebe6812-2259-46c9-8452-1c82e965f1e2"))
IAgCrdnEventIntervalListMerged : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIntervalListOrIntervalA))
    IAgCrdnPtr IntervalListOrIntervalA;
    __declspec(property(get=GetIntervalListOrIntervalB))
    IAgCrdnPtr IntervalListOrIntervalB;
    __declspec(property(get=GetMergeOperation,put=PutMergeOperation))
    enum AgECrdnEventListMergeOperation MergeOperation;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPtr GetIntervalListOrIntervalA ( );
    IAgCrdnPtr GetIntervalListOrIntervalB ( );
    enum AgECrdnEventListMergeOperation GetMergeOperation ( );
    void PutMergeOperation (
        enum AgECrdnEventListMergeOperation pRetVal );
    HRESULT SetIntervalListA (
        struct IAgCrdnEventIntervalList * RefIntervals );
    HRESULT SetIntervalA (
        struct IAgCrdnEventInterval * RefIntervals );
    HRESULT SetIntervalListB (
        struct IAgCrdnEventIntervalList * RefIntervals );
    HRESULT SetIntervalB (
        struct IAgCrdnEventInterval * RefIntervals );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IntervalListOrIntervalA (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalListOrIntervalB (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MergeOperation (
        /*[out,retval]*/ enum AgECrdnEventListMergeOperation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MergeOperation (
        /*[in]*/ enum AgECrdnEventListMergeOperation pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalListA (
        /*[in]*/ struct IAgCrdnEventIntervalList * RefIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalA (
        /*[in]*/ struct IAgCrdnEventInterval * RefIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalListB (
        /*[in]*/ struct IAgCrdnEventIntervalList * RefIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetIntervalB (
        /*[in]*/ struct IAgCrdnEventInterval * RefIntervals ) = 0;
};

struct __declspec(uuid("a5c99f29-a41c-48c4-bbd5-6567600827ca"))
IAgCrdnInstance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInstancePath))
    _bstr_t InstancePath;
    __declspec(property(get=GetTemplate))
    IAgCrdnPtr Template;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetInstancePath ( );
    IAgCrdnPtr GetTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InstancePath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
};

struct __declspec(uuid("ec6fbbaf-4c41-4599-bd45-56433e380770"))
IAgCrdnProvider : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVectors))
    IAgCrdnVectorGroupPtr Vectors;
    __declspec(property(get=GetPoints))
    IAgCrdnPointGroupPtr Points;
    __declspec(property(get=GetAngles))
    IAgCrdnAngleGroupPtr Angles;
    __declspec(property(get=GetAxes))
    IAgCrdnAxesGroupPtr Axes;
    __declspec(property(get=GetPlanes))
    IAgCrdnPlaneGroupPtr Planes;
    __declspec(property(get=GetSystems))
    IAgCrdnSystemGroupPtr Systems;
    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;
    __declspec(property(get=GetEvents))
    IAgCrdnEventGroupPtr Events;
    __declspec(property(get=GetEventIntervals))
    IAgCrdnEventIntervalGroupPtr EventIntervals;
    __declspec(property(get=GetCalcScalars))
    IAgCrdnCalcScalarGroupPtr CalcScalars;
    __declspec(property(get=GetEventArrays))
    IAgCrdnEventArrayGroupPtr EventArrays;
    __declspec(property(get=GetEventIntervalLists))
    IAgCrdnEventIntervalListGroupPtr EventIntervalLists;
    __declspec(property(get=GetEventIntervalCollections))
    IAgCrdnEventIntervalCollectionGroupPtr EventIntervalCollections;
    __declspec(property(get=GetParameterSets))
    IAgCrdnParameterSetGroupPtr ParameterSets;
    __declspec(property(get=GetConditions))
    IAgCrdnConditionGroupPtr Conditions;
    __declspec(property(get=GetConditionSets))
    IAgCrdnConditionSetGroupPtr ConditionSets;
    __declspec(property(get=GetVolumeGrids))
    IAgCrdnVolumeGridGroupPtr VolumeGrids;
    __declspec(property(get=GetVolumes))
    IAgCrdnVolumeGroupPtr Volumes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorGroupPtr GetVectors ( );
    IAgCrdnPointGroupPtr GetPoints ( );
    IAgCrdnAngleGroupPtr GetAngles ( );
    IAgCrdnAxesGroupPtr GetAxes ( );
    IAgCrdnPlaneGroupPtr GetPlanes ( );
    IAgCrdnSystemGroupPtr GetSystems ( );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );
    IAgCrdnEventGroupPtr GetEvents ( );
    IAgCrdnEventIntervalGroupPtr GetEventIntervals ( );
    IAgCrdnCalcScalarGroupPtr GetCalcScalars ( );
    IAgCrdnEventArrayGroupPtr GetEventArrays ( );
    IAgCrdnEventIntervalListGroupPtr GetEventIntervalLists ( );
    IAgCrdnEventIntervalCollectionGroupPtr GetEventIntervalCollections ( );
    IAgCrdnParameterSetGroupPtr GetParameterSets ( );
    IAgCrdnConditionGroupPtr GetConditions ( );
    VARIANT_BOOL Supports (
        enum AgECrdnKind Feature );
    IAgCrdnConditionSetGroupPtr GetConditionSets ( );
    IAgCrdnCollectionPtr Import (
        _bstr_t Filename );
    IAgCrdnVolumeGridGroupPtr GetVolumeGrids ( );
    IAgCrdnVolumeGroupPtr GetVolumes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vectors (
        /*[out,retval]*/ struct IAgCrdnVectorGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgCrdnPointGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Angles (
        /*[out,retval]*/ struct IAgCrdnAngleGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Planes (
        /*[out,retval]*/ struct IAgCrdnPlaneGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Systems (
        /*[out,retval]*/ struct IAgCrdnSystemGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Events (
        /*[out,retval]*/ struct IAgCrdnEventGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CalcScalars (
        /*[out,retval]*/ struct IAgCrdnCalcScalarGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventArrays (
        /*[out,retval]*/ struct IAgCrdnEventArrayGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventIntervalLists (
        /*[out,retval]*/ struct IAgCrdnEventIntervalListGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventIntervalCollections (
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ParameterSets (
        /*[out,retval]*/ struct IAgCrdnParameterSetGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Conditions (
        /*[out,retval]*/ struct IAgCrdnConditionGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Supports (
        /*[in]*/ enum AgECrdnKind Feature,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionSets (
        /*[out,retval]*/ struct IAgCrdnConditionSetGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeGrids (
        /*[out,retval]*/ struct IAgCrdnVolumeGridGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Volumes (
        /*[out,retval]*/ struct IAgCrdnVolumeGroup * * ppRetVal ) = 0;
};

struct __declspec(uuid("75b84ca5-141f-4bc5-992a-6cbadae0d4ca"))
IAgCrdnRoot : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnProviderPtr GetTemplateProvider (
        _bstr_t ClassName );
    IAgCrdnProviderPtr GetProvider (
        _bstr_t InstPath );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetTemplateProvider (
        /*[in]*/ BSTR ClassName,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetProvider (
        /*[in]*/ BSTR InstPath,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("003e2010-2023-469d-b47a-39182a5bd1c6"))
_IAgCrdn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b7bb004a-1fdb-4ddf-a930-0a184f6c13a0"))
_IAgCrdnInstance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTemplate))
    VARIANT_BOOL IsTemplate;
    __declspec(property(get=GetInstancePath))
    _bstr_t InstancePath;
    __declspec(property(get=GetTemplate))
    IAgCrdnPtr Template;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTemplate ( );
    _bstr_t GetInstancePath ( );
    IAgCrdnPtr GetTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InstancePath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
};

struct __declspec(uuid("b19f264e-2a85-49ee-85db-8479953062e8"))
_IAgCrdnVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("58e677e0-5d18-4a9d-8ac9-aebbcd4ecdda"))
_IAgCrdnAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("ae4eb755-6735-4d43-b337-782b00c7ae6b"))
_IAgCrdnPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("5da0f216-cb0c-43f4-a428-be7c15e4f010"))
_IAgCrdnSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnSystemTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f667e946-2b2e-4ca8-8155-7b45882a1e33"))
_IAgCrdnAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("55e946b1-949b-4302-9d6b-e3931d850e90"))
_IAgCrdnPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("7cb19b07-7f9a-4c86-a50b-b02515e4b794"))
_IAgCrdnAxesAlignedAndConstrained : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignmentReferenceVector))
    IAgCrdnVectorRefToPtr AlignmentReferenceVector;
    __declspec(property(get=GetConstraintReferenceVector))
    IAgCrdnVectorRefToPtr ConstraintReferenceVector;
    __declspec(property(get=GetAlignmentDirection))
    STKUtil::IAgDirectionPtr AlignmentDirection;
    __declspec(property(get=GetConstraintDirection))
    STKUtil::IAgDirectionPtr ConstraintDirection;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetAlignmentReferenceVector ( );
    IAgCrdnVectorRefToPtr GetConstraintReferenceVector ( );
    STKUtil::IAgDirectionPtr GetAlignmentDirection ( );
    STKUtil::IAgDirectionPtr GetConstraintDirection ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("c4d90572-5305-4829-84f4-14f2254cf5ee"))
_IAgCrdnAxesAngularOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetRotationAngle))
    IAgCrdnAngleRefToPtr RotationAngle;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOffsetAngle,put=PutFixedOffsetAngle))
    double FixedOffsetAngle;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAngleRefToPtr GetRotationAngle ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    double GetFixedOffsetAngle ( );
    void PutFixedOffsetAngle (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOffsetAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FixedOffsetAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("c821ecc0-875e-4727-bf38-4336ee7b9632"))
_IAgCrdnAxesFixedAtEpoch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetSourceAxes))
    IAgCrdnAxesRefToPtr SourceAxes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnAxesRefToPtr GetSourceAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("e9f6fc78-4703-4055-a63a-81c773411661"))
_IAgCrdnAxesBPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetTrajectory ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("dd00eb00-6326-4346-ad8a-295692e0b1f3"))
_IAgCrdnAxesCustomScript : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("417843c4-43bb-4059-8117-0b1f422a88be"))
_IAgCrdnAxesAttitudeFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d60130b1-4028-4406-808c-2bf6f1b5f26b"))
_IAgCrdnAxesFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOrientation))
    STKUtil::IAgOrientationPtr FixedOrientation;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgOrientationPtr GetFixedOrientation ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("56f94105-d5d2-47b1-bd82-eeb3d7af65ea"))
_IAgCrdnAxesModelAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("debd1e7d-a56c-456e-aece-345f224bcd6a"))
_IAgCrdnAxesSpinning : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetInitialOffset,put=PutInitialOffset))
    double InitialOffset;
    __declspec(property(get=GetSpinRate,put=PutSpinRate))
    double SpinRate;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    double GetInitialOffset ( );
    void PutInitialOffset (
        double pRetVal );
    double GetSpinRate ( );
    void PutSpinRate (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitialOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpinRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("29f42195-2797-4e00-b6f8-4b1fc6db4b47"))
_IAgCrdnAxesOnSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a9c56b8c-cf59-42bb-b3a1-a51890b9cc97"))
_IAgCrdnAxesTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetTrajectoryPoint))
    IAgCrdnPointRefToPtr TrajectoryPoint;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetTrajectoryAxesType,put=PutTrajectoryAxesType))
    enum AgECrdnTrajectoryAxesType TrajectoryAxesType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetTrajectoryPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnTrajectoryAxesType GetTrajectoryAxesType ( );
    void PutTrajectoryAxesType (
        enum AgECrdnTrajectoryAxesType pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryAxesType (
        /*[out,retval]*/ enum AgECrdnTrajectoryAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TrajectoryAxesType (
        /*[in]*/ enum AgECrdnTrajectoryAxesType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("dda28b21-3bc9-476c-81aa-d2eead4d538d"))
_IAgCrdnAxesLagrangeLibration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetPrimaryCentralBody))
    IAgCrdnCentralBodyRefToPtr PrimaryCentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnCentralBodyRefToPtr GetPrimaryCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("000abb14-2b52-4717-b914-3879e5c65a1c"))
_IAgCrdnAxesAtTimeInstant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetSourceAxes,put=PutSourceAxes))
    IAgCrdnAxesPtr SourceAxes;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnAxesPtr GetSourceAxes ( );
    void PutSourceAxes (
        struct IAgCrdnAxes * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("216a1874-2604-4687-93b4-72d6e689d531"))
_IAgCrdnAxesPlugin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;
    __declspec(property(get=GetX))
    IAgCrdnVectorPtr X;
    __declspec(property(get=GetY))
    IAgCrdnVectorPtr Y;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetZ))
    IAgCrdnVectorPtr Z;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnVectorPtr GetX ( );
    IAgCrdnVectorPtr GetY ( );
    IAgCrdnVectorPtr GetZ ( );
    IAgCrdnAxesTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("6efe060e-6fc3-408b-a6b9-e3038fc3ab48"))
_IAgCrdnAngleBetweenVectors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("23911d72-9a02-4fd4-b839-5c7c1dba6cd0"))
_IAgCrdnAngleBetweenPlanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromPlane))
    IAgCrdnPlaneRefToPtr FromPlane;
    __declspec(property(get=GetToPlane))
    IAgCrdnPlaneRefToPtr ToPlane;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneRefToPtr GetFromPlane ( );
    IAgCrdnPlaneRefToPtr GetToPlane ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("e87904e6-b03e-4138-aa8e-0077456a6386"))
_IAgCrdnAngleDihedral : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;
    __declspec(property(get=GetPoleAbout))
    IAgCrdnVectorRefToPtr PoleAbout;
    __declspec(property(get=GetSignedAngle,put=PutSignedAngle))
    VARIANT_BOOL SignedAngle;
    __declspec(property(get=GetCounterClockwiseRotation,put=PutCounterClockwiseRotation))
    VARIANT_BOOL CounterClockwiseRotation;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );
    IAgCrdnVectorRefToPtr GetPoleAbout ( );
    VARIANT_BOOL GetCounterClockwiseRotation ( );
    void PutCounterClockwiseRotation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSignedAngle ( );
    void PutSignedAngle (
        VARIANT_BOOL pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PoleAbout (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterClockwiseRotation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CounterClockwiseRotation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignedAngle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignedAngle (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("649e692b-a14f-4bfe-b007-95b1389748bb"))
_IAgCrdnAngleRotation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromAxes))
    IAgCrdnAxesRefToPtr FromAxes;
    __declspec(property(get=GetToAxes))
    IAgCrdnAxesRefToPtr ToAxes;
    __declspec(property(get=GetReferenceDirection,put=PutReferenceDirection))
    enum AgECrdnDisplayAxisSelector ReferenceDirection;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetFromAxes ( );
    IAgCrdnAxesRefToPtr GetToAxes ( );
    enum AgECrdnDisplayAxisSelector GetReferenceDirection ( );
    void PutReferenceDirection (
        enum AgECrdnDisplayAxisSelector pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceDirection (
        /*[out,retval]*/ enum AgECrdnDisplayAxisSelector * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDirection (
        /*[in]*/ enum AgECrdnDisplayAxisSelector pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fdabe3bf-231d-4596-a11e-41b8376d5958"))
_IAgCrdnAngleToPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetSigned,put=PutSigned))
    enum AgECrdnSignedAngleType Signed;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    enum AgECrdnSignedAngleType GetSigned ( );
    void PutSigned (
        enum AgECrdnSignedAngleType pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Signed (
        /*[out,retval]*/ enum AgECrdnSignedAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Signed (
        /*[in]*/ enum AgECrdnSignedAngleType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9a2b7af4-8cf8-4b98-8211-41ddadc48b10"))
_IAgCrdnPlaneNormal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetNormalVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f898b607-c5ad-4e1e-823d-f56b50ea5a92"))
_IAgCrdnPlaneQuadrant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetQuadrant,put=PutQuadrant))
    enum AgECrdnQuadrantType Quadrant;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnQuadrantType GetQuadrant ( );
    void PutQuadrant (
        enum AgECrdnQuadrantType pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Quadrant (
        /*[out,retval]*/ enum AgECrdnQuadrantType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Quadrant (
        /*[in]*/ enum AgECrdnQuadrantType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d3407190-00ac-4c28-8174-7517f5338a53"))
_IAgCrdnPlaneTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPoint))
    IAgCrdnPointRefToPtr Point;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b225024e-8c5d-44b4-8efb-8caa4698a6a1"))
_IAgCrdnPlaneTriad : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPointA))
    IAgCrdnPointRefToPtr PointA;
    __declspec(property(get=GetPointB))
    IAgCrdnPointRefToPtr PointB;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetPointA ( );
    IAgCrdnPointRefToPtr GetPointB ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointA (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointB (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("8486e489-4cde-4766-ab28-b8f14006c584"))
_IAgCrdnPointBPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnPointBPlaneType PointType;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    IAgCrdnPointRefToPtr GetTrajectory ( );
    enum AgECrdnPointBPlaneType GetPointType ( );
    void PutPointType (
        enum AgECrdnPointBPlaneType pRetVal );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnPointBPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnPointBPlaneType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("eabe2be3-2a1f-46af-bac9-4eb9440494b9"))
_IAgCrdnPointFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("dd7be20c-0397-4529-8aaf-41f0391893b6"))
_IAgCrdnPointFixedInSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetReference))
    IAgCrdnSystemRefToPtr Reference;
    __declspec(property(get=GetFixedPoint))
    STKUtil::IAgPositionPtr FixedPoint;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnSystemRefToPtr GetReference ( );
    STKUtil::IAgPositionPtr GetFixedPoint ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedPoint (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("69755d0f-9c74-49ca-9dc4-776150b77ccc"))
_IAgCrdnPointGrazing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("30f950b7-6302-4537-b66a-4f95c0820110"))
_IAgCrdnPointGlint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetObserverPoint))
    IAgCrdnPointRefToPtr ObserverPoint;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPointRefToPtr GetObserverPoint ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObserverPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f9996e01-88d0-460a-9a5e-47d158fa1a88"))
_IAgCrdnPointCovarianceGrazing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetTargetName,put=PutTargetName))
    _bstr_t TargetName;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetProbability,put=PutProbability))
    double Probability;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUseProbability,put=PutUseProbability))
    VARIANT_BOOL UseProbability;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    _bstr_t GetTargetName ( );
    void PutTargetName (
        _bstr_t pRetVal );
    double GetDistance ( );
    void PutDistance (
        double pRetVal );
    double GetProbability ( );
    void PutProbability (
        double pRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetUseProbability ( );
    void PutUseProbability (
        VARIANT_BOOL pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Probability (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Probability (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseProbability (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseProbability (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("135c564a-06f1-4058-b576-8734c4f877ef"))
_IAgCrdnPointPlaneIntersection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    IAgCrdnPointRefToPtr GetOriginPoint ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("1274a4c8-ae18-409a-bce4-b2dd307cb5f1"))
_IAgCrdnPointOnSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetReferenceShape,put=PutReferenceShape))
    enum AgECrdnReferenceShapeType ReferenceShape;
    __declspec(property(get=GetSurfaceType,put=PutSurfaceType))
    enum AgECrdnSurfaceType SurfaceType;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnReferenceShapeType GetReferenceShape ( );
    void PutReferenceShape (
        enum AgECrdnReferenceShapeType pRetVal );
    enum AgECrdnSurfaceType GetSurfaceType ( );
    void PutSurfaceType (
        enum AgECrdnSurfaceType pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceShape (
        /*[out,retval]*/ enum AgECrdnReferenceShapeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceShape (
        /*[in]*/ enum AgECrdnReferenceShapeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceType (
        /*[out,retval]*/ enum AgECrdnSurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceType (
        /*[in]*/ enum AgECrdnSurfaceType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fc399d17-d4be-4420-8614-08033b0778e6"))
_IAgCrdnPointModelAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetUseScale,put=PutUseScale))
    VARIANT_BOOL UseScale;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );
    VARIANT_BOOL GetUseScale ( );
    void PutUseScale (
        VARIANT_BOOL pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScale (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("f6f48bd0-59ad-4e64-8075-7c75626deef0"))
_IAgCrdnPointPlaneProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("208c918b-7597-4b67-bea9-62e9b1a000a4"))
_IAgCrdnPointLagrangeLibration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fb55912d-ca4b-4ce0-ae53-f4927d9cb488"))
_IAgCrdnPointCentBodyIntersect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumRange,put=PutMinimumRange))
    double MinimumRange;
    __declspec(property(get=GetMaximumRange,put=PutMaximumRange))
    double MaximumRange;
    __declspec(property(get=GetUseMinimumRange,put=PutUseMinimumRange))
    VARIANT_BOOL UseMinimumRange;
    __declspec(property(get=GetUseMaximumRange,put=PutUseMaximumRange))
    VARIANT_BOOL UseMaximumRange;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetReferencePoint,put=PutReferencePoint))
    IAgCrdnPointPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    IAgCrdnVectorPtr DirectionVector;
    __declspec(property(get=GetIntersectionSurface,put=PutIntersectionSurface))
    enum AgECrdnIntersectionSurface IntersectionSurface;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetUseRangeConstraint,put=PutUseRangeConstraint))
    VARIANT_BOOL UseRangeConstraint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    IAgCrdnPointPtr GetReferencePoint ( );
    void PutReferencePoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnVectorPtr GetDirectionVector ( );
    void PutDirectionVector (
        struct IAgCrdnVector * ppRetVal );
    enum AgECrdnIntersectionSurface GetIntersectionSurface ( );
    void PutIntersectionSurface (
        enum AgECrdnIntersectionSurface pRetVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );
    VARIANT_BOOL GetUseRangeConstraint ( );
    void PutUseRangeConstraint (
        VARIANT_BOOL pRetVal );
    double GetMinimumRange ( );
    void PutMinimumRange (
        double pRetVal );
    double GetMaximumRange ( );
    void PutMaximumRange (
        double pRetVal );
    VARIANT_BOOL GetUseMinimumRange ( );
    void PutUseMinimumRange (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseMaximumRange ( );
    void PutUseMaximumRange (
        VARIANT_BOOL pRetVal );
    HRESULT SetRange (
        double Minimum,
        double Maximum );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferencePoint (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DirectionVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionSurface (
        /*[out,retval]*/ enum AgECrdnIntersectionSurface * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionSurface (
        /*[in]*/ enum AgECrdnIntersectionSurface pRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRangeConstraint (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseRangeConstraint (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumRange (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumRange (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumRange (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumRange (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMinimumRange (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMinimumRange (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMaximumRange (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMaximumRange (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRange (
        /*[in]*/ double Minimum,
        /*[in]*/ double Maximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("709d80ee-53a7-42b5-9dfb-f6ab61c6d0ea"))
_IAgCrdnPointAtTimeInstant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetSourcePoint,put=PutSourcePoint))
    IAgCrdnPointPtr SourcePoint;
    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnPointPtr GetSourcePoint ( );
    void PutSourcePoint (
        struct IAgCrdnPoint * ppRetVal );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourcePoint (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("1d4b6d94-3a8c-4452-a734-1ef27e4227c1"))
_IAgCrdnPointPlugin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("cd2db27c-415a-4cf4-a167-765d868357dd"))
_IAgCrdnPointCBFixedOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetReferenceShape,put=PutReferenceShape))
    enum AgECrdnReferenceShapeType ReferenceShape;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    enum AgECrdnReferenceShapeType GetReferenceShape ( );
    void PutReferenceShape (
        enum AgECrdnReferenceShapeType pRetVal );
    STKUtil::IAgPositionPtr GetPosition ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceShape (
        /*[out,retval]*/ enum AgECrdnReferenceShapeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceShape (
        /*[in]*/ enum AgECrdnReferenceShapeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("557242bf-e6cf-48d9-b317-51ff48ee417b"))
_IAgCrdnSystemAssembled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointRefToPtr GetOriginPoint ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnSystemTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("60ab961c-a38d-4ced-9bf2-4c31e658dd70"))
_IAgCrdnSystemOnSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetAzimuthAngle,put=PutAzimuthAngle))
    double AzimuthAngle;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;
    __declspec(property(get=GetPosition))
    IAgCrdnLLAPositionPtr Position;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    double GetAzimuthAngle ( );
    void PutAzimuthAngle (
        double pRetVal );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );
    IAgCrdnLLAPositionPtr GetPosition ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    IAgCrdnSystemTransformResultPtr Transform (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AzimuthAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AzimuthAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgCrdnLLAPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("7f599133-0304-491b-9526-c26145630ef7"))
_IAgCrdnVectorAngleRate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetAngle))
    IAgCrdnAngleRefToPtr Angle;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleRefToPtr GetAngle ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("fd6fcf7a-15b3-427e-a3d4-d109d3de01d4"))
_IAgCrdnVectorApoapsis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("702fda88-0a6b-445f-812a-34bf14d0eeb5"))
_IAgCrdnVectorFixedAtEpoch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetSourceVector))
    IAgCrdnVectorRefToPtr SourceVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    IAgCrdnVectorRefToPtr GetSourceVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("09fca0c7-8a28-4743-9895-6cd10fcde801"))
_IAgCrdnVectorAngularVelocity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetAxes))
    IAgCrdnAxesRefToPtr Axes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a548ccaf-99bc-4827-bc3c-2c29143221d8"))
_IAgCrdnVectorConing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMode,put=PutMode))
    enum AgECrdnSweepMode Mode;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetAboutVector))
    IAgCrdnVectorRefToPtr AboutVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetStartClockAngle,put=PutStartClockAngle))
    double StartClockAngle;
    __declspec(property(get=GetStopClockAngle,put=PutStopClockAngle))
    double StopClockAngle;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetStartEpoch,put=PutStartEpoch))
    _variant_t StartEpoch;
    __declspec(property(get=GetClockAngleRate,put=PutClockAngleRate))
    double ClockAngleRate;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetAboutVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetStartClockAngle ( );
    void PutStartClockAngle (
        double pRetVal );
    double GetStopClockAngle ( );
    void PutStopClockAngle (
        double pRetVal );
    _variant_t GetStartEpoch ( );
    void PutStartEpoch (
        const _variant_t & pRetVal );
    double GetClockAngleRate ( );
    void PutClockAngleRate (
        double pRetVal );
    enum AgECrdnSweepMode GetMode ( );
    void PutMode (
        enum AgECrdnSweepMode pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AboutVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartEpoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartEpoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum AgECrdnSweepMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum AgECrdnSweepMode pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("0bf50c55-802f-4cb2-a694-64c8b0ef8d96"))
_IAgCrdnVectorCross : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsNormalized,put=PutIsNormalized))
    VARIANT_BOOL IsNormalized;
    __declspec(property(get=GetDimension,put=PutDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetFrom))
    IAgCrdnVectorRefToPtr From;
    __declspec(property(get=GetTo))
    IAgCrdnVectorRefToPtr To;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetFrom ( );
    IAgCrdnVectorRefToPtr GetTo ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );
    VARIANT_BOOL GetIsNormalized ( );
    void PutIsNormalized (
        VARIANT_BOOL pRetVal );
    _bstr_t GetDimension ( );
    void PutDimension (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall get_IsNormalized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsNormalized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimension (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("95039913-eafe-4419-a2d0-207e99107a9c"))
_IAgCrdnVectorCustomScript : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetScriptFile,put=PutScriptFile))
    _bstr_t ScriptFile;
    __declspec(property(get=GetInitializationScriptFile,put=PutInitializationScriptFile))
    _bstr_t InitializationScriptFile;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetScriptFile ( );
    void PutScriptFile (
        _bstr_t pRetVal );
    _bstr_t GetInitializationScriptFile ( );
    void PutInitializationScriptFile (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitializationScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("c7fbf147-dd17-4bfb-8f51-8bce0756fdbc"))
_IAgCrdnVectorDerivative : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVector))
    IAgCrdnVectorRefToPtr Vector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d4a8a7fb-b868-4390-ae7f-60c988e21e57"))
_IAgCrdnVectorDisplacement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetOrigin))
    IAgCrdnPointRefToPtr Origin;
    __declspec(property(get=GetDestination))
    IAgCrdnPointRefToPtr Destination;
    __declspec(property(get=GetApparent,put=PutApparent))
    VARIANT_BOOL Apparent;
    __declspec(property(get=GetIgnoreAbberation,put=PutIgnoreAbberation))
    VARIANT_BOOL IgnoreAbberation;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPointRefToPtr GetOrigin ( );
    IAgCrdnPointRefToPtr GetDestination ( );
    VARIANT_BOOL GetApparent ( );
    void PutApparent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreAbberation ( );
    void PutIgnoreAbberation (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Apparent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Apparent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreAbberation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreAbberation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("4503fa69-bab2-4c17-abf0-eb75f4f4d090"))
_IAgCrdnVectorTwoPlanesIntersection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPlaneA))
    IAgCrdnPlaneRefToPtr PlaneA;
    __declspec(property(get=GetPlaneB))
    IAgCrdnPlaneRefToPtr PlaneB;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneRefToPtr GetPlaneA ( );
    IAgCrdnPlaneRefToPtr GetPlaneB ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneA (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneB (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("d089211f-4ee3-45b9-a03d-c538deb43fb6"))
_IAgCrdnVectorModelAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("8d749a58-1d7d-4b63-816d-b5d6ccdba402"))
_IAgCrdnVectorProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSource))
    IAgCrdnVectorRefToPtr Source;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetSource ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("ea0b683f-4ff4-475b-a951-dec753c9716f"))
_IAgCrdnVectorScaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsNormalized,put=PutIsNormalized))
    VARIANT_BOOL IsNormalized;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsNormalized ( );
    void PutIsNormalized (
        VARIANT_BOOL pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNormalized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsNormalized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("05230012-e9ea-4aa1-b34b-afa12420c787"))
_IAgCrdnVectorEccentricity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("e66e9194-6578-42fc-8485-cd757bfc3b3f"))
_IAgCrdnVectorFixedInAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetDirection))
    STKUtil::IAgDirectionPtr Direction;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgDirectionPtr GetDirection ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("6b17f4b8-ccf4-485f-84fc-d0f4ff563e06"))
_IAgCrdnVectorLineOfNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("572ed90d-ba21-4ad4-9377-c982216dd2a1"))
_IAgCrdnVectorOrbitAngularMomentum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("a8b6c5c7-5f4f-4c30-ab64-e009a4a6d17b"))
_IAgCrdnVectorOrbitNormal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("08756195-06fb-488b-ac72-ce0c5cd31787"))
_IAgCrdnVectorPeriapsis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("15ccd2b4-131e-4742-bcd7-3fb7f6894eb2"))
_IAgCrdnVectorReflection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncomingVector))
    IAgCrdnVectorRefToPtr IncomingVector;
    __declspec(property(get=GetUseOppositeOfSelectedVector,put=PutUseOppositeOfSelectedVector))
    VARIANT_BOOL UseOppositeOfSelectedVector;
    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetAllowReflectionsOnBackside,put=PutAllowReflectionsOnBackside))
    VARIANT_BOOL AllowReflectionsOnBackside;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetIncomingVector ( );
    VARIANT_BOOL GetUseOppositeOfSelectedVector ( );
    void PutUseOppositeOfSelectedVector (
        VARIANT_BOOL pRetVal );
    IAgCrdnVectorRefToPtr GetNormalVector ( );
    VARIANT_BOOL GetAllowReflectionsOnBackside ( );
    void PutAllowReflectionsOnBackside (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IncomingVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseOppositeOfSelectedVector (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseOppositeOfSelectedVector (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowReflectionsOnBackside (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowReflectionsOnBackside (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("9d056d4c-789f-4dbb-a185-f621bfab8556"))
_IAgCrdnVectorDirectionToStar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSelectedStar,put=PutSelectedStar))
    _bstr_t SelectedStar;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _bstr_t GetSelectedStar ( );
    void PutSelectedStar (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedStar (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedStar (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("4145db79-5240-4d23-aa51-54bca4b82db8"))
_IAgCrdnVectorFixedAtTimeInstant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferenceTimeInstant,put=PutReferenceTimeInstant))
    IAgCrdnEventPtr ReferenceTimeInstant;
    __declspec(property(get=GetSourceVector,put=PutSourceVector))
    IAgCrdnVectorPtr SourceVector;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    IAgCrdnAxesPtr ReferenceAxes;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnEventPtr GetReferenceTimeInstant ( );
    void PutReferenceTimeInstant (
        struct IAgCrdnEvent * ppRetVal );
    IAgCrdnVectorPtr GetSourceVector ( );
    void PutSourceVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnAxesPtr GetReferenceAxes ( );
    void PutReferenceAxes (
        struct IAgCrdnAxes * ppRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTimeInstant (
        /*[out,retval]*/ struct IAgCrdnEvent * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTimeInstant (
        /*[in]*/ struct IAgCrdnEvent * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ struct IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("291bb6fd-fb56-4fb8-8e59-05bcd45c9b50"))
_IAgCrdnVectorLinearCombination : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetVectorA,put=PutVectorA))
    IAgCrdnVectorPtr VectorA;
    __declspec(property(get=GetScaleFactorA,put=PutScaleFactorA))
    double ScaleFactorA;
    __declspec(property(get=GetNormalizeVectorA,put=PutNormalizeVectorA))
    VARIANT_BOOL NormalizeVectorA;
    __declspec(property(get=GetVectorB,put=PutVectorB))
    IAgCrdnVectorPtr VectorB;
    __declspec(property(get=GetScaleFactorB,put=PutScaleFactorB))
    double ScaleFactorB;
    __declspec(property(get=GetNormalizeVectorB,put=PutNormalizeVectorB))
    VARIANT_BOOL NormalizeVectorB;
    __declspec(property(get=GetOutputDimensionInheritance,put=PutOutputDimensionInheritance))
    enum AgECrdnDimensionInheritance OutputDimensionInheritance;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorPtr GetVectorA ( );
    void PutVectorA (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorA ( );
    void PutScaleFactorA (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorA ( );
    void PutNormalizeVectorA (
        VARIANT_BOOL pRetVal );
    IAgCrdnVectorPtr GetVectorB ( );
    void PutVectorB (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorB ( );
    void PutScaleFactorB (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorB ( );
    void PutNormalizeVectorB (
        VARIANT_BOOL pRetVal );
    enum AgECrdnDimensionInheritance GetOutputDimensionInheritance ( );
    void PutOutputDimensionInheritance (
        enum AgECrdnDimensionInheritance pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorA (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorA (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorB (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorB (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorB (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorB (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorB (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimensionInheritance (
        /*[out,retval]*/ enum AgECrdnDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimensionInheritance (
        /*[in]*/ enum AgECrdnDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("1cd36fd6-90ec-4e11-b2cd-e94b522cdf1f"))
_IAgCrdnVectorProjectAlongVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSourceVector,put=PutSourceVector))
    IAgCrdnVectorPtr SourceVector;
    __declspec(property(get=GetAlongVector,put=PutAlongVector))
    IAgCrdnVectorPtr AlongVector;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorPtr GetSourceVector ( );
    void PutSourceVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnVectorPtr GetAlongVector ( );
    void PutAlongVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlongVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_AlongVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("dd17ccbb-1f73-4e24-a800-45962ac17e27"))
_IAgCrdnVectorScalarLinearCombination : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetVectorA,put=PutVectorA))
    IAgCrdnVectorPtr VectorA;
    __declspec(property(get=GetScaleFactorA,put=PutScaleFactorA))
    double ScaleFactorA;
    __declspec(property(get=GetNormalizeVectorA,put=PutNormalizeVectorA))
    VARIANT_BOOL NormalizeVectorA;
    __declspec(property(get=GetUseScaleFromScalarA,put=PutUseScaleFromScalarA))
    VARIANT_BOOL UseScaleFromScalarA;
    __declspec(property(get=GetUseScaleFromScalarB,put=PutUseScaleFromScalarB))
    VARIANT_BOOL UseScaleFromScalarB;
    __declspec(property(get=GetScalarA,put=PutScalarA))
    IAgCrdnCalcScalarPtr ScalarA;
    __declspec(property(get=GetScalarB,put=PutScalarB))
    IAgCrdnCalcScalarPtr ScalarB;
    __declspec(property(get=GetVectorB,put=PutVectorB))
    IAgCrdnVectorPtr VectorB;
    __declspec(property(get=GetScaleFactorB,put=PutScaleFactorB))
    double ScaleFactorB;
    __declspec(property(get=GetNormalizeVectorB,put=PutNormalizeVectorB))
    VARIANT_BOOL NormalizeVectorB;
    __declspec(property(get=GetOutputDimensionInheritance,put=PutOutputDimensionInheritance))
    enum AgECrdnDimensionInheritance OutputDimensionInheritance;
    __declspec(property(get=GetOutputDimension,put=PutOutputDimension))
    _bstr_t OutputDimension;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorPtr GetVectorA ( );
    void PutVectorA (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorA ( );
    void PutScaleFactorA (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorA ( );
    void PutNormalizeVectorA (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseScaleFromScalarA ( );
    void PutUseScaleFromScalarA (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseScaleFromScalarB ( );
    void PutUseScaleFromScalarB (
        VARIANT_BOOL pRetVal );
    IAgCrdnCalcScalarPtr GetScalarA ( );
    void PutScalarA (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnCalcScalarPtr GetScalarB ( );
    void PutScalarB (
        struct IAgCrdnCalcScalar * ppRetVal );
    IAgCrdnVectorPtr GetVectorB ( );
    void PutVectorB (
        struct IAgCrdnVector * ppRetVal );
    double GetScaleFactorB ( );
    void PutScaleFactorB (
        double pRetVal );
    VARIANT_BOOL GetNormalizeVectorB ( );
    void PutNormalizeVectorB (
        VARIANT_BOOL pRetVal );
    enum AgECrdnDimensionInheritance GetOutputDimensionInheritance ( );
    void PutOutputDimensionInheritance (
        enum AgECrdnDimensionInheritance pRetVal );
    _bstr_t GetOutputDimension ( );
    void PutOutputDimension (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorA (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorA (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScaleFromScalarA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScaleFromScalarA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScaleFromScalarB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScaleFromScalarB (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarA (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ScalarA (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalarB (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ScalarB (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorB (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_VectorB (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorB (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorB (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeVectorB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeVectorB (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimensionInheritance (
        /*[out,retval]*/ enum AgECrdnDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimensionInheritance (
        /*[in]*/ enum AgECrdnDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputDimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputDimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("06378377-106d-48f3-aa44-f9be72916880"))
_IAgCrdnVectorScalarScaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetInputVector,put=PutInputVector))
    IAgCrdnVectorPtr InputVector;
    __declspec(property(get=GetInputScalar,put=PutInputScalar))
    IAgCrdnCalcScalarPtr InputScalar;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetNormalize,put=PutNormalize))
    VARIANT_BOOL Normalize;
    __declspec(property(get=GetDimensionInheritance,put=PutDimensionInheritance))
    enum AgECrdnVectorScaledDimensionInheritance DimensionInheritance;
    __declspec(property(get=GetDimension,put=PutDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorPtr GetInputVector ( );
    void PutInputVector (
        struct IAgCrdnVector * ppRetVal );
    IAgCrdnCalcScalarPtr GetInputScalar ( );
    void PutInputScalar (
        struct IAgCrdnCalcScalar * ppRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    VARIANT_BOOL GetNormalize ( );
    void PutNormalize (
        VARIANT_BOOL pRetVal );
    enum AgECrdnVectorScaledDimensionInheritance GetDimensionInheritance ( );
    void PutDimensionInheritance (
        enum AgECrdnVectorScaledDimensionInheritance pRetVal );
    _bstr_t GetDimension ( );
    void PutDimension (
        _bstr_t pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputVector (
        /*[in]*/ struct IAgCrdnVector * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InputScalar (
        /*[out,retval]*/ struct IAgCrdnCalcScalar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_InputScalar (
        /*[in]*/ struct IAgCrdnCalcScalar * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normalize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DimensionInheritance (
        /*[out,retval]*/ enum AgECrdnVectorScaledDimensionInheritance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DimensionInheritance (
        /*[in]*/ enum AgECrdnVectorScaledDimensionInheritance pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimension (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("3d19c67b-13ca-4c73-b462-38970af86fc0"))
_IAgCrdnVectorVelocityAcceleration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem,put=PutReferenceSystem))
    IAgCrdnSystemPtr ReferenceSystem;
    __declspec(property(get=GetPoint,put=PutPoint))
    IAgCrdnPointPtr Point;
    __declspec(property(get=GetDifferencingTimeStep,put=PutDifferencingTimeStep))
    double DifferencingTimeStep;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnSystemPtr GetReferenceSystem ( );
    void PutReferenceSystem (
        struct IAgCrdnSystem * ppRetVal );
    IAgCrdnPointPtr GetPoint ( );
    void PutPoint (
        struct IAgCrdnPoint * ppRetVal );
    double GetDifferencingTimeStep ( );
    void PutDifferencingTimeStep (
        double pRetVal );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceSystem (
        /*[in]*/ struct IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IAgCrdnPoint * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DifferencingTimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DifferencingTimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("8b2275e0-bcd6-40d7-8729-4d9406ccb462"))
_IAgCrdnVectorPlugin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetEmbeddedComponents))
    IAgCrdnCollectionPtr EmbeddedComponents;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _bstr_t GetProgID ( );
    _bstr_t GetDisplayName ( );
    SAFEARRAY * GetAvailableProperties ( );
    HRESULT Reset ( );
    HRESULT SetProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetProperty (
        _bstr_t Name );
    IAgCrdnPtr Duplicate (
        _bstr_t NewName,
        _bstr_t Description );
    IAgCrdnPtr AnonymousDuplicate ( );
    VARIANT_BOOL DependsOn (
        struct IAgCrdn * Component );
    IAgCrdnCollectionPtr GetEmbeddedComponents ( );
    HRESULT Export (
        _bstr_t Filename,
        _bstr_t Comments );
    HRESULT Rename (
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnonymousDuplicate (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DependsOn (
        /*[in]*/ struct IAgCrdn * Component,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmbeddedComponents (
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Comments ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("c9920c10-01b0-45fe-9329-61ec8d3efc56"))
_IAgCrdnProvider : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxes))
    IAgCrdnAxesGroupPtr Axes;
    __declspec(property(get=GetPlanes))
    IAgCrdnPlaneGroupPtr Planes;
    __declspec(property(get=GetSystems))
    IAgCrdnSystemGroupPtr Systems;
    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;
    __declspec(property(get=GetEvents))
    IAgCrdnEventGroupPtr Events;
    __declspec(property(get=GetEventIntervals))
    IAgCrdnEventIntervalGroupPtr EventIntervals;
    __declspec(property(get=GetCalcScalars))
    IAgCrdnCalcScalarGroupPtr CalcScalars;
    __declspec(property(get=GetEventArrays))
    IAgCrdnEventArrayGroupPtr EventArrays;
    __declspec(property(get=GetEventIntervalLists))
    IAgCrdnEventIntervalListGroupPtr EventIntervalLists;
    __declspec(property(get=GetEventIntervalCollections))
    IAgCrdnEventIntervalCollectionGroupPtr EventIntervalCollections;
    __declspec(property(get=GetParameterSets))
    IAgCrdnParameterSetGroupPtr ParameterSets;
    __declspec(property(get=GetConditions))
    IAgCrdnConditionGroupPtr Conditions;
    __declspec(property(get=GetConditionSets))
    IAgCrdnConditionSetGroupPtr ConditionSets;
    __declspec(property(get=GetVolumeGrids))
    IAgCrdnVolumeGridGroupPtr VolumeGrids;
    __declspec(property(get=GetVolumes))
    IAgCrdnVolumeGroupPtr Volumes;
    __declspec(property(get=GetVectors))
    IAgCrdnVectorGroupPtr Vectors;
    __declspec(property(get=GetPoints))
    IAgCrdnPointGroupPtr Points;
    __declspec(property(get=GetAngles))
    IAgCrdnAngleGroupPtr Angles;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorGroupPtr GetVectors ( );
    IAgCrdnPointGroupPtr GetPoints ( );
    IAgCrdnAngleGroupPtr GetAngles ( );
    IAgCrdnAxesGroupPtr GetAxes ( );
    IAgCrdnPlaneGroupPtr GetPlanes ( );
    IAgCrdnSystemGroupPtr GetSystems ( );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );
    IAgCrdnEventGroupPtr GetEvents ( );
    IAgCrdnEventIntervalGroupPtr GetEventIntervals ( );
    IAgCrdnCalcScalarGroupPtr GetCalcScalars ( );
    IAgCrdnEventArrayGroupPtr GetEventArrays ( );
    IAgCrdnEventIntervalListGroupPtr GetEventIntervalLists ( );
    IAgCrdnEventIntervalCollectionGroupPtr GetEventIntervalCollections ( );
    IAgCrdnParameterSetGroupPtr GetParameterSets ( );
    IAgCrdnConditionGroupPtr GetConditions ( );
    VARIANT_BOOL Supports (
        enum AgECrdnKind Feature );
    IAgCrdnConditionSetGroupPtr GetConditionSets ( );
    IAgCrdnCollectionPtr Import (
        _bstr_t Filename );
    IAgCrdnVolumeGridGroupPtr GetVolumeGrids ( );
    IAgCrdnVolumeGroupPtr GetVolumes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vectors (
        /*[out,retval]*/ struct IAgCrdnVectorGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgCrdnPointGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Angles (
        /*[out,retval]*/ struct IAgCrdnAngleGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Planes (
        /*[out,retval]*/ struct IAgCrdnPlaneGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Systems (
        /*[out,retval]*/ struct IAgCrdnSystemGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Events (
        /*[out,retval]*/ struct IAgCrdnEventGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventIntervals (
        /*[out,retval]*/ struct IAgCrdnEventIntervalGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CalcScalars (
        /*[out,retval]*/ struct IAgCrdnCalcScalarGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventArrays (
        /*[out,retval]*/ struct IAgCrdnEventArrayGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventIntervalLists (
        /*[out,retval]*/ struct IAgCrdnEventIntervalListGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EventIntervalCollections (
        /*[out,retval]*/ struct IAgCrdnEventIntervalCollectionGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ParameterSets (
        /*[out,retval]*/ struct IAgCrdnParameterSetGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Conditions (
        /*[out,retval]*/ struct IAgCrdnConditionGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Supports (
        /*[in]*/ enum AgECrdnKind Feature,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConditionSets (
        /*[out,retval]*/ struct IAgCrdnConditionSetGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ struct IAgCrdnCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeGrids (
        /*[out,retval]*/ struct IAgCrdnVolumeGridGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Volumes (
        /*[out,retval]*/ struct IAgCrdnVolumeGroup * * ppRetVal ) = 0;
};

struct __declspec(uuid("787544bb-090f-4bab-be34-117c3cf6a561"))
_IAgCrdnRoot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnProviderPtr GetTemplateProvider (
        _bstr_t ClassName );
    IAgCrdnProviderPtr GetProvider (
        _bstr_t InstPath );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetTemplateProvider (
        /*[in]*/ BSTR ClassName,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetProvider (
        /*[in]*/ BSTR InstPath,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
};

} // namespace AgSTKVgtLib

#pragma pack(pop)
