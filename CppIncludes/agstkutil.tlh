// Created by Microsoft (R) C/C++ Compiler Version 14.16.27026.1 (ae6d2654).
//
// d:\dev\r_stk_prod_x64\source\lib\release.x64\tlhbuilder\agstkutil.tlh
//
// C++ source equivalent of type library AgStkUtil.tlb
// compiler-generated file created 03/29/19 at 20:37:34 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace STKUtil {

//
// Forward references and typedefs
//

struct __declspec(uuid("00dd7bd4-53d5-4870-996b-8adb8af904fa"))
/* LIBID */ __STKUtil;
enum AgELogMsgType;
enum AgELogMsgDispID;
enum AgELineStyle;
enum AgEFillStyle;
enum AgEExecMultiCmdResultAction;
struct __declspec(uuid("eb00cb53-7306-46e8-ad52-f8c8308e0b07"))
/* interface */ IAgOrbitState;
enum AgEOrbitStateType;
enum AgECoordinateSystem;
struct __declspec(uuid("11337044-5471-43af-b254-a56e6187c4a3"))
/* dual interface */ _IAgOrbitState;
struct /* coclass */ AgExecCmdResult;
struct __declspec(uuid("d935a0a9-464b-456e-9014-4e9d15f6d719"))
/* dual interface */ IAgExecCmdResult;
struct /* coclass */ AgExecMultiCmdResult;
struct __declspec(uuid("e3e18e06-94cf-4673-8c91-4689f20fd683"))
/* dual interface */ IAgExecMultiCmdResult;
struct /* coclass */ AgUnitPrefsUnit;
struct __declspec(uuid("1414f7a3-88ed-44be-9a10-9ec2939110b4"))
/* dual interface */ _IAgUnitPrefsUnit;
struct __declspec(uuid("8a0e0aa9-f9a0-4732-a0a2-fa7393fe71b6"))
/* interface */ IAgUnitPrefsDim;
struct __declspec(uuid("877f4db9-79bb-43f7-a729-55b122b46768"))
/* dual interface */ IAgUnitPrefsUnitCollection;
struct __declspec(uuid("087c2c8c-1cfc-4a71-a597-80e10952310a"))
/* interface */ IAgUnitPrefsUnit;
struct /* coclass */ AgUnitPrefsUnitCollection;
struct /* coclass */ AgUnitPrefsDim;
struct __declspec(uuid("b7c3da44-fd06-42eb-adad-fa952e68011b"))
/* dual interface */ _IAgUnitPrefsDim;
struct /* coclass */ AgUnitPrefsDimCollection;
struct __declspec(uuid("36069a3d-9a9b-425e-b80b-b604ae70b239"))
/* dual interface */ IAgUnitPrefsDimCollection;
struct /* coclass */ AgConversionUtility;
struct __declspec(uuid("28dfebd7-ef88-43b1-b3c8-6e2fb1b93641"))
/* dual interface */ _IAgConversionUtility;
struct __declspec(uuid("896b7c4f-d3d8-4472-acd5-45f2c5d29742"))
/* interface */ IAgQuantity;
struct __declspec(uuid("ec468355-7a84-4d43-a5a2-41e8f4890415"))
/* interface */ IAgDate;
struct __declspec(uuid("98c86493-bd0a-431b-8033-3a4e0fa73967"))
/* interface */ IAgPosition;
enum AgEPositionType;
struct __declspec(uuid("46835020-0f55-4981-985f-63cc5743e7e8"))
/* interface */ IAgDirection;
enum AgEDirectionType;
enum AgEEulerDirectionSequence;
enum AgEPRSequence;
struct __declspec(uuid("672b5c2c-e494-44b4-a914-2877d59ac5a9"))
/* interface */ IAgOrientation;
enum AgEOrientationType;
enum AgEAzElAboutBoresight;
enum AgEEulerOrientationSequence;
enum AgEYPRAnglesSequence;
struct __declspec(uuid("878ef436-3cdc-48b8-b9e7-296f5ef89a97"))
/* interface */ IAgCartesian3Vector;
struct __declspec(uuid("3207e23e-846e-466b-ad46-50bbb1aaf04c"))
/* interface */ IAgConversionUtility;
struct /* coclass */ AgQuantity;
struct __declspec(uuid("f7289011-939c-4eab-b743-4644a8ed1cdc"))
/* dual interface */ _IAgQuantity;
struct /* coclass */ AgDate;
struct __declspec(uuid("cf03b8bd-94e6-4eea-9471-7d056a1fe168"))
/* dual interface */ _IAgDate;
struct /* coclass */ AgPosition;
struct __declspec(uuid("a7dcc4d2-f908-42c2-a0e7-a9853aee01ab"))
/* dual interface */ _IAgPosition;
struct __declspec(uuid("6e86f9ca-0d23-4f20-ac30-bebcfb07c679"))
/* interface */ IAgLocationData;
struct /* coclass */ AgCartesian;
struct __declspec(uuid("e84d397a-f19d-4fee-8781-84a617129932"))
/* dual interface */ _IAgCartesian;
struct __declspec(uuid("77b570bb-bbb5-4a5a-bf67-880ae0c55c0d"))
/* interface */ IAgCartesian;
struct /* coclass */ AgGeodetic;
struct __declspec(uuid("fe437a8a-ada7-494c-8ab9-3127026e0654"))
/* dual interface */ _IAgGeodetic;
struct __declspec(uuid("4ef60500-8a60-4e8d-aff5-9ab9431f90e4"))
/* interface */ IAgGeodetic;
struct /* coclass */ AgGeocentric;
struct __declspec(uuid("9a4c0236-81fc-442e-9fcd-8d957c4fa281"))
/* dual interface */ _IAgGeocentric;
struct __declspec(uuid("3db243a3-534f-4223-8c13-e53eb75cd4ce"))
/* interface */ IAgGeocentric;
struct /* coclass */ AgPlanetodetic;
struct __declspec(uuid("e51c8dcb-6e1d-4d55-9807-47a7fb7c734f"))
/* dual interface */ _IAgPlanetodetic;
struct __declspec(uuid("4f49c748-fe5a-4b00-b47b-173e5f445411"))
/* interface */ IAgPlanetodetic;
struct /* coclass */ AgPlanetocentric;
struct __declspec(uuid("301e4576-2adf-474b-8439-c39310c6481a"))
/* dual interface */ _IAgPlanetocentric;
struct __declspec(uuid("4dfe39f0-f1e9-49c1-b11a-0ee1c5795df2"))
/* interface */ IAgPlanetocentric;
struct /* coclass */ AgSpherical;
struct __declspec(uuid("3e466cbf-3602-4fe7-8375-8403f272e771"))
/* dual interface */ _IAgSpherical;
struct __declspec(uuid("3843e85e-aeb6-433a-ae8d-8d981bb114e6"))
/* interface */ IAgSpherical;
struct /* coclass */ AgCylindrical;
struct __declspec(uuid("996baffa-0955-41a1-824a-7802f6bfb7ab"))
/* dual interface */ _IAgCylindrical;
struct __declspec(uuid("66d88e7c-dfa4-4588-9f91-44c5c43d56de"))
/* interface */ IAgCylindrical;
struct /* coclass */ AgDirection;
struct __declspec(uuid("898e251b-90ac-40a2-908f-62e2598b9ec9"))
/* dual interface */ _IAgDirection;
struct /* coclass */ AgDirectionEuler;
struct __declspec(uuid("35c5ff47-87e1-4175-95eb-439cab73bd9d"))
/* dual interface */ _IAgDirectionEuler;
struct __declspec(uuid("2124d808-d63a-43d4-96c2-56ed861afe53"))
/* interface */ IAgDirectionEuler;
struct /* coclass */ AgDirectionPR;
struct __declspec(uuid("ee9887ca-2e1d-4be7-a692-825d83abc412"))
/* dual interface */ _IAgDirectionPR;
struct __declspec(uuid("b7461818-a389-4e6b-99ec-a77f0dbd41de"))
/* interface */ IAgDirectionPR;
struct /* coclass */ AgDirectionRADec;
struct __declspec(uuid("71d2f7a6-a509-4840-a3d6-15ad14f7b0f3"))
/* dual interface */ _IAgDirectionRADec;
struct __declspec(uuid("79c99539-649f-4603-8ed1-ebb6a4e4616b"))
/* interface */ IAgDirectionRADec;
struct /* coclass */ AgDirectionXYZ;
struct __declspec(uuid("09194a69-9bdf-4f94-8dd3-660f9af9d8db"))
/* dual interface */ _IAgDirectionXYZ;
struct __declspec(uuid("9e3d600a-8ccc-48e6-b035-2f01c2beba39"))
/* interface */ IAgDirectionXYZ;
struct /* coclass */ AgOrientation;
struct __declspec(uuid("3b14008c-48dd-40a3-9a98-34877f9c1c07"))
/* dual interface */ _IAgOrientation;
struct /* coclass */ AgOrientationAzEl;
struct __declspec(uuid("3d37ae5e-5d7c-429e-b14f-03b5a7594c69"))
/* dual interface */ _IAgOrientationAzEl;
struct __declspec(uuid("f7e2943c-74d1-400f-98d4-505fbb83bcdc"))
/* interface */ IAgOrientationAzEl;
struct /* coclass */ AgOrientationEulerAngles;
struct __declspec(uuid("7a137f20-75ea-4356-b9fb-216dc6e82f3b"))
/* dual interface */ _IAgOrientationEulerAngles;
struct __declspec(uuid("4010addb-6500-4a4a-80c6-2c856f3d02f6"))
/* interface */ IAgOrientationEulerAngles;
struct /* coclass */ AgOrientationQuaternion;
struct __declspec(uuid("9e4cd87c-5186-4546-86c1-cb841a3bd0be"))
/* dual interface */ _IAgOrientationQuaternion;
struct __declspec(uuid("3c303d89-c28a-4a94-9017-8abbd7aec9c8"))
/* interface */ IAgOrientationQuaternion;
struct /* coclass */ AgOrientationYPRAngles;
struct __declspec(uuid("44d175b2-f269-4aa9-a9f0-59dc11ca56d7"))
/* dual interface */ _IAgOrientationYPRAngles;
struct __declspec(uuid("0f54e29d-6864-468d-b1cd-1d12ce0add60"))
/* interface */ IAgOrientationYPRAngles;
struct /* coclass */ AgDoublesCollection;
struct __declspec(uuid("90d75563-26a7-4982-85e9-c3d04b27c552"))
/* dual interface */ IAgDoublesCollection;
struct /* coclass */ AgCartesian3Vector;
struct __declspec(uuid("8e8a17ff-2237-4541-83b6-3cfa7c3343ca"))
/* dual interface */ _IAgCartesian3Vector;
struct /* coclass */ AgCartesian2Vector;
struct __declspec(uuid("dcb88d22-81db-4cd5-b343-3996efd0821e"))
/* dual interface */ _IAgCartesian2Vector;
struct __declspec(uuid("222ef435-d824-4a2c-9953-1dcdc0fbce44"))
/* interface */ IAgCartesian2Vector;
struct /* coclass */ AgPropertyInfo;
struct __declspec(uuid("4c4de223-5a1c-4427-b47f-9932787fac00"))
/* interface */ IAgPropertyInfo;
enum AgEPropertyInfoValueType;
struct __declspec(uuid("42b062ae-de52-46b6-9971-abeace018a22"))
/* dual interface */ _IAgPropertyInfo;
struct /* coclass */ AgPropertyInfoCollection;
struct __declspec(uuid("25e3f178-638f-462d-9857-c548cf7bba80"))
/* dual interface */ IAgPropertyInfoCollection;
struct /* coclass */ AgRuntimeTypeInfo;
struct __declspec(uuid("40815573-34a0-40d2-bf62-7537cb1302e6"))
/* dual interface */ _IAgRuntimeTypeInfo;
struct __declspec(uuid("392131c9-c7da-4e35-a95a-4c030ce31357"))
/* interface */ IAgRuntimeTypeInfo;
struct /* coclass */ AgCROrientationAzEl;
struct __declspec(uuid("1da6141f-ed8b-460b-9c54-e91046f05da8"))
/* dual interface */ _IAgCROrientationAzEl;
struct __declspec(uuid("b892e634-a18c-42da-af35-d1c92793a3dd"))
/* interface */ IAgOrientationPositionOffset;
struct /* coclass */ AgCROrientationEulerAngles;
struct __declspec(uuid("d5ac1455-8b86-4577-a7a3-9151efe277f3"))
/* dual interface */ _IAgCROrientationEulerAngles;
struct /* coclass */ AgCROrientationQuaternion;
struct __declspec(uuid("1edb1ba4-4b95-492c-8e8d-3147e503bbb3"))
/* dual interface */ _IAgCROrientationQuaternion;
struct /* coclass */ AgCROrientationYPRAngles;
struct __declspec(uuid("1443e1db-9419-4433-bc7d-9fc7ee394733"))
/* dual interface */ _IAgCROrientationYPRAngles;
struct /* coclass */ AgCROrientationOffsetCart;
struct __declspec(uuid("bc2c3c74-2cc0-4d23-a9d1-57b7db809550"))
/* dual interface */ _IAgCROrientationOffsetCart;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgOrbitState, __uuidof(IAgOrbitState));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitState, __uuidof(_IAgOrbitState));
_COM_SMARTPTR_TYPEDEF(IAgExecCmdResult, __uuidof(IAgExecCmdResult));
_COM_SMARTPTR_TYPEDEF(IAgExecMultiCmdResult, __uuidof(IAgExecMultiCmdResult));
_COM_SMARTPTR_TYPEDEF(IAgQuantity, __uuidof(IAgQuantity));
_COM_SMARTPTR_TYPEDEF(IAgDate, __uuidof(IAgDate));
_COM_SMARTPTR_TYPEDEF(IAgPosition, __uuidof(IAgPosition));
_COM_SMARTPTR_TYPEDEF(IAgDirection, __uuidof(IAgDirection));
_COM_SMARTPTR_TYPEDEF(IAgOrientation, __uuidof(IAgOrientation));
_COM_SMARTPTR_TYPEDEF(IAgCartesian3Vector, __uuidof(IAgCartesian3Vector));
_COM_SMARTPTR_TYPEDEF(_IAgConversionUtility, __uuidof(_IAgConversionUtility));
_COM_SMARTPTR_TYPEDEF(IAgConversionUtility, __uuidof(IAgConversionUtility));
_COM_SMARTPTR_TYPEDEF(_IAgQuantity, __uuidof(_IAgQuantity));
_COM_SMARTPTR_TYPEDEF(_IAgDate, __uuidof(_IAgDate));
_COM_SMARTPTR_TYPEDEF(_IAgPosition, __uuidof(_IAgPosition));
_COM_SMARTPTR_TYPEDEF(IAgLocationData, __uuidof(IAgLocationData));
_COM_SMARTPTR_TYPEDEF(_IAgCartesian, __uuidof(_IAgCartesian));
_COM_SMARTPTR_TYPEDEF(IAgCartesian, __uuidof(IAgCartesian));
_COM_SMARTPTR_TYPEDEF(_IAgGeodetic, __uuidof(_IAgGeodetic));
_COM_SMARTPTR_TYPEDEF(IAgGeodetic, __uuidof(IAgGeodetic));
_COM_SMARTPTR_TYPEDEF(_IAgGeocentric, __uuidof(_IAgGeocentric));
_COM_SMARTPTR_TYPEDEF(IAgGeocentric, __uuidof(IAgGeocentric));
_COM_SMARTPTR_TYPEDEF(_IAgPlanetodetic, __uuidof(_IAgPlanetodetic));
_COM_SMARTPTR_TYPEDEF(IAgPlanetodetic, __uuidof(IAgPlanetodetic));
_COM_SMARTPTR_TYPEDEF(_IAgPlanetocentric, __uuidof(_IAgPlanetocentric));
_COM_SMARTPTR_TYPEDEF(IAgPlanetocentric, __uuidof(IAgPlanetocentric));
_COM_SMARTPTR_TYPEDEF(_IAgSpherical, __uuidof(_IAgSpherical));
_COM_SMARTPTR_TYPEDEF(IAgSpherical, __uuidof(IAgSpherical));
_COM_SMARTPTR_TYPEDEF(_IAgCylindrical, __uuidof(_IAgCylindrical));
_COM_SMARTPTR_TYPEDEF(IAgCylindrical, __uuidof(IAgCylindrical));
_COM_SMARTPTR_TYPEDEF(_IAgDirection, __uuidof(_IAgDirection));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionEuler, __uuidof(_IAgDirectionEuler));
_COM_SMARTPTR_TYPEDEF(IAgDirectionEuler, __uuidof(IAgDirectionEuler));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionPR, __uuidof(_IAgDirectionPR));
_COM_SMARTPTR_TYPEDEF(IAgDirectionPR, __uuidof(IAgDirectionPR));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionRADec, __uuidof(_IAgDirectionRADec));
_COM_SMARTPTR_TYPEDEF(IAgDirectionRADec, __uuidof(IAgDirectionRADec));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionXYZ, __uuidof(_IAgDirectionXYZ));
_COM_SMARTPTR_TYPEDEF(IAgDirectionXYZ, __uuidof(IAgDirectionXYZ));
_COM_SMARTPTR_TYPEDEF(_IAgOrientation, __uuidof(_IAgOrientation));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationAzEl, __uuidof(_IAgOrientationAzEl));
_COM_SMARTPTR_TYPEDEF(IAgOrientationAzEl, __uuidof(IAgOrientationAzEl));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationEulerAngles, __uuidof(_IAgOrientationEulerAngles));
_COM_SMARTPTR_TYPEDEF(IAgOrientationEulerAngles, __uuidof(IAgOrientationEulerAngles));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationQuaternion, __uuidof(_IAgOrientationQuaternion));
_COM_SMARTPTR_TYPEDEF(IAgOrientationQuaternion, __uuidof(IAgOrientationQuaternion));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationYPRAngles, __uuidof(_IAgOrientationYPRAngles));
_COM_SMARTPTR_TYPEDEF(IAgOrientationYPRAngles, __uuidof(IAgOrientationYPRAngles));
_COM_SMARTPTR_TYPEDEF(IAgDoublesCollection, __uuidof(IAgDoublesCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCartesian3Vector, __uuidof(_IAgCartesian3Vector));
_COM_SMARTPTR_TYPEDEF(_IAgCartesian2Vector, __uuidof(_IAgCartesian2Vector));
_COM_SMARTPTR_TYPEDEF(IAgCartesian2Vector, __uuidof(IAgCartesian2Vector));
_COM_SMARTPTR_TYPEDEF(IAgPropertyInfo, __uuidof(IAgPropertyInfo));
_COM_SMARTPTR_TYPEDEF(_IAgPropertyInfo, __uuidof(_IAgPropertyInfo));
_COM_SMARTPTR_TYPEDEF(IAgPropertyInfoCollection, __uuidof(IAgPropertyInfoCollection));
_COM_SMARTPTR_TYPEDEF(_IAgRuntimeTypeInfo, __uuidof(_IAgRuntimeTypeInfo));
_COM_SMARTPTR_TYPEDEF(IAgRuntimeTypeInfo, __uuidof(IAgRuntimeTypeInfo));
_COM_SMARTPTR_TYPEDEF(_IAgCROrientationAzEl, __uuidof(_IAgCROrientationAzEl));
_COM_SMARTPTR_TYPEDEF(IAgOrientationPositionOffset, __uuidof(IAgOrientationPositionOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCROrientationEulerAngles, __uuidof(_IAgCROrientationEulerAngles));
_COM_SMARTPTR_TYPEDEF(_IAgCROrientationQuaternion, __uuidof(_IAgCROrientationQuaternion));
_COM_SMARTPTR_TYPEDEF(_IAgCROrientationYPRAngles, __uuidof(_IAgCROrientationYPRAngles));
_COM_SMARTPTR_TYPEDEF(_IAgCROrientationOffsetCart, __uuidof(_IAgCROrientationOffsetCart));
_COM_SMARTPTR_TYPEDEF(_IAgUnitPrefsUnit, __uuidof(_IAgUnitPrefsUnit));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsDim, __uuidof(IAgUnitPrefsDim));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsUnit, __uuidof(IAgUnitPrefsUnit));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsUnitCollection, __uuidof(IAgUnitPrefsUnitCollection));
_COM_SMARTPTR_TYPEDEF(_IAgUnitPrefsDim, __uuidof(_IAgUnitPrefsDim));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsDimCollection, __uuidof(IAgUnitPrefsDimCollection));

//
// Type library items
//

enum AgELogMsgType
{
    eLogMsgDebug = 0,
    eLogMsgInfo = 1,
    eLogMsgForceInfo = 2,
    eLogMsgWarning = 3,
    eLogMsgAlarm = 4
};

enum AgELogMsgDispID
{
    eLogMsgDispAll = -1,
    eLogMsgDispDefault = 0,
    eLogMsgDispMsgWin = 1,
    eLogMsgDispStatusBar = 2
};

enum AgELineStyle
{
    eSolid = 0,
    eDashed = 1,
    eDotted = 2,
    eDotDashed = 3,
    eLongDashed = 4,
    eDashDotDotted = 5,
    eMDash = 6,
    eLDash = 7,
    eSDashDot = 8,
    eMDashDot = 9,
    eLDashDot = 10,
    eMSDash = 11,
    eLSDash = 12,
    eLMDash = 13,
    eLMSDash = 14,
    eDot = 15,
    eLongDash = 16,
    eSDash = 17
};

enum AgEFillStyle
{
    eFillStyleSolid = 0,
    eFillStyleHorizontalStripe = 1,
    eFillStyleDiagonalStripe1 = 2,
    eFillStyleDiagonalStripe2 = 3,
    eFillStyleHatch = 4,
    eFillStyleDiagonalHatch = 5,
    eFillStyleScreen = 6,
    eFillStyleVerticalStripe = 7
};

enum AgEExecMultiCmdResultAction
{
    eContinueOnError = 0,
    eStopOnError = 1,
    eExceptionOnError = 2,
    eIgnoreExecCmdResult = 32768
};

enum AgEOrbitStateType
{
    eOrbitStateCartesian = 0,
    eOrbitStateClassical = 1,
    eOrbitStateEquinoctial = 2,
    eOrbitStateDelaunay = 3,
    eOrbitStateSpherical = 4,
    eOrbitStateMixedSpherical = 5,
    eOrbitStateGeodetic = 6
};

enum AgECoordinateSystem
{
    eCoordinateSystemUnknown = -1,
    eCoordinateSystemAlignmentAtEpoch = 0,
    eCoordinateSystemB1950 = 1,
    eCoordinateSystemFixed = 2,
    eCoordinateSystemJ2000 = 3,
    eCoordinateSystemMeanOfDate = 4,
    eCoordinateSystemMeanOfEpoch = 5,
    eCoordinateSystemTEMEOfDate = 6,
    eCoordinateSystemTEMEOfEpoch = 7,
    eCoordinateSystemTrueOfDate = 8,
    eCoordinateSystemTrueOfEpoch = 9,
    eCoordinateSystemTrueOfRefDate = 10,
    eCoordinateSystemICRF = 11,
    eCoordinateSystemMeanEarth = 13,
    eCoordinateSystemFixedNoLibration = 14,
    eCoordinateSystemFixedIAU2003 = 15,
    eCoordinateSystemPrincipalAxes421 = 16,
    eCoordinateSystemPrincipalAxes403 = 17,
    eCoordinateSystemInertial = 18,
    eCoordinateSystemJ2000Ecliptic = 19,
    eCoordinateSystemTrueEclipticOfDate = 21,
    eCoordinateSystemPrincipalAxes430 = 22
};

struct __declspec(uuid("eb00cb53-7306-46e8-ad52-f8c8308e0b07"))
IAgOrbitState : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctialPosigrade (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon );
    HRESULT AssignEquinoctialRetrograde (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double RightAscension,
        double Declination,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctialPosigrade (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctialRetrograde (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double RightAscension,
        /*[in]*/ double Declination,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("11337044-5471-43af-b254-a56e6187c4a3"))
_IAgOrbitState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctialPosigrade (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon );
    HRESULT AssignEquinoctialRetrograde (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double RightAscension,
        double Declination,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctialPosigrade (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctialRetrograde (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double RightAscension,
        /*[in]*/ double Declination,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("8d198a08-0876-476e-abf3-1c27bfee3f07"))
AgExecCmdResult;
    // [ default ] interface IDispatch
    // interface IAgExecCmdResult

struct __declspec(uuid("d935a0a9-464b-456e-9014-4e9d15f6d719"))
IAgExecCmdResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetIsSucceeded))
    VARIANT_BOOL IsSucceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    SAFEARRAY * Range (
        long StartIndex,
        long StopIndex );
    VARIANT_BOOL GetIsSucceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long StartIndex,
        /*[in]*/ long StopIndex,
        /*[out,retval]*/ SAFEARRAY * * ppVar ) = 0;
      virtual HRESULT __stdcall get_IsSucceeded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("5c09c4b6-2c7b-4a18-87fb-41422fbbb32b"))
AgExecMultiCmdResult;
    // [ default ] interface IDispatch
    // interface IAgExecMultiCmdResult

struct __declspec(uuid("e3e18e06-94cf-4673-8c91-4689f20fd683"))
IAgExecMultiCmdResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgExecCmdResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgExecCmdResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgExecCmdResult * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
};

struct __declspec(uuid("05a8db56-3475-4442-933c-5b1b66dead3a"))
AgUnitPrefsUnit;
    // [ default ] interface _IAgUnitPrefsUnit
    // interface IAgUnitPrefsUnit

struct __declspec(uuid("42aed07e-6830-4b20-8cc9-898636f00348"))
AgUnitPrefsUnitCollection;
    // [ default ] interface IUnknown
    // interface IAgUnitPrefsUnitCollection

struct __declspec(uuid("b7d85f32-055f-4945-bb26-18074fe998a9"))
AgUnitPrefsDim;
    // [ default ] interface _IAgUnitPrefsDim
    // interface IAgUnitPrefsDim

struct __declspec(uuid("c9e18a07-6566-4922-b0b2-c04502a740fb"))
AgUnitPrefsDimCollection;
    // [ default ] interface IUnknown
    // interface IAgUnitPrefsDimCollection

struct __declspec(uuid("73c19457-b614-49bc-abcd-37795e4837fa"))
AgConversionUtility;
    // [ default ] interface _IAgConversionUtility
    // interface IAgConversionUtility

struct __declspec(uuid("896b7c4f-d3d8-4472-acd5-45f2c5d29742"))
IAgQuantity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetUnit))
    _bstr_t Unit;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimension ( );
    _bstr_t GetUnit ( );
    HRESULT ConvertToUnit (
        _bstr_t UnitAbbrv );
    double GetValue ( );
    void PutValue (
        double pValue );
    IAgQuantityPtr Add (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr Subtract (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr MultiplyQty (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr DivideQty (
        struct IAgQuantity * Quantity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pDimName ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ BSTR * pUnitAbbrv ) = 0;
      virtual HRESULT __stdcall raw_ConvertToUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pValue ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_MultiplyQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_DivideQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

struct __declspec(uuid("ec468355-7a84-4d43-a5a2-41e8f4890415"))
IAgDate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOLEDate,put=PutOLEDate))
    DATE OLEDate;
    __declspec(property(get=GetWholeDays,put=PutWholeDays))
    long WholeDays;
    __declspec(property(get=GetSecIntoDay,put=PutSecIntoDay))
    double SecIntoDay;
    __declspec(property(get=GetWholeDaysUTC,put=PutWholeDaysUTC))
    long WholeDaysUTC;
    __declspec(property(get=GetSecIntoDayUTC,put=PutSecIntoDayUTC))
    double SecIntoDayUTC;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Format (
        _bstr_t Unit );
    HRESULT SetDate (
        _bstr_t Unit,
        _bstr_t Value );
    DATE GetOLEDate ( );
    void PutOLEDate (
        DATE pDate );
    long GetWholeDays ( );
    void PutWholeDays (
        long pVal );
    double GetSecIntoDay ( );
    void PutSecIntoDay (
        double pVal );
    long GetWholeDaysUTC ( );
    void PutWholeDaysUTC (
        long pVal );
    double GetSecIntoDayUTC ( );
    void PutSecIntoDayUTC (
        double pVal );
    IAgDatePtr Add (
        _bstr_t Unit,
        double Value );
    IAgDatePtr Subtract (
        _bstr_t Unit,
        double Value );
    IAgQuantityPtr Span (
        struct IAgDate * Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ BSTR Unit,
        /*[out,retval]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetDate (
        /*[in]*/ BSTR Unit,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_OLEDate (
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall put_OLEDate (
        /*[in]*/ DATE pDate ) = 0;
      virtual HRESULT __stdcall get_WholeDays (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDays (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDay (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDay (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WholeDaysUTC (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDaysUTC (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDayUTC (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDayUTC (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Span (
        /*[in]*/ struct IAgDate * Date,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

enum AgEPositionType
{
    eCartesian = 0,
    eCylindrical = 1,
    eGeocentric = 2,
    eGeodetic = 3,
    eSpherical = 4,
    ePlanetocentric = 5,
    ePlanetodetic = 6
};

struct __declspec(uuid("98c86493-bd0a-431b-8033-3a4e0fa73967"))
IAgPosition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;

    //
    // Wrapper methods for error-handling
    //

    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEDirectionType
{
    eDirEuler = 0,
    eDirPR = 1,
    eDirRADec = 2,
    eDirXYZ = 3
};

enum AgEEulerDirectionSequence
{
    e12 = 0,
    e21 = 1,
    e31 = 2,
    e32 = 3
};

enum AgEPRSequence
{
    ePR = 0
};

struct __declspec(uuid("46835020-0f55-4981-985f-63cc5743e7e8"))
IAgDirection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEOrientationType
{
    eAzEl = 0,
    eEulerAngles = 1,
    eQuaternion = 2,
    eYPRAngles = 3
};

enum AgEAzElAboutBoresight
{
    eAzElAboutBoresightHold = 0,
    eAzElAboutBoresightRotate = 1
};

enum AgEEulerOrientationSequence
{
    e121 = 0,
    e123 = 1,
    e131 = 2,
    e132 = 3,
    e212 = 4,
    e213 = 5,
    e231 = 6,
    e232 = 7,
    e312 = 8,
    e313 = 9,
    e321 = 10,
    e323 = 11
};

enum AgEYPRAnglesSequence
{
    ePRY = 0,
    ePYR = 1,
    eRPY = 2,
    eRYP = 3,
    eYPR = 4,
    eYRP = 5
};

struct __declspec(uuid("672b5c2c-e494-44b4-a914-2877d59ac5a9"))
IAgOrientation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("878ef436-3cdc-48b8-b9e7-296f5ef89a97"))
IAgCartesian3Vector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y,
        double * Z );
    HRESULT Set (
        double X,
        double Y,
        double Z );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("28dfebd7-ef88-43b1-b3c8-6e2fb1b93641"))
_IAgConversionUtility : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double ConvertQuantity (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        double Value );
    _bstr_t ConvertDate (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        _bstr_t FromValue );
    SAFEARRAY * ConvertQuantityArray (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * Values );
    SAFEARRAY * ConvertDateArray (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * FromValues );
    IAgQuantityPtr NewQuantity (
        _bstr_t Dimension,
        _bstr_t UnitAbbrv,
        double Value );
    IAgDatePtr NewDate (
        _bstr_t UnitAbbrv,
        _bstr_t Value );
    IAgPositionPtr NewPositionOnEarth ( );
    SAFEARRAY * ConvertPositionArray (
        enum AgEPositionType PositionType,
        SAFEARRAY * * PositionArray,
        enum AgEPositionType ConvertTo );
    IAgDirectionPtr NewDirection ( );
    IAgOrientationPtr NewOrientation ( );
    IAgOrbitStatePtr NewOrbitStateOnEarth ( );
    IAgPositionPtr NewPositionOnCB (
        _bstr_t CentralBodyName );
    IAgOrbitStatePtr NewOrbitStateOnCB (
        _bstr_t CentralBodyName );
    HRESULT QueryDirectionCosineMatrix (
        struct IAgOrientation * InputOrientation,
        struct IAgCartesian3Vector * * pX,
        struct IAgCartesian3Vector * * pY,
        struct IAgCartesian3Vector * * pZ );
    SAFEARRAY * QueryDirectionCosineMatrixArray (
        struct IAgOrientation * InputOrientation );
    IAgCartesian3VectorPtr NewCartesian3Vector ( );
    IAgCartesian3VectorPtr NewCartesian3VectorFromDirection (
        struct IAgDirection * InputDirection );
    IAgCartesian3VectorPtr NewCartesian3VectorFromPosition (
        struct IAgPosition * InputPosition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertQuantity (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertDate (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ BSTR FromValue,
        /*[out,retval]*/ BSTR * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertQuantityArray (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * Values,
        /*[out,retval]*/ SAFEARRAY * * ppToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertDateArray (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * FromValues,
        /*[out,retval]*/ SAFEARRAY * * ppToValues ) = 0;
      virtual HRESULT __stdcall raw_NewQuantity (
        /*[in]*/ BSTR Dimension,
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_NewDate (
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnEarth (
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertPositionArray (
        /*[in]*/ enum AgEPositionType PositionType,
        /*[in]*/ SAFEARRAY * * PositionArray,
        /*[in]*/ enum AgEPositionType ConvertTo,
        /*[out,retval]*/ SAFEARRAY * * ppOutVal ) = 0;
      virtual HRESULT __stdcall raw_NewDirection (
        /*[out,retval]*/ struct IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrientation (
        /*[out,retval]*/ struct IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnEarth (
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrix (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out]*/ struct IAgCartesian3Vector * * pX,
        /*[out]*/ struct IAgCartesian3Vector * * pY,
        /*[out]*/ struct IAgCartesian3Vector * * pZ ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrixArray (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3Vector (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromDirection (
        /*[in]*/ struct IAgDirection * InputDirection,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromPosition (
        /*[in]*/ struct IAgPosition * InputPosition,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("3207e23e-846e-466b-ad46-50bbb1aaf04c"))
IAgConversionUtility : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    double ConvertQuantity (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        double FromValue );
    _bstr_t ConvertDate (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        _bstr_t FromValue );
    SAFEARRAY * ConvertQuantityArray (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * QuantityValues );
    SAFEARRAY * ConvertDateArray (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * FromValues );
    IAgQuantityPtr NewQuantity (
        _bstr_t Dimension,
        _bstr_t UnitAbbrv,
        double Value );
    IAgDatePtr NewDate (
        _bstr_t UnitAbbrv,
        _bstr_t Value );
    IAgPositionPtr NewPositionOnEarth ( );
    SAFEARRAY * ConvertPositionArray (
        enum AgEPositionType PositionType,
        SAFEARRAY * * PositionArray,
        enum AgEPositionType ConvertTo );
    IAgDirectionPtr NewDirection ( );
    IAgOrientationPtr NewOrientation ( );
    IAgOrbitStatePtr NewOrbitStateOnEarth ( );
    IAgPositionPtr NewPositionOnCB (
        _bstr_t CentralBodyName );
    IAgOrbitStatePtr NewOrbitStateOnCB (
        _bstr_t CentralBodyName );
    HRESULT QueryDirectionCosineMatrix (
        struct IAgOrientation * InputOrientation,
        struct IAgCartesian3Vector * * pX,
        struct IAgCartesian3Vector * * pY,
        struct IAgCartesian3Vector * * pZ );
    SAFEARRAY * QueryDirectionCosineMatrixArray (
        struct IAgOrientation * InputOrientation );
    IAgCartesian3VectorPtr NewCartesian3Vector ( );
    IAgCartesian3VectorPtr NewCartesian3VectorFromDirection (
        struct IAgDirection * InputDirection );
    IAgCartesian3VectorPtr NewCartesian3VectorFromPosition (
        struct IAgPosition * InputPosition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertQuantity (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ double FromValue,
        /*[out,retval]*/ double * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertDate (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ BSTR FromValue,
        /*[out,retval]*/ BSTR * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertQuantityArray (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * QuantityValues,
        /*[out,retval]*/ SAFEARRAY * * ppConvertedQuantityValues ) = 0;
      virtual HRESULT __stdcall raw_ConvertDateArray (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * FromValues,
        /*[out,retval]*/ SAFEARRAY * * ppConvertedDateValues ) = 0;
      virtual HRESULT __stdcall raw_NewQuantity (
        /*[in]*/ BSTR Dimension,
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_NewDate (
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnEarth (
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertPositionArray (
        /*[in]*/ enum AgEPositionType PositionType,
        /*[in]*/ SAFEARRAY * * PositionArray,
        /*[in]*/ enum AgEPositionType ConvertTo,
        /*[out,retval]*/ SAFEARRAY * * ppOutVal ) = 0;
      virtual HRESULT __stdcall raw_NewDirection (
        /*[out,retval]*/ struct IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrientation (
        /*[out,retval]*/ struct IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnEarth (
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrix (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out]*/ struct IAgCartesian3Vector * * pX,
        /*[out]*/ struct IAgCartesian3Vector * * pY,
        /*[out]*/ struct IAgCartesian3Vector * * pZ ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrixArray (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3Vector (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromDirection (
        /*[in]*/ struct IAgDirection * InputDirection,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromPosition (
        /*[in]*/ struct IAgPosition * InputPosition,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("db42b23d-1ec7-4578-b9ea-a9dbd884aff2"))
AgQuantity;
    // [ default ] interface _IAgQuantity
    // interface IAgQuantity

struct __declspec(uuid("f7289011-939c-4eab-b743-4644a8ed1cdc"))
_IAgQuantity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetUnit))
    _bstr_t Unit;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimension ( );
    _bstr_t GetUnit ( );
    HRESULT ConvertToUnit (
        _bstr_t UnitAbbrv );
    double GetValue ( );
    void PutValue (
        double pValue );
    IAgQuantityPtr Add (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr Subtract (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr MultiplyQty (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr DivideQty (
        struct IAgQuantity * Quantity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pDimName ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ BSTR * pUnitAbbrv ) = 0;
      virtual HRESULT __stdcall raw_ConvertToUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pValue ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_MultiplyQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_DivideQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

struct __declspec(uuid("8127b5c7-c3ff-4c8a-8512-4877e7b7f41e"))
AgDate;
    // [ default ] interface _IAgDate
    // interface IAgDate

struct __declspec(uuid("cf03b8bd-94e6-4eea-9471-7d056a1fe168"))
_IAgDate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOLEDate,put=PutOLEDate))
    DATE OLEDate;
    __declspec(property(get=GetWholeDays,put=PutWholeDays))
    long WholeDays;
    __declspec(property(get=GetSecIntoDay,put=PutSecIntoDay))
    double SecIntoDay;
    __declspec(property(get=GetWholeDaysUTC,put=PutWholeDaysUTC))
    long WholeDaysUTC;
    __declspec(property(get=GetSecIntoDayUTC,put=PutSecIntoDayUTC))
    double SecIntoDayUTC;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Format (
        _bstr_t Unit );
    HRESULT SetDate (
        _bstr_t Unit,
        _bstr_t Value );
    DATE GetOLEDate ( );
    void PutOLEDate (
        DATE pDate );
    long GetWholeDays ( );
    void PutWholeDays (
        long pVal );
    double GetSecIntoDay ( );
    void PutSecIntoDay (
        double pVal );
    long GetWholeDaysUTC ( );
    void PutWholeDaysUTC (
        long pVal );
    double GetSecIntoDayUTC ( );
    void PutSecIntoDayUTC (
        double pVal );
    IAgDatePtr Add (
        _bstr_t Unit,
        double Value );
    IAgDatePtr Subtract (
        _bstr_t Unit,
        double Value );
    IAgQuantityPtr Span (
        struct IAgDate * Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ BSTR Unit,
        /*[out,retval]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetDate (
        /*[in]*/ BSTR Unit,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_OLEDate (
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall put_OLEDate (
        /*[in]*/ DATE pDate ) = 0;
      virtual HRESULT __stdcall get_WholeDays (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDays (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDay (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDay (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WholeDaysUTC (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDaysUTC (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDayUTC (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDayUTC (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Span (
        /*[in]*/ struct IAgDate * Date,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

struct __declspec(uuid("c20f8369-6c14-44d5-89f6-5dc524173687"))
AgPosition;
    // [ default ] interface _IAgPosition
    // interface IAgLocationData
    // interface IAgPosition

struct __declspec(uuid("a7dcc4d2-f908-42c2-a0e7-a9853aee01ab"))
_IAgPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;

    //
    // Wrapper methods for error-handling
    //

    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("6e86f9ca-0d23-4f20-ac30-bebcfb07c679"))
IAgLocationData : IUnknown
{};

struct __declspec(uuid("3c8f27c7-0d02-41db-a9e6-a2bfe15b8b12"))
AgCartesian;
    // [ default ] interface _IAgCartesian
    // interface IAgCartesian
    // interface IAgPosition

struct __declspec(uuid("e84d397a-f19d-4fee-8781-84a617129932"))
_IAgCartesian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("77b570bb-bbb5-4a5a-bf67-880ae0c55c0d"))
IAgCartesian : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
};

struct __declspec(uuid("4a6d507b-d6f0-4fcf-b973-3fac07863335"))
AgGeodetic;
    // [ default ] interface _IAgGeodetic
    // interface IAgGeodetic
    // interface IAgPosition

struct __declspec(uuid("fe437a8a-ada7-494c-8ab9-3127026e0654"))
_IAgGeodetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("4ef60500-8a60-4e8d-aff5-9ab9431f90e4"))
IAgGeodetic : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("2b723cbd-2a9a-4e33-a9b8-1c3468852f1b"))
AgGeocentric;
    // [ default ] interface _IAgGeocentric
    // interface IAgGeocentric
    // interface IAgPosition

struct __declspec(uuid("9a4c0236-81fc-442e-9fcd-8d957c4fa281"))
_IAgGeocentric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("3db243a3-534f-4223-8c13-e53eb75cd4ce"))
IAgGeocentric : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("bc77e74e-6e37-4398-aebd-1e905f04505c"))
AgPlanetodetic;
    // [ default ] interface _IAgPlanetodetic
    // interface IAgPlanetodetic
    // interface IAgPosition

struct __declspec(uuid("e51c8dcb-6e1d-4d55-9807-47a7fb7c734f"))
_IAgPlanetodetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("4f49c748-fe5a-4b00-b47b-173e5f445411"))
IAgPlanetodetic : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
};

struct __declspec(uuid("af6f0f25-1f95-428a-a399-0681534be091"))
AgPlanetocentric;
    // [ default ] interface _IAgPlanetocentric
    // interface IAgPlanetocentric
    // interface IAgPosition

struct __declspec(uuid("301e4576-2adf-474b-8439-c39310c6481a"))
_IAgPlanetocentric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("4dfe39f0-f1e9-49c1-b11a-0ee1c5795df2"))
IAgPlanetocentric : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("927f7836-769d-4fb7-9e29-3d045ec3b327"))
AgSpherical;
    // [ default ] interface _IAgSpherical
    // interface IAgSpherical
    // interface IAgPosition

struct __declspec(uuid("3e466cbf-3602-4fe7-8375-8403f272e771"))
_IAgSpherical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("3843e85e-aeb6-433a-ae8d-8d981bb114e6"))
IAgSpherical : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
};

struct __declspec(uuid("0c595f9b-4f85-41b7-a162-a85a4518302d"))
AgCylindrical;
    // [ default ] interface _IAgCylindrical
    // interface IAgCylindrical
    // interface IAgPosition

struct __declspec(uuid("996baffa-0955-41a1-824a-7802f6bfb7ab"))
_IAgCylindrical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    HRESULT SetValues (
        double Radius,
        double Z,
        const _variant_t & Lon );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("66d88e7c-dfa4-4588-9f91-44c5c43d56de"))
IAgCylindrical : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;

    //
    // Wrapper methods for error-handling
    //

    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    HRESULT SetValues (
        double Radius,
        double Z,
        const _variant_t & Lon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
};

struct __declspec(uuid("0653a707-4b46-4635-b5e4-e953834c3378"))
AgDirection;
    // [ default ] interface _IAgDirection
    // interface IAgDirection

struct __declspec(uuid("898e251b-90ac-40a2-908f-62e2598b9ec9"))
_IAgDirection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("92bd6c6f-acae-4057-98d7-45ec4a0e733d"))
AgDirectionEuler;
    // [ default ] interface _IAgDirectionEuler
    // interface IAgDirectionEuler
    // interface IAgDirection

struct __declspec(uuid("35c5ff47-87e1-4175-95eb-439cab73bd9d"))
_IAgDirectionEuler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerDirectionSequence Sequence;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    enum AgEEulerDirectionSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerDirectionSequence pVal );
    HRESULT SetValues (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerDirectionSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerDirectionSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("2124d808-d63a-43d4-96c2-56ed861afe53"))
IAgDirectionEuler : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerDirectionSequence Sequence;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    enum AgEEulerDirectionSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerDirectionSequence pVal );
    HRESULT SetValues (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerDirectionSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerDirectionSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
};

struct __declspec(uuid("91aa8ea7-f5d5-4f46-a74f-e40d6e95bd72"))
AgDirectionPR;
    // [ default ] interface _IAgDirectionPR
    // interface IAgDirectionPR
    // interface IAgDirection

struct __declspec(uuid("ee9887ca-2e1d-4be7-a692-825d83abc412"))
_IAgDirectionPR : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEPRSequence Sequence;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    enum AgEPRSequence GetSequence ( );
    void PutSequence (
        enum AgEPRSequence pVal );
    HRESULT SetValues (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEPRSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEPRSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("b7461818-a389-4e6b-99ec-a77f0dbd41de"))
IAgDirectionPR : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEPRSequence Sequence;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    enum AgEPRSequence GetSequence ( );
    void PutSequence (
        enum AgEPRSequence pVal );
    HRESULT SetValues (
        const _variant_t & Pitch,
        const _variant_t & Roll );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEPRSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEPRSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
};

struct __declspec(uuid("bca34ca1-7a0b-4299-ba8b-ee8e177dfd98"))
AgDirectionRADec;
    // [ default ] interface _IAgDirectionRADec
    // interface IAgDirectionRADec
    // interface IAgDirection

struct __declspec(uuid("71d2f7a6-a509-4840-a3d6-15ad14f7b0f3"))
_IAgDirectionRADec : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMagnitude,put=PutMagnitude))
    double Magnitude;
    __declspec(property(get=GetDec,put=PutDec))
    _variant_t Dec;
    __declspec(property(get=GetRA,put=PutRA))
    _variant_t RA;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDec ( );
    void PutDec (
        const _variant_t & pVal );
    _variant_t GetRA ( );
    void PutRA (
        const _variant_t & pVal );
    HRESULT SetValues (
        const _variant_t & RA,
        const _variant_t & Dec );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );
    double GetMagnitude ( );
    void PutMagnitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dec (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Dec (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_RA (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RA (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Magnitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Magnitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("79c99539-649f-4603-8ed1-ebb6a4e4616b"))
IAgDirectionRADec : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetDec,put=PutDec))
    _variant_t Dec;
    __declspec(property(get=GetRA,put=PutRA))
    _variant_t RA;
    __declspec(property(get=GetMagnitude,put=PutMagnitude))
    double Magnitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDec ( );
    void PutDec (
        const _variant_t & pVal );
    _variant_t GetRA ( );
    void PutRA (
        const _variant_t & pVal );
    HRESULT SetValues (
        const _variant_t & RA,
        const _variant_t & Dec );
    double GetMagnitude ( );
    void PutMagnitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dec (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Dec (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_RA (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RA (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall get_Magnitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Magnitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4910bd98-3cc8-4f47-ae51-49367440c46c"))
AgDirectionXYZ;
    // [ default ] interface _IAgDirectionXYZ
    // interface IAgDirectionXYZ
    // interface IAgDirection

struct __declspec(uuid("09194a69-9bdf-4f94-8dd3-660f9af9d8db"))
_IAgDirectionXYZ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("9e3d600a-8ccc-48e6-b035-2f01c2beba39"))
IAgDirectionXYZ : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
};

struct __declspec(uuid("a3f1394d-b573-4974-a855-e3538dd4edbf"))
AgOrientation;
    // [ default ] interface _IAgOrientation
    // interface IAgOrientation

struct __declspec(uuid("3b14008c-48dd-40a3-9a98-34877f9c1c07"))
_IAgOrientation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c2d2a4ed-2a08-48b8-b479-6996ef33d8e3"))
AgOrientationAzEl;
    // [ default ] interface _IAgOrientationAzEl
    // interface IAgOrientationAzEl
    // interface IAgOrientation

struct __declspec(uuid("3d37ae5e-5d7c-429e-b14f-03b5a7594c69"))
_IAgOrientationAzEl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;
    __declspec(property(get=GetElevation,put=PutElevation))
    _variant_t Elevation;
    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEAzElAboutBoresight AboutBoresight;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );
    _variant_t GetElevation ( );
    void PutElevation (
        const _variant_t & pVal );
    enum AgEAzElAboutBoresight GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEAzElAboutBoresight pVal );
    HRESULT SetValues (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEAzElAboutBoresight * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEAzElAboutBoresight pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("f7e2943c-74d1-400f-98d4-505fbb83bcdc"))
IAgOrientationAzEl : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;
    __declspec(property(get=GetElevation,put=PutElevation))
    _variant_t Elevation;
    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEAzElAboutBoresight AboutBoresight;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );
    _variant_t GetElevation ( );
    void PutElevation (
        const _variant_t & pVal );
    enum AgEAzElAboutBoresight GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEAzElAboutBoresight pVal );
    HRESULT SetValues (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEAzElAboutBoresight * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEAzElAboutBoresight pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
};

struct __declspec(uuid("60874e2e-71aa-436d-ba64-7665bbad8a91"))
AgOrientationEulerAngles;
    // [ default ] interface _IAgOrientationEulerAngles
    // interface IAgOrientationEulerAngles
    // interface IAgOrientation

struct __declspec(uuid("7a137f20-75ea-4356-b9fb-216dc6e82f3b"))
_IAgOrientationEulerAngles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerOrientationSequence Sequence;
    __declspec(property(get=GetA,put=PutA))
    _variant_t A;
    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEulerOrientationSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerOrientationSequence pVal );
    _variant_t GetA ( );
    void PutA (
        const _variant_t & pVal );
    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerOrientationSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerOrientationSequence pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("4010addb-6500-4a4a-80c6-2c856f3d02f6"))
IAgOrientationEulerAngles : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerOrientationSequence Sequence;
    __declspec(property(get=GetA,put=PutA))
    _variant_t A;
    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEulerOrientationSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerOrientationSequence pVal );
    _variant_t GetA ( );
    void PutA (
        const _variant_t & pVal );
    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerOrientationSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerOrientationSequence pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
};

struct __declspec(uuid("14a92724-ed96-4a4b-bf2f-da2b08362c91"))
AgOrientationQuaternion;
    // [ default ] interface _IAgOrientationQuaternion
    // interface IAgOrientationQuaternion
    // interface IAgOrientation

struct __declspec(uuid("9e4cd87c-5186-4546-86c1-cb841a3bd0be"))
_IAgOrientationQuaternion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQX,put=PutQX))
    double QX;
    __declspec(property(get=GetQY,put=PutQY))
    double QY;
    __declspec(property(get=GetQZ,put=PutQZ))
    double QZ;
    __declspec(property(get=GetQS,put=PutQS))
    double QS;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    double GetQX ( );
    void PutQX (
        double pVal );
    double GetQY ( );
    void PutQY (
        double pVal );
    double GetQZ ( );
    void PutQZ (
        double pVal );
    double GetQS ( );
    void PutQS (
        double pVal );
    HRESULT SetValues (
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("3c303d89-c28a-4a94-9017-8abbd7aec9c8"))
IAgOrientationQuaternion : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetQX,put=PutQX))
    double QX;
    __declspec(property(get=GetQY,put=PutQY))
    double QY;
    __declspec(property(get=GetQZ,put=PutQZ))
    double QZ;
    __declspec(property(get=GetQS,put=PutQS))
    double QS;

    //
    // Wrapper methods for error-handling
    //

    double GetQX ( );
    void PutQX (
        double pVal );
    double GetQY ( );
    void PutQY (
        double pVal );
    double GetQZ ( );
    void PutQZ (
        double pVal );
    double GetQS ( );
    void PutQS (
        double pVal );
    HRESULT SetValues (
        double QX,
        double QY,
        double QZ,
        double QS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
};

struct __declspec(uuid("714b0965-a228-4ee0-af6d-cca8782132a1"))
AgOrientationYPRAngles;
    // [ default ] interface _IAgOrientationYPRAngles
    // interface IAgOrientationYPRAngles
    // interface IAgOrientation

struct __declspec(uuid("44d175b2-f269-4aa9-a9f0-59dc11ca56d7"))
_IAgOrientationYPRAngles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEYPRAnglesSequence Sequence;
    __declspec(property(get=GetYaw,put=PutYaw))
    _variant_t Yaw;
    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEYPRAnglesSequence GetSequence ( );
    void PutSequence (
        enum AgEYPRAnglesSequence pVal );
    _variant_t GetYaw ( );
    void PutYaw (
        const _variant_t & pVal );
    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEYPRAnglesSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEYPRAnglesSequence pVal ) = 0;
      virtual HRESULT __stdcall get_Yaw (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Yaw (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0f54e29d-6864-468d-b1cd-1d12ce0add60"))
IAgOrientationYPRAngles : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEYPRAnglesSequence Sequence;
    __declspec(property(get=GetYaw,put=PutYaw))
    _variant_t Yaw;
    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;

    //
    // Wrapper methods for error-handling
    //

    enum AgEYPRAnglesSequence GetSequence ( );
    void PutSequence (
        enum AgEYPRAnglesSequence pVal );
    _variant_t GetYaw ( );
    void PutYaw (
        const _variant_t & pVal );
    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEYPRAnglesSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEYPRAnglesSequence pVal ) = 0;
      virtual HRESULT __stdcall get_Yaw (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Yaw (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
};

struct __declspec(uuid("d266b02c-7030-45be-9ac0-6481259ccef9"))
AgDoublesCollection;
    // [ default ] interface IUnknown
    // interface IAgDoublesCollection

struct __declspec(uuid("90d75563-26a7-4982-85e9-c3d04b27c552"))
IAgDoublesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    double Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    double GetItem (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Add (
        double Value );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    SAFEARRAY * ToArray ( );
    HRESULT SetAt (
        long Index,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAt (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("24e2567a-7785-4b8f-9d08-fd927e5ad85a"))
AgCartesian3Vector;
    // [ default ] interface _IAgCartesian3Vector
    // interface IAgCartesian3Vector

struct __declspec(uuid("8e8a17ff-2237-4541-83b6-3cfa7c3343ca"))
_IAgCartesian3Vector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y,
        double * Z );
    HRESULT Set (
        double X,
        double Y,
        double Z );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("b17ba593-690c-4881-bc65-58f6e842f358"))
AgCartesian2Vector;
    // [ default ] interface _IAgCartesian2Vector
    // interface IAgCartesian2Vector

struct __declspec(uuid("dcb88d22-81db-4cd5-b343-3996efd0821e"))
_IAgCartesian2Vector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y );
    HRESULT Set (
        double X,
        double Y );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("222ef435-d824-4a2c-9953-1dcdc0fbce44"))
IAgCartesian2Vector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y );
    HRESULT Set (
        double X,
        double Y );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ddb3e429-10b9-45ce-9d23-e22cfc259c44"))
AgPropertyInfo;
    // [ default ] interface IUnknown
    // interface IAgPropertyInfo
    // interface _IAgPropertyInfo

enum AgEPropertyInfoValueType
{
    ePropertyInfoValueTypeInt = 0,
    ePropertyInfoValueTypeReal = 1,
    ePropertyInfoValueTypeQuantity = 2,
    ePropertyInfoValueTypeDate = 3,
    ePropertyInfoValueTypeString = 4,
    ePropertyInfoValueTypeBool = 5,
    ePropertyInfoValueTypeInterface = 6
};

struct __declspec(uuid("4c4de223-5a1c-4427-b47f-9932787fac00"))
IAgPropertyInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPropertyType))
    enum AgEPropertyInfoValueType PropertyType;
    __declspec(property(get=GetHasMin))
    VARIANT_BOOL HasMin;
    __declspec(property(get=GetHasMax))
    VARIANT_BOOL HasMax;
    __declspec(property(get=GetMin))
    _variant_t Min;
    __declspec(property(get=GetMax))
    _variant_t Max;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEPropertyInfoValueType GetPropertyType ( );
    _variant_t GetValue ( );
    HRESULT SetValue (
        const _variant_t & PropertyInfo );
    VARIANT_BOOL GetHasMin ( );
    VARIANT_BOOL GetHasMax ( );
    _variant_t GetMin ( );
    _variant_t GetMax ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PropertyType (
        /*[out,retval]*/ enum AgEPropertyInfoValueType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ VARIANT PropertyInfo ) = 0;
      virtual HRESULT __stdcall get_HasMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("42b062ae-de52-46b6-9971-abeace018a22"))
_IAgPropertyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPropertyType))
    enum AgEPropertyInfoValueType PropertyType;
    __declspec(property(get=GetHasMin))
    VARIANT_BOOL HasMin;
    __declspec(property(get=GetHasMax))
    VARIANT_BOOL HasMax;
    __declspec(property(get=GetMin))
    _variant_t Min;
    __declspec(property(get=GetMax))
    _variant_t Max;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEPropertyInfoValueType GetPropertyType ( );
    _variant_t GetValue ( );
    HRESULT SetValue (
        const _variant_t & PropertyInfo );
    VARIANT_BOOL GetHasMin ( );
    VARIANT_BOOL GetHasMax ( );
    _variant_t GetMin ( );
    _variant_t GetMax ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PropertyType (
        /*[out,retval]*/ enum AgEPropertyInfoValueType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[out,retval]*/ VARIANT * pVVal ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ VARIANT PropertyInfo ) = 0;
      virtual HRESULT __stdcall get_HasMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("2c3a4fa2-6f9d-42d8-9709-182e0e618d7f"))
AgPropertyInfoCollection;
    // [ default ] interface IUnknown
    // interface IAgPropertyInfoCollection

struct __declspec(uuid("25e3f178-638f-462d-9857-c548cf7bba80"))
IAgPropertyInfoCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgPropertyInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgPropertyInfoPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgPropertyInfo * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("95e84296-d519-44d5-ae58-c79acebd74e3"))
AgRuntimeTypeInfo;
    // [ default ] interface IUnknown
    // interface _IAgRuntimeTypeInfo
    // interface IAgRuntimeTypeInfo

struct __declspec(uuid("40815573-34a0-40d2-bf62-7537cb1302e6"))
_IAgRuntimeTypeInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IAgPropertyInfoCollectionPtr Properties;
    __declspec(property(get=GetIsCollection))
    VARIANT_BOOL IsCollection;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IAgPropertyInfoCollectionPtr GetProperties ( );
    VARIANT_BOOL GetIsCollection ( );
    long GetCount ( );
    IAgPropertyInfoPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgPropertyInfoCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCollection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgPropertyInfo * * ppVal ) = 0;
};

struct __declspec(uuid("392131c9-c7da-4e35-a95a-4c030ce31357"))
IAgRuntimeTypeInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IAgPropertyInfoCollectionPtr Properties;
    __declspec(property(get=GetIsCollection))
    VARIANT_BOOL IsCollection;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IAgPropertyInfoCollectionPtr GetProperties ( );
    VARIANT_BOOL GetIsCollection ( );
    long GetCount ( );
    IAgPropertyInfoPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgPropertyInfoCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCollection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgPropertyInfo * * ppVal ) = 0;
};

struct __declspec(uuid("d9ef4e97-361b-4d0a-a9ed-20cb6637ef2e"))
AgCROrientationAzEl;
    // [ default ] interface _IAgCROrientationAzEl
    // interface IAgOrientationAzEl
    // interface IAgOrientation
    // interface IAgOrientationPositionOffset

struct __declspec(uuid("1da6141f-ed8b-460b-9c54-e91046f05da8"))
_IAgCROrientationAzEl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionOffset))
    IAgCartesian3VectorPtr PositionOffset;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;
    __declspec(property(get=GetElevation,put=PutElevation))
    _variant_t Elevation;
    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEAzElAboutBoresight AboutBoresight;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );
    _variant_t GetElevation ( );
    void PutElevation (
        const _variant_t & pVal );
    enum AgEAzElAboutBoresight GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEAzElAboutBoresight pVal );
    HRESULT SetValues (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );
    IAgCartesian3VectorPtr GetPositionOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEAzElAboutBoresight * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEAzElAboutBoresight pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionOffset (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("b892e634-a18c-42da-af35-d1c92793a3dd"))
IAgOrientationPositionOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionOffset))
    IAgCartesian3VectorPtr PositionOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCartesian3VectorPtr GetPositionOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PositionOffset (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("82db998b-9a3b-48b8-8ff6-1d6bc219ce66"))
AgCROrientationEulerAngles;
    // [ default ] interface _IAgCROrientationEulerAngles
    // interface IAgOrientationEulerAngles
    // interface IAgOrientation
    // interface IAgOrientationPositionOffset

struct __declspec(uuid("d5ac1455-8b86-4577-a7a3-9151efe277f3"))
_IAgCROrientationEulerAngles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionOffset))
    IAgCartesian3VectorPtr PositionOffset;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerOrientationSequence Sequence;
    __declspec(property(get=GetA,put=PutA))
    _variant_t A;
    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEulerOrientationSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerOrientationSequence pVal );
    _variant_t GetA ( );
    void PutA (
        const _variant_t & pVal );
    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );
    IAgCartesian3VectorPtr GetPositionOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerOrientationSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerOrientationSequence pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionOffset (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("066d9b48-0e24-4b56-9f25-07e60ddea3e0"))
AgCROrientationQuaternion;
    // [ default ] interface _IAgCROrientationQuaternion
    // interface IAgOrientationQuaternion
    // interface IAgOrientation
    // interface IAgOrientationPositionOffset

struct __declspec(uuid("1edb1ba4-4b95-492c-8e8d-3147e503bbb3"))
_IAgCROrientationQuaternion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionOffset))
    IAgCartesian3VectorPtr PositionOffset;
    __declspec(property(get=GetQX,put=PutQX))
    double QX;
    __declspec(property(get=GetQY,put=PutQY))
    double QY;
    __declspec(property(get=GetQZ,put=PutQZ))
    double QZ;
    __declspec(property(get=GetQS,put=PutQS))
    double QS;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    double GetQX ( );
    void PutQX (
        double pVal );
    double GetQY ( );
    void PutQY (
        double pVal );
    double GetQZ ( );
    void PutQZ (
        double pVal );
    double GetQS ( );
    void PutQS (
        double pVal );
    HRESULT SetValues (
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );
    IAgCartesian3VectorPtr GetPositionOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionOffset (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("2fcd1835-63ee-4d08-a5c3-d92eaec915f2"))
AgCROrientationYPRAngles;
    // [ default ] interface _IAgCROrientationYPRAngles
    // interface IAgOrientationYPRAngles
    // interface IAgOrientation
    // interface IAgOrientationPositionOffset

struct __declspec(uuid("1443e1db-9419-4433-bc7d-9fc7ee394733"))
_IAgCROrientationYPRAngles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionOffset))
    IAgCartesian3VectorPtr PositionOffset;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEYPRAnglesSequence Sequence;
    __declspec(property(get=GetYaw,put=PutYaw))
    _variant_t Yaw;
    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEYPRAnglesSequence GetSequence ( );
    void PutSequence (
        enum AgEYPRAnglesSequence pVal );
    _variant_t GetYaw ( );
    void PutYaw (
        const _variant_t & pVal );
    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );
    IAgCartesian3VectorPtr GetPositionOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEYPRAnglesSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEYPRAnglesSequence pVal ) = 0;
      virtual HRESULT __stdcall get_Yaw (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Yaw (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionOffset (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("ea42e642-a1e4-4250-ace5-cde816409d84"))
AgCROrientationOffsetCart;
    // [ default ] interface _IAgCROrientationOffsetCart
    // interface IAgCartesian3Vector

struct __declspec(uuid("bc2c3c74-2cc0-4d23-a9d1-57b7db809550"))
_IAgCROrientationOffsetCart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    HRESULT Set (
        double X,
        double Y,
        double Z );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("1414f7a3-88ed-44be-9a10-9ec2939110b4"))
_IAgUnitPrefsUnit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetAbbrv))
    _bstr_t Abbrv;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetDimension))
    IAgUnitPrefsDimPtr Dimension;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFullName ( );
    _bstr_t GetAbbrv ( );
    long GetId ( );
    IAgUnitPrefsDimPtr GetDimension ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Abbrv (
        /*[out,retval]*/ BSTR * pAbbrv ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ struct IAgUnitPrefsDim * * ppUnitPrefsDim ) = 0;
};

struct __declspec(uuid("8a0e0aa9-f9a0-4732-a0a2-fa7393fe71b6"))
IAgUnitPrefsDim : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAvailableUnits))
    IAgUnitPrefsUnitCollectionPtr AvailableUnits;
    __declspec(property(get=GetCurrentUnit))
    IAgUnitPrefsUnitPtr CurrentUnit;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    _bstr_t GetName ( );
    IAgUnitPrefsUnitCollectionPtr GetAvailableUnits ( );
    IAgUnitPrefsUnitPtr GetCurrentUnit ( );
    HRESULT SetCurrentUnit (
        _bstr_t UnitAbbrv );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_AvailableUnits (
        /*[out,retval]*/ struct IAgUnitPrefsUnitCollection * * ppUnitPrefsUnitCollection ) = 0;
      virtual HRESULT __stdcall get_CurrentUnit (
        /*[out,retval]*/ struct IAgUnitPrefsUnit * * ppUnitPrefsUnit ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
};

struct __declspec(uuid("087c2c8c-1cfc-4a71-a597-80e10952310a"))
IAgUnitPrefsUnit : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetAbbrv))
    _bstr_t Abbrv;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetDimension))
    IAgUnitPrefsDimPtr Dimension;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFullName ( );
    _bstr_t GetAbbrv ( );
    long GetId ( );
    IAgUnitPrefsDimPtr GetDimension ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Abbrv (
        /*[out,retval]*/ BSTR * pAbbrv ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ struct IAgUnitPrefsDim * * ppUnitPrefsDim ) = 0;
};

struct __declspec(uuid("877f4db9-79bb-43f7-a729-55b122b46768"))
IAgUnitPrefsUnitCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgUnitPrefsUnitPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgUnitPrefsUnitPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgUnitPrefsUnit * * ppUnitPrefsUnit ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("b7c3da44-fd06-42eb-adad-fa952e68011b"))
_IAgUnitPrefsDim : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAvailableUnits))
    IAgUnitPrefsUnitCollectionPtr AvailableUnits;
    __declspec(property(get=GetCurrentUnit))
    IAgUnitPrefsUnitPtr CurrentUnit;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    _bstr_t GetName ( );
    IAgUnitPrefsUnitCollectionPtr GetAvailableUnits ( );
    IAgUnitPrefsUnitPtr GetCurrentUnit ( );
    HRESULT SetCurrentUnit (
        _bstr_t UnitAbbrv );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_AvailableUnits (
        /*[out,retval]*/ struct IAgUnitPrefsUnitCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentUnit (
        /*[out,retval]*/ struct IAgUnitPrefsUnit * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
};

struct __declspec(uuid("36069a3d-9a9b-425e-b80b-b604ae70b239"))
IAgUnitPrefsDimCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgUnitPrefsDimPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMissionElapsedTime,put=PutMissionElapsedTime))
    _variant_t MissionElapsedTime;
    __declspec(property(get=GetJulianDateOffset,put=PutJulianDateOffset))
    double JulianDateOffset;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgUnitPrefsDimPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    HRESULT SetCurrentUnit (
        _bstr_t Dimension,
        _bstr_t UnitAbbrv );
    _bstr_t GetCurrentUnitAbbrv (
        const _variant_t & IndexOrDimName );
    _variant_t GetMissionElapsedTime ( );
    void PutMissionElapsedTime (
        const _variant_t & pMisElapTime );
    double GetJulianDateOffset ( );
    void PutJulianDateOffset (
        double pJDateOffset );
    IUnknownPtr Get_NewEnum ( );
    HRESULT ResetUnits ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgUnitPrefsDim * * ppAgUnitPrefsDim ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentUnit (
        /*[in]*/ BSTR Dimension,
        /*[in]*/ BSTR UnitAbbrv ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentUnitAbbrv (
        /*[in]*/ VARIANT IndexOrDimName,
        /*[out,retval]*/ BSTR * pUnitAbbrv ) = 0;
      virtual HRESULT __stdcall get_MissionElapsedTime (
        /*[out,retval]*/ VARIANT * pMisElapTime ) = 0;
      virtual HRESULT __stdcall put_MissionElapsedTime (
        /*[in]*/ VARIANT pMisElapTime ) = 0;
      virtual HRESULT __stdcall get_JulianDateOffset (
        /*[out,retval]*/ double * pJDateOffset ) = 0;
      virtual HRESULT __stdcall put_JulianDateOffset (
        /*[in]*/ double pJDateOffset ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ResetUnits ( ) = 0;
};

} // namespace STKUtil

#pragma pack(pop)
