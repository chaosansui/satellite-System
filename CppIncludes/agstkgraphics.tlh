// Created by Microsoft (R) C/C++ Compiler Version 14.16.27026.1 (820b37ad).
//
// d:\dev\r_stk_prod_x64\source\lib\release.x64\tlhbuilder\agstkgraphics.tlh
//
// C++ source equivalent of type library AgStkGraphics.tlb
// compiler-generated file created 03/29/19 at 20:37:35 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AgSTKGraphicsLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("42d2781b-8a06-4db2-9969-72d6abf01a72"))
/* LIBID */ __AgSTKGraphicsLib;
struct __declspec(uuid("9107fca2-51b8-4347-9391-9ee6c6b792e3"))
/* interface */ IAgStkGraphicsPathPoint;
struct __declspec(uuid("49ee5d85-028e-4b8e-bba4-14d24acefb9f"))
/* dual interface */ _IAgStkGraphicsPathPoint;
struct __declspec(uuid("efb486c4-09f0-4918-b051-7776acd13f66"))
/* interface */ IAgStkGraphicsPathPointFactory;
struct __declspec(uuid("3bee0e8a-72ef-4c17-a953-98cca8a8a3fc"))
/* dual interface */ _IAgStkGraphicsPathPointFactory;
struct __declspec(uuid("68e2776e-6e9a-449a-8146-99e67cf8d16c"))
/* interface */ IAgStkGraphicsBoundingSphere;
struct __declspec(uuid("1c768789-45e4-4108-b666-4585d76dc1ad"))
/* dual interface */ _IAgStkGraphicsBoundingSphere;
struct __declspec(uuid("fdde5510-3231-4c01-9c23-8485643e47ff"))
/* interface */ IAgStkGraphicsBoundingSphereFactory;
struct __declspec(uuid("de9c2ffc-7b06-41b9-b8a8-8590fc00665f"))
/* dual interface */ _IAgStkGraphicsBoundingSphereFactory;
struct __declspec(uuid("c71ed80c-abbc-4ce5-bf56-a21ea03c4593"))
/* interface */ IAgStkGraphicsTextureFilter2D;
enum AgEStkGraphicsMinificationFilter;
enum AgEStkGraphicsMagnificationFilter;
enum AgEStkGraphicsTextureWrap;
struct __declspec(uuid("7f8d6adc-44af-4c1f-a083-a4cd887f8e6e"))
/* dual interface */ _IAgStkGraphicsTextureFilter2D;
struct __declspec(uuid("8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5"))
/* interface */ IAgStkGraphicsTextureFilter2DFactory;
struct __declspec(uuid("99bf5e5b-8d32-4ade-80d4-f275d49bb79f"))
/* dual interface */ _IAgStkGraphicsTextureFilter2DFactory;
struct __declspec(uuid("b207af7e-f2b5-4b2f-89f6-1fc3721102b3"))
/* interface */ IAgStkGraphicsRendererTexture2D;
struct __declspec(uuid("46fbfc4c-29b8-49c7-beb7-77bc5d836f10"))
/* interface */ IAgStkGraphicsRendererTextureTemplate2D;
enum AgEStkGraphicsInternalTextureFormat;
struct __declspec(uuid("f937c30a-5981-4129-a4fe-da3bb3f41c0b"))
/* dual interface */ _IAgStkGraphicsRendererTexture2D;
struct __declspec(uuid("8f15b6b4-ba9c-4d9e-a1e1-2456cadbbd0c"))
/* dual interface */ _IAgStkGraphicsRendererTextureTemplate2D;
struct __declspec(uuid("9214e199-6476-4ef1-a741-13362718bdd5"))
/* interface */ IAgStkGraphicsPathPointCollection;
struct __declspec(uuid("f36bc404-1165-4da0-8a1f-33ec8e33f94b"))
/* dual interface */ _IAgStkGraphicsPathPointCollection;
struct __declspec(uuid("feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68"))
/* interface */ IAgStkGraphicsObjectCollection;
struct __declspec(uuid("998d0185-2228-4599-aeed-41f66c30fde5"))
/* dual interface */ _IAgStkGraphicsObjectCollection;
struct __declspec(uuid("aac03f9e-8c23-4a8d-ad88-455deb232f0b"))
/* interface */ IAgStkGraphicsSceneCollection;
struct __declspec(uuid("2d15c682-efb5-499f-8851-a49599b2097d"))
/* interface */ IAgStkGraphicsScene;
struct __declspec(uuid("c9a35fc4-8868-4b28-8622-13cfa470c315"))
/* interface */ IAgStkGraphicsCamera;
enum AgEStkGraphicsConstrainedUpAxis;
struct __declspec(uuid("6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1"))
/* interface */ IAgStkGraphicsCameraSnapshot;
enum AgEStkGraphicsCameraSnapshotFileFormat;
struct __declspec(uuid("e0113161-7dd5-4411-bca9-6175aad19b4e"))
/* interface */ IAgStkGraphicsRaster;
struct __declspec(uuid("067e0cd7-c1c5-41b7-93a8-f9ae8b67df25"))
/* interface */ IAgStkGraphicsRasterAttributes;
enum AgEStkGraphicsRasterFormat;
enum AgEStkGraphicsRasterType;
enum AgEStkGraphicsRasterOrientation;
enum AgEStkGraphicsRasterBand;
enum AgEStkGraphicsFlipAxis;
struct __declspec(uuid("1d21525d-4204-47cc-8457-996e1a6eab7e"))
/* interface */ IAgStkGraphicsRasterFilter;
struct __declspec(uuid("f519ee7a-e452-451a-839d-0eda6cf69c0a"))
/* interface */ IAgStkGraphicsCameraVideoRecording;
enum AgEStkGraphicsVisibility;
struct __declspec(uuid("683cd020-54fc-48af-b7e4-0dbe06c9bf12"))
/* interface */ IAgStkGraphicsLighting;
struct __declspec(uuid("fc4eafc1-217c-4a1b-9640-4a678d84813a"))
/* interface */ IAgStkGraphicsCentralBodyGraphicsIndexer;
struct __declspec(uuid("27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca"))
/* interface */ IAgStkGraphicsCentralBodyGraphics;
struct __declspec(uuid("ac17f1dd-17dc-41bd-8429-80f90234b53f"))
/* interface */ IAgStkGraphicsGlobeImageOverlay;
struct __declspec(uuid("6dbd63a6-624b-4318-8fec-daf384f070c4"))
/* interface */ IAgStkGraphicsTerrainCollection;
struct __declspec(uuid("dfe57e34-7b31-4360-a7a8-8db856882670"))
/* interface */ IAgStkGraphicsTerrainOverlay;
struct __declspec(uuid("797b7253-9205-47a1-b49b-edf6e06326c0"))
/* interface */ IAgStkGraphicsImageCollection;
struct __declspec(uuid("056eb708-4504-4d62-b4d8-3ca00b0b91fa"))
/* interface */ IAgStkGraphicsKmlGraphics;
struct __declspec(uuid("8f385d51-5b9c-4f8d-8340-1e8f49b51a6a"))
/* interface */ IAgStkGraphicsKmlDocumentCollection;
struct __declspec(uuid("2e284efe-3dda-4fac-91ab-7b8c84eb3ad2"))
/* interface */ IAgStkGraphicsKmlDocument;
struct __declspec(uuid("6f2961c3-3fbe-4d5c-849b-d17be044dd71"))
/* interface */ IAgStkGraphicsSceneGlobeOverlaySettings;
struct __declspec(uuid("2d29d5b1-b160-49ad-8f58-cef696bc952a"))
/* interface */ IAgStkGraphicsPickResultCollection;
struct __declspec(uuid("55238a64-4c7f-4be7-abcb-1d2321f8f64a"))
/* interface */ IAgStkGraphicsPickResult;
struct __declspec(uuid("6c1f8d2c-1b38-482c-b935-b174003284bb"))
/* interface */ IAgStkGraphicsScreenOverlayPickResultCollection;
struct __declspec(uuid("4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4"))
/* interface */ IAgStkGraphicsScreenOverlayPickResult;
struct __declspec(uuid("e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3"))
/* interface */ IAgStkGraphicsScreenOverlay;
enum AgEStkGraphicsAntiAliasing;
struct __declspec(uuid("51edc3f1-d432-4a8a-a84e-cf049a5aa871"))
/* dual interface */ _IAgStkGraphicsSceneCollection;
struct __declspec(uuid("5e57d9b7-f014-46d7-8b6d-b38d47e7ce41"))
/* interface */ IAgStkGraphicsScreenOverlayContainer;
struct __declspec(uuid("1bf5a224-26b7-4907-aa7d-fd6fc81a51f3"))
/* interface */ IAgStkGraphicsScreenOverlayCollection;
struct __declspec(uuid("a6d2ddc5-5eaf-4b36-9b93-4ebddb0f664f"))
/* dual interface */ _IAgStkGraphicsScreenOverlayPickResultCollection;
struct __declspec(uuid("bbe097c9-d64c-4474-ba9a-fb47c76388ba"))
/* interface */ IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs;
struct __declspec(uuid("4abc4a1c-c1c4-4a26-8e3b-eccbbf5d0811"))
/* dual interface */ _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs;
struct __declspec(uuid("76a70982-21b5-427f-9db1-c0b92950b516"))
/* interface */ IAgStkGraphicsTerrainOverlayAddCompleteEventArgs;
struct __declspec(uuid("11493ddc-2393-433b-aca9-03e290782b29"))
/* dual interface */ _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs;
struct __declspec(uuid("e9bfe8ea-9724-4718-a230-bb8457b6709d"))
/* dual interface */ _IAgStkGraphicsPickResultCollection;
struct __declspec(uuid("7c1eea22-fad1-437e-9282-f9202cd103bd"))
/* interface */ IAgStkGraphicsRenderingEventArgs;
struct __declspec(uuid("17503da2-9590-44e2-844c-0051bb3b643f"))
/* dual interface */ _IAgStkGraphicsRenderingEventArgs;
struct __declspec(uuid("15dae589-33b5-4629-a50f-485a49546ddf"))
/* interface */ IAgStkGraphicsBatchPrimitiveIndex;
struct __declspec(uuid("b593dc7b-315a-4c37-9f3c-42dfbd996ac2"))
/* interface */ IAgStkGraphicsPrimitive;
struct __declspec(uuid("5214ce90-6448-4cc7-bc5c-f06485ec5bb8"))
/* interface */ IAgStkGraphicsDisplayCondition;
struct __declspec(uuid("17e49c0b-8a9a-4a9a-9a0f-304e1a43fc57"))
/* dual interface */ _IAgStkGraphicsBatchPrimitiveIndex;
struct __declspec(uuid("35c41c5e-c707-45bd-ad43-5416a0195213"))
/* dual interface */ _IAgStkGraphicsKmlDocumentCollection;
struct __declspec(uuid("e4f1dff5-fbb1-4951-bfc0-abfeec89acc8"))
/* interface */ IAgStkGraphicsKmlFeatureCollection;
struct __declspec(uuid("bc7646ca-da52-4a62-8ef4-838382f21a08"))
/* interface */ IAgStkGraphicsKmlFeature;
struct __declspec(uuid("f6d82883-7a86-47af-b57c-261e6f7a6f53"))
/* dual interface */ _IAgStkGraphicsKmlFeatureCollection;
struct __declspec(uuid("60d78883-928f-45f2-ab60-0becb167af3d"))
/* interface */ IAgStkGraphicsKmlDocumentLoadedEventArgs;
struct __declspec(uuid("6157d6d6-d5b1-43f0-932c-00809d3ad772"))
/* dual interface */ _IAgStkGraphicsKmlDocumentLoadedEventArgs;
struct __declspec(uuid("5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69"))
/* interface */ IAgStkGraphicsFactoryAndInitializers;
struct __declspec(uuid("3d49da39-dbe0-4ef9-b589-bc0cf5e78085"))
/* interface */ IAgStkGraphicsBoxTriangulatorInitializer;
struct __declspec(uuid("a7ba0673-f944-4dc6-a450-5cb62915cb7b"))
/* interface */ IAgStkGraphicsSolidTriangulatorResult;
enum AgEStkGraphicsPolylineType;
struct __declspec(uuid("ee39d933-ce2c-4087-8c8a-f38ebe83842f"))
/* interface */ IAgStkGraphicsCylinderTriangulatorInitializer;
enum AgEStkGraphicsCylinderFill;
struct __declspec(uuid("8c50173b-e1e0-4321-aeac-5c75e4ef323f"))
/* interface */ IAgStkGraphicsEllipsoidTriangulatorInitializer;
struct __declspec(uuid("b6b79988-0b1f-4b6e-8970-ff86b6d94b36"))
/* interface */ IAgStkGraphicsExtrudedPolylineTriangulatorInitializer;
struct __declspec(uuid("5d94d077-0a56-4d83-ac90-369344533684"))
/* interface */ IAgStkGraphicsExtrudedPolylineTriangulatorResult;
enum AgEStkGraphicsWindingOrder;
struct __declspec(uuid("74b85e21-b114-46b6-820d-2be8adc7ea7a"))
/* interface */ IAgStkGraphicsSurfaceExtentTriangulatorInitializer;
struct __declspec(uuid("27cedd3e-86cd-4d18-862f-eeb0e6de62aa"))
/* interface */ IAgStkGraphicsSurfaceTriangulatorResult;
struct __declspec(uuid("52654c8a-3c27-415f-b346-c0e433241b49"))
/* interface */ IAgStkGraphicsSurfacePolygonTriangulatorInitializer;
struct __declspec(uuid("8b711790-8bc2-4e20-8795-89a4863a0566"))
/* interface */ IAgStkGraphicsSurfaceShapesInitializer;
struct __declspec(uuid("0efd15db-d9f7-4e1f-925b-ade0b0a22a21"))
/* interface */ IAgStkGraphicsSurfaceShapesResult;
struct __declspec(uuid("0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e"))
/* interface */ IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory;
struct __declspec(uuid("5c2d7cca-54f6-4b27-93d6-58bddac0befe"))
/* interface */ IAgStkGraphicsAGIProcessedImageGlobeOverlay;
struct __declspec(uuid("dfeee7d8-cd40-43a5-b168-843f26b027ea"))
/* interface */ IAgStkGraphicsAGIProcessedTerrainOverlayFactory;
struct __declspec(uuid("093a5b12-abdd-4029-adc5-2cbab7e4216d"))
/* interface */ IAgStkGraphicsAGIProcessedTerrainOverlay;
struct __declspec(uuid("709d626f-1b45-448d-ad5c-1ff3cb17410e"))
/* interface */ IAgStkGraphicsAGIRoamImageGlobeOverlayFactory;
struct __declspec(uuid("d76d82b7-7a13-452d-b661-1d416fae732e"))
/* interface */ IAgStkGraphicsAGIRoamImageGlobeOverlay;
struct __declspec(uuid("c80d1ae6-db35-4f55-a9a4-131260022535"))
/* interface */ IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory;
struct __declspec(uuid("efb59b20-9f79-4043-a3bd-6cd1a3395738"))
/* interface */ IAgStkGraphicsCustomImageGlobeOverlayPluginActivator;
struct __declspec(uuid("197fbafd-0f9c-44d9-b2d0-14c8b30f312e"))
/* interface */ IAgStkGraphicsCustomImageGlobeOverlayPluginProxy;
struct __declspec(uuid("f8086ed2-4b18-4d6d-a39f-1ab5801cf886"))
/* interface */ IAgStkGraphicsCustomImageGlobeOverlay;
enum AgEStkGraphicsMapProjection;
struct __declspec(uuid("77060b41-7b24-4118-ab48-22efb3007c76"))
/* interface */ IAgStkGraphicsGeospatialImageGlobeOverlayFactory;
struct __declspec(uuid("fd42a5ba-5049-4c58-bf40-61ca5943dccf"))
/* interface */ IAgStkGraphicsGeospatialImageGlobeOverlay;
struct __declspec(uuid("616abf78-55f7-41a7-a6b7-2da4ae822856"))
/* interface */ IAgStkGraphicsProjectedRasterOverlayFactory;
struct __declspec(uuid("152e3a02-23b0-4dc8-a7e5-9ee19619bcab"))
/* interface */ IAgStkGraphicsProjection;
struct __declspec(uuid("7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143"))
/* interface */ IAgStkGraphicsProjectedRasterOverlay;
struct __declspec(uuid("db047d3d-5afd-4b64-b396-034fd95ec57a"))
/* interface */ IAgStkGraphicsProjectionFactory;
struct __declspec(uuid("ee1efbf0-ddbf-41ff-9257-ff73e164d27a"))
/* interface */ IAgStkGraphicsAltitudeDisplayConditionFactory;
struct __declspec(uuid("a6225aa6-608d-4ad8-b5f6-2afdd29b96f9"))
/* interface */ IAgStkGraphicsAltitudeDisplayCondition;
struct __declspec(uuid("a2ca541e-a860-4e47-b0e9-f0e973733e67"))
/* interface */ IAgStkGraphicsCompositeDisplayConditionFactory;
struct __declspec(uuid("afe0e66f-0fc5-46ad-801f-22670cfe99a9"))
/* interface */ IAgStkGraphicsCompositeDisplayCondition;
enum AgEStkGraphicsBinaryLogicOperation;
struct __declspec(uuid("6828c6a1-7018-4b65-90af-8bb36f478a6d"))
/* interface */ IAgStkGraphicsCompositePrimitiveFactory;
struct __declspec(uuid("c24448a9-4fe7-4905-86e0-70a71346fcf2"))
/* interface */ IAgStkGraphicsCompositePrimitive;
enum AgEStkGraphicsPrimitivesSortOrder;
struct __declspec(uuid("4c5226f9-a98e-4af0-a9a4-1e5926908d4c"))
/* interface */ IAgStkGraphicsConstantDisplayConditionFactory;
struct __declspec(uuid("efede07b-4d59-4622-ba51-0281a5108aab"))
/* interface */ IAgStkGraphicsConstantDisplayCondition;
struct __declspec(uuid("d7dda546-31d2-4bbd-a44d-b9dc413a2412"))
/* interface */ IAgStkGraphicsDistanceDisplayConditionFactory;
struct __declspec(uuid("b1b3130c-bebb-4a64-a5b7-2357384e2b8c"))
/* interface */ IAgStkGraphicsDistanceDisplayCondition;
struct __declspec(uuid("05bc2dbc-8533-467a-85d2-720c583f1c7e"))
/* interface */ IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory;
struct __declspec(uuid("212b00ec-ff3a-4f1b-9fc3-5a900c6536dc"))
/* interface */ IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition;
struct __declspec(uuid("983949c2-68a3-46ee-9670-f174091286ad"))
/* interface */ IAgStkGraphicsGlobeOverlay;
enum AgEStkGraphicsGlobeOverlayRole;
struct __declspec(uuid("913dd9f7-a91b-4346-b233-180126a8d1bd"))
/* interface */ IAgStkGraphicsDistanceToPositionDisplayConditionFactory;
struct __declspec(uuid("0110db74-d567-4804-9bec-d7cce8ed59d0"))
/* interface */ IAgStkGraphicsDistanceToPositionDisplayCondition;
struct __declspec(uuid("f103b596-f16c-4ad6-8242-bef8ecb83383"))
/* interface */ IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory;
struct __declspec(uuid("bf9664c2-e8c4-471b-a071-865f1448a031"))
/* interface */ IAgStkGraphicsDistanceToPrimitiveDisplayCondition;
struct __declspec(uuid("4ea0bb3e-5620-4a74-b721-6b0000eafdc2"))
/* interface */ IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory;
struct __declspec(uuid("23d3c9c4-b242-4a5a-89cf-58387bd9f935"))
/* interface */ IAgStkGraphicsDurationPathPrimitiveUpdatePolicy;
enum AgEStkGraphicsPathPrimitiveRemoveLocation;
struct __declspec(uuid("cf06dc51-75ad-45a2-a1ff-9e3b550be24f"))
/* interface */ IAgStkGraphicsGlobeImageOverlayInitializer;
struct __declspec(uuid("1a87aeee-c00b-462b-bf99-90cb94ae1eb7"))
/* interface */ IAgStkGraphicsGraphicsFontFactory;
enum AgEStkGraphicsFontStyle;
struct __declspec(uuid("36a67d60-3f13-435b-92d8-b6a76ed1a74a"))
/* interface */ IAgStkGraphicsGraphicsFont;
struct __declspec(uuid("35afb348-117f-4db0-87ec-643b4b0364dd"))
/* interface */ IAgStkGraphicsGreatArcInterpolatorFactory;
struct __declspec(uuid("8de070c1-de8f-48ee-96ea-5dc046706d28"))
/* interface */ IAgStkGraphicsGreatArcInterpolator;
struct __declspec(uuid("2317f609-231f-4266-b38c-f4fa812a0306"))
/* interface */ IAgStkGraphicsAlphaFromLuminanceFilterFactory;
struct __declspec(uuid("9ee1933e-8f0d-4fca-8386-e03194e483da"))
/* interface */ IAgStkGraphicsAlphaFromLuminanceFilter;
struct __declspec(uuid("f9802000-aea6-453d-b797-d68fae4a491b"))
/* interface */ IAgStkGraphicsAlphaFromPixelFilterFactory;
struct __declspec(uuid("071460a3-f86a-4c28-b2bf-22946db06ac8"))
/* interface */ IAgStkGraphicsAlphaFromPixelFilter;
struct __declspec(uuid("f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c"))
/* interface */ IAgStkGraphicsAlphaFromRasterFilterFactory;
struct __declspec(uuid("77326f5e-c3f3-4660-8df4-6225cfdc0870"))
/* interface */ IAgStkGraphicsAlphaFromRasterFilter;
struct __declspec(uuid("76a65e3a-1868-4312-8a66-8e16a525effd"))
/* interface */ IAgStkGraphicsBandExtractFilterFactory;
struct __declspec(uuid("68723ebb-619a-4d11-bb5a-27200ef0e15c"))
/* interface */ IAgStkGraphicsBandExtractFilter;
struct __declspec(uuid("1bfcf1dd-1ada-47b7-829b-ea60fc04b61d"))
/* interface */ IAgStkGraphicsBandOrderFilterFactory;
struct __declspec(uuid("a4a76805-e8e4-4bb6-878c-dcb0da6d84d3"))
/* interface */ IAgStkGraphicsBandOrderFilter;
struct __declspec(uuid("99188b11-f0f6-4452-b2e9-c53472860aa1"))
/* interface */ IAgStkGraphicsBlurFilterFactory;
struct __declspec(uuid("78e623b1-dc80-478d-acb8-a552fa136ccc"))
/* interface */ IAgStkGraphicsBlurFilter;
enum AgEStkGraphicsBlurMethod;
struct __declspec(uuid("85e2696a-638c-4151-8ba4-e1fdef462598"))
/* interface */ IAgStkGraphicsBrightnessFilterFactory;
struct __declspec(uuid("fd8324ea-dbc2-42a5-88ba-c2769fd4a28e"))
/* interface */ IAgStkGraphicsBrightnessFilter;
struct __declspec(uuid("361263b5-d7ef-468a-9804-c1c9342ffeb8"))
/* interface */ IAgStkGraphicsColorToLuminanceFilterFactory;
struct __declspec(uuid("bc1d198f-705b-452b-8e51-1c600c547594"))
/* interface */ IAgStkGraphicsColorToLuminanceFilter;
struct __declspec(uuid("d78a7285-c3ff-47b5-b5af-ea67faffae92"))
/* interface */ IAgStkGraphicsContrastFilterFactory;
struct __declspec(uuid("47ea43c3-5ffd-4935-8569-bb19ee6b0799"))
/* interface */ IAgStkGraphicsContrastFilter;
struct __declspec(uuid("f262f8e7-74a5-440e-9754-d3c8a4196abf"))
/* interface */ IAgStkGraphicsConvolutionFilterFactory;
struct __declspec(uuid("65e3646d-dfac-40af-b37f-15596ef13292"))
/* interface */ IAgStkGraphicsConvolutionFilter;
struct __declspec(uuid("d471ae80-2bf6-40d7-9c5b-48c08d0e3819"))
/* interface */ IAgStkGraphicsEdgeDetectFilterFactory;
struct __declspec(uuid("0919d5b6-9497-4027-9fa2-69afe60c5f02"))
/* interface */ IAgStkGraphicsEdgeDetectFilter;
enum AgEStkGraphicsEdgeDetectMethod;
struct __declspec(uuid("3c0a84bb-9330-422b-808e-6f9cf0aa3055"))
/* interface */ IAgStkGraphicsFilteringRasterStreamFactory;
struct __declspec(uuid("63f024ca-7113-4841-8d26-7a286458bd7c"))
/* interface */ IAgStkGraphicsRasterStream;
struct __declspec(uuid("75917a6b-c2f9-4350-879a-248bcc239e6b"))
/* interface */ IAgStkGraphicsFilteringRasterStream;
struct __declspec(uuid("0f7bc6a1-42ac-41f0-8f42-d915fba6b859"))
/* interface */ IAgStkGraphicsFlipFilterFactory;
struct __declspec(uuid("478edb08-272a-42b6-b486-a81a5bcaf92b"))
/* interface */ IAgStkGraphicsFlipFilter;
struct __declspec(uuid("4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6"))
/* interface */ IAgStkGraphicsGammaCorrectionFilterFactory;
struct __declspec(uuid("c4b3703d-c059-47c7-8b49-11bbedd7975a"))
/* interface */ IAgStkGraphicsGammaCorrectionFilter;
struct __declspec(uuid("c4f3b576-0d25-4b06-9a79-773821d5c97b"))
/* interface */ IAgStkGraphicsGaussianBlurFilterFactory;
struct __declspec(uuid("b5b0a55e-980a-453f-b7b4-7c7024f92ef4"))
/* interface */ IAgStkGraphicsGaussianBlurFilter;
struct __declspec(uuid("ab421e7c-80f3-4503-a29c-5becb2178d44"))
/* interface */ IAgStkGraphicsGradientDetectFilterFactory;
struct __declspec(uuid("5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112"))
/* interface */ IAgStkGraphicsGradientDetectFilter;
enum AgEStkGraphicsGradientDetectMethod;
struct __declspec(uuid("e2227905-c4e6-46ab-a89f-6d53e201e1a3"))
/* interface */ IAgStkGraphicsJpeg2000WriterInitializer;
enum AgEStkGraphicsJpeg2000CompressionProfile;
struct __declspec(uuid("30236afe-b593-4e6c-9e61-099216f14db1"))
/* interface */ IAgStkGraphicsLevelsFilterFactory;
struct __declspec(uuid("e0d6dad5-cfcb-476a-95fd-2cd486114a68"))
/* interface */ IAgStkGraphicsLevelsFilter;
struct __declspec(uuid("d7df6203-7dc8-4f07-8211-78e6d3c268a1"))
/* interface */ IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory;
struct __declspec(uuid("0c1e9236-42e6-4539-9003-06e06f906432"))
/* interface */ IAgStkGraphicsProjectionRasterStreamPluginActivator;
struct __declspec(uuid("5a28d922-9211-4860-81ae-0d98d38ca6d7"))
/* interface */ IAgStkGraphicsProjectionRasterStreamPluginProxy;
struct __declspec(uuid("7af66bcf-c123-47b2-ac63-168bbdedec66"))
/* interface */ IAgStkGraphicsProjectionStream;
struct __declspec(uuid("b4777c93-7685-452a-87df-8fd8bfd10e6f"))
/* interface */ IAgStkGraphicsRasterFactory;
struct __declspec(uuid("5e2aeff9-22ff-4a0f-984d-dc0d92d738c9"))
/* interface */ IAgStkGraphicsRasterAttributesFactory;
struct __declspec(uuid("413b5f7f-9fa5-48ba-bb49-d57948acc6ed"))
/* interface */ IAgStkGraphicsRotateFilterFactory;
struct __declspec(uuid("4b6dc620-04e1-4956-be55-890fdb25bd40"))
/* interface */ IAgStkGraphicsRotateFilter;
struct __declspec(uuid("b3f075e4-7de5-4d8c-adbe-89862537e530"))
/* interface */ IAgStkGraphicsSequenceFilterFactory;
struct __declspec(uuid("72e2b4cb-2be3-418e-b0c8-69f33164e475"))
/* interface */ IAgStkGraphicsSequenceFilter;
struct __declspec(uuid("953f907c-8223-40fa-9827-cb08278d5af4"))
/* interface */ IAgStkGraphicsSharpenFilterFactory;
struct __declspec(uuid("927e244d-ace0-4387-8e3e-6f14bfe230eb"))
/* interface */ IAgStkGraphicsSharpenFilter;
enum AgEStkGraphicsSharpenMethod;
struct __declspec(uuid("fbde7847-ccff-4c4e-83cf-5f7b05468709"))
/* interface */ IAgStkGraphicsVideoStreamFactory;
struct __declspec(uuid("95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a"))
/* interface */ IAgStkGraphicsVideoStream;
enum AgEStkGraphicsVideoPlayback;
struct __declspec(uuid("02a33d9e-cfb3-41c8-be66-e452ae1b7ac3"))
/* interface */ IAgStkGraphicsMarkerBatchPrimitiveFactory;
struct __declspec(uuid("235878c1-62d9-4ce6-85ff-9d82aff701e9"))
/* interface */ IAgStkGraphicsMarkerBatchPrimitive;
enum AgEStkGraphicsMarkerBatchSizeSource;
enum AgEStkGraphicsMarkerBatchSortOrder;
enum AgEStkGraphicsSetHint;
enum AgEStkGraphicsMarkerBatchRenderingMethod;
enum AgEStkGraphicsMarkerBatchRenderPass;
enum AgEStkGraphicsMarkerBatchUnit;
enum AgEStkGraphicsOrigin;
struct __declspec(uuid("7303b63e-a1b7-445e-90e0-508a6937de86"))
/* interface */ IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters;
enum AgEStkGraphicsRenderPassHint;
enum AgEStkGraphicsIndicesOrderHint;
struct __declspec(uuid("9b29c9ab-8fd6-4f2b-8183-b504e319617e"))
/* interface */ IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory;
struct __declspec(uuid("046383cc-b5b9-4ff5-b662-701e694170ba"))
/* interface */ IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory;
struct __declspec(uuid("fcacfb20-3ffb-46c4-9e07-495b1446c52b"))
/* interface */ IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy;
struct __declspec(uuid("93ea79ef-8da7-4992-b8fa-81d372d4258a"))
/* interface */ IAgStkGraphicsModelPrimitiveFactory;
struct __declspec(uuid("67a2ad57-e9b2-4dc9-b509-62cbebc405ca"))
/* interface */ IAgStkGraphicsModelPrimitive;
struct __declspec(uuid("cf6e3054-4d92-42f8-ac4d-e43bfd93d23d"))
/* interface */ IAgStkGraphicsModelArticulationCollection;
struct __declspec(uuid("4554a375-123b-4a39-b727-3e9131879196"))
/* interface */ IAgStkGraphicsModelArticulation;
struct __declspec(uuid("c58f7fc4-2f63-494d-a461-2c385a53b9a2"))
/* interface */ IAgStkGraphicsModelTransformation;
enum AgEStkGraphicsModelTransformationType;
enum AgEStkGraphicsModelUpAxis;
struct __declspec(uuid("2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8"))
/* interface */ IAgStkGraphicsPathPrimitiveFactory;
struct __declspec(uuid("264ef2e0-ae0d-412d-9d89-f5f17f095a52"))
/* interface */ IAgStkGraphicsPathPrimitive;
struct __declspec(uuid("71fe898e-dabb-4501-9c80-dcb1cde9c16b"))
/* interface */ IAgStkGraphicsPathPrimitiveUpdatePolicy;
struct __declspec(uuid("2c7bb493-89f9-40f9-b562-feed771d08b7"))
/* interface */ IAgStkGraphicsPixelSizeDisplayConditionFactory;
struct __declspec(uuid("e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf"))
/* interface */ IAgStkGraphicsPixelSizeDisplayCondition;
struct __declspec(uuid("5dd03481-3541-486c-973f-f079eb35973c"))
/* interface */ IAgStkGraphicsPointBatchPrimitiveFactory;
struct __declspec(uuid("ae6c6dca-3afe-4419-8aad-dd56bee51446"))
/* interface */ IAgStkGraphicsPointBatchPrimitive;
struct __declspec(uuid("16a27023-42d5-4994-9ace-165e027e72d8"))
/* interface */ IAgStkGraphicsPolylinePrimitiveFactory;
struct __declspec(uuid("0122dc2b-4232-443d-b8da-09b42967b841"))
/* interface */ IAgStkGraphicsPolylinePrimitive;
struct __declspec(uuid("512c0d62-559e-42ce-98e2-218c02662290"))
/* interface */ IAgStkGraphicsPositionInterpolator;
struct __declspec(uuid("00a01c47-a9d0-4020-a469-fd874b219713"))
/* interface */ IAgStkGraphicsRasterImageGlobeOverlayFactory;
struct __declspec(uuid("de016591-933e-4085-b6a4-401e117109e9"))
/* interface */ IAgStkGraphicsRasterImageGlobeOverlay;
struct __declspec(uuid("1cf08578-668b-431a-9df2-8bb329e3fdf5"))
/* interface */ IAgStkGraphicsRhumbLineInterpolatorFactory;
struct __declspec(uuid("ccdec605-222e-4dea-a897-2632b43af87f"))
/* interface */ IAgStkGraphicsRhumbLineInterpolator;
struct __declspec(uuid("930929f7-1d93-4575-a18f-b376e9a16cf7"))
/* interface */ IAgStkGraphicsSceneDisplayConditionFactory;
struct __declspec(uuid("84cbf48f-1672-460e-86fd-9afda647bcca"))
/* interface */ IAgStkGraphicsSceneDisplayCondition;
struct __declspec(uuid("dd3adf22-21f0-4220-8f3f-bda974157d48"))
/* interface */ IAgStkGraphicsSceneManagerInitializer;
struct __declspec(uuid("39006599-c2ac-4f46-a190-958d173714fc"))
/* interface */ IAgStkGraphicsPrimitiveManager;
struct __declspec(uuid("25bf4e85-98ce-48e3-9c15-f517115bc794"))
/* interface */ IAgStkGraphicsScreenOverlayManager;
struct __declspec(uuid("455fd9a8-e787-4459-a613-e3367dce25b8"))
/* interface */ IAgStkGraphicsTexture2DFactory;
struct __declspec(uuid("2864d6df-bbe2-42b7-9838-27d1f5ff5be6"))
/* interface */ IAgStkGraphicsGlobeOverlaySettings;
struct __declspec(uuid("45754d2a-e83f-4c32-9792-c90d9620a83a"))
/* interface */ IAgStkGraphicsScreenOverlayFactory;
struct __declspec(uuid("b76858bc-4b6c-41c0-928a-2ae8fe8d6e03"))
/* interface */ IAgStkGraphicsSolidPrimitiveFactory;
struct __declspec(uuid("10ae68b3-ec89-4ced-9b4c-8aae9123eb24"))
/* interface */ IAgStkGraphicsSolidPrimitive;
enum AgEStkGraphicsOutlineAppearance;
struct __declspec(uuid("08c3d10b-0cf0-41e9-93d0-e73b9d25e329"))
/* interface */ IAgStkGraphicsSurfaceMeshPrimitiveFactory;
struct __declspec(uuid("9f13f05b-9c30-4118-8d6b-ab331881aba6"))
/* interface */ IAgStkGraphicsSurfaceMeshPrimitive;
enum AgEStkGraphicsSurfaceMeshRenderingMethod;
struct __declspec(uuid("0a4c4c8f-0131-466f-99a5-1f41f9db403b"))
/* interface */ IAgStkGraphicsTextureMatrix;
struct __declspec(uuid("74c0acde-8d75-49df-87c1-2c39e3240283"))
/* interface */ IAgStkGraphicsTerrainOverlayInitializer;
struct __declspec(uuid("dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a"))
/* interface */ IAgStkGraphicsTextBatchPrimitiveFactory;
struct __declspec(uuid("037722fb-c0e5-4052-b34d-60aa662b5d2b"))
/* interface */ IAgStkGraphicsTextBatchPrimitive;
struct __declspec(uuid("e18b012f-840d-4f32-8810-dd253c38ce7f"))
/* interface */ IAgStkGraphicsTextBatchPrimitiveOptionalParameters;
struct __declspec(uuid("03511893-3980-4c0e-9b99-7f86398acadf"))
/* interface */ IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory;
struct __declspec(uuid("d4fcc6c9-d53a-4988-a09e-3edc080936d4"))
/* interface */ IAgStkGraphicsTextureMatrixFactory;
struct __declspec(uuid("d68b862b-50c5-4803-9a98-d404c0aa967a"))
/* interface */ IAgStkGraphicsTextureScreenOverlayFactory;
struct __declspec(uuid("4d09eb77-14cf-40a7-b7bb-130f4ddd60c6"))
/* interface */ IAgStkGraphicsTextureScreenOverlay;
enum AgEStkGraphicsMaintainAspectRatio;
struct __declspec(uuid("99ca1422-3ae0-4620-9046-d0bc4ca2bee5"))
/* interface */ IAgStkGraphicsTimeIntervalDisplayConditionFactory;
struct __declspec(uuid("2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0"))
/* interface */ IAgStkGraphicsTimeIntervalDisplayCondition;
struct __declspec(uuid("efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38"))
/* interface */ IAgStkGraphicsTriangleMeshPrimitiveFactory;
struct __declspec(uuid("b878e10c-0fc9-446e-88ba-1e1088970150"))
/* interface */ IAgStkGraphicsTriangleMeshPrimitive;
enum AgEStkGraphicsCullFace;
enum AgEStkGraphicsRendererShadeModel;
struct __declspec(uuid("881b260c-4a26-4fb7-9fec-779b3c540a94"))
/* interface */ IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters;
struct __declspec(uuid("9dece859-d370-4674-8ffa-8caa98e60632"))
/* interface */ IAgStkGraphicsTriangulatorResult;
struct __declspec(uuid("dab0d95c-d51e-4152-9f63-01441ca43ad9"))
/* interface */ IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory;
struct __declspec(uuid("183a48a5-a123-493a-9e6e-688775a7ca79"))
/* interface */ IAgStkGraphicsTextOverlayFactory;
struct __declspec(uuid("7d847a28-dfe3-4f2c-923b-683f0250c491"))
/* interface */ IAgStkGraphicsTextOverlay;
enum AgEStkGraphicsScreenOverlayUnit;
struct __declspec(uuid("1af28259-1c26-45f4-8156-079012d5bce3"))
/* interface */ IAgStkGraphicsAGICustomTerrainOverlayFactory;
struct __declspec(uuid("59ef8436-aeec-4e60-8e3d-920e0f11feba"))
/* interface */ IAgStkGraphicsAGICustomTerrainOverlay;
struct __declspec(uuid("ff0a767c-8a84-47f9-a108-32cc0bff8366"))
/* interface */ IAgStkGraphicsAxesPrimitiveFactory;
struct __declspec(uuid("8892fb91-4aa2-4663-9307-68a737163045"))
/* interface */ IAgStkGraphicsAxesPrimitive;
struct __declspec(uuid("a7013a6a-64ea-43b6-807f-4f789df05438"))
/* interface */ IAgStkGraphicsVectorPrimitiveFactory;
struct __declspec(uuid("8244e37a-140a-40a8-9554-37dc0be9bd1b"))
/* interface */ IAgStkGraphicsVectorPrimitive;
struct __declspec(uuid("cec2cc9e-d647-4b14-a9cf-3411203e3e2c"))
/* dual interface */ _IAgStkGraphicsFactoryAndInitializers;
struct __declspec(uuid("6388e15b-611e-454d-bbac-81d864672d2c"))
/* dual interface */ _IAgStkGraphicsExtrudedPolylineTriangulatorResult;
struct __declspec(uuid("309394d2-2c69-4c34-bc54-b7ca1d878a90"))
/* dual interface */ _IAgStkGraphicsSolidTriangulatorResult;
struct __declspec(uuid("7ccb711d-7efa-4ae7-978a-3b6f97f49e0e"))
/* dual interface */ _IAgStkGraphicsSurfaceShapesResult;
struct __declspec(uuid("56c43c99-21c4-4fe9-91aa-c3b53fb0c42e"))
/* dual interface */ _IAgStkGraphicsSurfaceTriangulatorResult;
struct __declspec(uuid("fecd020a-354f-4325-bdf4-6024f322d98d"))
/* dual interface */ _IAgStkGraphicsTriangulatorResult;
struct __declspec(uuid("e59dfd9d-fd0f-40e8-bd38-bc4ebda8a548"))
/* dual interface */ _IAgStkGraphicsAGICustomTerrainOverlay;
struct __declspec(uuid("ceb79e66-6c40-4e67-9e93-288fc1b32d9c"))
/* dual interface */ _IAgStkGraphicsAGIProcessedImageGlobeOverlay;
struct __declspec(uuid("d5cb8980-19f7-4ad5-8ee3-83bdd581169c"))
/* dual interface */ _IAgStkGraphicsAGIProcessedTerrainOverlay;
struct __declspec(uuid("195bcaf0-ee08-4d29-b918-04540dd96c9d"))
/* dual interface */ _IAgStkGraphicsAGIRoamImageGlobeOverlay;
struct __declspec(uuid("69a47a1a-a6f6-47f5-901b-13aca5817e50"))
/* dual interface */ _IAgStkGraphicsCameraSnapshot;
struct __declspec(uuid("d04b52eb-cdaa-40b1-8b0e-fd9743dc9296"))
/* dual interface */ _IAgStkGraphicsCameraVideoRecording;
struct __declspec(uuid("78acb4cb-51a1-40b7-9ab6-378ae46ca9d1"))
/* dual interface */ _IAgStkGraphicsCentralBodyGraphicsIndexer;
struct __declspec(uuid("fd129a46-f352-4e7f-9b66-147c6b4ab24a"))
/* dual interface */ _IAgStkGraphicsCustomImageGlobeOverlay;
struct __declspec(uuid("79cba3b6-ddb6-4085-bc1f-4d0ffdbc7749"))
/* dual interface */ _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator;
struct __declspec(uuid("981cb1ad-9d4d-4803-bb54-3ac7a5ec31cc"))
/* dual interface */ _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy;
struct __declspec(uuid("4d5b1b96-4b4a-4edc-96e2-043a0e152488"))
/* dual interface */ _IAgStkGraphicsGeospatialImageGlobeOverlay;
struct __declspec(uuid("d74695a1-b80b-446a-b7fc-cc6e30d9a2aa"))
/* dual interface */ _IAgStkGraphicsGlobeOverlay;
struct __declspec(uuid("caf967d8-67dd-45f2-81c3-82f7810d3422"))
/* dual interface */ _IAgStkGraphicsGlobeOverlaySettings;
struct __declspec(uuid("14443d95-fe9e-47b8-9b2c-aa87e03ad080"))
/* dual interface */ _IAgStkGraphicsLighting;
struct __declspec(uuid("428b559f-63ea-4e8e-9595-62439db0b25b"))
/* dual interface */ _IAgStkGraphicsPathPrimitiveUpdatePolicy;
struct __declspec(uuid("76f6a184-95ea-4d75-96f4-96226c981fd9"))
/* dual interface */ _IAgStkGraphicsProjectedRasterOverlay;
struct __declspec(uuid("1db916e6-d9bd-4afd-a023-03929556c73c"))
/* dual interface */ _IAgStkGraphicsProjection;
struct __declspec(uuid("ae0209d3-2af4-4881-a4a5-2d53eb3ac4d1"))
/* dual interface */ _IAgStkGraphicsProjectionStream;
struct __declspec(uuid("57cb8d32-6c6b-4999-9931-f47cf489ba60"))
/* dual interface */ _IAgStkGraphicsSceneGlobeOverlaySettings;
struct __declspec(uuid("49ea6365-0b8d-4fc5-ad52-c1d16ac7568d"))
/* interface */ IAgStkGraphicsScreenOverlayCollectionBase;
struct __declspec(uuid("6ce24480-d3bf-43b6-bccf-bb66cb99e9d5"))
/* dual interface */ _IAgStkGraphicsScreenOverlayCollectionBase;
struct __declspec(uuid("2e7c8f73-1b1c-4387-8968-a016c2d61223"))
/* dual interface */ _IAgStkGraphicsTexture2DFactory;
struct __declspec(uuid("9f32d169-ed79-4f50-8b9a-7fe23565563a"))
/* dual interface */ _IAgStkGraphicsAltitudeDisplayCondition;
struct __declspec(uuid("846e3d58-4172-434c-93de-cfc47e155990"))
/* dual interface */ _IAgStkGraphicsAxesPrimitive;
struct __declspec(uuid("383a0860-9010-4aca-b2bc-b452f4c63030"))
/* dual interface */ _IAgStkGraphicsCamera;
struct __declspec(uuid("a352878c-11ef-49b6-87d5-a7a9297d9cf1"))
/* dual interface */ _IAgStkGraphicsCentralBodyGraphics;
struct __declspec(uuid("a82ea570-430c-4b77-96de-ee6622f29368"))
/* dual interface */ _IAgStkGraphicsCompositeDisplayCondition;
struct __declspec(uuid("cee8ec46-1212-47a6-bd22-e17b75524d2c"))
/* dual interface */ _IAgStkGraphicsCompositePrimitive;
struct __declspec(uuid("afcc5e7b-e4af-46ee-9bc5-5e4c619a77c4"))
/* dual interface */ _IAgStkGraphicsConstantDisplayCondition;
struct __declspec(uuid("01412474-4917-48e5-8dab-1d5c3ccbbbae"))
/* dual interface */ _IAgStkGraphicsDisplayCondition;
struct __declspec(uuid("2066622b-f492-4e40-a7d1-db7e73622e26"))
/* dual interface */ _IAgStkGraphicsDistanceDisplayCondition;
struct __declspec(uuid("d596b411-5580-4825-b264-23d4997014ff"))
/* dual interface */ _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition;
struct __declspec(uuid("e6008d9a-119f-4ad2-ac26-75ed778d8b89"))
/* dual interface */ _IAgStkGraphicsDistanceToPositionDisplayCondition;
struct __declspec(uuid("6cd1a08a-18b2-42f0-8852-cc59e8bb5ce4"))
/* dual interface */ _IAgStkGraphicsDistanceToPrimitiveDisplayCondition;
struct __declspec(uuid("7b966df4-8080-4cb1-98f4-b4f0edbb7e99"))
/* dual interface */ _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy;
struct __declspec(uuid("1fe45578-e11b-40a0-93aa-c40485aa067a"))
/* dual interface */ _IAgStkGraphicsGlobeImageOverlay;
struct __declspec(uuid("a1da7576-4448-43b4-beef-86eecfddef15"))
/* dual interface */ _IAgStkGraphicsGraphicsFont;
struct __declspec(uuid("2fcf000f-0892-415b-b7d3-72797f0fabc0"))
/* dual interface */ _IAgStkGraphicsGreatArcInterpolator;
struct __declspec(uuid("83dce447-fa4f-4cbd-89c7-12e2394fddeb"))
/* dual interface */ _IAgStkGraphicsImageCollection;
struct __declspec(uuid("0375bd22-c555-41f2-b5f5-6505caf4a015"))
/* dual interface */ _IAgStkGraphicsAlphaFromLuminanceFilter;
struct __declspec(uuid("f4d7d64b-f841-4f85-9ba1-e2679851d025"))
/* dual interface */ _IAgStkGraphicsAlphaFromPixelFilter;
struct __declspec(uuid("7e2fcfce-41e4-45bb-879b-acdf1cf15aa9"))
/* dual interface */ _IAgStkGraphicsAlphaFromRasterFilter;
struct __declspec(uuid("e76b02a6-f5f2-4ce3-8d4d-6caf7a09ca05"))
/* dual interface */ _IAgStkGraphicsBandExtractFilter;
struct __declspec(uuid("2e68ce72-cb22-4d0e-abc3-b1cd7d9afb46"))
/* dual interface */ _IAgStkGraphicsBandOrderFilter;
struct __declspec(uuid("db9a80cb-9fbc-400f-a82f-6e5972da0151"))
/* dual interface */ _IAgStkGraphicsBlurFilter;
struct __declspec(uuid("93aaa744-5244-4c5e-934b-80a55e03820e"))
/* dual interface */ _IAgStkGraphicsBrightnessFilter;
struct __declspec(uuid("56e0cb35-7afd-4926-9fa8-ee098e666502"))
/* dual interface */ _IAgStkGraphicsColorToLuminanceFilter;
struct __declspec(uuid("b62c8bd7-9c82-44be-a521-bbd0ecc03111"))
/* dual interface */ _IAgStkGraphicsContrastFilter;
struct __declspec(uuid("92a18fc3-2e65-4bd9-8ef7-dbc93c534332"))
/* dual interface */ _IAgStkGraphicsConvolutionFilter;
struct __declspec(uuid("502b4e62-b19f-4cd4-831a-51af6c5d2d78"))
/* dual interface */ _IAgStkGraphicsEdgeDetectFilter;
struct __declspec(uuid("97e42bf7-24a6-45a3-94e2-3766f34e4dfd"))
/* dual interface */ _IAgStkGraphicsFilteringRasterStream;
struct __declspec(uuid("831caac6-83aa-4295-8860-46b428ffe9da"))
/* dual interface */ _IAgStkGraphicsFlipFilter;
struct __declspec(uuid("07eef50c-4414-4183-935a-f5e2669eb4fb"))
/* dual interface */ _IAgStkGraphicsGammaCorrectionFilter;
struct __declspec(uuid("db2d7fb6-1eae-41dc-a07d-d52bb04c0be3"))
/* dual interface */ _IAgStkGraphicsGaussianBlurFilter;
struct __declspec(uuid("5d3a676a-4967-4432-b516-ad2a290fbede"))
/* dual interface */ _IAgStkGraphicsGradientDetectFilter;
struct __declspec(uuid("b79bcfb0-f005-45a4-96bb-460969de7def"))
/* dual interface */ _IAgStkGraphicsLevelsFilter;
struct __declspec(uuid("aa59dcf0-3c76-4321-a05e-18dd75e1ec0a"))
/* dual interface */ _IAgStkGraphicsProjectionRasterStreamPluginActivator;
struct __declspec(uuid("7fcd5139-01aa-405f-a359-1f69e9dbbaf4"))
/* dual interface */ _IAgStkGraphicsProjectionRasterStreamPluginProxy;
struct __declspec(uuid("7b25cc11-1894-4754-921e-e64ef4e2a5e9"))
/* dual interface */ _IAgStkGraphicsRaster;
struct __declspec(uuid("d6e430ce-bf67-4a19-a5bd-5ff18632905d"))
/* dual interface */ _IAgStkGraphicsRasterAttributes;
struct __declspec(uuid("4ff4eb55-b6c8-4a66-b7d3-e8d313de251a"))
/* dual interface */ _IAgStkGraphicsRasterFilter;
struct __declspec(uuid("3825591c-b395-4f7f-87d3-b3c8919959b5"))
/* dual interface */ _IAgStkGraphicsRasterStream;
struct __declspec(uuid("23fd6d02-3861-4ae4-b77d-1ed451955dfd"))
/* dual interface */ _IAgStkGraphicsRotateFilter;
struct __declspec(uuid("562f055d-d965-400c-a082-aa8cdf90bed1"))
/* dual interface */ _IAgStkGraphicsSequenceFilter;
struct __declspec(uuid("999ef99f-82e5-4f15-82db-8dbd6a7169e0"))
/* dual interface */ _IAgStkGraphicsSharpenFilter;
struct __declspec(uuid("e6b0f377-d5e1-485a-a078-706ae7e7f1fc"))
/* dual interface */ _IAgStkGraphicsVideoStream;
struct __declspec(uuid("32147ba1-8610-4270-9365-b8966730dd6f"))
/* interface */ IAgStkGraphicsKmlContainer;
struct __declspec(uuid("b228ba4f-7048-4967-856f-deff6240f7f6"))
/* dual interface */ _IAgStkGraphicsKmlContainer;
struct __declspec(uuid("c8b32ebc-a5e1-4146-a9bc-82c6b35fcf4a"))
/* dual interface */ _IAgStkGraphicsKmlDocument;
struct __declspec(uuid("9db25f35-fc7d-447c-b1cf-8512f7ed41e7"))
/* dual interface */ _IAgStkGraphicsKmlFeature;
struct __declspec(uuid("28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f"))
/* interface */ IAgStkGraphicsKmlFolder;
struct __declspec(uuid("a779cdb0-acbe-4957-8104-613423a17936"))
/* dual interface */ _IAgStkGraphicsKmlFolder;
struct __declspec(uuid("29cadcd7-383e-4c19-91dd-7a3ac3b21178"))
/* dual interface */ _IAgStkGraphicsKmlGraphics;
struct __declspec(uuid("0b66ea82-dd0d-444f-b097-dda9427e1b87"))
/* interface */ IAgStkGraphicsKmlNetworkLink;
enum AgEStkGraphicsKmlNetworkLinkRefreshMode;
enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode;
struct __declspec(uuid("25277457-580d-45a4-bf1c-d378d2dd90c6"))
/* dual interface */ _IAgStkGraphicsKmlNetworkLink;
struct __declspec(uuid("a745a3b2-9cb1-4a76-a4f5-c2a1ae2c96d6"))
/* dual interface */ _IAgStkGraphicsMarkerBatchPrimitive;
struct __declspec(uuid("2383aee1-c6e8-4c96-9ea0-f82e60da095a"))
/* dual interface */ _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters;
struct __declspec(uuid("ab4fcf98-8150-4ddb-8ff8-3ab5c7d3a850"))
/* dual interface */ _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy;
struct __declspec(uuid("d9db5e4d-1f0b-4188-8971-90eadb1024ce"))
/* dual interface */ _IAgStkGraphicsModelArticulation;
struct __declspec(uuid("fd278907-e357-4cd9-9465-eae3c059a830"))
/* dual interface */ _IAgStkGraphicsModelArticulationCollection;
struct __declspec(uuid("7271ab5a-b51b-4b77-b7ce-602fb3f41ce4"))
/* dual interface */ _IAgStkGraphicsModelPrimitive;
struct __declspec(uuid("71981bc3-13e5-4798-95ff-980e9dc84813"))
/* dual interface */ _IAgStkGraphicsModelTransformation;
struct __declspec(uuid("b7007235-5a52-450b-83af-1e8080d3b0be"))
/* interface */ IAgStkGraphicsOverlay;
enum AgEStkGraphicsScreenOverlayOrigin;
enum AgEStkGraphicsScreenOverlayPinningOrigin;
struct __declspec(uuid("ee941cc2-13c4-407b-8854-141b879e8047"))
/* dual interface */ _IAgStkGraphicsOverlay;
struct __declspec(uuid("974c0af0-5f1e-45de-b45c-4ae5fc465913"))
/* dual interface */ _IAgStkGraphicsPathPrimitive;
struct __declspec(uuid("b8ea9de6-95de-479e-955a-227452645225"))
/* dual interface */ _IAgStkGraphicsPickResult;
struct __declspec(uuid("3a8d7ac6-a828-41c7-8d1a-6e4719ea156d"))
/* dual interface */ _IAgStkGraphicsPixelSizeDisplayCondition;
struct __declspec(uuid("085dcb71-3e40-49d4-ba42-629b1fb1835b"))
/* dual interface */ _IAgStkGraphicsPointBatchPrimitive;
struct __declspec(uuid("ffc71d68-97f4-49e2-b0f8-87206cba3913"))
/* dual interface */ _IAgStkGraphicsPolylinePrimitive;
struct __declspec(uuid("6fd1d9d8-fda6-49ee-8e24-0ce0f6e18622"))
/* dual interface */ _IAgStkGraphicsPositionInterpolator;
struct __declspec(uuid("d9958702-369b-4d95-82a8-b70a7d42cca9"))
/* dual interface */ _IAgStkGraphicsPrimitive;
struct __declspec(uuid("952df8d5-aaa1-45a6-8fe6-06f291a18cd2"))
/* dual interface */ _IAgStkGraphicsPrimitiveManager;
struct __declspec(uuid("ee077130-347d-4b01-a45e-ac70d2e550d5"))
/* dual interface */ _IAgStkGraphicsRasterImageGlobeOverlay;
struct __declspec(uuid("7b8ccea0-ca75-4ac5-abd2-6e8cf4aa3331"))
/* dual interface */ _IAgStkGraphicsRhumbLineInterpolator;
struct __declspec(uuid("8ac55871-2131-41fb-96cd-ccdd303f88c3"))
/* dual interface */ _IAgStkGraphicsScene;
struct __declspec(uuid("331c376c-8a84-4a4b-a047-2a41d07ad938"))
/* dual interface */ _IAgStkGraphicsSceneDisplayCondition;
struct __declspec(uuid("257b97ef-839b-4a17-a924-c40320174d13"))
/* interface */ IAgStkGraphicsSceneManager;
struct __declspec(uuid("f2089edf-81f7-4c6b-8fb4-756bfbe722dc"))
/* dual interface */ _IAgStkGraphicsSceneManager;
struct __declspec(uuid("60839368-5830-4ffc-a295-5574d669fd45"))
/* dual interface */ _IAgStkGraphicsScreenOverlay;
struct __declspec(uuid("ee1173b3-b4cf-47af-9725-383e961d6564"))
/* dual interface */ _IAgStkGraphicsScreenOverlayCollection;
struct __declspec(uuid("5da07cb8-db02-40c2-95fa-39f59a11a607"))
/* dual interface */ _IAgStkGraphicsScreenOverlayManager;
struct __declspec(uuid("bbb59898-aba6-46e0-b61d-352b37d72ff9"))
/* dual interface */ _IAgStkGraphicsScreenOverlayPickResult;
struct __declspec(uuid("aa50a136-754c-4064-a61b-7226a84b2190"))
/* dual interface */ _IAgStkGraphicsSolidPrimitive;
struct __declspec(uuid("41d0e11b-d00c-4255-b869-2fc8430f994e"))
/* interface */ IAgStkGraphicsStereoscopic;
enum AgEStkGraphicsStereoscopicDisplayMode;
enum AgEStkGraphicsStereoProjectionMode;
struct __declspec(uuid("cf28baee-4b52-409d-a28a-bb67d0a90490"))
/* dual interface */ _IAgStkGraphicsStereoscopic;
struct __declspec(uuid("dc5a468a-3f04-4ecd-96c3-173f92ce90b3"))
/* dual interface */ _IAgStkGraphicsSurfaceMeshPrimitive;
struct __declspec(uuid("fe65e27b-d614-483b-b00d-5f80099dd528"))
/* dual interface */ _IAgStkGraphicsTerrainCollection;
struct __declspec(uuid("ed293676-558e-42de-9ad9-a82b3aa5b34a"))
/* dual interface */ _IAgStkGraphicsTerrainOverlay;
struct __declspec(uuid("8070fb92-1abb-44f6-b78d-38a8567bfd33"))
/* dual interface */ _IAgStkGraphicsTextBatchPrimitive;
struct __declspec(uuid("6842f963-0a04-4776-9d5e-88422f78244a"))
/* dual interface */ _IAgStkGraphicsTextBatchPrimitiveOptionalParameters;
struct __declspec(uuid("b89fb40c-5d0c-47c6-b1bb-aa0862b46cfc"))
/* dual interface */ _IAgStkGraphicsTextOverlay;
struct __declspec(uuid("070a7541-641c-4321-900b-9e65fedff00d"))
/* dual interface */ _IAgStkGraphicsTextureMatrix;
struct __declspec(uuid("78ae9714-2472-4393-b81d-13e81160497b"))
/* dual interface */ _IAgStkGraphicsTextureScreenOverlay;
struct __declspec(uuid("da1fcaec-f7b9-46be-9811-9467bcfcead4"))
/* dual interface */ _IAgStkGraphicsTimeIntervalDisplayCondition;
struct __declspec(uuid("b7a2db6c-0cb2-40a0-b02f-b5da4ae012ef"))
/* dual interface */ _IAgStkGraphicsTriangleMeshPrimitive;
struct __declspec(uuid("998a3f41-1f74-4b2c-bcd6-08e182a6f93b"))
/* dual interface */ _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters;
struct __declspec(uuid("26aaec7d-206d-412f-82a2-059e892b5ee1"))
/* dual interface */ _IAgStkGraphicsVectorPrimitive;
struct __declspec(uuid("9317bc85-097d-4524-86bd-fac9093f1bc9"))
/* dual interface */ _IAgStkGraphicsBoxTriangulatorInitializer;
struct __declspec(uuid("ce930b2e-35a6-4950-b0c0-c217e02f949d"))
/* dual interface */ _IAgStkGraphicsCylinderTriangulatorInitializer;
struct __declspec(uuid("80d84899-b026-41df-ab91-357ce9e156a4"))
/* dual interface */ _IAgStkGraphicsEllipsoidTriangulatorInitializer;
struct __declspec(uuid("33fa7be9-4b80-43e8-9ff4-5cb8c6dc2e0e"))
/* dual interface */ _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer;
struct __declspec(uuid("f802688e-3ac8-4c31-a1db-05f671a6807a"))
/* dual interface */ _IAgStkGraphicsSurfaceExtentTriangulatorInitializer;
struct __declspec(uuid("eaa1854f-7232-421e-bb65-89794de686e2"))
/* dual interface */ _IAgStkGraphicsSurfacePolygonTriangulatorInitializer;
struct __declspec(uuid("e0a2e684-87ad-4260-b4b7-a122ff88e78e"))
/* dual interface */ _IAgStkGraphicsSurfaceShapesInitializer;
struct __declspec(uuid("97850345-8ef0-4d7e-86b8-5ab5b2e820a1"))
/* dual interface */ _IAgStkGraphicsAGICustomTerrainOverlayFactory;
struct __declspec(uuid("dc808d40-4cdb-42b6-bccf-2f4cae0bb169"))
/* dual interface */ _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory;
struct __declspec(uuid("a49e071c-83f8-4b52-82a6-eeefdf12371f"))
/* dual interface */ _IAgStkGraphicsAGIProcessedTerrainOverlayFactory;
struct __declspec(uuid("26025481-cdba-4451-93ef-6f531e0f4dea"))
/* dual interface */ _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory;
struct __declspec(uuid("c0e4975c-2754-40d7-876f-69cfaa805c65"))
/* dual interface */ _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory;
struct __declspec(uuid("3ee30319-7010-40c2-ab8a-9abf917b01f8"))
/* dual interface */ _IAgStkGraphicsGeospatialImageGlobeOverlayFactory;
struct __declspec(uuid("e1b209fc-0710-47c2-a8b2-7508e2b2adc1"))
/* dual interface */ _IAgStkGraphicsProjectedRasterOverlayFactory;
struct __declspec(uuid("53637eec-bc39-4eeb-a6e2-166631fb634b"))
/* dual interface */ _IAgStkGraphicsProjectionFactory;
struct __declspec(uuid("2fa80ef1-107d-46ca-a6be-2d8328887508"))
/* dual interface */ _IAgStkGraphicsAltitudeDisplayConditionFactory;
struct __declspec(uuid("a4bb30ec-b707-4f52-b642-b913386ce91f"))
/* dual interface */ _IAgStkGraphicsAxesPrimitiveFactory;
struct __declspec(uuid("201c8822-14de-4274-bc56-e3b47948439f"))
/* dual interface */ _IAgStkGraphicsCompositeDisplayConditionFactory;
struct __declspec(uuid("31ac78a0-eb1b-4738-be5f-bf392f2c418e"))
/* dual interface */ _IAgStkGraphicsCompositePrimitiveFactory;
struct __declspec(uuid("63c9269a-7fac-4d30-ab29-5e94d32412d7"))
/* dual interface */ _IAgStkGraphicsConstantDisplayConditionFactory;
struct __declspec(uuid("b0ac6006-06b2-4c5d-a1cc-bc20f3940678"))
/* dual interface */ _IAgStkGraphicsDistanceDisplayConditionFactory;
struct __declspec(uuid("a7333e50-c8eb-4360-9289-d28481e41d44"))
/* dual interface */ _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory;
struct __declspec(uuid("48a7bf0f-e890-460f-aab7-70813c22bbdd"))
/* dual interface */ _IAgStkGraphicsDistanceToPositionDisplayConditionFactory;
struct __declspec(uuid("15fa16d0-33f5-47f4-8af5-658502a97401"))
/* dual interface */ _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory;
struct __declspec(uuid("6b75d9d4-819c-453b-8a54-7b2b72e30e60"))
/* dual interface */ _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory;
struct __declspec(uuid("9088209c-9633-4094-a48b-53f8a4d3f10a"))
/* dual interface */ _IAgStkGraphicsGlobeImageOverlayInitializer;
struct __declspec(uuid("23a6de17-5972-41fa-a0ad-418e247042d5"))
/* dual interface */ _IAgStkGraphicsGraphicsFontFactory;
struct __declspec(uuid("6a19e993-a462-476a-9d4c-20810b263445"))
/* dual interface */ _IAgStkGraphicsGreatArcInterpolatorFactory;
struct __declspec(uuid("1f130a3d-9187-4fc1-ab93-ad1648c1bf3b"))
/* dual interface */ _IAgStkGraphicsAlphaFromLuminanceFilterFactory;
struct __declspec(uuid("cc72502f-8bb7-4dc6-80a0-7790631539f4"))
/* dual interface */ _IAgStkGraphicsAlphaFromPixelFilterFactory;
struct __declspec(uuid("c2343dc8-8154-436d-b4f0-4119deeb9beb"))
/* dual interface */ _IAgStkGraphicsAlphaFromRasterFilterFactory;
struct __declspec(uuid("89eb0d62-0b45-406c-8f8b-bcb01053a0e9"))
/* dual interface */ _IAgStkGraphicsBandExtractFilterFactory;
struct __declspec(uuid("91ee6cd7-d909-42a8-8912-cb39d8cfc116"))
/* dual interface */ _IAgStkGraphicsBandOrderFilterFactory;
struct __declspec(uuid("2a8657f1-2eb1-48ff-b058-a80d995cb051"))
/* dual interface */ _IAgStkGraphicsBlurFilterFactory;
struct __declspec(uuid("7fab93ca-a455-45cf-912c-64378aee3c53"))
/* dual interface */ _IAgStkGraphicsBrightnessFilterFactory;
struct __declspec(uuid("949b826c-5cae-481f-97aa-279396e174d2"))
/* dual interface */ _IAgStkGraphicsColorToLuminanceFilterFactory;
struct __declspec(uuid("561484bc-d70e-496b-938d-52f6b72721b1"))
/* dual interface */ _IAgStkGraphicsContrastFilterFactory;
struct __declspec(uuid("6c4bf836-577c-4843-aa23-577b73732245"))
/* dual interface */ _IAgStkGraphicsConvolutionFilterFactory;
struct __declspec(uuid("87280e66-2578-4ea4-8aaf-157b6a1fcb4f"))
/* dual interface */ _IAgStkGraphicsEdgeDetectFilterFactory;
struct __declspec(uuid("eac3bbe2-9633-4622-9427-47ecdd5cde5c"))
/* dual interface */ _IAgStkGraphicsFilteringRasterStreamFactory;
struct __declspec(uuid("f163c52a-ddf6-4e7f-b6b7-cce692e98774"))
/* dual interface */ _IAgStkGraphicsFlipFilterFactory;
struct __declspec(uuid("717ae738-297e-47bf-b127-e57689e4d3ab"))
/* dual interface */ _IAgStkGraphicsGammaCorrectionFilterFactory;
struct __declspec(uuid("84585c55-4425-4787-88d8-0ae73b282dec"))
/* dual interface */ _IAgStkGraphicsGaussianBlurFilterFactory;
struct __declspec(uuid("b2b0aac8-e2b5-4bdf-ac80-7d62e23b1ae4"))
/* dual interface */ _IAgStkGraphicsGradientDetectFilterFactory;
struct __declspec(uuid("707530d9-bc4a-4d1b-9a2b-a8cbef31dd9d"))
/* dual interface */ _IAgStkGraphicsJpeg2000WriterInitializer;
struct __declspec(uuid("9260e17f-e9a7-4b45-aa91-9c09e89163c0"))
/* dual interface */ _IAgStkGraphicsLevelsFilterFactory;
struct __declspec(uuid("5e50d808-f143-434b-a9c3-580a9a1c724d"))
/* dual interface */ _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory;
struct __declspec(uuid("6167d52c-eea2-418d-bb11-d8abe37a4baf"))
/* dual interface */ _IAgStkGraphicsRasterFactory;
struct __declspec(uuid("d635164d-94d9-40ed-8fd0-f1050eb97f3e"))
/* dual interface */ _IAgStkGraphicsRasterAttributesFactory;
struct __declspec(uuid("1a43c398-befc-4622-a707-0357ea5640ac"))
/* dual interface */ _IAgStkGraphicsRotateFilterFactory;
struct __declspec(uuid("4ac9b3dc-c2ab-4af8-83ed-44aeec3ccc18"))
/* dual interface */ _IAgStkGraphicsSequenceFilterFactory;
struct __declspec(uuid("c5315311-2241-4533-a81f-290b04488c4d"))
/* dual interface */ _IAgStkGraphicsSharpenFilterFactory;
struct __declspec(uuid("b8bd0c96-6723-4bb1-8ef1-af4fb6ce2e10"))
/* dual interface */ _IAgStkGraphicsVideoStreamFactory;
struct __declspec(uuid("888a9537-fbd8-4e2f-8e0e-8e7a1a4d04d1"))
/* dual interface */ _IAgStkGraphicsMarkerBatchPrimitiveFactory;
struct __declspec(uuid("fb05ce13-9227-42bc-aeb6-9ecd0162d721"))
/* dual interface */ _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory;
struct __declspec(uuid("6770735d-5892-48fd-b74e-ee6980fbab86"))
/* dual interface */ _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory;
struct __declspec(uuid("6a522543-68d2-484e-b624-a9edb2db69a2"))
/* dual interface */ _IAgStkGraphicsModelPrimitiveFactory;
struct __declspec(uuid("6f773b6f-f175-43ee-a38e-ad62bacfc479"))
/* dual interface */ _IAgStkGraphicsPathPrimitiveFactory;
struct __declspec(uuid("29703747-5639-441b-ab7c-6affb05bd783"))
/* dual interface */ _IAgStkGraphicsPixelSizeDisplayConditionFactory;
struct __declspec(uuid("485b18d4-bb4c-48cb-80e5-104775b55efe"))
/* dual interface */ _IAgStkGraphicsPointBatchPrimitiveFactory;
struct __declspec(uuid("8b93b6dc-026d-43b3-8604-65e89eb49d51"))
/* dual interface */ _IAgStkGraphicsPolylinePrimitiveFactory;
struct __declspec(uuid("f8fe66d8-aab1-499f-bfb2-535d0c430e34"))
/* dual interface */ _IAgStkGraphicsRasterImageGlobeOverlayFactory;
struct __declspec(uuid("3e8fe3b1-1c3f-431f-8680-e20eeafdf3c6"))
/* dual interface */ _IAgStkGraphicsRhumbLineInterpolatorFactory;
struct __declspec(uuid("bf23eb15-96b5-4ac3-b342-6c5a17fd5b71"))
/* dual interface */ _IAgStkGraphicsSceneDisplayConditionFactory;
struct __declspec(uuid("57980a47-e8c1-4c2f-955b-0e231cb60006"))
/* dual interface */ _IAgStkGraphicsSceneManagerInitializer;
struct __declspec(uuid("011ba34f-088e-4052-b404-c0a80c591ff6"))
/* dual interface */ _IAgStkGraphicsScreenOverlayFactory;
struct __declspec(uuid("0e76f5df-ea69-4755-8ff7-8f260c3aae96"))
/* dual interface */ _IAgStkGraphicsSolidPrimitiveFactory;
struct __declspec(uuid("0c754029-69a0-4233-bab9-26e98e5a4cf7"))
/* dual interface */ _IAgStkGraphicsSurfaceMeshPrimitiveFactory;
struct __declspec(uuid("b31c16ca-d2c0-4784-830f-b17d07a1d6f8"))
/* dual interface */ _IAgStkGraphicsTerrainOverlayInitializer;
struct __declspec(uuid("92460a04-1900-4108-ba29-d27b8b1b2973"))
/* dual interface */ _IAgStkGraphicsTextBatchPrimitiveFactory;
struct __declspec(uuid("f3f1aab9-a67b-4eab-912e-4099608ec970"))
/* dual interface */ _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory;
struct __declspec(uuid("abb2dfab-3c6e-4d7a-bc38-5b8b3dde016a"))
/* dual interface */ _IAgStkGraphicsTextOverlayFactory;
struct __declspec(uuid("c2419de2-1ca9-47d8-9cba-13bc141596a2"))
/* dual interface */ _IAgStkGraphicsTextureMatrixFactory;
struct __declspec(uuid("0608cf24-ad8b-4d10-a6e3-41d42fc55462"))
/* dual interface */ _IAgStkGraphicsTextureScreenOverlayFactory;
struct __declspec(uuid("0ee98d96-3d78-464c-9e21-6b1f7a0e2b7c"))
/* dual interface */ _IAgStkGraphicsTimeIntervalDisplayConditionFactory;
struct __declspec(uuid("12940185-0225-45d7-ac39-8ae8f181cc0c"))
/* dual interface */ _IAgStkGraphicsTriangleMeshPrimitiveFactory;
struct __declspec(uuid("f17c503d-ec72-4b5b-8e25-20a2f7d161cb"))
/* dual interface */ _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory;
struct __declspec(uuid("a7b31603-e51b-4e11-a6cc-d242c5c2793c"))
/* dual interface */ _IAgStkGraphicsVectorPrimitiveFactory;
enum AgEStkGraphicsRefreshRate;
enum AgEStkGraphicsRenderPass;
struct __declspec(uuid("26d3cc1e-cf8b-49a5-853a-97fcad8272c8"))
/* dispinterface */ IAgStkGraphicsImageCollectionEvents;
struct __declspec(uuid("37f5831c-24d2-4e56-b3e4-6b3927a459f6"))
/* dispinterface */ IAgStkGraphicsKmlGraphicsEvents;
struct __declspec(uuid("39d3a8dd-0d1a-4ab7-ba29-81ffd591274c"))
/* dispinterface */ IAgStkGraphicsSceneEvents;
struct __declspec(uuid("0301317f-e5be-44cf-9b52-e15d3ee8cbe5"))
/* dispinterface */ IAgStkGraphicsSceneManagerEvents;
struct __declspec(uuid("fe5c3cb3-727a-4887-bcfe-0d311b17b092"))
/* dispinterface */ IAgStkGraphicsTerrainCollectionEvents;
struct /* coclass */ AgStkGraphicsPathPoint;
struct /* coclass */ AgStkGraphicsPathPointFactory;
struct /* coclass */ AgStkGraphicsBoundingSphere;
struct /* coclass */ AgStkGraphicsBoundingSphereFactory;
struct /* coclass */ AgStkGraphicsTextureFilter2D;
struct /* coclass */ AgStkGraphicsTextureFilter2DFactory;
struct /* coclass */ AgStkGraphicsRendererTexture2D;
struct /* coclass */ AgStkGraphicsRendererTextureTemplate2D;
struct /* coclass */ AgStkGraphicsPathPointCollection;
struct /* coclass */ AgStkGraphicsObjectCollection;
struct /* coclass */ AgStkGraphicsSceneCollection;
struct /* coclass */ AgStkGraphicsScreenOverlayPickResultCollection;
struct /* coclass */ AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs;
struct /* coclass */ AgStkGraphicsTerrainOverlayAddCompleteEventArgs;
struct /* coclass */ AgStkGraphicsPickResultCollection;
struct /* coclass */ AgStkGraphicsRenderingEventArgs;
struct /* coclass */ AgStkGraphicsBatchPrimitiveIndex;
struct /* coclass */ AgStkGraphicsKmlDocumentCollection;
struct /* coclass */ AgStkGraphicsKmlFeatureCollection;
struct /* coclass */ AgStkGraphicsKmlDocumentLoadedEventArgs;
struct /* coclass */ AgStkGraphicsFactoryAndInitializers;
struct /* coclass */ AgStkGraphicsExtrudedPolylineTriangulatorResult;
struct /* coclass */ AgStkGraphicsSolidTriangulatorResult;
struct /* coclass */ AgStkGraphicsSurfaceShapesResult;
struct /* coclass */ AgStkGraphicsSurfaceTriangulatorResult;
struct /* coclass */ AgStkGraphicsTriangulatorResult;
struct /* coclass */ AgStkGraphicsAGICustomTerrainOverlay;
struct /* coclass */ AgStkGraphicsAGIProcessedImageGlobeOverlay;
struct /* coclass */ AgStkGraphicsAGIProcessedTerrainOverlay;
struct /* coclass */ AgStkGraphicsAGIRoamImageGlobeOverlay;
struct /* coclass */ AgStkGraphicsCameraSnapshot;
struct /* coclass */ AgStkGraphicsCameraVideoRecording;
struct /* coclass */ AgStkGraphicsCentralBodyGraphicsIndexer;
struct /* coclass */ AgStkGraphicsCustomImageGlobeOverlay;
struct /* coclass */ AgStkGraphicsCustomImageGlobeOverlayPluginActivator;
struct /* coclass */ AgStkGraphicsCustomImageGlobeOverlayPluginProxy;
struct /* coclass */ AgStkGraphicsGeospatialImageGlobeOverlay;
struct /* coclass */ AgStkGraphicsGlobeOverlay;
struct /* coclass */ AgStkGraphicsGlobeOverlaySettings;
struct /* coclass */ AgStkGraphicsLighting;
struct /* coclass */ AgStkGraphicsPathPrimitiveUpdatePolicy;
struct /* coclass */ AgStkGraphicsProjectedRasterOverlay;
struct /* coclass */ AgStkGraphicsProjection;
struct /* coclass */ AgStkGraphicsProjectionStream;
struct /* coclass */ AgStkGraphicsSceneGlobeOverlaySettings;
struct /* coclass */ AgStkGraphicsScreenOverlayCollectionBase;
struct /* coclass */ AgStkGraphicsTexture2DFactory;
struct /* coclass */ AgStkGraphicsAltitudeDisplayCondition;
struct /* coclass */ AgStkGraphicsAxesPrimitive;
struct /* coclass */ AgStkGraphicsCamera;
struct /* coclass */ AgStkGraphicsCentralBodyGraphics;
struct /* coclass */ AgStkGraphicsCompositeDisplayCondition;
struct /* coclass */ AgStkGraphicsCompositePrimitive;
struct /* coclass */ AgStkGraphicsConstantDisplayCondition;
struct /* coclass */ AgStkGraphicsDisplayCondition;
struct /* coclass */ AgStkGraphicsDistanceDisplayCondition;
struct /* coclass */ AgStkGraphicsDistanceToGlobeOverlayDisplayCondition;
struct /* coclass */ AgStkGraphicsDistanceToPositionDisplayCondition;
struct /* coclass */ AgStkGraphicsDistanceToPrimitiveDisplayCondition;
struct /* coclass */ AgStkGraphicsDurationPathPrimitiveUpdatePolicy;
struct /* coclass */ AgStkGraphicsGlobeImageOverlay;
struct /* coclass */ AgStkGraphicsGraphicsFont;
struct /* coclass */ AgStkGraphicsGreatArcInterpolator;
struct /* coclass */ AgStkGraphicsImageCollection;
struct /* coclass */ AgStkGraphicsAlphaFromLuminanceFilter;
struct /* coclass */ AgStkGraphicsAlphaFromPixelFilter;
struct /* coclass */ AgStkGraphicsAlphaFromRasterFilter;
struct /* coclass */ AgStkGraphicsBandExtractFilter;
struct /* coclass */ AgStkGraphicsBandOrderFilter;
struct /* coclass */ AgStkGraphicsBlurFilter;
struct /* coclass */ AgStkGraphicsBrightnessFilter;
struct /* coclass */ AgStkGraphicsColorToLuminanceFilter;
struct /* coclass */ AgStkGraphicsContrastFilter;
struct /* coclass */ AgStkGraphicsConvolutionFilter;
struct /* coclass */ AgStkGraphicsEdgeDetectFilter;
struct /* coclass */ AgStkGraphicsFilteringRasterStream;
struct /* coclass */ AgStkGraphicsFlipFilter;
struct /* coclass */ AgStkGraphicsGammaCorrectionFilter;
struct /* coclass */ AgStkGraphicsGaussianBlurFilter;
struct /* coclass */ AgStkGraphicsGradientDetectFilter;
struct /* coclass */ AgStkGraphicsLevelsFilter;
struct /* coclass */ AgStkGraphicsProjectionRasterStreamPluginActivator;
struct /* coclass */ AgStkGraphicsProjectionRasterStreamPluginProxy;
struct /* coclass */ AgStkGraphicsRaster;
struct /* coclass */ AgStkGraphicsRasterAttributes;
struct /* coclass */ AgStkGraphicsRasterFilter;
struct /* coclass */ AgStkGraphicsRasterStream;
struct /* coclass */ AgStkGraphicsRotateFilter;
struct /* coclass */ AgStkGraphicsSequenceFilter;
struct /* coclass */ AgStkGraphicsSharpenFilter;
struct /* coclass */ AgStkGraphicsVideoStream;
struct /* coclass */ AgStkGraphicsKmlContainer;
struct /* coclass */ AgStkGraphicsKmlDocument;
struct /* coclass */ AgStkGraphicsKmlFeature;
struct /* coclass */ AgStkGraphicsKmlFolder;
struct /* coclass */ AgStkGraphicsKmlGraphics;
struct /* coclass */ AgStkGraphicsKmlNetworkLink;
struct /* coclass */ AgStkGraphicsMarkerBatchPrimitive;
struct /* coclass */ AgStkGraphicsMarkerBatchPrimitiveOptionalParameters;
struct /* coclass */ AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy;
struct /* coclass */ AgStkGraphicsModelArticulation;
struct /* coclass */ AgStkGraphicsModelArticulationCollection;
struct /* coclass */ AgStkGraphicsModelPrimitive;
struct /* coclass */ AgStkGraphicsModelTransformation;
struct /* coclass */ AgStkGraphicsOverlay;
struct /* coclass */ AgStkGraphicsPathPrimitive;
struct /* coclass */ AgStkGraphicsPickResult;
struct /* coclass */ AgStkGraphicsPixelSizeDisplayCondition;
struct /* coclass */ AgStkGraphicsPointBatchPrimitive;
struct /* coclass */ AgStkGraphicsPolylinePrimitive;
struct /* coclass */ AgStkGraphicsPositionInterpolator;
struct /* coclass */ AgStkGraphicsPrimitive;
struct /* coclass */ AgStkGraphicsPrimitiveManager;
struct /* coclass */ AgStkGraphicsRasterImageGlobeOverlay;
struct /* coclass */ AgStkGraphicsRhumbLineInterpolator;
struct /* coclass */ AgStkGraphicsScene;
struct /* coclass */ AgStkGraphicsSceneDisplayCondition;
struct /* coclass */ AgStkGraphicsSceneManager;
struct /* coclass */ AgStkGraphicsScreenOverlay;
struct /* coclass */ AgStkGraphicsScreenOverlayCollection;
struct /* coclass */ AgStkGraphicsScreenOverlayManager;
struct /* coclass */ AgStkGraphicsScreenOverlayPickResult;
struct /* coclass */ AgStkGraphicsSolidPrimitive;
struct /* coclass */ AgStkGraphicsStereoscopic;
struct /* coclass */ AgStkGraphicsSurfaceMeshPrimitive;
struct /* coclass */ AgStkGraphicsTerrainCollection;
struct /* coclass */ AgStkGraphicsTerrainOverlay;
struct /* coclass */ AgStkGraphicsTextBatchPrimitive;
struct /* coclass */ AgStkGraphicsTextBatchPrimitiveOptionalParameters;
struct /* coclass */ AgStkGraphicsTextOverlay;
struct /* coclass */ AgStkGraphicsTextureMatrix;
struct /* coclass */ AgStkGraphicsTextureScreenOverlay;
struct /* coclass */ AgStkGraphicsTimeIntervalDisplayCondition;
struct /* coclass */ AgStkGraphicsTriangleMeshPrimitive;
struct /* coclass */ AgStkGraphicsTriangleMeshPrimitiveOptionalParameters;
struct /* coclass */ AgStkGraphicsVectorPrimitive;
struct /* coclass */ AgStkGraphicsBoxTriangulatorInitializer;
struct /* coclass */ AgStkGraphicsCylinderTriangulatorInitializer;
struct /* coclass */ AgStkGraphicsEllipsoidTriangulatorInitializer;
struct /* coclass */ AgStkGraphicsExtrudedPolylineTriangulatorInitializer;
struct /* coclass */ AgStkGraphicsSurfaceExtentTriangulatorInitializer;
struct /* coclass */ AgStkGraphicsSurfacePolygonTriangulatorInitializer;
struct /* coclass */ AgStkGraphicsSurfaceShapesInitializer;
struct /* coclass */ AgStkGraphicsAGICustomTerrainOverlayFactory;
struct /* coclass */ AgStkGraphicsAGIProcessedImageGlobeOverlayFactory;
struct /* coclass */ AgStkGraphicsAGIProcessedTerrainOverlayFactory;
struct /* coclass */ AgStkGraphicsAGIRoamImageGlobeOverlayFactory;
struct /* coclass */ AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory;
struct /* coclass */ AgStkGraphicsGeospatialImageGlobeOverlayFactory;
struct /* coclass */ AgStkGraphicsProjectedRasterOverlayFactory;
struct /* coclass */ AgStkGraphicsProjectionFactory;
struct /* coclass */ AgStkGraphicsAltitudeDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsAxesPrimitiveFactory;
struct /* coclass */ AgStkGraphicsCompositeDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsCompositePrimitiveFactory;
struct /* coclass */ AgStkGraphicsConstantDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsDistanceDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsDistanceToPositionDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory;
struct /* coclass */ AgStkGraphicsGlobeImageOverlayInitializer;
struct /* coclass */ AgStkGraphicsGraphicsFontFactory;
struct /* coclass */ AgStkGraphicsGreatArcInterpolatorFactory;
struct /* coclass */ AgStkGraphicsAlphaFromLuminanceFilterFactory;
struct /* coclass */ AgStkGraphicsAlphaFromPixelFilterFactory;
struct /* coclass */ AgStkGraphicsAlphaFromRasterFilterFactory;
struct /* coclass */ AgStkGraphicsBandExtractFilterFactory;
struct /* coclass */ AgStkGraphicsBandOrderFilterFactory;
struct /* coclass */ AgStkGraphicsBlurFilterFactory;
struct /* coclass */ AgStkGraphicsBrightnessFilterFactory;
struct /* coclass */ AgStkGraphicsColorToLuminanceFilterFactory;
struct /* coclass */ AgStkGraphicsContrastFilterFactory;
struct /* coclass */ AgStkGraphicsConvolutionFilterFactory;
struct /* coclass */ AgStkGraphicsEdgeDetectFilterFactory;
struct /* coclass */ AgStkGraphicsFilteringRasterStreamFactory;
struct /* coclass */ AgStkGraphicsFlipFilterFactory;
struct /* coclass */ AgStkGraphicsGammaCorrectionFilterFactory;
struct /* coclass */ AgStkGraphicsGaussianBlurFilterFactory;
struct /* coclass */ AgStkGraphicsGradientDetectFilterFactory;
struct /* coclass */ AgStkGraphicsJpeg2000WriterInitializer;
struct /* coclass */ AgStkGraphicsLevelsFilterFactory;
struct /* coclass */ AgStkGraphicsProjectionRasterStreamPluginActivatorFactory;
struct /* coclass */ AgStkGraphicsRasterFactory;
struct /* coclass */ AgStkGraphicsRasterAttributesFactory;
struct /* coclass */ AgStkGraphicsRotateFilterFactory;
struct /* coclass */ AgStkGraphicsSequenceFilterFactory;
struct /* coclass */ AgStkGraphicsSharpenFilterFactory;
struct /* coclass */ AgStkGraphicsVideoStreamFactory;
struct /* coclass */ AgStkGraphicsMarkerBatchPrimitiveFactory;
struct /* coclass */ AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory;
struct /* coclass */ AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory;
struct /* coclass */ AgStkGraphicsModelPrimitiveFactory;
struct /* coclass */ AgStkGraphicsPathPrimitiveFactory;
struct /* coclass */ AgStkGraphicsPixelSizeDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsPointBatchPrimitiveFactory;
struct /* coclass */ AgStkGraphicsPolylinePrimitiveFactory;
struct /* coclass */ AgStkGraphicsRasterImageGlobeOverlayFactory;
struct /* coclass */ AgStkGraphicsRhumbLineInterpolatorFactory;
struct /* coclass */ AgStkGraphicsSceneDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsSceneManagerInitializer;
struct /* coclass */ AgStkGraphicsScreenOverlayFactory;
struct /* coclass */ AgStkGraphicsSolidPrimitiveFactory;
struct /* coclass */ AgStkGraphicsSurfaceMeshPrimitiveFactory;
struct /* coclass */ AgStkGraphicsTerrainOverlayInitializer;
struct /* coclass */ AgStkGraphicsTextBatchPrimitiveFactory;
struct /* coclass */ AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory;
struct /* coclass */ AgStkGraphicsTextOverlayFactory;
struct /* coclass */ AgStkGraphicsTextureMatrixFactory;
struct /* coclass */ AgStkGraphicsTextureScreenOverlayFactory;
struct /* coclass */ AgStkGraphicsTimeIntervalDisplayConditionFactory;
struct /* coclass */ AgStkGraphicsTriangleMeshPrimitiveFactory;
struct /* coclass */ AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory;
struct /* coclass */ AgStkGraphicsVectorPrimitiveFactory;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPathPoint, __uuidof(IAgStkGraphicsPathPoint));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPathPoint, __uuidof(_IAgStkGraphicsPathPoint));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPathPointFactory, __uuidof(IAgStkGraphicsPathPointFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPathPointFactory, __uuidof(_IAgStkGraphicsPathPointFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBoundingSphere, __uuidof(IAgStkGraphicsBoundingSphere));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBoundingSphere, __uuidof(_IAgStkGraphicsBoundingSphere));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBoundingSphereFactory, __uuidof(IAgStkGraphicsBoundingSphereFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBoundingSphereFactory, __uuidof(_IAgStkGraphicsBoundingSphereFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextureFilter2D, __uuidof(IAgStkGraphicsTextureFilter2D));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextureFilter2D, __uuidof(_IAgStkGraphicsTextureFilter2D));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextureFilter2DFactory, __uuidof(IAgStkGraphicsTextureFilter2DFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextureFilter2DFactory, __uuidof(_IAgStkGraphicsTextureFilter2DFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRendererTextureTemplate2D, __uuidof(IAgStkGraphicsRendererTextureTemplate2D));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRendererTexture2D, __uuidof(IAgStkGraphicsRendererTexture2D));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRendererTexture2D, __uuidof(_IAgStkGraphicsRendererTexture2D));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRendererTextureTemplate2D, __uuidof(_IAgStkGraphicsRendererTextureTemplate2D));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPathPointCollection, __uuidof(IAgStkGraphicsPathPointCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPathPointCollection, __uuidof(_IAgStkGraphicsPathPointCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsObjectCollection, __uuidof(IAgStkGraphicsObjectCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsObjectCollection, __uuidof(_IAgStkGraphicsObjectCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterAttributes, __uuidof(IAgStkGraphicsRasterAttributes));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterFilter, __uuidof(IAgStkGraphicsRasterFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRaster, __uuidof(IAgStkGraphicsRaster));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCameraSnapshot, __uuidof(IAgStkGraphicsCameraSnapshot));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCameraVideoRecording, __uuidof(IAgStkGraphicsCameraVideoRecording));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCamera, __uuidof(IAgStkGraphicsCamera));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsLighting, __uuidof(IAgStkGraphicsLighting));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGlobeImageOverlay, __uuidof(IAgStkGraphicsGlobeImageOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTerrainOverlay, __uuidof(IAgStkGraphicsTerrainOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTerrainCollection, __uuidof(IAgStkGraphicsTerrainCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsImageCollection, __uuidof(IAgStkGraphicsImageCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlDocument, __uuidof(IAgStkGraphicsKmlDocument));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlDocumentCollection, __uuidof(IAgStkGraphicsKmlDocumentCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlGraphics, __uuidof(IAgStkGraphicsKmlGraphics));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCentralBodyGraphics, __uuidof(IAgStkGraphicsCentralBodyGraphics));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCentralBodyGraphicsIndexer, __uuidof(IAgStkGraphicsCentralBodyGraphicsIndexer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneGlobeOverlaySettings, __uuidof(IAgStkGraphicsSceneGlobeOverlaySettings));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPickResult, __uuidof(IAgStkGraphicsPickResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPickResultCollection, __uuidof(IAgStkGraphicsPickResultCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlay, __uuidof(IAgStkGraphicsScreenOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayPickResult, __uuidof(IAgStkGraphicsScreenOverlayPickResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayPickResultCollection, __uuidof(IAgStkGraphicsScreenOverlayPickResultCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScene, __uuidof(IAgStkGraphicsScene));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneCollection, __uuidof(IAgStkGraphicsSceneCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSceneCollection, __uuidof(_IAgStkGraphicsSceneCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayCollection, __uuidof(IAgStkGraphicsScreenOverlayCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayContainer, __uuidof(IAgStkGraphicsScreenOverlayContainer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlayPickResultCollection, __uuidof(_IAgStkGraphicsScreenOverlayPickResultCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs, __uuidof(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs, __uuidof(_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs, __uuidof(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs, __uuidof(_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPickResultCollection, __uuidof(_IAgStkGraphicsPickResultCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRenderingEventArgs, __uuidof(IAgStkGraphicsRenderingEventArgs));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRenderingEventArgs, __uuidof(_IAgStkGraphicsRenderingEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDisplayCondition, __uuidof(IAgStkGraphicsDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPrimitive, __uuidof(IAgStkGraphicsPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBatchPrimitiveIndex, __uuidof(IAgStkGraphicsBatchPrimitiveIndex));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBatchPrimitiveIndex, __uuidof(_IAgStkGraphicsBatchPrimitiveIndex));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlDocumentCollection, __uuidof(_IAgStkGraphicsKmlDocumentCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlFeature, __uuidof(IAgStkGraphicsKmlFeature));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlFeatureCollection, __uuidof(IAgStkGraphicsKmlFeatureCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlFeatureCollection, __uuidof(_IAgStkGraphicsKmlFeatureCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlDocumentLoadedEventArgs, __uuidof(IAgStkGraphicsKmlDocumentLoadedEventArgs));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlDocumentLoadedEventArgs, __uuidof(_IAgStkGraphicsKmlDocumentLoadedEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSolidTriangulatorResult, __uuidof(IAgStkGraphicsSolidTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBoxTriangulatorInitializer, __uuidof(IAgStkGraphicsBoxTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCylinderTriangulatorInitializer, __uuidof(IAgStkGraphicsCylinderTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsEllipsoidTriangulatorInitializer, __uuidof(IAgStkGraphicsEllipsoidTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsExtrudedPolylineTriangulatorResult, __uuidof(IAgStkGraphicsExtrudedPolylineTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, __uuidof(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfaceTriangulatorResult, __uuidof(IAgStkGraphicsSurfaceTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfaceExtentTriangulatorInitializer, __uuidof(IAgStkGraphicsSurfaceExtentTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfacePolygonTriangulatorInitializer, __uuidof(IAgStkGraphicsSurfacePolygonTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfaceShapesResult, __uuidof(IAgStkGraphicsSurfaceShapesResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfaceShapesInitializer, __uuidof(IAgStkGraphicsSurfaceShapesInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGIProcessedImageGlobeOverlay, __uuidof(IAgStkGraphicsAGIProcessedImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory, __uuidof(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGIProcessedTerrainOverlay, __uuidof(IAgStkGraphicsAGIProcessedTerrainOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGIProcessedTerrainOverlayFactory, __uuidof(IAgStkGraphicsAGIProcessedTerrainOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGIRoamImageGlobeOverlay, __uuidof(IAgStkGraphicsAGIRoamImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory, __uuidof(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCustomImageGlobeOverlay, __uuidof(IAgStkGraphicsCustomImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy, __uuidof(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator, __uuidof(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory, __uuidof(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGeospatialImageGlobeOverlay, __uuidof(IAgStkGraphicsGeospatialImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGeospatialImageGlobeOverlayFactory, __uuidof(IAgStkGraphicsGeospatialImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjection, __uuidof(IAgStkGraphicsProjection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectedRasterOverlay, __uuidof(IAgStkGraphicsProjectedRasterOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectedRasterOverlayFactory, __uuidof(IAgStkGraphicsProjectedRasterOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectionFactory, __uuidof(IAgStkGraphicsProjectionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAltitudeDisplayCondition, __uuidof(IAgStkGraphicsAltitudeDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAltitudeDisplayConditionFactory, __uuidof(IAgStkGraphicsAltitudeDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCompositeDisplayCondition, __uuidof(IAgStkGraphicsCompositeDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCompositeDisplayConditionFactory, __uuidof(IAgStkGraphicsCompositeDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCompositePrimitive, __uuidof(IAgStkGraphicsCompositePrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsCompositePrimitiveFactory, __uuidof(IAgStkGraphicsCompositePrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsConstantDisplayCondition, __uuidof(IAgStkGraphicsConstantDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsConstantDisplayConditionFactory, __uuidof(IAgStkGraphicsConstantDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceDisplayCondition, __uuidof(IAgStkGraphicsDistanceDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceDisplayConditionFactory, __uuidof(IAgStkGraphicsDistanceDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGlobeOverlay, __uuidof(IAgStkGraphicsGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, __uuidof(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, __uuidof(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceToPositionDisplayCondition, __uuidof(IAgStkGraphicsDistanceToPositionDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceToPositionDisplayConditionFactory, __uuidof(IAgStkGraphicsDistanceToPositionDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceToPrimitiveDisplayCondition, __uuidof(IAgStkGraphicsDistanceToPrimitiveDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory, __uuidof(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, __uuidof(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, __uuidof(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGlobeImageOverlayInitializer, __uuidof(IAgStkGraphicsGlobeImageOverlayInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGraphicsFont, __uuidof(IAgStkGraphicsGraphicsFont));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGraphicsFontFactory, __uuidof(IAgStkGraphicsGraphicsFontFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGreatArcInterpolator, __uuidof(IAgStkGraphicsGreatArcInterpolator));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGreatArcInterpolatorFactory, __uuidof(IAgStkGraphicsGreatArcInterpolatorFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAlphaFromLuminanceFilter, __uuidof(IAgStkGraphicsAlphaFromLuminanceFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAlphaFromLuminanceFilterFactory, __uuidof(IAgStkGraphicsAlphaFromLuminanceFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAlphaFromPixelFilter, __uuidof(IAgStkGraphicsAlphaFromPixelFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAlphaFromPixelFilterFactory, __uuidof(IAgStkGraphicsAlphaFromPixelFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAlphaFromRasterFilter, __uuidof(IAgStkGraphicsAlphaFromRasterFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAlphaFromRasterFilterFactory, __uuidof(IAgStkGraphicsAlphaFromRasterFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBandExtractFilter, __uuidof(IAgStkGraphicsBandExtractFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBandExtractFilterFactory, __uuidof(IAgStkGraphicsBandExtractFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBandOrderFilter, __uuidof(IAgStkGraphicsBandOrderFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBandOrderFilterFactory, __uuidof(IAgStkGraphicsBandOrderFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBlurFilter, __uuidof(IAgStkGraphicsBlurFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBlurFilterFactory, __uuidof(IAgStkGraphicsBlurFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBrightnessFilter, __uuidof(IAgStkGraphicsBrightnessFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsBrightnessFilterFactory, __uuidof(IAgStkGraphicsBrightnessFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsColorToLuminanceFilter, __uuidof(IAgStkGraphicsColorToLuminanceFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsColorToLuminanceFilterFactory, __uuidof(IAgStkGraphicsColorToLuminanceFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsContrastFilter, __uuidof(IAgStkGraphicsContrastFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsContrastFilterFactory, __uuidof(IAgStkGraphicsContrastFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsConvolutionFilter, __uuidof(IAgStkGraphicsConvolutionFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsConvolutionFilterFactory, __uuidof(IAgStkGraphicsConvolutionFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsEdgeDetectFilter, __uuidof(IAgStkGraphicsEdgeDetectFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsEdgeDetectFilterFactory, __uuidof(IAgStkGraphicsEdgeDetectFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterStream, __uuidof(IAgStkGraphicsRasterStream));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsFilteringRasterStream, __uuidof(IAgStkGraphicsFilteringRasterStream));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsFilteringRasterStreamFactory, __uuidof(IAgStkGraphicsFilteringRasterStreamFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsFlipFilter, __uuidof(IAgStkGraphicsFlipFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsFlipFilterFactory, __uuidof(IAgStkGraphicsFlipFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGammaCorrectionFilter, __uuidof(IAgStkGraphicsGammaCorrectionFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGammaCorrectionFilterFactory, __uuidof(IAgStkGraphicsGammaCorrectionFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGaussianBlurFilter, __uuidof(IAgStkGraphicsGaussianBlurFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGaussianBlurFilterFactory, __uuidof(IAgStkGraphicsGaussianBlurFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGradientDetectFilter, __uuidof(IAgStkGraphicsGradientDetectFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGradientDetectFilterFactory, __uuidof(IAgStkGraphicsGradientDetectFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsJpeg2000WriterInitializer, __uuidof(IAgStkGraphicsJpeg2000WriterInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsLevelsFilter, __uuidof(IAgStkGraphicsLevelsFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsLevelsFilterFactory, __uuidof(IAgStkGraphicsLevelsFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectionStream, __uuidof(IAgStkGraphicsProjectionStream));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectionRasterStreamPluginProxy, __uuidof(IAgStkGraphicsProjectionRasterStreamPluginProxy));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectionRasterStreamPluginActivator, __uuidof(IAgStkGraphicsProjectionRasterStreamPluginActivator));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory, __uuidof(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterFactory, __uuidof(IAgStkGraphicsRasterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterAttributesFactory, __uuidof(IAgStkGraphicsRasterAttributesFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRotateFilter, __uuidof(IAgStkGraphicsRotateFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRotateFilterFactory, __uuidof(IAgStkGraphicsRotateFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSequenceFilter, __uuidof(IAgStkGraphicsSequenceFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSequenceFilterFactory, __uuidof(IAgStkGraphicsSequenceFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSharpenFilter, __uuidof(IAgStkGraphicsSharpenFilter));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSharpenFilterFactory, __uuidof(IAgStkGraphicsSharpenFilterFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsVideoStream, __uuidof(IAgStkGraphicsVideoStream));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsVideoStreamFactory, __uuidof(IAgStkGraphicsVideoStreamFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, __uuidof(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsMarkerBatchPrimitive, __uuidof(IAgStkGraphicsMarkerBatchPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsMarkerBatchPrimitiveFactory, __uuidof(IAgStkGraphicsMarkerBatchPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory, __uuidof(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, __uuidof(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, __uuidof(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsModelTransformation, __uuidof(IAgStkGraphicsModelTransformation));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsModelArticulation, __uuidof(IAgStkGraphicsModelArticulation));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsModelArticulationCollection, __uuidof(IAgStkGraphicsModelArticulationCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsModelPrimitive, __uuidof(IAgStkGraphicsModelPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsModelPrimitiveFactory, __uuidof(IAgStkGraphicsModelPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPixelSizeDisplayCondition, __uuidof(IAgStkGraphicsPixelSizeDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPixelSizeDisplayConditionFactory, __uuidof(IAgStkGraphicsPixelSizeDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPointBatchPrimitive, __uuidof(IAgStkGraphicsPointBatchPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPointBatchPrimitiveFactory, __uuidof(IAgStkGraphicsPointBatchPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPositionInterpolator, __uuidof(IAgStkGraphicsPositionInterpolator));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPolylinePrimitive, __uuidof(IAgStkGraphicsPolylinePrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPolylinePrimitiveFactory, __uuidof(IAgStkGraphicsPolylinePrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterImageGlobeOverlay, __uuidof(IAgStkGraphicsRasterImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRasterImageGlobeOverlayFactory, __uuidof(IAgStkGraphicsRasterImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRhumbLineInterpolator, __uuidof(IAgStkGraphicsRhumbLineInterpolator));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsRhumbLineInterpolatorFactory, __uuidof(IAgStkGraphicsRhumbLineInterpolatorFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneDisplayCondition, __uuidof(IAgStkGraphicsSceneDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneDisplayConditionFactory, __uuidof(IAgStkGraphicsSceneDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPrimitiveManager, __uuidof(IAgStkGraphicsPrimitiveManager));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayManager, __uuidof(IAgStkGraphicsScreenOverlayManager));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTexture2DFactory, __uuidof(IAgStkGraphicsTexture2DFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsGlobeOverlaySettings, __uuidof(IAgStkGraphicsGlobeOverlaySettings));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneManagerInitializer, __uuidof(IAgStkGraphicsSceneManagerInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayFactory, __uuidof(IAgStkGraphicsScreenOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSolidPrimitive, __uuidof(IAgStkGraphicsSolidPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSolidPrimitiveFactory, __uuidof(IAgStkGraphicsSolidPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextureMatrix, __uuidof(IAgStkGraphicsTextureMatrix));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfaceMeshPrimitive, __uuidof(IAgStkGraphicsSurfaceMeshPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSurfaceMeshPrimitiveFactory, __uuidof(IAgStkGraphicsSurfaceMeshPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTerrainOverlayInitializer, __uuidof(IAgStkGraphicsTerrainOverlayInitializer));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextBatchPrimitiveOptionalParameters, __uuidof(IAgStkGraphicsTextBatchPrimitiveOptionalParameters));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextBatchPrimitive, __uuidof(IAgStkGraphicsTextBatchPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextBatchPrimitiveFactory, __uuidof(IAgStkGraphicsTextBatchPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory, __uuidof(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextureMatrixFactory, __uuidof(IAgStkGraphicsTextureMatrixFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextureScreenOverlay, __uuidof(IAgStkGraphicsTextureScreenOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextureScreenOverlayFactory, __uuidof(IAgStkGraphicsTextureScreenOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTimeIntervalDisplayCondition, __uuidof(IAgStkGraphicsTimeIntervalDisplayCondition));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTimeIntervalDisplayConditionFactory, __uuidof(IAgStkGraphicsTimeIntervalDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters, __uuidof(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTriangulatorResult, __uuidof(IAgStkGraphicsTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTriangleMeshPrimitive, __uuidof(IAgStkGraphicsTriangleMeshPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTriangleMeshPrimitiveFactory, __uuidof(IAgStkGraphicsTriangleMeshPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory, __uuidof(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextOverlay, __uuidof(IAgStkGraphicsTextOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTextOverlayFactory, __uuidof(IAgStkGraphicsTextOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGICustomTerrainOverlay, __uuidof(IAgStkGraphicsAGICustomTerrainOverlay));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAGICustomTerrainOverlayFactory, __uuidof(IAgStkGraphicsAGICustomTerrainOverlayFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAxesPrimitive, __uuidof(IAgStkGraphicsAxesPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsAxesPrimitiveFactory, __uuidof(IAgStkGraphicsAxesPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsVectorPrimitive, __uuidof(IAgStkGraphicsVectorPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsVectorPrimitiveFactory, __uuidof(IAgStkGraphicsVectorPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsExtrudedPolylineTriangulatorResult, __uuidof(_IAgStkGraphicsExtrudedPolylineTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSolidTriangulatorResult, __uuidof(_IAgStkGraphicsSolidTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfaceShapesResult, __uuidof(_IAgStkGraphicsSurfaceShapesResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfaceTriangulatorResult, __uuidof(_IAgStkGraphicsSurfaceTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTriangulatorResult, __uuidof(_IAgStkGraphicsTriangulatorResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGICustomTerrainOverlay, __uuidof(_IAgStkGraphicsAGICustomTerrainOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGIProcessedImageGlobeOverlay, __uuidof(_IAgStkGraphicsAGIProcessedImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGIProcessedTerrainOverlay, __uuidof(_IAgStkGraphicsAGIProcessedTerrainOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGIRoamImageGlobeOverlay, __uuidof(_IAgStkGraphicsAGIRoamImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCameraSnapshot, __uuidof(_IAgStkGraphicsCameraSnapshot));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCameraVideoRecording, __uuidof(_IAgStkGraphicsCameraVideoRecording));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCentralBodyGraphicsIndexer, __uuidof(_IAgStkGraphicsCentralBodyGraphicsIndexer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCustomImageGlobeOverlay, __uuidof(_IAgStkGraphicsCustomImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator, __uuidof(_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy, __uuidof(_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGeospatialImageGlobeOverlay, __uuidof(_IAgStkGraphicsGeospatialImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGlobeOverlay, __uuidof(_IAgStkGraphicsGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGlobeOverlaySettings, __uuidof(_IAgStkGraphicsGlobeOverlaySettings));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsLighting, __uuidof(_IAgStkGraphicsLighting));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectedRasterOverlay, __uuidof(_IAgStkGraphicsProjectedRasterOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjection, __uuidof(_IAgStkGraphicsProjection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectionStream, __uuidof(_IAgStkGraphicsProjectionStream));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSceneGlobeOverlaySettings, __uuidof(_IAgStkGraphicsSceneGlobeOverlaySettings));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsScreenOverlayCollectionBase, __uuidof(IAgStkGraphicsScreenOverlayCollectionBase));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlayCollectionBase, __uuidof(_IAgStkGraphicsScreenOverlayCollectionBase));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTexture2DFactory, __uuidof(_IAgStkGraphicsTexture2DFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAltitudeDisplayCondition, __uuidof(_IAgStkGraphicsAltitudeDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAxesPrimitive, __uuidof(_IAgStkGraphicsAxesPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCamera, __uuidof(_IAgStkGraphicsCamera));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCentralBodyGraphics, __uuidof(_IAgStkGraphicsCentralBodyGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCompositeDisplayCondition, __uuidof(_IAgStkGraphicsCompositeDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCompositePrimitive, __uuidof(_IAgStkGraphicsCompositePrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsConstantDisplayCondition, __uuidof(_IAgStkGraphicsConstantDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDisplayCondition, __uuidof(_IAgStkGraphicsDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceDisplayCondition, __uuidof(_IAgStkGraphicsDistanceDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, __uuidof(_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceToPositionDisplayCondition, __uuidof(_IAgStkGraphicsDistanceToPositionDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, __uuidof(_IAgStkGraphicsDistanceToPrimitiveDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGlobeImageOverlay, __uuidof(_IAgStkGraphicsGlobeImageOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGraphicsFont, __uuidof(_IAgStkGraphicsGraphicsFont));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGreatArcInterpolator, __uuidof(_IAgStkGraphicsGreatArcInterpolator));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsImageCollection, __uuidof(_IAgStkGraphicsImageCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAlphaFromLuminanceFilter, __uuidof(_IAgStkGraphicsAlphaFromLuminanceFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAlphaFromPixelFilter, __uuidof(_IAgStkGraphicsAlphaFromPixelFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAlphaFromRasterFilter, __uuidof(_IAgStkGraphicsAlphaFromRasterFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBandExtractFilter, __uuidof(_IAgStkGraphicsBandExtractFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBandOrderFilter, __uuidof(_IAgStkGraphicsBandOrderFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBlurFilter, __uuidof(_IAgStkGraphicsBlurFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBrightnessFilter, __uuidof(_IAgStkGraphicsBrightnessFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsColorToLuminanceFilter, __uuidof(_IAgStkGraphicsColorToLuminanceFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsContrastFilter, __uuidof(_IAgStkGraphicsContrastFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsConvolutionFilter, __uuidof(_IAgStkGraphicsConvolutionFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsEdgeDetectFilter, __uuidof(_IAgStkGraphicsEdgeDetectFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsFilteringRasterStream, __uuidof(_IAgStkGraphicsFilteringRasterStream));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsFlipFilter, __uuidof(_IAgStkGraphicsFlipFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGammaCorrectionFilter, __uuidof(_IAgStkGraphicsGammaCorrectionFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGaussianBlurFilter, __uuidof(_IAgStkGraphicsGaussianBlurFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGradientDetectFilter, __uuidof(_IAgStkGraphicsGradientDetectFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsLevelsFilter, __uuidof(_IAgStkGraphicsLevelsFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectionRasterStreamPluginActivator, __uuidof(_IAgStkGraphicsProjectionRasterStreamPluginActivator));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectionRasterStreamPluginProxy, __uuidof(_IAgStkGraphicsProjectionRasterStreamPluginProxy));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRaster, __uuidof(_IAgStkGraphicsRaster));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterAttributes, __uuidof(_IAgStkGraphicsRasterAttributes));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterFilter, __uuidof(_IAgStkGraphicsRasterFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterStream, __uuidof(_IAgStkGraphicsRasterStream));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRotateFilter, __uuidof(_IAgStkGraphicsRotateFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSequenceFilter, __uuidof(_IAgStkGraphicsSequenceFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSharpenFilter, __uuidof(_IAgStkGraphicsSharpenFilter));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsVideoStream, __uuidof(_IAgStkGraphicsVideoStream));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlContainer, __uuidof(IAgStkGraphicsKmlContainer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlContainer, __uuidof(_IAgStkGraphicsKmlContainer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlDocument, __uuidof(_IAgStkGraphicsKmlDocument));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlFeature, __uuidof(_IAgStkGraphicsKmlFeature));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlFolder, __uuidof(IAgStkGraphicsKmlFolder));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlFolder, __uuidof(_IAgStkGraphicsKmlFolder));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlGraphics, __uuidof(_IAgStkGraphicsKmlGraphics));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlNetworkLink, __uuidof(IAgStkGraphicsKmlNetworkLink));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsKmlNetworkLink, __uuidof(_IAgStkGraphicsKmlNetworkLink));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsMarkerBatchPrimitive, __uuidof(_IAgStkGraphicsMarkerBatchPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, __uuidof(_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsModelArticulation, __uuidof(_IAgStkGraphicsModelArticulation));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsModelArticulationCollection, __uuidof(_IAgStkGraphicsModelArticulationCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsModelPrimitive, __uuidof(_IAgStkGraphicsModelPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsModelTransformation, __uuidof(_IAgStkGraphicsModelTransformation));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsOverlay, __uuidof(IAgStkGraphicsOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsOverlay, __uuidof(_IAgStkGraphicsOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPickResult, __uuidof(_IAgStkGraphicsPickResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPixelSizeDisplayCondition, __uuidof(_IAgStkGraphicsPixelSizeDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPointBatchPrimitive, __uuidof(_IAgStkGraphicsPointBatchPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPolylinePrimitive, __uuidof(_IAgStkGraphicsPolylinePrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPositionInterpolator, __uuidof(_IAgStkGraphicsPositionInterpolator));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPrimitive, __uuidof(_IAgStkGraphicsPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPrimitiveManager, __uuidof(_IAgStkGraphicsPrimitiveManager));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterImageGlobeOverlay, __uuidof(_IAgStkGraphicsRasterImageGlobeOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRhumbLineInterpolator, __uuidof(_IAgStkGraphicsRhumbLineInterpolator));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScene, __uuidof(_IAgStkGraphicsScene));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSceneDisplayCondition, __uuidof(_IAgStkGraphicsSceneDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlay, __uuidof(_IAgStkGraphicsScreenOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlayCollection, __uuidof(_IAgStkGraphicsScreenOverlayCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlayManager, __uuidof(_IAgStkGraphicsScreenOverlayManager));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlayPickResult, __uuidof(_IAgStkGraphicsScreenOverlayPickResult));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSolidPrimitive, __uuidof(_IAgStkGraphicsSolidPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsStereoscopic, __uuidof(IAgStkGraphicsStereoscopic));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsStereoscopic, __uuidof(_IAgStkGraphicsStereoscopic));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfaceMeshPrimitive, __uuidof(_IAgStkGraphicsSurfaceMeshPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTerrainCollection, __uuidof(_IAgStkGraphicsTerrainCollection));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTerrainOverlay, __uuidof(_IAgStkGraphicsTerrainOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextBatchPrimitive, __uuidof(_IAgStkGraphicsTextBatchPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, __uuidof(_IAgStkGraphicsTextBatchPrimitiveOptionalParameters));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextOverlay, __uuidof(_IAgStkGraphicsTextOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextureMatrix, __uuidof(_IAgStkGraphicsTextureMatrix));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextureScreenOverlay, __uuidof(_IAgStkGraphicsTextureScreenOverlay));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTimeIntervalDisplayCondition, __uuidof(_IAgStkGraphicsTimeIntervalDisplayCondition));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTriangleMeshPrimitive, __uuidof(_IAgStkGraphicsTriangleMeshPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters, __uuidof(_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsVectorPrimitive, __uuidof(_IAgStkGraphicsVectorPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBoxTriangulatorInitializer, __uuidof(_IAgStkGraphicsBoxTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCylinderTriangulatorInitializer, __uuidof(_IAgStkGraphicsCylinderTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsEllipsoidTriangulatorInitializer, __uuidof(_IAgStkGraphicsEllipsoidTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, __uuidof(_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfaceExtentTriangulatorInitializer, __uuidof(_IAgStkGraphicsSurfaceExtentTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, __uuidof(_IAgStkGraphicsSurfacePolygonTriangulatorInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfaceShapesInitializer, __uuidof(_IAgStkGraphicsSurfaceShapesInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGICustomTerrainOverlayFactory, __uuidof(_IAgStkGraphicsAGICustomTerrainOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory, __uuidof(_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGIProcessedTerrainOverlayFactory, __uuidof(_IAgStkGraphicsAGIProcessedTerrainOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory, __uuidof(_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory, __uuidof(_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGeospatialImageGlobeOverlayFactory, __uuidof(_IAgStkGraphicsGeospatialImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectedRasterOverlayFactory, __uuidof(_IAgStkGraphicsProjectedRasterOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectionFactory, __uuidof(_IAgStkGraphicsProjectionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAltitudeDisplayConditionFactory, __uuidof(_IAgStkGraphicsAltitudeDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAxesPrimitiveFactory, __uuidof(_IAgStkGraphicsAxesPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCompositeDisplayConditionFactory, __uuidof(_IAgStkGraphicsCompositeDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsCompositePrimitiveFactory, __uuidof(_IAgStkGraphicsCompositePrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsConstantDisplayConditionFactory, __uuidof(_IAgStkGraphicsConstantDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceDisplayConditionFactory, __uuidof(_IAgStkGraphicsDistanceDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, __uuidof(_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceToPositionDisplayConditionFactory, __uuidof(_IAgStkGraphicsDistanceToPositionDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory, __uuidof(_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, __uuidof(_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGlobeImageOverlayInitializer, __uuidof(_IAgStkGraphicsGlobeImageOverlayInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGraphicsFontFactory, __uuidof(_IAgStkGraphicsGraphicsFontFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGreatArcInterpolatorFactory, __uuidof(_IAgStkGraphicsGreatArcInterpolatorFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAlphaFromLuminanceFilterFactory, __uuidof(_IAgStkGraphicsAlphaFromLuminanceFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAlphaFromPixelFilterFactory, __uuidof(_IAgStkGraphicsAlphaFromPixelFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsAlphaFromRasterFilterFactory, __uuidof(_IAgStkGraphicsAlphaFromRasterFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBandExtractFilterFactory, __uuidof(_IAgStkGraphicsBandExtractFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBandOrderFilterFactory, __uuidof(_IAgStkGraphicsBandOrderFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBlurFilterFactory, __uuidof(_IAgStkGraphicsBlurFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsBrightnessFilterFactory, __uuidof(_IAgStkGraphicsBrightnessFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsColorToLuminanceFilterFactory, __uuidof(_IAgStkGraphicsColorToLuminanceFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsContrastFilterFactory, __uuidof(_IAgStkGraphicsContrastFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsConvolutionFilterFactory, __uuidof(_IAgStkGraphicsConvolutionFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsEdgeDetectFilterFactory, __uuidof(_IAgStkGraphicsEdgeDetectFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsFilteringRasterStreamFactory, __uuidof(_IAgStkGraphicsFilteringRasterStreamFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsFlipFilterFactory, __uuidof(_IAgStkGraphicsFlipFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGammaCorrectionFilterFactory, __uuidof(_IAgStkGraphicsGammaCorrectionFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGaussianBlurFilterFactory, __uuidof(_IAgStkGraphicsGaussianBlurFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsGradientDetectFilterFactory, __uuidof(_IAgStkGraphicsGradientDetectFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsJpeg2000WriterInitializer, __uuidof(_IAgStkGraphicsJpeg2000WriterInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsLevelsFilterFactory, __uuidof(_IAgStkGraphicsLevelsFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory, __uuidof(_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterFactory, __uuidof(_IAgStkGraphicsRasterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterAttributesFactory, __uuidof(_IAgStkGraphicsRasterAttributesFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRotateFilterFactory, __uuidof(_IAgStkGraphicsRotateFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSequenceFilterFactory, __uuidof(_IAgStkGraphicsSequenceFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSharpenFilterFactory, __uuidof(_IAgStkGraphicsSharpenFilterFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsVideoStreamFactory, __uuidof(_IAgStkGraphicsVideoStreamFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsMarkerBatchPrimitiveFactory, __uuidof(_IAgStkGraphicsMarkerBatchPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory, __uuidof(_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, __uuidof(_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsModelPrimitiveFactory, __uuidof(_IAgStkGraphicsModelPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPixelSizeDisplayConditionFactory, __uuidof(_IAgStkGraphicsPixelSizeDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPointBatchPrimitiveFactory, __uuidof(_IAgStkGraphicsPointBatchPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPolylinePrimitiveFactory, __uuidof(_IAgStkGraphicsPolylinePrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRasterImageGlobeOverlayFactory, __uuidof(_IAgStkGraphicsRasterImageGlobeOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsRhumbLineInterpolatorFactory, __uuidof(_IAgStkGraphicsRhumbLineInterpolatorFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSceneDisplayConditionFactory, __uuidof(_IAgStkGraphicsSceneDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSceneManagerInitializer, __uuidof(_IAgStkGraphicsSceneManagerInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsScreenOverlayFactory, __uuidof(_IAgStkGraphicsScreenOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSolidPrimitiveFactory, __uuidof(_IAgStkGraphicsSolidPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSurfaceMeshPrimitiveFactory, __uuidof(_IAgStkGraphicsSurfaceMeshPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTerrainOverlayInitializer, __uuidof(_IAgStkGraphicsTerrainOverlayInitializer));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextBatchPrimitiveFactory, __uuidof(_IAgStkGraphicsTextBatchPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory, __uuidof(_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextOverlayFactory, __uuidof(_IAgStkGraphicsTextOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextureMatrixFactory, __uuidof(_IAgStkGraphicsTextureMatrixFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTextureScreenOverlayFactory, __uuidof(_IAgStkGraphicsTextureScreenOverlayFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTimeIntervalDisplayConditionFactory, __uuidof(_IAgStkGraphicsTimeIntervalDisplayConditionFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTriangleMeshPrimitiveFactory, __uuidof(_IAgStkGraphicsTriangleMeshPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory, __uuidof(_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsVectorPrimitiveFactory, __uuidof(_IAgStkGraphicsVectorPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsImageCollectionEvents, __uuidof(IAgStkGraphicsImageCollectionEvents));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsKmlGraphicsEvents, __uuidof(IAgStkGraphicsKmlGraphicsEvents));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneEvents, __uuidof(IAgStkGraphicsSceneEvents));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneManagerEvents, __uuidof(IAgStkGraphicsSceneManagerEvents));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsTerrainCollectionEvents, __uuidof(IAgStkGraphicsTerrainCollectionEvents));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsFactoryAndInitializers, __uuidof(IAgStkGraphicsFactoryAndInitializers));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsSceneManager, __uuidof(IAgStkGraphicsSceneManager));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsSceneManager, __uuidof(_IAgStkGraphicsSceneManager));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPathPrimitiveFactory, __uuidof(IAgStkGraphicsPathPrimitiveFactory));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsFactoryAndInitializers, __uuidof(_IAgStkGraphicsFactoryAndInitializers));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPathPrimitive, __uuidof(IAgStkGraphicsPathPrimitive));
_COM_SMARTPTR_TYPEDEF(IAgStkGraphicsPathPrimitiveUpdatePolicy, __uuidof(IAgStkGraphicsPathPrimitiveUpdatePolicy));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPathPrimitiveUpdatePolicy, __uuidof(_IAgStkGraphicsPathPrimitiveUpdatePolicy));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, __uuidof(_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, __uuidof(_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPathPrimitive, __uuidof(_IAgStkGraphicsPathPrimitive));
_COM_SMARTPTR_TYPEDEF(_IAgStkGraphicsPathPrimitiveFactory, __uuidof(_IAgStkGraphicsPathPrimitiveFactory));

//
// Type library items
//

struct __declspec(uuid("9107fca2-51b8-4347-9391-9ee6c6b792e3"))
IAgStkGraphicsPathPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetDate))
    STKUtil::IAgDatePtr Date;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    double OutlineTranslucency;
    __declspec(property(get=GetIsTranslucent))
    VARIANT_BOOL IsTranslucent;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgDatePtr GetDate ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    double GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        double pRetVal );
    VARIANT_BOOL GetIsTranslucent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsTranslucent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("49ee5d85-028e-4b8e-bba4-14d24acefb9f"))
_IAgStkGraphicsPathPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    double OutlineTranslucency;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetDate))
    STKUtil::IAgDatePtr Date;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetIsTranslucent))
    VARIANT_BOOL IsTranslucent;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgDatePtr GetDate ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    double GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        double pRetVal );
    VARIANT_BOOL GetIsTranslucent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsTranslucent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("efb486c4-09f0-4918-b051-7776acd13f66"))
IAgStkGraphicsPathPointFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPathPointPtr Initialize ( );
    IAgStkGraphicsPathPointPtr InitializeWithDate (
        struct STKUtil::IAgDate * PathPointDate );
    IAgStkGraphicsPathPointPtr InitializeWithDateAndPosition (
        struct STKUtil::IAgDate * PathPointDate,
        SAFEARRAY * * Position );
    IAgStkGraphicsPathPointPtr InitializeWithDatePositionAndColor (
        struct STKUtil::IAgDate * PathPointDate,
        SAFEARRAY * * Position,
        OLE_COLOR Color );
    IAgStkGraphicsPathPointPtr InitializeWithDatePositionColorAndTranslucency (
        struct STKUtil::IAgDate * PathPointDate,
        SAFEARRAY * * Position,
        OLE_COLOR Color,
        double Translucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDate (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDateAndPosition (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDatePositionAndColor (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ OLE_COLOR Color,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDatePositionColorAndTranslucency (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ double Translucency,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
};

struct __declspec(uuid("3bee0e8a-72ef-4c17-a953-98cca8a8a3fc"))
_IAgStkGraphicsPathPointFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPathPointPtr Initialize ( );
    IAgStkGraphicsPathPointPtr InitializeWithDate (
        struct STKUtil::IAgDate * PathPointDate );
    IAgStkGraphicsPathPointPtr InitializeWithDateAndPosition (
        struct STKUtil::IAgDate * PathPointDate,
        SAFEARRAY * * Position );
    IAgStkGraphicsPathPointPtr InitializeWithDatePositionAndColor (
        struct STKUtil::IAgDate * PathPointDate,
        SAFEARRAY * * Position,
        OLE_COLOR Color );
    IAgStkGraphicsPathPointPtr InitializeWithDatePositionColorAndTranslucency (
        struct STKUtil::IAgDate * PathPointDate,
        SAFEARRAY * * Position,
        OLE_COLOR Color,
        double Translucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDate (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDateAndPosition (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDatePositionAndColor (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ OLE_COLOR Color,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDatePositionColorAndTranslucency (
        /*[in]*/ struct STKUtil::IAgDate * PathPointDate,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ double Translucency,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
};

struct __declspec(uuid("68e2776e-6e9a-449a-8146-99e67cf8d16c"))
IAgStkGraphicsBoundingSphere : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    SAFEARRAY * Center;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetCenter ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("1c768789-45e4-4108-b666-4585d76dc1ad"))
_IAgStkGraphicsBoundingSphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    SAFEARRAY * Center;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetCenter ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("fdde5510-3231-4c01-9c23-8485643e47ff"))
IAgStkGraphicsBoundingSphereFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumRadiusBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr MaximumRadiusBoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBoundingSpherePtr Initialize (
        SAFEARRAY * * Center,
        double Radius );
    IAgStkGraphicsBoundingSpherePtr GetMaximumRadiusBoundingSphere ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumRadiusBoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
};

struct __declspec(uuid("de9c2ffc-7b06-41b9-b8a8-8590fc00665f"))
_IAgStkGraphicsBoundingSphereFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumRadiusBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr MaximumRadiusBoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBoundingSpherePtr Initialize (
        SAFEARRAY * * Center,
        double Radius );
    IAgStkGraphicsBoundingSpherePtr GetMaximumRadiusBoundingSphere ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumRadiusBoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
};

enum AgEStkGraphicsMinificationFilter
{
    eStkGraphicsMinificationFilterNearest = 0,
    eStkGraphicsMinificationFilterLinear = 1,
    eStkGraphicsMinificationFilterNearestMipMapNearest = 2,
    eStkGraphicsMinificationFilterLinearMipMapNearest = 3,
    eStkGraphicsMinificationFilterNearestMipMapLinear = 4,
    eStkGraphicsMinificationFilterLinearMipMapLinear = 5
};

enum AgEStkGraphicsMagnificationFilter
{
    eStkGraphicsMagnificationFilterNearest = 0,
    eStkGraphicsMagnificationFilterLinear = 1
};

enum AgEStkGraphicsTextureWrap
{
    eStkGraphicsTextureWrapClamp = 0,
    eStkGraphicsTextureWrapClampToBorder = 1,
    eStkGraphicsTextureWrapClampToEdge = 2,
    eStkGraphicsTextureWrapMirroredRepeat = 3,
    eStkGraphicsTextureWrapRepeat = 4
};

struct __declspec(uuid("c71ed80c-abbc-4ce5-bf56-a21ea03c4593"))
IAgStkGraphicsTextureFilter2D : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinificationFilter))
    enum AgEStkGraphicsMinificationFilter MinificationFilter;
    __declspec(property(get=GetMagnificationFilter))
    enum AgEStkGraphicsMagnificationFilter MagnificationFilter;
    __declspec(property(get=GetWrapS))
    enum AgEStkGraphicsTextureWrap WrapS;
    __declspec(property(get=GetWrapT))
    enum AgEStkGraphicsTextureWrap WrapT;
    __declspec(property(get=GetNearestClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr NearestClampToEdge;
    __declspec(property(get=GetNearestRepeat))
    IAgStkGraphicsTextureFilter2DPtr NearestRepeat;
    __declspec(property(get=GetLinearClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr LinearClampToEdge;
    __declspec(property(get=GetLinearRepeat))
    IAgStkGraphicsTextureFilter2DPtr LinearRepeat;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsMinificationFilter GetMinificationFilter ( );
    enum AgEStkGraphicsMagnificationFilter GetMagnificationFilter ( );
    enum AgEStkGraphicsTextureWrap GetWrapS ( );
    enum AgEStkGraphicsTextureWrap GetWrapT ( );
    IAgStkGraphicsTextureFilter2DPtr GetNearestClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetNearestRepeat ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearRepeat ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinificationFilter (
        /*[out,retval]*/ enum AgEStkGraphicsMinificationFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MagnificationFilter (
        /*[out,retval]*/ enum AgEStkGraphicsMagnificationFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WrapS (
        /*[out,retval]*/ enum AgEStkGraphicsTextureWrap * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WrapT (
        /*[out,retval]*/ enum AgEStkGraphicsTextureWrap * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearestClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NearestRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("7f8d6adc-44af-4c1f-a083-a4cd887f8e6e"))
_IAgStkGraphicsTextureFilter2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinificationFilter))
    enum AgEStkGraphicsMinificationFilter MinificationFilter;
    __declspec(property(get=GetMagnificationFilter))
    enum AgEStkGraphicsMagnificationFilter MagnificationFilter;
    __declspec(property(get=GetWrapS))
    enum AgEStkGraphicsTextureWrap WrapS;
    __declspec(property(get=GetWrapT))
    enum AgEStkGraphicsTextureWrap WrapT;
    __declspec(property(get=GetNearestClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr NearestClampToEdge;
    __declspec(property(get=GetNearestRepeat))
    IAgStkGraphicsTextureFilter2DPtr NearestRepeat;
    __declspec(property(get=GetLinearClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr LinearClampToEdge;
    __declspec(property(get=GetLinearRepeat))
    IAgStkGraphicsTextureFilter2DPtr LinearRepeat;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsMinificationFilter GetMinificationFilter ( );
    enum AgEStkGraphicsMagnificationFilter GetMagnificationFilter ( );
    enum AgEStkGraphicsTextureWrap GetWrapS ( );
    enum AgEStkGraphicsTextureWrap GetWrapT ( );
    IAgStkGraphicsTextureFilter2DPtr GetNearestClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetNearestRepeat ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearRepeat ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinificationFilter (
        /*[out,retval]*/ enum AgEStkGraphicsMinificationFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MagnificationFilter (
        /*[out,retval]*/ enum AgEStkGraphicsMagnificationFilter * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WrapS (
        /*[out,retval]*/ enum AgEStkGraphicsTextureWrap * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WrapT (
        /*[out,retval]*/ enum AgEStkGraphicsTextureWrap * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearestClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NearestRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5"))
IAgStkGraphicsTextureFilter2DFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetNearestClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr NearestClampToEdge;
    __declspec(property(get=GetNearestRepeat))
    IAgStkGraphicsTextureFilter2DPtr NearestRepeat;
    __declspec(property(get=GetLinearClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr LinearClampToEdge;
    __declspec(property(get=GetLinearRepeat))
    IAgStkGraphicsTextureFilter2DPtr LinearRepeat;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextureFilter2DPtr GetNearestClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetNearestRepeat ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearRepeat ( );
    IAgStkGraphicsTextureFilter2DPtr Initialize (
        enum AgEStkGraphicsMinificationFilter MinificationFilter,
        enum AgEStkGraphicsMagnificationFilter MagnificationFilter,
        enum AgEStkGraphicsTextureWrap WrapS,
        enum AgEStkGraphicsTextureWrap WrapT );
    IAgStkGraphicsTextureFilter2DPtr InitializeWithTextureWrap (
        enum AgEStkGraphicsTextureWrap WrapS,
        enum AgEStkGraphicsTextureWrap WrapT );
    IAgStkGraphicsTextureFilter2DPtr InitializeWithMinificationAndMagnification (
        enum AgEStkGraphicsMinificationFilter MinificationFilter,
        enum AgEStkGraphicsMagnificationFilter MagnificationFilter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NearestClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NearestRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ enum AgEStkGraphicsMinificationFilter MinificationFilter,
        /*[in]*/ enum AgEStkGraphicsMagnificationFilter MagnificationFilter,
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapS,
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapT,
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTextureWrap (
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapS,
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapT,
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMinificationAndMagnification (
        /*[in]*/ enum AgEStkGraphicsMinificationFilter MinificationFilter,
        /*[in]*/ enum AgEStkGraphicsMagnificationFilter MagnificationFilter,
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("99bf5e5b-8d32-4ade-80d4-f275d49bb79f"))
_IAgStkGraphicsTextureFilter2DFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNearestClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr NearestClampToEdge;
    __declspec(property(get=GetNearestRepeat))
    IAgStkGraphicsTextureFilter2DPtr NearestRepeat;
    __declspec(property(get=GetLinearClampToEdge))
    IAgStkGraphicsTextureFilter2DPtr LinearClampToEdge;
    __declspec(property(get=GetLinearRepeat))
    IAgStkGraphicsTextureFilter2DPtr LinearRepeat;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextureFilter2DPtr GetNearestClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetNearestRepeat ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearClampToEdge ( );
    IAgStkGraphicsTextureFilter2DPtr GetLinearRepeat ( );
    IAgStkGraphicsTextureFilter2DPtr Initialize (
        enum AgEStkGraphicsMinificationFilter MinificationFilter,
        enum AgEStkGraphicsMagnificationFilter MagnificationFilter,
        enum AgEStkGraphicsTextureWrap WrapS,
        enum AgEStkGraphicsTextureWrap WrapT );
    IAgStkGraphicsTextureFilter2DPtr InitializeWithTextureWrap (
        enum AgEStkGraphicsTextureWrap WrapS,
        enum AgEStkGraphicsTextureWrap WrapT );
    IAgStkGraphicsTextureFilter2DPtr InitializeWithMinificationAndMagnification (
        enum AgEStkGraphicsMinificationFilter MinificationFilter,
        enum AgEStkGraphicsMagnificationFilter MagnificationFilter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NearestClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NearestRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearClampToEdge (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LinearRepeat (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ enum AgEStkGraphicsMinificationFilter MinificationFilter,
        /*[in]*/ enum AgEStkGraphicsMagnificationFilter MagnificationFilter,
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapS,
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapT,
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTextureWrap (
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapS,
        /*[in]*/ enum AgEStkGraphicsTextureWrap WrapT,
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMinificationAndMagnification (
        /*[in]*/ enum AgEStkGraphicsMinificationFilter MinificationFilter,
        /*[in]*/ enum AgEStkGraphicsMagnificationFilter MagnificationFilter,
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
};

enum AgEStkGraphicsInternalTextureFormat
{
    eStkGraphicsInternalTextureFormatAlpha4 = 0,
    eStkGraphicsInternalTextureFormatAlpha8 = 1,
    eStkGraphicsInternalTextureFormatAlpha12 = 2,
    eStkGraphicsInternalTextureFormatAlpha16 = 3,
    eStkGraphicsInternalTextureFormatR3G3B2 = 4,
    eStkGraphicsInternalTextureFormatRgb4 = 5,
    eStkGraphicsInternalTextureFormatRgb5 = 6,
    eStkGraphicsInternalTextureFormatRgb8 = 7,
    eStkGraphicsInternalTextureFormatRgb10 = 8,
    eStkGraphicsInternalTextureFormatRgb12 = 9,
    eStkGraphicsInternalTextureFormatRgb16 = 10,
    eStkGraphicsInternalTextureFormatRgb16F = 11,
    eStkGraphicsInternalTextureFormatRgb32F = 12,
    eStkGraphicsInternalTextureFormatRgba2 = 13,
    eStkGraphicsInternalTextureFormatRgba4 = 14,
    eStkGraphicsInternalTextureFormatRgb5A1 = 15,
    eStkGraphicsInternalTextureFormatRgba8 = 16,
    eStkGraphicsInternalTextureFormatRgb10A2 = 17,
    eStkGraphicsInternalTextureFormatRgba12 = 18,
    eStkGraphicsInternalTextureFormatRgba16 = 19,
    eStkGraphicsInternalTextureFormatRgba16F = 20,
    eStkGraphicsInternalTextureFormatRgba32F = 21,
    eStkGraphicsInternalTextureFormatLuminance4 = 22,
    eStkGraphicsInternalTextureFormatLuminance8 = 23,
    eStkGraphicsInternalTextureFormatLuminance12 = 24,
    eStkGraphicsInternalTextureFormatLuminance16 = 25,
    eStkGraphicsInternalTextureFormatLuminance16F = 26,
    eStkGraphicsInternalTextureFormatLuminance32F = 27,
    eStkGraphicsInternalTextureFormatLuminance4Alpha4 = 28,
    eStkGraphicsInternalTextureFormatLuminance6Alpha2 = 29,
    eStkGraphicsInternalTextureFormatLuminance8Alpha8 = 30,
    eStkGraphicsInternalTextureFormatLuminance12Alpha4 = 31,
    eStkGraphicsInternalTextureFormatLuminance12Alpha12 = 32,
    eStkGraphicsInternalTextureFormatLuminance16Alpha16 = 33,
    eStkGraphicsInternalTextureFormatLuminance16Alpha16F = 34,
    eStkGraphicsInternalTextureFormatLuminance32Alpha32F = 35
};

struct __declspec(uuid("46fbfc4c-29b8-49c7-beb7-77bc5d836f10"))
IAgStkGraphicsRendererTextureTemplate2D : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalFormat))
    enum AgEStkGraphicsInternalTextureFormat InternalFormat;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsInternalTextureFormat GetInternalFormat ( );
    int GetWidth ( );
    int GetHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalFormat (
        /*[out,retval]*/ enum AgEStkGraphicsInternalTextureFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
};

struct __declspec(uuid("b207af7e-f2b5-4b2f-89f6-1fc3721102b3"))
IAgStkGraphicsRendererTexture2D : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTemplate))
    IAgStkGraphicsRendererTextureTemplate2DPtr Template;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRendererTextureTemplate2DPtr GetTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTextureTemplate2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("f937c30a-5981-4129-a4fe-da3bb3f41c0b"))
_IAgStkGraphicsRendererTexture2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTemplate))
    IAgStkGraphicsRendererTextureTemplate2DPtr Template;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRendererTextureTemplate2DPtr GetTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTextureTemplate2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("8f15b6b4-ba9c-4d9e-a1e1-2456cadbbd0c"))
_IAgStkGraphicsRendererTextureTemplate2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalFormat))
    enum AgEStkGraphicsInternalTextureFormat InternalFormat;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsInternalTextureFormat GetInternalFormat ( );
    int GetWidth ( );
    int GetHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalFormat (
        /*[out,retval]*/ enum AgEStkGraphicsInternalTextureFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
};

struct __declspec(uuid("9214e199-6476-4ef1-a741-13362718bdd5"))
IAgStkGraphicsPathPointCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsPathPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsPathPointPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("f36bc404-1165-4da0-8a1f-33ec8e33f94b"))
_IAgStkGraphicsPathPointCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsPathPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsPathPointPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68"))
IAgStkGraphicsObjectCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _variant_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("998d0185-2228-4599-aeed-41f66c30fde5"))
_IAgStkGraphicsObjectCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _variant_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgEStkGraphicsConstrainedUpAxis
{
    eStkGraphicsConstrainedUpAxisX = 0,
    eStkGraphicsConstrainedUpAxisY = 1,
    eStkGraphicsConstrainedUpAxisZ = 2,
    eStkGraphicsConstrainedUpAxisNegativeX = 3,
    eStkGraphicsConstrainedUpAxisNegativeY = 4,
    eStkGraphicsConstrainedUpAxisNegativeZ = 5,
    eStkGraphicsConstrainedUpAxisNone = 6
};

enum AgEStkGraphicsCameraSnapshotFileFormat
{
    eStkGraphicsCameraSnapshotFileFormatBmp = 0,
    eStkGraphicsCameraSnapshotFileFormatRas = 1,
    eStkGraphicsCameraSnapshotFileFormatTiff = 2,
    eStkGraphicsCameraSnapshotFileFormatJpeg = 3
};

enum AgEStkGraphicsRasterFormat
{
    eStkGraphicsRasterFormatRed = 0,
    eStkGraphicsRasterFormatGreen = 1,
    eStkGraphicsRasterFormatBlue = 2,
    eStkGraphicsRasterFormatAlpha = 3,
    eStkGraphicsRasterFormatRgb = 4,
    eStkGraphicsRasterFormatBgr = 5,
    eStkGraphicsRasterFormatRgba = 6,
    eStkGraphicsRasterFormatBgra = 7,
    eStkGraphicsRasterFormatLuminance = 8,
    eStkGraphicsRasterFormatLuminanceAlpha = 9
};

enum AgEStkGraphicsRasterType
{
    eStkGraphicsRasterTypeUnsignedByte = 0,
    eStkGraphicsRasterTypeByte = 1,
    eStkGraphicsRasterTypeUnsignedShort = 2,
    eStkGraphicsRasterTypeShort = 3,
    eStkGraphicsRasterTypeUnsignedInt = 4,
    eStkGraphicsRasterTypeInt = 5,
    eStkGraphicsRasterTypeFloat = 6,
    eStkGraphicsRasterTypeDouble = 7
};

enum AgEStkGraphicsRasterOrientation
{
    eStkGraphicsRasterOrientationTopToBottom = 0,
    eStkGraphicsRasterOrientationBottomToTop = 1
};

enum AgEStkGraphicsRasterBand
{
    eStkGraphicsRasterBandRed = 0,
    eStkGraphicsRasterBandGreen = 1,
    eStkGraphicsRasterBandBlue = 2,
    eStkGraphicsRasterBandAlpha = 3,
    eStkGraphicsRasterBandLuminance = 4
};

struct __declspec(uuid("067e0cd7-c1c5-41b7-93a8-f9ae8b67df25"))
IAgStkGraphicsRasterAttributes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat))
    enum AgEStkGraphicsRasterFormat Format;
    __declspec(property(get=GetType))
    enum AgEStkGraphicsRasterType Type;
    __declspec(property(get=GetOrientation))
    enum AgEStkGraphicsRasterOrientation Orientation;
    __declspec(property(get=GetByteLength))
    int ByteLength;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetPixelAspectRatio))
    double PixelAspectRatio;
    __declspec(property(get=GetRowAlignment))
    int RowAlignment;
    __declspec(property(get=GetNumberOfBands))
    int NumberOfBands;
    __declspec(property(get=GetRowStride))
    int RowStride;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsRasterFormat GetFormat ( );
    enum AgEStkGraphicsRasterType GetType ( );
    enum AgEStkGraphicsRasterOrientation GetOrientation ( );
    int GetByteLength ( );
    int GetWidth ( );
    int GetHeight ( );
    double GetPixelAspectRatio ( );
    int GetRowAlignment ( );
    int GetNumberOfBands ( );
    int GetRowStride ( );
    VARIANT_BOOL HasBand (
        enum AgEStkGraphicsRasterBand Band );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum AgEStkGraphicsRasterFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEStkGraphicsRasterType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum AgEStkGraphicsRasterOrientation * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ByteLength (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelAspectRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowAlignment (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfBands (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowStride (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgEStkGraphicsFlipAxis
{
    eStkGraphicsFlipAxisHorizontal = 0,
    eStkGraphicsFlipAxisVertical = 1
};

struct __declspec(uuid("1d21525d-4204-47cc-8457-996e1a6eab7e"))
IAgStkGraphicsRasterFilter : IUnknown
{};

struct __declspec(uuid("e0113161-7dd5-4411-bca9-6175aad19b4e"))
IAgStkGraphicsRaster : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributes))
    IAgStkGraphicsRasterAttributesPtr Attributes;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterAttributesPtr GetAttributes ( );
    int GetWidth ( );
    int GetHeight ( );
    HRESULT Flip (
        enum AgEStkGraphicsFlipAxis Axis );
    HRESULT Rotate (
        double Angle );
    IAgStkGraphicsRasterPtr Apply (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT ApplyInPlace (
        struct IAgStkGraphicsRasterFilter * Filter );
    IAgStkGraphicsRasterPtr ExtractBand (
        enum AgEStkGraphicsRasterBand Band );
    IAgStkGraphicsRasterPtr ExtractBandFromRasterFormat (
        enum AgEStkGraphicsRasterFormat Format );
    HRESULT CopyFromRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum AgEStkGraphicsFlipAxis Axis ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyInPlace (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_ExtractBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtractBandFromRasterFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat Format,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster ) = 0;
};

struct __declspec(uuid("6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1"))
IAgStkGraphicsCameraSnapshot : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SaveToFile (
        _bstr_t Filename,
        enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat );
    HRESULT SaveToFileWithWidthAndDPI (
        _bstr_t Filename,
        enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat,
        double WidthInInches,
        double DotsPerInch );
    HRESULT SaveToClipboard ( );
    IAgStkGraphicsRasterPtr SaveToRaster ( );
    IAgStkGraphicsRendererTexture2DPtr SaveToTexture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat ) = 0;
      virtual HRESULT __stdcall raw_SaveToFileWithWidthAndDPI (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat,
        /*[in]*/ double WidthInInches,
        /*[in]*/ double DotsPerInch ) = 0;
      virtual HRESULT __stdcall raw_SaveToClipboard ( ) = 0;
      virtual HRESULT __stdcall raw_SaveToRaster (
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveToTexture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("f519ee7a-e452-451a-839d-0eda6cf69c0a"))
IAgStkGraphicsCameraVideoRecording : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRecording))
    VARIANT_BOOL IsRecording;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsRecording ( );
    HRESULT StartRecording (
        _bstr_t WmvFilename,
        int VideoBitRate,
        int VideoFrameRate );
    HRESULT StartRecordingFrameStack (
        _bstr_t FileDirectory,
        _bstr_t FilePrefix,
        enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFileFormat,
        int StartingFrameNumber,
        int NumberOfFrameDigits );
    HRESULT StopRecording ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsRecording (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartRecording (
        /*[in]*/ BSTR WmvFilename,
        /*[in]*/ int VideoBitRate,
        /*[in]*/ int VideoFrameRate ) = 0;
      virtual HRESULT __stdcall raw_StartRecordingFrameStack (
        /*[in]*/ BSTR FileDirectory,
        /*[in]*/ BSTR FilePrefix,
        /*[in]*/ enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFileFormat,
        /*[in]*/ int StartingFrameNumber,
        /*[in]*/ int NumberOfFrameDigits ) = 0;
      virtual HRESULT __stdcall raw_StopRecording ( ) = 0;
};

enum AgEStkGraphicsVisibility
{
    eStkGraphicsVisibilityNone = 0,
    eStkGraphicsVisibilityPartial = 1,
    eStkGraphicsVisibilityAll = 2
};

struct __declspec(uuid("c9a35fc4-8868-4b28-8622-13cfa470c315"))
IAgStkGraphicsCamera : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetPositionReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr PositionReferenceFrame;
    __declspec(property(get=GetReferencePoint,put=PutReferencePoint))
    SAFEARRAY * ReferencePoint;
    __declspec(property(get=GetReferencePointReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferencePointReferenceFrame;
    __declspec(property(get=GetDirection,put=PutDirection))
    SAFEARRAY * Direction;
    __declspec(property(get=GetUpVector,put=PutUpVector))
    SAFEARRAY * UpVector;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetAxes,put=PutAxes))
    AgSTKVgtLib::IAgCrdnAxesPtr Axes;
    __declspec(property(get=GetConstrainedUpAxis,put=PutConstrainedUpAxis))
    enum AgEStkGraphicsConstrainedUpAxis ConstrainedUpAxis;
    __declspec(property(get=GetAllowRotationOverConstrainedUpAxis,put=PutAllowRotationOverConstrainedUpAxis))
    VARIANT_BOOL AllowRotationOverConstrainedUpAxis;
    __declspec(property(get=GetLockViewDirection,put=PutLockViewDirection))
    VARIANT_BOOL LockViewDirection;
    __declspec(property(get=GetFieldOfView,put=PutFieldOfView))
    double FieldOfView;
    __declspec(property(get=GetHorizontalFieldOfView))
    double HorizontalFieldOfView;
    __declspec(property(get=GetVerticalFieldOfView))
    double VerticalFieldOfView;
    __declspec(property(get=GetNearPlane,put=PutNearPlane))
    double NearPlane;
    __declspec(property(get=GetFarPlane,put=PutFarPlane))
    double FarPlane;
    __declspec(property(get=GetFarNearPlaneRatio,put=PutFarNearPlaneRatio))
    double FarNearPlaneRatio;
    __declspec(property(get=GetDistancePerRadius))
    double DistancePerRadius;
    __declspec(property(get=GetSnapshot))
    IAgStkGraphicsCameraSnapshotPtr Snapshot;
    __declspec(property(get=GetVideoRecording))
    IAgStkGraphicsCameraVideoRecordingPtr VideoRecording;
    __declspec(property(get=GetPixelSizePerDistance))
    double PixelSizePerDistance;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetReferencePoint ( );
    void PutReferencePoint (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetDirection ( );
    void PutDirection (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetUpVector ( );
    void PutUpVector (
        SAFEARRAY * ppRetVal );
    double GetDistance ( );
    void PutDistance (
        double pRetVal );
    AgSTKVgtLib::IAgCrdnAxesPtr GetAxes ( );
    void PutAxes (
        struct AgSTKVgtLib::IAgCrdnAxes * ppRetVal );
    enum AgEStkGraphicsConstrainedUpAxis GetConstrainedUpAxis ( );
    void PutConstrainedUpAxis (
        enum AgEStkGraphicsConstrainedUpAxis pRetVal );
    VARIANT_BOOL GetAllowRotationOverConstrainedUpAxis ( );
    void PutAllowRotationOverConstrainedUpAxis (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetLockViewDirection ( );
    void PutLockViewDirection (
        VARIANT_BOOL pRetVal );
    double GetFieldOfView ( );
    void PutFieldOfView (
        double pRetVal );
    double GetHorizontalFieldOfView ( );
    double GetVerticalFieldOfView ( );
    double GetNearPlane ( );
    void PutNearPlane (
        double pRetVal );
    double GetFarPlane ( );
    void PutFarPlane (
        double pRetVal );
    double GetFarNearPlaneRatio ( );
    void PutFarNearPlaneRatio (
        double pRetVal );
    double GetDistancePerRadius ( );
    IAgStkGraphicsCameraSnapshotPtr GetSnapshot ( );
    IAgStkGraphicsCameraVideoRecordingPtr GetVideoRecording ( );
    double GetPixelSizePerDistance ( );
    AgSTKVgtLib::IAgCrdnSystemPtr GetPositionReferenceFrame ( );
    AgSTKVgtLib::IAgCrdnSystemPtr GetReferencePointReferenceFrame ( );
    enum AgEStkGraphicsVisibility VisibilityTest (
        struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        struct IAgStkGraphicsBoundingSphere * Sphere );
    SAFEARRAY * CartographicToWindow (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    SAFEARRAY * TryCartographicToWindow (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    SAFEARRAY * WindowToCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    SAFEARRAY * TryWindowToCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    HRESULT ViewCentralBody (
        _bstr_t CentralBody,
        struct AgSTKVgtLib::IAgCrdnAxes * Axes );
    HRESULT ViewExtent (
        _bstr_t CentralBody,
        SAFEARRAY * * Extent );
    HRESULT ViewRectangularExtent (
        _bstr_t CentralBody,
        double West,
        double South,
        double East,
        double North );
    HRESULT ViewWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        SAFEARRAY * * UpAxis );
    HRESULT View (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint );
    HRESULT ViewDirectionWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnVector * Direction,
        SAFEARRAY * * UpAxis );
    HRESULT ViewDirection (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnVector * Direction );
    HRESULT ViewOffsetWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        SAFEARRAY * * Offset,
        SAFEARRAY * * UpAxis );
    HRESULT ViewOffset (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        SAFEARRAY * * Offset );
    HRESULT ViewOffsetDirectionWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        struct AgSTKVgtLib::IAgCrdnVector * Direction,
        SAFEARRAY * * UpAxis );
    HRESULT ViewOffsetDirection (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        struct AgSTKVgtLib::IAgCrdnVector * Direction );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferencePoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UpVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_UpVector (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedUpAxis (
        /*[out,retval]*/ enum AgEStkGraphicsConstrainedUpAxis * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstrainedUpAxis (
        /*[in]*/ enum AgEStkGraphicsConstrainedUpAxis pRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowRotationOverConstrainedUpAxis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowRotationOverConstrainedUpAxis (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_LockViewDirection (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LockViewDirection (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfView (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalFieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VerticalFieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NearPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarNearPlaneRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarNearPlaneRatio (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistancePerRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snapshot (
        /*[out,retval]*/ struct IAgStkGraphicsCameraSnapshot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VideoRecording (
        /*[out,retval]*/ struct IAgStkGraphicsCameraVideoRecording * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelSizePerDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePointReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_VisibilityTest (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * Sphere,
        /*[out,retval]*/ enum AgEStkGraphicsVisibility * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CartographicToWindow (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TryCartographicToWindow (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_WindowToCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TryWindowToCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ViewCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes ) = 0;
      virtual HRESULT __stdcall raw_ViewExtent (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Extent ) = 0;
      virtual HRESULT __stdcall raw_ViewRectangularExtent (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double West,
        /*[in]*/ double South,
        /*[in]*/ double East,
        /*[in]*/ double North ) = 0;
      virtual HRESULT __stdcall raw_ViewWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_View (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint ) = 0;
      virtual HRESULT __stdcall raw_ViewDirectionWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_ViewDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction ) = 0;
      virtual HRESULT __stdcall raw_ViewOffsetWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ SAFEARRAY * * Offset,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_ViewOffset (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ SAFEARRAY * * Offset ) = 0;
      virtual HRESULT __stdcall raw_ViewOffsetDirectionWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_ViewOffsetDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction ) = 0;
};

struct __declspec(uuid("683cd020-54fc-48af-b7e4-0dbe06c9bf12"))
IAgStkGraphicsLighting : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetAmbientIntensity,put=PutAmbientIntensity))
    float AmbientIntensity;
    __declspec(property(get=GetDiffuseIntensity,put=PutDiffuseIntensity))
    float DiffuseIntensity;
    __declspec(property(get=GetNightLightsIntensity,put=PutNightLightsIntensity))
    float NightLightsIntensity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pRetVal );
    float GetAmbientIntensity ( );
    void PutAmbientIntensity (
        float pRetVal );
    float GetDiffuseIntensity ( );
    void PutDiffuseIntensity (
        float pRetVal );
    float GetNightLightsIntensity ( );
    void PutNightLightsIntensity (
        float pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AmbientIntensity (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AmbientIntensity (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffuseIntensity (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffuseIntensity (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_NightLightsIntensity (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NightLightsIntensity (
        /*[in]*/ float pRetVal ) = 0;
};

struct __declspec(uuid("ac17f1dd-17dc-41bd-8429-80f90234b53f"))
IAgStkGraphicsGlobeImageOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("dfe57e34-7b31-4360-a7a8-8db856882670"))
IAgStkGraphicsTerrainOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeOffset,put=PutAltitudeOffset))
    double AltitudeOffset;
    __declspec(property(get=GetAltitudeScale,put=PutAltitudeScale))
    double AltitudeScale;
    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    double GetAltitudeOffset ( );
    void PutAltitudeOffset (
        double pRetVal );
    double GetAltitudeScale ( );
    void PutAltitudeScale (
        double pRetVal );
    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltitudeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("6dbd63a6-624b-4318-8fec-daf384f070c4"))
IAgStkGraphicsTerrainCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsTerrainOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsTerrainOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    VARIANT_BOOL ContainsUriString (
        _bstr_t StringUri );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    HRESULT AddAsync (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    int IndexOf (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    int IndexOfUriString (
        _bstr_t StringUri );
    IAgStkGraphicsTerrainOverlayPtr AddUriString (
        _bstr_t Uri );
    IAgStkGraphicsTerrainOverlayPtr AddAsyncUriString (
        _bstr_t Uri );
    HRESULT Swap (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay1,
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay2 );
    HRESULT SwapByIndex (
        int Index1,
        int Index2 );
    HRESULT Move (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        int NewPosition );
    HRESULT MoveByIndex (
        int Index,
        int NewPosition );
    HRESULT BringToFront (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    HRESULT SendToBack (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
      virtual HRESULT __stdcall raw_AddAsync (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
      virtual HRESULT __stdcall raw_IndexOf (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IndexOfUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Swap (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay1,
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay2 ) = 0;
      virtual HRESULT __stdcall raw_SwapByIndex (
        /*[in]*/ int Index1,
        /*[in]*/ int Index2 ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_MoveByIndex (
        /*[in]*/ int Index,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
};

struct __declspec(uuid("797b7253-9205-47a1-b49b-edf6e06326c0"))
IAgStkGraphicsImageCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsGlobeImageOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsGlobeImageOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    VARIANT_BOOL ContainsUriString (
        _bstr_t StringUri );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsGlobeImageOverlay * GlobeOverlay );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    HRESULT AddAsync (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    int IndexOf (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    int IndexOfUriString (
        _bstr_t StringUri );
    IAgStkGraphicsGlobeImageOverlayPtr AddUriString (
        _bstr_t Uri );
    IAgStkGraphicsGlobeImageOverlayPtr AddAsyncUriString (
        _bstr_t Uri );
    HRESULT Swap (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay1,
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay2 );
    HRESULT SwapByIndex (
        int Index1,
        int Index2 );
    HRESULT Move (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        int NewPosition );
    HRESULT MoveByIndex (
        int Index,
        int NewPosition );
    HRESULT BringToFront (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    HRESULT SendToBack (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * GlobeOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
      virtual HRESULT __stdcall raw_AddAsync (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
      virtual HRESULT __stdcall raw_IndexOf (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IndexOfUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Swap (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay1,
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay2 ) = 0;
      virtual HRESULT __stdcall raw_SwapByIndex (
        /*[in]*/ int Index1,
        /*[in]*/ int Index2 ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_MoveByIndex (
        /*[in]*/ int Index,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
};

struct __declspec(uuid("2e284efe-3dda-4fac-91ab-7b8c84eb3ad2"))
IAgStkGraphicsKmlDocument : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUri))
    _bstr_t Uri;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUri ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("8f385d51-5b9c-4f8d-8340-1e8f49b51a6a"))
IAgStkGraphicsKmlDocumentCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsKmlDocumentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsKmlDocumentPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("056eb708-4504-4d62-b4d8-3ca00b0b91fa"))
IAgStkGraphicsKmlGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDocuments))
    IAgStkGraphicsKmlDocumentCollectionPtr Documents;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlDocumentCollectionPtr GetDocuments ( );
    IAgStkGraphicsKmlDocumentPtr LoadDocument (
        _bstr_t KmlUri );
    IAgStkGraphicsKmlDocumentPtr LoadDocumentString (
        _bstr_t KmlUri );
    IAgStkGraphicsKmlDocumentPtr Load (
        _bstr_t KmlDocument );
    HRESULT LoadDocumentAsync (
        _bstr_t KmlUri );
    HRESULT LoadDocumentAsyncString (
        _bstr_t KmlUri );
    HRESULT LoadAsync (
        _bstr_t KmlDocument );
    HRESULT Unload (
        struct IAgStkGraphicsKmlDocument * KmlDocument );
    HRESULT UnloadAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocumentCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDocument (
        /*[in]*/ BSTR KmlUri,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDocumentString (
        /*[in]*/ BSTR KmlUri,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR KmlDocument,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDocumentAsync (
        /*[in]*/ BSTR KmlUri ) = 0;
      virtual HRESULT __stdcall raw_LoadDocumentAsyncString (
        /*[in]*/ BSTR KmlUri ) = 0;
      virtual HRESULT __stdcall raw_LoadAsync (
        /*[in]*/ BSTR KmlDocument ) = 0;
      virtual HRESULT __stdcall raw_Unload (
        /*[in]*/ struct IAgStkGraphicsKmlDocument * KmlDocument ) = 0;
      virtual HRESULT __stdcall raw_UnloadAll ( ) = 0;
};

struct __declspec(uuid("27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca"))
IAgStkGraphicsCentralBodyGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetSpecularColor,put=PutSpecularColor))
    OLE_COLOR SpecularColor;
    __declspec(property(get=GetShininess,put=PutShininess))
    double Shininess;
    __declspec(property(get=GetShowImagery,put=PutShowImagery))
    VARIANT_BOOL ShowImagery;
    __declspec(property(get=GetShow,put=PutShow))
    VARIANT_BOOL Show;
    __declspec(property(get=GetShowLabel,put=PutShowLabel))
    VARIANT_BOOL ShowLabel;
    __declspec(property(get=GetAltitudeOffset,put=PutAltitudeOffset))
    double AltitudeOffset;
    __declspec(property(get=GetBaseOverlay,put=PutBaseOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr BaseOverlay;
    __declspec(property(get=GetNightOverlay,put=PutNightOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr NightOverlay;
    __declspec(property(get=GetSpecularOverlay,put=PutSpecularOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr SpecularOverlay;
    __declspec(property(get=GetTerrain))
    IAgStkGraphicsTerrainCollectionPtr Terrain;
    __declspec(property(get=GetImagery))
    IAgStkGraphicsImageCollectionPtr Imagery;
    __declspec(property(get=GetKml))
    IAgStkGraphicsKmlGraphicsPtr Kml;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetSpecularColor ( );
    void PutSpecularColor (
        OLE_COLOR pRetVal );
    double GetShininess ( );
    void PutShininess (
        double pRetVal );
    VARIANT_BOOL GetShowImagery ( );
    void PutShowImagery (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShow ( );
    void PutShow (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowLabel ( );
    void PutShowLabel (
        VARIANT_BOOL pRetVal );
    double GetAltitudeOffset ( );
    void PutAltitudeOffset (
        double pRetVal );
    IAgStkGraphicsGlobeImageOverlayPtr GetBaseOverlay ( );
    void PutBaseOverlay (
        struct IAgStkGraphicsGlobeImageOverlay * ppRetVal );
    IAgStkGraphicsGlobeImageOverlayPtr GetNightOverlay ( );
    void PutNightOverlay (
        struct IAgStkGraphicsGlobeImageOverlay * ppRetVal );
    IAgStkGraphicsGlobeImageOverlayPtr GetSpecularOverlay ( );
    void PutSpecularOverlay (
        struct IAgStkGraphicsGlobeImageOverlay * ppRetVal );
    IAgStkGraphicsTerrainCollectionPtr GetTerrain ( );
    IAgStkGraphicsImageCollectionPtr GetImagery ( );
    IAgStkGraphicsKmlGraphicsPtr GetKml ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpecularColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpecularColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shininess (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shininess (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowImagery (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowImagery (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Show (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Show (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowLabel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NightOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_NightOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpecularOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SpecularOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Terrain (
        /*[out,retval]*/ struct IAgStkGraphicsTerrainCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Imagery (
        /*[out,retval]*/ struct IAgStkGraphicsImageCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kml (
        /*[out,retval]*/ struct IAgStkGraphicsKmlGraphics * * ppRetVal ) = 0;
};

struct __declspec(uuid("fc4eafc1-217c-4a1b-9640-4a678d84813a"))
IAgStkGraphicsCentralBodyGraphicsIndexer : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgStkGraphicsCentralBodyGraphicsPtr Earth;
    __declspec(property(get=GetMoon))
    IAgStkGraphicsCentralBodyGraphicsPtr Moon;
    __declspec(property(get=GetSun))
    IAgStkGraphicsCentralBodyGraphicsPtr Sun;
    __declspec(property(get=GetItem))
    IAgStkGraphicsCentralBodyGraphicsPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCentralBodyGraphicsPtr GetEarth ( );
    IAgStkGraphicsCentralBodyGraphicsPtr GetMoon ( );
    IAgStkGraphicsCentralBodyGraphicsPtr GetSun ( );
    IAgStkGraphicsCentralBodyGraphicsPtr GetItem (
        _bstr_t CentralBody );
    IAgStkGraphicsCentralBodyGraphicsPtr GetByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Moon (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
};

struct __declspec(uuid("6f2961c3-3fbe-4d5c-849b-d17be044dd71"))
IAgStkGraphicsSceneGlobeOverlaySettings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAntiAliasImagery,put=PutAntiAliasImagery))
    VARIANT_BOOL AntiAliasImagery;
    __declspec(property(get=GetTerrainMeshPixelError,put=PutTerrainMeshPixelError))
    double TerrainMeshPixelError;
    __declspec(property(get=GetImageryPixelError,put=PutImageryPixelError))
    double ImageryPixelError;
    __declspec(property(get=GetProjectedRasterModelProjection,put=PutProjectedRasterModelProjection))
    VARIANT_BOOL ProjectedRasterModelProjection;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAntiAliasImagery ( );
    void PutAntiAliasImagery (
        VARIANT_BOOL pRetVal );
    double GetTerrainMeshPixelError ( );
    void PutTerrainMeshPixelError (
        double pRetVal );
    double GetImageryPixelError ( );
    void PutImageryPixelError (
        double pRetVal );
    VARIANT_BOOL GetProjectedRasterModelProjection ( );
    void PutProjectedRasterModelProjection (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AntiAliasImagery (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AntiAliasImagery (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TerrainMeshPixelError (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TerrainMeshPixelError (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageryPixelError (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageryPixelError (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectedRasterModelProjection (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProjectedRasterModelProjection (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("55238a64-4c7f-4be7-abcb-1d2321f8f64a"))
IAgStkGraphicsPickResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects))
    IAgStkGraphicsObjectCollectionPtr Objects;
    __declspec(property(get=GetDepth))
    float Depth;
    __declspec(property(get=GetPosition))
    SAFEARRAY * Position;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsObjectCollectionPtr GetObjects ( );
    float GetDepth ( );
    SAFEARRAY * GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ struct IAgStkGraphicsObjectCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("2d29d5b1-b160-49ad-8f58-cef696bc952a"))
IAgStkGraphicsPickResultCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsPickResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsPickResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsPickResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3"))
IAgStkGraphicsScreenOverlay : IUnknown
{};

struct __declspec(uuid("4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4"))
IAgStkGraphicsScreenOverlayPickResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetOverlay))
    IAgStkGraphicsScreenOverlayPtr Overlay;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    SAFEARRAY * GetControlPosition ( );
    IAgStkGraphicsScreenOverlayPtr GetOverlay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlay (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("6c1f8d2c-1b38-482c-b935-b174003284bb"))
IAgStkGraphicsScreenOverlayPickResultCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScreenOverlayPickResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsScreenOverlayPickResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayPickResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgEStkGraphicsAntiAliasing
{
    eStkGraphicsAntiAliasingOff = 0,
    eStkGraphicsAntiAliasingFXAA = 1,
    eStkGraphicsAntiAliasingTwoX = 2,
    eStkGraphicsAntiAliasingFourX = 4,
    eStkGraphicsAntiAliasingEightX = 8,
    eStkGraphicsAntiAliasingSixteenX = 16,
    eStkGraphicsAntiAliasingThirtyTwoX = 32,
    eStkGraphicsAntiAliasingSixtyFourX = 64
};

struct __declspec(uuid("2d15c682-efb5-499f-8851-a49599b2097d"))
IAgStkGraphicsScene : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCamera))
    IAgStkGraphicsCameraPtr Camera;
    __declspec(property(get=GetLighting))
    IAgStkGraphicsLightingPtr Lighting;
    __declspec(property(get=GetShowSunshine,put=PutShowSunshine))
    VARIANT_BOOL ShowSunshine;
    __declspec(property(get=GetCentralBodies))
    IAgStkGraphicsCentralBodyGraphicsIndexerPtr CentralBodies;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetShadeSkyBasedOnAltitude,put=PutShadeSkyBasedOnAltitude))
    VARIANT_BOOL ShadeSkyBasedOnAltitude;
    __declspec(property(get=GetShowStars,put=PutShowStars))
    VARIANT_BOOL ShowStars;
    __declspec(property(get=GetGlobeOverlaySettings))
    IAgStkGraphicsSceneGlobeOverlaySettingsPtr GlobeOverlaySettings;
    __declspec(property(get=GetSceneID))
    int SceneID;
    __declspec(property(get=GetShowWaterSurface,put=PutShowWaterSurface))
    VARIANT_BOOL ShowWaterSurface;
    __declspec(property(get=GetAntiAliasing,put=PutAntiAliasing))
    enum AgEStkGraphicsAntiAliasing AntiAliasing;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCameraPtr GetCamera ( );
    IAgStkGraphicsLightingPtr GetLighting ( );
    VARIANT_BOOL GetShowSunshine ( );
    void PutShowSunshine (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsCentralBodyGraphicsIndexerPtr GetCentralBodies ( );
    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetShadeSkyBasedOnAltitude ( );
    void PutShadeSkyBasedOnAltitude (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowStars ( );
    void PutShowStars (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsSceneGlobeOverlaySettingsPtr GetGlobeOverlaySettings ( );
    HRESULT Render ( );
    IAgStkGraphicsPickResultCollectionPtr Pick (
        int X,
        int Y );
    IAgStkGraphicsPickResultCollectionPtr PickRectangular (
        int Left,
        int Bottom,
        int Right,
        int Top );
    IAgStkGraphicsScreenOverlayPickResultCollectionPtr PickScreenOverlays (
        int X,
        int Y );
    int GetSceneID ( );
    VARIANT_BOOL GetShowWaterSurface ( );
    void PutShowWaterSurface (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsAntiAliasing GetAntiAliasing ( );
    void PutAntiAliasing (
        enum AgEStkGraphicsAntiAliasing pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Camera (
        /*[out,retval]*/ struct IAgStkGraphicsCamera * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgStkGraphicsLighting * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowSunshine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowSunshine (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodies (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphicsIndexer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadeSkyBasedOnAltitude (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadeSkyBasedOnAltitude (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowStars (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowStars (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeOverlaySettings (
        /*[out,retval]*/ struct IAgStkGraphicsSceneGlobeOverlaySettings * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Render ( ) = 0;
      virtual HRESULT __stdcall raw_Pick (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ struct IAgStkGraphicsPickResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_PickRectangular (
        /*[in]*/ int Left,
        /*[in]*/ int Bottom,
        /*[in]*/ int Right,
        /*[in]*/ int Top,
        /*[out,retval]*/ struct IAgStkGraphicsPickResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_PickScreenOverlays (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayPickResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SceneID (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowWaterSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowWaterSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AntiAliasing (
        /*[out,retval]*/ enum AgEStkGraphicsAntiAliasing * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AntiAliasing (
        /*[in]*/ enum AgEStkGraphicsAntiAliasing pRetVal ) = 0;
};

struct __declspec(uuid("aac03f9e-8c23-4a8d-ad88-455deb232f0b"))
IAgStkGraphicsSceneCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScenePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsScenePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsScene * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("51edc3f1-d432-4a8a-a84e-cf049a5aa871"))
_IAgStkGraphicsSceneCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScenePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsScenePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsScene * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("1bf5a224-26b7-4907-aa7d-fd6fc81a51f3"))
IAgStkGraphicsScreenOverlayCollection : IUnknown
{};

struct __declspec(uuid("5e57d9b7-f014-46d7-8b6d-b38d47e7ce41"))
IAgStkGraphicsScreenOverlayContainer : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("a6d2ddc5-5eaf-4b36-9b93-4ebddb0f664f"))
_IAgStkGraphicsScreenOverlayPickResultCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScreenOverlayPickResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsScreenOverlayPickResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayPickResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("bbe097c9-d64c-4474-ba9a-fb47c76388ba"))
IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr Overlay;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGlobeImageOverlayPtr GetOverlay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Overlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("4abc4a1c-c1c4-4a26-8e3b-eccbbf5d0811"))
_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr Overlay;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGlobeImageOverlayPtr GetOverlay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Overlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("76a70982-21b5-427f-9db1-c0b92950b516"))
IAgStkGraphicsTerrainOverlayAddCompleteEventArgs : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOverlay))
    IAgStkGraphicsTerrainOverlayPtr Overlay;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTerrainOverlayPtr GetOverlay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Overlay (
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("11493ddc-2393-433b-aca9-03e290782b29"))
_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOverlay))
    IAgStkGraphicsTerrainOverlayPtr Overlay;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTerrainOverlayPtr GetOverlay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Overlay (
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("e9bfe8ea-9724-4718-a230-bb8457b6709d"))
_IAgStkGraphicsPickResultCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsPickResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsPickResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsPickResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("7c1eea22-fad1-437e-9282-f9202cd103bd"))
IAgStkGraphicsRenderingEventArgs : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    STKUtil::IAgDatePtr Time;
    __declspec(property(get=GetTimeInEpSecs))
    double TimeInEpSecs;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDatePtr GetTime ( );
    double GetTimeInEpSecs ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeInEpSecs (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("17503da2-9590-44e2-844c-0051bb3b643f"))
_IAgStkGraphicsRenderingEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    STKUtil::IAgDatePtr Time;
    __declspec(property(get=GetTimeInEpSecs))
    double TimeInEpSecs;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDatePtr GetTime ( );
    double GetTimeInEpSecs ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeInEpSecs (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("5214ce90-6448-4cc7-bc5c-f06485ec5bb8"))
IAgStkGraphicsDisplayCondition : IUnknown
{};

struct __declspec(uuid("b593dc7b-315a-4c37-9f3c-42dfbd996ac2"))
IAgStkGraphicsPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("15dae589-33b5-4629-a50f-485a49546ddf"))
IAgStkGraphicsBatchPrimitiveIndex : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrimitive))
    IAgStkGraphicsPrimitivePtr Primitive;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    IAgStkGraphicsPrimitivePtr GetPrimitive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Primitive (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("17e49c0b-8a9a-4a9a-9a0f-304e1a43fc57"))
_IAgStkGraphicsBatchPrimitiveIndex : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrimitive))
    IAgStkGraphicsPrimitivePtr Primitive;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    IAgStkGraphicsPrimitivePtr GetPrimitive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Primitive (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("35c41c5e-c707-45bd-ad43-5416a0195213"))
_IAgStkGraphicsKmlDocumentCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsKmlDocumentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsKmlDocumentPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("bc7646ca-da52-4a62-8ef4-838382f21a08"))
IAgStkGraphicsKmlFeature : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsLoaded))
    VARIANT_BOOL IsLoaded;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetContent))
    _bstr_t Content;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSnippet))
    _bstr_t Snippet;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsLoaded ( );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    _bstr_t GetContent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetSnippet ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    HRESULT FlyTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo ( ) = 0;
};

struct __declspec(uuid("e4f1dff5-fbb1-4951-bfc0-abfeec89acc8"))
IAgStkGraphicsKmlFeatureCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsKmlFeaturePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsKmlFeaturePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsKmlFeature * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("f6d82883-7a86-47af-b57c-261e6f7a6f53"))
_IAgStkGraphicsKmlFeatureCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsKmlFeaturePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkGraphicsKmlFeaturePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgStkGraphicsKmlFeature * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("60d78883-928f-45f2-ab60-0becb167af3d"))
IAgStkGraphicsKmlDocumentLoadedEventArgs : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDocument))
    IAgStkGraphicsKmlDocumentPtr Document;
    __declspec(property(get=GetException))
    _bstr_t Exception;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlDocumentPtr GetDocument ( );
    _bstr_t GetException ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Exception (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("6157d6d6-d5b1-43f0-932c-00809d3ad772"))
_IAgStkGraphicsKmlDocumentLoadedEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDocument))
    IAgStkGraphicsKmlDocumentPtr Document;
    __declspec(property(get=GetException))
    _bstr_t Exception;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlDocumentPtr GetDocument ( );
    _bstr_t GetException ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Exception (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

enum AgEStkGraphicsPolylineType
{
    eStkGraphicsPolylineTypeLines = 0,
    eStkGraphicsPolylineTypeLineStrip = 1,
    eStkGraphicsPolylineTypePoints = 2
};

struct __declspec(uuid("a7ba0673-f944-4dc6-a450-5cb62915cb7b"))
IAgStkGraphicsSolidTriangulatorResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOutlineIndices))
    SAFEARRAY * OutlineIndices;
    __declspec(property(get=GetOutlinePositions))
    SAFEARRAY * OutlinePositions;
    __declspec(property(get=GetOutlinePolylineType))
    enum AgEStkGraphicsPolylineType OutlinePolylineType;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetOutlineIndices ( );
    SAFEARRAY * GetOutlinePositions ( );
    enum AgEStkGraphicsPolylineType GetOutlinePolylineType ( );
    VARIANT_BOOL GetClosed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OutlineIndices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlinePositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlinePolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("3d49da39-dbe0-4ef9-b589-bc0cf5e78085"))
IAgStkGraphicsBoxTriangulatorInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidTriangulatorResultPtr Compute (
        SAFEARRAY * * Size );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
};

enum AgEStkGraphicsCylinderFill
{
    eStkGraphicsCylinderFillWall = 1,
    eStkGraphicsCylinderFillBottomCap = 2,
    eStkGraphicsCylinderFillTopCap = 4,
    eStkGraphicsCylinderFillAll = 7
};

struct __declspec(uuid("ee39d933-ce2c-4087-8c8a-f38ebe83842f"))
IAgStkGraphicsCylinderTriangulatorInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidTriangulatorResultPtr CreateSimple (
        double Length,
        double Radius );
    IAgStkGraphicsSolidTriangulatorResultPtr Compute (
        double Length,
        double BottomRadius,
        double TopRadius,
        int Slices,
        enum AgEStkGraphicsCylinderFill CylinderFill );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateSimple (
        /*[in]*/ double Length,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ double Length,
        /*[in]*/ double BottomRadius,
        /*[in]*/ double TopRadius,
        /*[in]*/ int Slices,
        /*[in]*/ enum AgEStkGraphicsCylinderFill CylinderFill,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("8c50173b-e1e0-4321-aeac-5c75e4ef323f"))
IAgStkGraphicsEllipsoidTriangulatorInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidTriangulatorResultPtr ComputeSimple (
        SAFEARRAY * * Radii );
    IAgStkGraphicsSolidTriangulatorResultPtr Compute (
        SAFEARRAY * * Radii,
        int Slices,
        int Stacks );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ComputeSimple (
        /*[in]*/ SAFEARRAY * * Radii,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ SAFEARRAY * * Radii,
        /*[in]*/ int Slices,
        /*[in]*/ int Stacks,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
};

enum AgEStkGraphicsWindingOrder
{
    eStkGraphicsWindingOrderCounterClockwise = 0,
    eStkGraphicsWindingOrderClockwise = 1,
    eStkGraphicsWindingOrderCompute = 2
};

struct __declspec(uuid("5d94d077-0a56-4d83-ac90-369344533684"))
IAgStkGraphicsExtrudedPolylineTriangulatorResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTopBoundaryPositions))
    SAFEARRAY * TopBoundaryPositions;
    __declspec(property(get=GetBottomBoundaryPositions))
    SAFEARRAY * BottomBoundaryPositions;
    __declspec(property(get=GetBoundaryPositionsWindingOrder))
    enum AgEStkGraphicsWindingOrder BoundaryPositionsWindingOrder;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetTopBoundaryPositions ( );
    SAFEARRAY * GetBottomBoundaryPositions ( );
    enum AgEStkGraphicsWindingOrder GetBoundaryPositionsWindingOrder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TopBoundaryPositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BottomBoundaryPositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPositionsWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
};

struct __declspec(uuid("b6b79988-0b1f-4b6e-8970-ff86b6d94b36"))
IAgStkGraphicsExtrudedPolylineTriangulatorInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr Compute (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographicWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeWithAltitudes (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeWithAltitudesAndWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographicWithAltitudes (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographicWithAltitudesAndWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitude (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitudeWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitudeCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitudeCartographicWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithAltitudes (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithAltitudesAndWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithAltitudes (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithAltitudesAndWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitude (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitudeWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitudeCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitudeCartographicWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("27cedd3e-86cd-4d18-862f-eeb0e6de62aa"))
IAgStkGraphicsSurfaceTriangulatorResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGranularity))
    double Granularity;
    __declspec(property(get=GetBoundaryIndices))
    SAFEARRAY * BoundaryIndices;
    __declspec(property(get=GetBoundaryPositions))
    SAFEARRAY * BoundaryPositions;
    __declspec(property(get=GetBoundaryPositionsWindingOrder))
    enum AgEStkGraphicsWindingOrder BoundaryPositionsWindingOrder;
    __declspec(property(get=GetBoundaryPolylineType))
    enum AgEStkGraphicsPolylineType BoundaryPolylineType;

    //
    // Wrapper methods for error-handling
    //

    double GetGranularity ( );
    SAFEARRAY * GetBoundaryIndices ( );
    SAFEARRAY * GetBoundaryPositions ( );
    enum AgEStkGraphicsWindingOrder GetBoundaryPositionsWindingOrder ( );
    enum AgEStkGraphicsPolylineType GetBoundaryPolylineType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryIndices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPositionsWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
};

struct __declspec(uuid("74b85e21-b114-46b6-820d-2be8adc7ea7a"))
IAgStkGraphicsSurfaceExtentTriangulatorInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeSimple (
        _bstr_t CentralBody,
        SAFEARRAY * * Extent );
    IAgStkGraphicsSurfaceTriangulatorResultPtr Compute (
        _bstr_t CentralBody,
        SAFEARRAY * * Extent,
        double Altitude,
        double Granularity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ComputeSimple (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("52654c8a-3c27-415f-b346-c0e433241b49"))
IAgStkGraphicsSurfacePolygonTriangulatorInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceTriangulatorResultPtr Compute (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeWithHole (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * HolePositions );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeWithHoleAltitudeAndGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * HolePositions,
        double Altitude,
        double Granularity );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeWithAltitudeAndGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        double Granularity,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeCartographicWithAltitudeAndGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        double Granularity,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithHole (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * HolePositions,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithHoleAltitudeAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * HolePositions,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithAltitudeAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithAltitudeAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("0efd15db-d9f7-4e1f-925b-ade0b0a22a21"))
IAgStkGraphicsSurfaceShapesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetPositionsWindingOrder))
    enum AgEStkGraphicsWindingOrder PositionsWindingOrder;
    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    enum AgEStkGraphicsWindingOrder GetPositionsWindingOrder ( );
    enum AgEStkGraphicsPolylineType GetPolylineType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionsWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
};

struct __declspec(uuid("8b711790-8bc2-4e20-8795-89a4863a0566"))
IAgStkGraphicsSurfaceShapesInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircleWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircle (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircleCartographicWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircleCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipseWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipse (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipseCartographicWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipseCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSectorWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSector (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSectorCartographicWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSectorCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ComputeCircleWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCircle (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCircleCartographicWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCircleCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipseWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipse (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipseCartographicWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipseCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSectorWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSector (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSectorCartographicWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSectorCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("5c2d7cca-54f6-4b27-93d6-58bddac0befe"))
IAgStkGraphicsAGIProcessedImageGlobeOverlay : IUnknown
{};

struct __declspec(uuid("0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e"))
IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGIProcessedImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("093a5b12-abdd-4029-adc5-2cbab7e4216d"))
IAgStkGraphicsAGIProcessedTerrainOverlay : IUnknown
{};

struct __declspec(uuid("dfeee7d8-cd40-43a5-b168-843f26b027ea"))
IAgStkGraphicsAGIProcessedTerrainOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGIProcessedTerrainOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedTerrainOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("d76d82b7-7a13-452d-b661-1d416fae732e"))
IAgStkGraphicsAGIRoamImageGlobeOverlay : IUnknown
{};

struct __declspec(uuid("709d626f-1b45-448d-ad5c-1ff3cb17410e"))
IAgStkGraphicsAGIRoamImageGlobeOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGIRoamImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGIRoamImageGlobeOverlay * * ppRetVal ) = 0;
};

enum AgEStkGraphicsMapProjection
{
    eStkGraphicsMapProjectionMercator = 0,
    eStkGraphicsMapProjectionEquidistantCylindrical = 1
};

struct __declspec(uuid("f8086ed2-4b18-4d6d-a39f-1ab5801cf886"))
IAgStkGraphicsCustomImageGlobeOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTranslucent))
    VARIANT_BOOL IsTranslucent;
    __declspec(property(get=GetMaximumMetersPerPixel))
    double MaximumMetersPerPixel;
    __declspec(property(get=GetProjection))
    enum AgEStkGraphicsMapProjection Projection;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTranslucent ( );
    double GetMaximumMetersPerPixel ( );
    enum AgEStkGraphicsMapProjection GetProjection ( );
    HRESULT StartUp (
        struct IAgStkGraphicsScene * Scene );
    HRESULT ShutDown (
        struct IAgStkGraphicsScene * Scene );
    HRESULT ClearCache ( );
    HRESULT Reload ( );
    VARIANT_BOOL Read (
        SAFEARRAY * * Extent,
        const _variant_t & UserTileData,
        IPictureDisp * Image );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTranslucent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumMetersPerPixel (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ enum AgEStkGraphicsMapProjection * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartUp (
        /*[in]*/ struct IAgStkGraphicsScene * Scene ) = 0;
      virtual HRESULT __stdcall raw_ShutDown (
        /*[in]*/ struct IAgStkGraphicsScene * Scene ) = 0;
      virtual HRESULT __stdcall raw_ClearCache ( ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_Read (
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ VARIANT UserTileData,
        /*[in]*/ IPictureDisp * Image,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("197fbafd-0f9c-44d9-b2d0-14c8b30f312e"))
IAgStkGraphicsCustomImageGlobeOverlayPluginProxy : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCustomImageGlobeOverlay))
    IAgStkGraphicsCustomImageGlobeOverlayPtr CustomImageGlobeOverlay;
    __declspec(property(get=GetIsCustomImageGlobeOverlaySupported))
    VARIANT_BOOL IsCustomImageGlobeOverlaySupported;
    __declspec(property(get=GetRealPluginObject))
    IUnknownPtr RealPluginObject;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCustomImageGlobeOverlayPtr GetCustomImageGlobeOverlay ( );
    VARIANT_BOOL GetIsCustomImageGlobeOverlaySupported ( );
    IUnknownPtr GetRealPluginObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CustomImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCustomImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RealPluginObject (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("efb59b20-9f79-4043-a3bd-6cd1a3395738"))
IAgStkGraphicsCustomImageGlobeOverlayPluginActivator : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCustomImageGlobeOverlayPluginProxyPtr CreateFromDisplayName (
        _bstr_t DisplayName );
    SAFEARRAY * GetAvailableDisplayNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFromDisplayName (
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlayPluginProxy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c80d1ae6-db35-4f55-a9a4-131260022535"))
IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivator * * ppRetVal ) = 0;
};

struct __declspec(uuid("fd42a5ba-5049-4c58-bf40-61ca5943dccf"))
IAgStkGraphicsGeospatialImageGlobeOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTransparentColor,put=PutUseTransparentColor))
    VARIANT_BOOL UseTransparentColor;
    __declspec(property(get=GetTransparentColor,put=PutTransparentColor))
    OLE_COLOR TransparentColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseTransparentColor ( );
    void PutUseTransparentColor (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetTransparentColor ( );
    void PutTransparentColor (
        OLE_COLOR pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseTransparentColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparentColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
};

struct __declspec(uuid("77060b41-7b24-4118-ab48-22efb3007c76"))
IAgStkGraphicsGeospatialImageGlobeOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGeospatialImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsGeospatialImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("152e3a02-23b0-4dc8-a7e5-9ee19619bcab"))
IAgStkGraphicsProjection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetFieldOfViewHorizontal,put=PutFieldOfViewHorizontal))
    double FieldOfViewHorizontal;
    __declspec(property(get=GetFieldOfViewVertical,put=PutFieldOfViewVertical))
    double FieldOfViewVertical;
    __declspec(property(get=GetNearPlane,put=PutNearPlane))
    double NearPlane;
    __declspec(property(get=GetFarPlane,put=PutFarPlane))
    double FarPlane;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    void PutOrientation (
        struct STKUtil::IAgOrientation * ppRetVal );
    double GetFieldOfViewHorizontal ( );
    void PutFieldOfViewHorizontal (
        double pRetVal );
    double GetFieldOfViewVertical ( );
    void PutFieldOfViewVertical (
        double pRetVal );
    double GetNearPlane ( );
    void PutNearPlane (
        double pRetVal );
    double GetFarPlane ( );
    void PutFarPlane (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfViewHorizontal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfViewHorizontal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfViewVertical (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfViewVertical (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NearPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlane (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143"))
IAgStkGraphicsProjectedRasterOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRaster,put=PutRaster))
    IAgStkGraphicsRasterPtr Raster;
    __declspec(property(get=GetTransparentColor,put=PutTransparentColor))
    OLE_COLOR TransparentColor;
    __declspec(property(get=GetProjection,put=PutProjection))
    IAgStkGraphicsProjectionPtr Projection;
    __declspec(property(get=GetDirections))
    SAFEARRAY * Directions;
    __declspec(property(get=GetShowShadows,put=PutShowShadows))
    VARIANT_BOOL ShowShadows;
    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;
    __declspec(property(get=GetShowFrustum,put=PutShowFrustum))
    VARIANT_BOOL ShowFrustum;
    __declspec(property(get=GetShowFarPlane,put=PutShowFarPlane))
    VARIANT_BOOL ShowFarPlane;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFrustumColor,put=PutFrustumColor))
    OLE_COLOR FrustumColor;
    __declspec(property(get=GetFarPlaneColor,put=PutFarPlaneColor))
    OLE_COLOR FarPlaneColor;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    float BorderWidth;
    __declspec(property(get=GetFrustumTranslucency,put=PutFrustumTranslucency))
    float FrustumTranslucency;
    __declspec(property(get=GetFarPlaneTranslucency,put=PutFarPlaneTranslucency))
    float FarPlaneTranslucency;
    __declspec(property(get=GetShadowTranslucency,put=PutShadowTranslucency))
    float ShadowTranslucency;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetUseTransparentColor,put=PutUseTransparentColor))
    VARIANT_BOOL UseTransparentColor;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterPtr GetRaster ( );
    void PutRaster (
        struct IAgStkGraphicsRaster * ppRetVal );
    IAgStkGraphicsProjectionPtr GetProjection ( );
    void PutProjection (
        struct IAgStkGraphicsProjection * ppRetVal );
    VARIANT_BOOL GetShowShadows ( );
    void PutShowShadows (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowFrustum ( );
    void PutShowFrustum (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowFarPlane ( );
    void PutShowFarPlane (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetFrustumColor ( );
    void PutFrustumColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetFarPlaneColor ( );
    void PutFarPlaneColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    float GetBorderWidth ( );
    void PutBorderWidth (
        float pRetVal );
    float GetFrustumTranslucency ( );
    void PutFrustumTranslucency (
        float pRetVal );
    float GetFarPlaneTranslucency ( );
    void PutFarPlaneTranslucency (
        float pRetVal );
    float GetShadowTranslucency ( );
    void PutShadowTranslucency (
        float pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseTransparentColor ( );
    void PutUseTransparentColor (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetTransparentColor ( );
    void PutTransparentColor (
        OLE_COLOR pRetVal );
    SAFEARRAY * GetDirections ( );
    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Raster (
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Raster (
        /*[in]*/ struct IAgStkGraphicsRaster * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Projection (
        /*[in]*/ struct IAgStkGraphicsProjection * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowShadows (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowShadows (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowFrustum (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowFrustum (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowFarPlane (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowFarPlane (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrustumColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrustumColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlaneColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlaneColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrustumTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrustumTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlaneTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlaneTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadowTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadowTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseTransparentColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparentColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Directions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("616abf78-55f7-41a7-a6b7-2da4ae822856"))
IAgStkGraphicsProjectedRasterOverlayFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectedRasterOverlayPtr Initialize (
        struct IAgStkGraphicsRaster * Raster,
        struct IAgStkGraphicsProjection * Projection );
    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[in]*/ struct IAgStkGraphicsProjection * Projection,
        /*[out,retval]*/ struct IAgStkGraphicsProjectedRasterOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("db047d3d-5afd-4b64-b396-034fd95ec57a"))
IAgStkGraphicsProjectionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectionPtr Initialize ( );
    IAgStkGraphicsProjectionPtr InitializeWithData (
        SAFEARRAY * * Position,
        struct STKUtil::IAgOrientation * Orientation,
        double FieldOfViewHorizontal,
        double FieldOfViewVertical,
        double NearPlane,
        double FarPlane );
    IAgStkGraphicsProjectionPtr InitializeFromProjection (
        struct IAgStkGraphicsProjection * Projection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithData (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ struct STKUtil::IAgOrientation * Orientation,
        /*[in]*/ double FieldOfViewHorizontal,
        /*[in]*/ double FieldOfViewVertical,
        /*[in]*/ double NearPlane,
        /*[in]*/ double FarPlane,
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeFromProjection (
        /*[in]*/ struct IAgStkGraphicsProjection * Projection,
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
};

struct __declspec(uuid("a6225aa6-608d-4ad8-b5f6-2afdd29b96f9"))
IAgStkGraphicsAltitudeDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumAltitude,put=PutMinimumAltitude))
    double MinimumAltitude;
    __declspec(property(get=GetMaximumAltitude,put=PutMaximumAltitude))
    double MaximumAltitude;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumAltitude ( );
    void PutMinimumAltitude (
        double pRetVal );
    double GetMaximumAltitude ( );
    void PutMaximumAltitude (
        double pRetVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("ee1efbf0-ddbf-41ff-9257-ff73e164d27a"))
IAgStkGraphicsAltitudeDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAltitudeDisplayConditionPtr Initialize ( );
    IAgStkGraphicsAltitudeDisplayConditionPtr InitializeWithAltitudes (
        double MinimumAltitude,
        double MaximumAltitude );
    IAgStkGraphicsAltitudeDisplayConditionPtr InitializeWithCentralBodyAndAltitudes (
        _bstr_t CentralBody,
        double MinimumAltitude,
        double MaximumAltitude );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAltitudes (
        /*[in]*/ double MinimumAltitude,
        /*[in]*/ double MaximumAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBodyAndAltitudes (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double MinimumAltitude,
        /*[in]*/ double MaximumAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayCondition * * ppRetVal ) = 0;
};

enum AgEStkGraphicsBinaryLogicOperation
{
    eStkGraphicsBinaryLogicOperationAnd = 0,
    eStkGraphicsBinaryLogicOperationOr = 1
};

struct __declspec(uuid("afe0e66f-0fc5-46ad-801f-22670cfe99a9"))
IAgStkGraphicsCompositeDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsDisplayConditionPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetCapacity))
    int Capacity;
    __declspec(property(get=GetLogicOperation,put=PutLogicOperation))
    enum AgEStkGraphicsBinaryLogicOperation LogicOperation;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    int GetCapacity ( );
    enum AgEStkGraphicsBinaryLogicOperation GetLogicOperation ( );
    void PutLogicOperation (
        enum AgEStkGraphicsBinaryLogicOperation pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Reserve (
        int Count );
    HRESULT AddWithNegate (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        VARIANT_BOOL Negate );
    HRESULT Add (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT InsertWithNegate (
        int Index,
        struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        VARIANT_BOOL Negate );
    HRESULT Insert (
        int Index,
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT Remove (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT RemoveAt (
        int Index );
    HRESULT Clear ( );
    VARIANT_BOOL GetNegate (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT SetNegate (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        VARIANT_BOOL Negate );
    VARIANT_BOOL GetNegateAt (
        int Index );
    HRESULT SetNegateAt (
        int Index,
        VARIANT_BOOL Negate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Capacity (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LogicOperation (
        /*[out,retval]*/ enum AgEStkGraphicsBinaryLogicOperation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LogicOperation (
        /*[in]*/ enum AgEStkGraphicsBinaryLogicOperation pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reserve (
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_AddWithNegate (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition ) = 0;
      virtual HRESULT __stdcall raw_InsertWithNegate (
        /*[in]*/ int Index,
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetNegate (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNegate (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
      virtual HRESULT __stdcall raw_GetNegateAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNegateAt (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
};

struct __declspec(uuid("a2ca541e-a860-4e47-b0e9-f0e973733e67"))
IAgStkGraphicsCompositeDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCompositeDisplayConditionPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsCompositeDisplayCondition * * ppRetVal ) = 0;
};

enum AgEStkGraphicsPrimitivesSortOrder
{
    eStkGraphicsPrimitivesSortOrderByState = 0,
    eStkGraphicsPrimitivesSortOrderBackToFront = 1,
    eStkGraphicsPrimitivesSortOrderPrimitivesSortOrderByState = 0,
    eStkGraphicsPrimitivesSortOrderPrimitivesSortOrderBackToFront = 1
};

struct __declspec(uuid("c24448a9-4fe7-4905-86e0-70a71346fcf2"))
IAgStkGraphicsCompositePrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetTranslucentPrimitivesSortOrder,put=PutTranslucentPrimitivesSortOrder))
    enum AgEStkGraphicsPrimitivesSortOrder TranslucentPrimitivesSortOrder;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    enum AgEStkGraphicsPrimitivesSortOrder GetTranslucentPrimitivesSortOrder ( );
    void PutTranslucentPrimitivesSortOrder (
        enum AgEStkGraphicsPrimitivesSortOrder pRetVal );
    HRESULT Add (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Remove (
        struct IAgStkGraphicsPrimitive * Primitive );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Clear ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentPrimitivesSortOrder (
        /*[out,retval]*/ enum AgEStkGraphicsPrimitivesSortOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentPrimitivesSortOrder (
        /*[in]*/ enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("6828c6a1-7018-4b65-90af-8bb36f478a6d"))
IAgStkGraphicsCompositePrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCompositePrimitivePtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsCompositePrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("efede07b-4d59-4622-ba51-0281a5108aab"))
IAgStkGraphicsConstantDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("4c5226f9-a98e-4af0-a9a4-1e5926908d4c"))
IAgStkGraphicsConstantDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsConstantDisplayConditionPtr Initialize ( );
    IAgStkGraphicsConstantDisplayConditionPtr InitializeDisplay (
        VARIANT_BOOL Display );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsConstantDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeDisplay (
        /*[in]*/ VARIANT_BOOL Display,
        /*[out,retval]*/ struct IAgStkGraphicsConstantDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("b1b3130c-bebb-4a64-a5b7-2357384e2b8c"))
IAgStkGraphicsDistanceDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistanceSquared ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("d7dda546-31d2-4bbd-a44d-b9dc413a2412"))
IAgStkGraphicsDistanceDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceDisplayConditionPtr InitializeWithDistances (
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
};

enum AgEStkGraphicsGlobeOverlayRole
{
    eStkGraphicsGlobeOverlayRoleBase = 0,
    eStkGraphicsGlobeOverlayRoleNight = 1,
    eStkGraphicsGlobeOverlayRoleSpecular = 2,
    eStkGraphicsGlobeOverlayRoleNormal = 4,
    eStkGraphicsGlobeOverlayRoleNone = 5
};

struct __declspec(uuid("983949c2-68a3-46ee-9670-f174091286ad"))
IAgStkGraphicsGlobeOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
};

struct __declspec(uuid("212b00ec-ff3a-4f1b-9fc3-5a900c6536dc"))
IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGlobeOverlay,put=PutGlobeOverlay))
    IAgStkGraphicsGlobeOverlayPtr GlobeOverlay;
    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGlobeOverlayPtr GetGlobeOverlay ( );
    void PutGlobeOverlay (
        struct IAgStkGraphicsGlobeOverlay * ppRetVal );
    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMaximumDistanceSquared ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_GlobeOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("05bc2dbc-8533-467a-85d2-720c583f1c7e"))
IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr InitializeWithDistances (
        struct IAgStkGraphicsGlobeOverlay * GlobeOverlay,
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ struct IAgStkGraphicsGlobeOverlay * GlobeOverlay,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("0110db74-d567-4804-9bec-d7cce8ed59d0"))
IAgStkGraphicsDistanceToPositionDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMaximumDistanceSquared ( );
    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
};

struct __declspec(uuid("913dd9f7-a91b-4346-b233-180126a8d1bd"))
IAgStkGraphicsDistanceToPositionDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceToPositionDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceToPositionDisplayConditionPtr InitializeWithDistances (
        SAFEARRAY * * Position,
        double MinimumDistance,
        double MaximumDistance );
    IAgStkGraphicsDistanceToPositionDisplayConditionPtr InitializeWithReferenceFrameAndDistances (
        struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        SAFEARRAY * * Position,
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithReferenceFrameAndDistances (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("bf9664c2-e8c4-471b-a071-865f1448a031"))
IAgStkGraphicsDistanceToPrimitiveDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimitive,put=PutPrimitive))
    IAgStkGraphicsPrimitivePtr Primitive;
    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPrimitivePtr GetPrimitive ( );
    void PutPrimitive (
        struct IAgStkGraphicsPrimitive * ppRetVal );
    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMaximumDistanceSquared ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Primitive (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Primitive (
        /*[in]*/ struct IAgStkGraphicsPrimitive * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("f103b596-f16c-4ad6-8242-bef8ecb83383"))
IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr InitializeWithDistances (
        struct IAgStkGraphicsPrimitive * Primitive,
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * * ppRetVal ) = 0;
};

enum AgEStkGraphicsPathPrimitiveRemoveLocation
{
    eStkGraphicsRemoveLocationFront = 0,
    eStkGraphicsRemoveLocationBack = 1
};

struct __declspec(uuid("23d3c9c4-b242-4a5a-89cf-58387bd9f935"))
IAgStkGraphicsDurationPathPrimitiveUpdatePolicy : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDuration,put=PutDuration))
    double Duration;
    __declspec(property(get=GetRemoveLocation,put=PutRemoveLocation))
    enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation;

    //
    // Wrapper methods for error-handling
    //

    double GetDuration ( );
    void PutDuration (
        double pRetVal );
    enum AgEStkGraphicsPathPrimitiveRemoveLocation GetRemoveLocation ( );
    void PutRemoveLocation (
        enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveLocation (
        /*[out,retval]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveLocation (
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) = 0;
};

struct __declspec(uuid("4ea0bb3e-5620-4a74-b721-6b0000eafdc2"))
IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr Initialize ( );
    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr InitializeWithParameters (
        double Duration,
        enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithParameters (
        /*[in]*/ double Duration,
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation,
        /*[out,retval]*/ struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
};

struct __declspec(uuid("cf06dc51-75ad-45a2-a1ff-9e3b550be24f"))
IAgStkGraphicsGlobeImageOverlayInitializer : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgEStkGraphicsFontStyle
{
    eStkGraphicsFontStyleRegular = 0,
    eStkGraphicsFontStyleBold = 1,
    eStkGraphicsFontStyleItalic = 2,
    eStkGraphicsFontStyleUnderline = 4,
    eStkGraphicsFontStyleStrikeout = 8
};

struct __declspec(uuid("36a67d60-3f13-435b-92d8-b6a76ed1a74a"))
IAgStkGraphicsGraphicsFont : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSize))
    int Size;
    __declspec(property(get=GetBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetStrikeout))
    VARIANT_BOOL Strikeout;
    __declspec(property(get=GetOutline))
    VARIANT_BOOL Outline;
    __declspec(property(get=GetStyle))
    enum AgEStkGraphicsFontStyle Style;
    __declspec(property(get=GetAntialias))
    VARIANT_BOOL Antialias;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    int GetSize ( );
    VARIANT_BOOL GetBold ( );
    VARIANT_BOOL GetItalic ( );
    VARIANT_BOOL GetUnderline ( );
    VARIANT_BOOL GetStrikeout ( );
    VARIANT_BOOL GetOutline ( );
    enum AgEStkGraphicsFontStyle GetStyle ( );
    VARIANT_BOOL GetAntialias ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Strikeout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum AgEStkGraphicsFontStyle * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Antialias (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("1a87aeee-c00b-462b-bf99-90cb94ae1eb7"))
IAgStkGraphicsGraphicsFontFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGraphicsFontPtr InitializeWithNameSizeFontStyleOutline (
        _bstr_t Name,
        int Size,
        enum AgEStkGraphicsFontStyle FontStyle,
        VARIANT_BOOL Outline );
    IAgStkGraphicsGraphicsFontPtr InitializeWithNameSize (
        _bstr_t Name,
        int Size );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithNameSizeFontStyleOutline (
        /*[in]*/ BSTR Name,
        /*[in]*/ int Size,
        /*[in]*/ enum AgEStkGraphicsFontStyle FontStyle,
        /*[in]*/ VARIANT_BOOL Outline,
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithNameSize (
        /*[in]*/ BSTR Name,
        /*[in]*/ int Size,
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
};

struct __declspec(uuid("8de070c1-de8f-48ee-96ea-5dc046706d28"))
IAgStkGraphicsGreatArcInterpolator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    double GetGranularity ( );
    void PutGranularity (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("35afb348-117f-4db0-87ec-643b4b0364dd"))
IAgStkGraphicsGreatArcInterpolatorFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGreatArcInterpolatorPtr Initialize ( );
    IAgStkGraphicsGreatArcInterpolatorPtr InitializeWithCentralBody (
        _bstr_t CentralBody );
    IAgStkGraphicsGreatArcInterpolatorPtr InitializeWithCentralBodyAndGranularity (
        _bstr_t CentralBody,
        double Granularity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBodyAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolator * * ppRetVal ) = 0;
};

struct __declspec(uuid("9ee1933e-8f0d-4fca-8386-e03194e483da"))
IAgStkGraphicsAlphaFromLuminanceFilter : IUnknown
{};

struct __declspec(uuid("2317f609-231f-4266-b38c-f4fa812a0306"))
IAgStkGraphicsAlphaFromLuminanceFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAlphaFromLuminanceFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromLuminanceFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("071460a3-f86a-4c28-b2bf-22946db06ac8"))
IAgStkGraphicsAlphaFromPixelFilter : IUnknown
{};

struct __declspec(uuid("f9802000-aea6-453d-b797-d68fae4a491b"))
IAgStkGraphicsAlphaFromPixelFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAlphaFromPixelFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromPixelFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("77326f5e-c3f3-4660-8df4-6225cfdc0870"))
IAgStkGraphicsAlphaFromRasterFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRaster,put=PutRaster))
    IAgStkGraphicsRasterPtr Raster;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterPtr GetRaster ( );
    void PutRaster (
        struct IAgStkGraphicsRaster * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Raster (
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Raster (
        /*[in]*/ struct IAgStkGraphicsRaster * ppRetVal ) = 0;
};

struct __declspec(uuid("f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c"))
IAgStkGraphicsAlphaFromRasterFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAlphaFromRasterFilterPtr Initialize ( );
    IAgStkGraphicsAlphaFromRasterFilterPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromRasterFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromRasterFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("68723ebb-619a-4d11-bb5a-27200ef0e15c"))
IAgStkGraphicsBandExtractFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetExtractFormat,put=PutExtractFormat))
    enum AgEStkGraphicsRasterFormat ExtractFormat;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsRasterFormat GetExtractFormat ( );
    void PutExtractFormat (
        enum AgEStkGraphicsRasterFormat pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtractFormat (
        /*[out,retval]*/ enum AgEStkGraphicsRasterFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtractFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat pRetVal ) = 0;
};

struct __declspec(uuid("76a65e3a-1868-4312-8a66-8e16a525effd"))
IAgStkGraphicsBandExtractFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBandExtractFilterPtr Initialize ( );
    IAgStkGraphicsBandExtractFilterPtr InitializeWithBand (
        enum AgEStkGraphicsRasterBand RasterBand );
    IAgStkGraphicsBandExtractFilterPtr InitializeWithFormat (
        enum AgEStkGraphicsRasterFormat RasterFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand RasterBand,
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("a4a76805-e8e4-4bb6-878c-dcb0da6d84d3"))
IAgStkGraphicsBandOrderFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBandOrder,put=PutBandOrder))
    enum AgEStkGraphicsRasterFormat BandOrder;
    __declspec(property(get=GetMaintainRasterFormat,put=PutMaintainRasterFormat))
    VARIANT_BOOL MaintainRasterFormat;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsRasterFormat GetBandOrder ( );
    void PutBandOrder (
        enum AgEStkGraphicsRasterFormat pRetVal );
    VARIANT_BOOL GetMaintainRasterFormat ( );
    void PutMaintainRasterFormat (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BandOrder (
        /*[out,retval]*/ enum AgEStkGraphicsRasterFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BandOrder (
        /*[in]*/ enum AgEStkGraphicsRasterFormat pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaintainRasterFormat (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaintainRasterFormat (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("1bfcf1dd-1ada-47b7-829b-ea60fc04b61d"))
IAgStkGraphicsBandOrderFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBandOrderFilterPtr Initialize ( );
    IAgStkGraphicsBandOrderFilterPtr InitializeWithOrder (
        enum AgEStkGraphicsRasterFormat BandOrder );
    IAgStkGraphicsBandOrderFilterPtr InitializeWithOrderAndBool (
        enum AgEStkGraphicsRasterFormat BandOrder,
        VARIANT_BOOL MaintainImageFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithOrder (
        /*[in]*/ enum AgEStkGraphicsRasterFormat BandOrder,
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithOrderAndBool (
        /*[in]*/ enum AgEStkGraphicsRasterFormat BandOrder,
        /*[in]*/ VARIANT_BOOL MaintainImageFormat,
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilter * * ppRetVal ) = 0;
};

enum AgEStkGraphicsBlurMethod
{
    eStkGraphicsBlurMethodMean = 0,
    eStkGraphicsBlurMethodBasic = 1
};

struct __declspec(uuid("78e623b1-dc80-478d-acb8-a552fa136ccc"))
IAgStkGraphicsBlurFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsBlurMethod Method;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsBlurMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsBlurMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsBlurMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsBlurMethod pRetVal ) = 0;
};

struct __declspec(uuid("99188b11-f0f6-4452-b2e9-c53472860aa1"))
IAgStkGraphicsBlurFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBlurFilterPtr Initialize ( );
    IAgStkGraphicsBlurFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsBlurMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBlurFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsBlurMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsBlurFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("fd8324ea-dbc2-42a5-88ba-c2769fd4a28e"))
IAgStkGraphicsBrightnessFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustment,put=PutAdjustment))
    double Adjustment;

    //
    // Wrapper methods for error-handling
    //

    double GetAdjustment ( );
    void PutAdjustment (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Adjustment (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Adjustment (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("85e2696a-638c-4151-8ba4-e1fdef462598"))
IAgStkGraphicsBrightnessFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBrightnessFilterPtr Initialize ( );
    IAgStkGraphicsBrightnessFilterPtr InitializeWithAdjustment (
        double Adjustment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBrightnessFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAdjustment (
        /*[in]*/ double Adjustment,
        /*[out,retval]*/ struct IAgStkGraphicsBrightnessFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("bc1d198f-705b-452b-8e51-1c600c547594"))
IAgStkGraphicsColorToLuminanceFilter : IUnknown
{};

struct __declspec(uuid("361263b5-d7ef-468a-9804-c1c9342ffeb8"))
IAgStkGraphicsColorToLuminanceFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsColorToLuminanceFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsColorToLuminanceFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("47ea43c3-5ffd-4935-8569-bb19ee6b0799"))
IAgStkGraphicsContrastFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustment,put=PutAdjustment))
    double Adjustment;

    //
    // Wrapper methods for error-handling
    //

    double GetAdjustment ( );
    void PutAdjustment (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Adjustment (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Adjustment (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d78a7285-c3ff-47b5-b5af-ea67faffae92"))
IAgStkGraphicsContrastFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsContrastFilterPtr Initialize ( );
    IAgStkGraphicsContrastFilterPtr InitializeWithAdjustment (
        double Adjustment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsContrastFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAdjustment (
        /*[in]*/ double Adjustment,
        /*[out,retval]*/ struct IAgStkGraphicsContrastFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("65e3646d-dfac-40af-b37f-15596ef13292"))
IAgStkGraphicsConvolutionFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
};

struct __declspec(uuid("f262f8e7-74a5-440e-9754-d3c8a4196abf"))
IAgStkGraphicsConvolutionFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsConvolutionFilterPtr Initialize ( );
    IAgStkGraphicsConvolutionFilterPtr InitializeWithKernel (
        SAFEARRAY * * Kernel );
    IAgStkGraphicsConvolutionFilterPtr InitializeWithKernelAndDivisor (
        SAFEARRAY * * Kernel,
        double Divisor );
    IAgStkGraphicsConvolutionFilterPtr InitializeWithKernelDivisorAndOffset (
        SAFEARRAY * * Kernel,
        double Divisor,
        double Offset );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithKernel (
        /*[in]*/ SAFEARRAY * * Kernel,
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithKernelAndDivisor (
        /*[in]*/ SAFEARRAY * * Kernel,
        /*[in]*/ double Divisor,
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithKernelDivisorAndOffset (
        /*[in]*/ SAFEARRAY * * Kernel,
        /*[in]*/ double Divisor,
        /*[in]*/ double Offset,
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
};

enum AgEStkGraphicsEdgeDetectMethod
{
    eStkGraphicsEdgeDetectMethodVertical = 0,
    eStkGraphicsEdgeDetectMethodHorizontal = 1,
    eStkGraphicsEdgeDetectMethodLeftDiagonal = 2,
    eStkGraphicsEdgeDetectMethodRightDiagonal = 3,
    eStkGraphicsEdgeDetectMethodLaplacian = 4,
    eStkGraphicsEdgeDetectMethodPrewittLaplacian = 5,
    eStkGraphicsEdgeDetectMethodSobelVertical = 6,
    eStkGraphicsEdgeDetectMethodSobelHorizontal = 7
};

struct __declspec(uuid("0919d5b6-9497-4027-9fa2-69afe60c5f02"))
IAgStkGraphicsEdgeDetectFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsEdgeDetectMethod Method;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsEdgeDetectMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsEdgeDetectMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsEdgeDetectMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsEdgeDetectMethod pRetVal ) = 0;
};

struct __declspec(uuid("d471ae80-2bf6-40d7-9c5b-48c08d0e3819"))
IAgStkGraphicsEdgeDetectFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsEdgeDetectFilterPtr Initialize ( );
    IAgStkGraphicsEdgeDetectFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsEdgeDetectMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsEdgeDetectFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsEdgeDetectMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsEdgeDetectFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("63f024ca-7113-4841-8d26-7a286458bd7c"))
IAgStkGraphicsRasterStream : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdateDelta,put=PutUpdateDelta))
    double UpdateDelta;

    //
    // Wrapper methods for error-handling
    //

    double GetUpdateDelta ( );
    void PutUpdateDelta (
        double pRetVal );
    VARIANT_BOOL Update (
        struct STKUtil::IAgDate * Time,
        struct STKUtil::IAgDate * NextTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UpdateDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct STKUtil::IAgDate * Time,
        /*[in]*/ struct STKUtil::IAgDate * NextTime,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("75917a6b-c2f9-4350-879a-248bcc239e6b"))
IAgStkGraphicsFilteringRasterStream : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilter))
    IAgStkGraphicsRasterFilterPtr Filter;
    __declspec(property(get=GetStream))
    IAgStkGraphicsRasterStreamPtr Stream;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterFilterPtr GetFilter ( );
    IAgStkGraphicsRasterStreamPtr GetStream ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ struct IAgStkGraphicsRasterFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Stream (
        /*[out,retval]*/ struct IAgStkGraphicsRasterStream * * ppRetVal ) = 0;
};

struct __declspec(uuid("3c0a84bb-9330-422b-808e-6f9cf0aa3055"))
IAgStkGraphicsFilteringRasterStreamFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsFilteringRasterStreamPtr Initialize (
        struct IAgStkGraphicsRasterStream * RasterStream,
        struct IAgStkGraphicsRasterFilter * Filter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ struct IAgStkGraphicsRasterStream * RasterStream,
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsFilteringRasterStream * * ppRetVal ) = 0;
};

struct __declspec(uuid("478edb08-272a-42b6-b486-a81a5bcaf92b"))
IAgStkGraphicsFlipFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFlipAxis,put=PutFlipAxis))
    enum AgEStkGraphicsFlipAxis FlipAxis;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsFlipAxis GetFlipAxis ( );
    void PutFlipAxis (
        enum AgEStkGraphicsFlipAxis pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FlipAxis (
        /*[out,retval]*/ enum AgEStkGraphicsFlipAxis * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipAxis (
        /*[in]*/ enum AgEStkGraphicsFlipAxis pRetVal ) = 0;
};

struct __declspec(uuid("0f7bc6a1-42ac-41f0-8f42-d915fba6b859"))
IAgStkGraphicsFlipFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsFlipFilterPtr Initialize ( );
    IAgStkGraphicsFlipFilterPtr InitializeWithFlipAxis (
        enum AgEStkGraphicsFlipAxis FlipAxis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsFlipFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFlipAxis (
        /*[in]*/ enum AgEStkGraphicsFlipAxis FlipAxis,
        /*[out,retval]*/ struct IAgStkGraphicsFlipFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("c4b3703d-c059-47c7-8b49-11bbedd7975a"))
IAgStkGraphicsGammaCorrectionFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGamma,put=PutGamma))
    double Gamma;

    //
    // Wrapper methods for error-handling
    //

    double GetGamma ( );
    void PutGamma (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Gamma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Gamma (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6"))
IAgStkGraphicsGammaCorrectionFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGammaCorrectionFilterPtr Initialize ( );
    IAgStkGraphicsGammaCorrectionFilterPtr InitializeWithGamma (
        double Gamma );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGammaCorrectionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithGamma (
        /*[in]*/ double Gamma,
        /*[out,retval]*/ struct IAgStkGraphicsGammaCorrectionFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("b5b0a55e-980a-453f-b7b4-7c7024f92ef4"))
IAgStkGraphicsGaussianBlurFilter : IUnknown
{};

struct __declspec(uuid("c4f3b576-0d25-4b06-9a79-773821d5c97b"))
IAgStkGraphicsGaussianBlurFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGaussianBlurFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGaussianBlurFilter * * ppRetVal ) = 0;
};

enum AgEStkGraphicsGradientDetectMethod
{
    eStkGraphicsGradientDetectMethodEast = 0,
    eStkGraphicsGradientDetectMethodNorth = 1,
    eStkGraphicsGradientDetectMethodWest = 2,
    eStkGraphicsGradientDetectMethodSouth = 3,
    eStkGraphicsGradientDetectMethodNorthEast = 4,
    eStkGraphicsGradientDetectMethodNorthWest = 5,
    eStkGraphicsGradientDetectMethodSouthEast = 6,
    eStkGraphicsGradientDetectMethodSouthWest = 7
};

struct __declspec(uuid("5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112"))
IAgStkGraphicsGradientDetectFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsGradientDetectMethod Method;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsGradientDetectMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsGradientDetectMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsGradientDetectMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsGradientDetectMethod pRetVal ) = 0;
};

struct __declspec(uuid("ab421e7c-80f3-4503-a29c-5becb2178d44"))
IAgStkGraphicsGradientDetectFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGradientDetectFilterPtr Initialize ( );
    IAgStkGraphicsGradientDetectFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsGradientDetectMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGradientDetectFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsGradientDetectMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsGradientDetectFilter * * ppRetVal ) = 0;
};

enum AgEStkGraphicsJpeg2000CompressionProfile
{
    eStkGraphicsJpeg2000CompressionProfileDefault = 0,
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE = 1,
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE = 2
};

struct __declspec(uuid("e2227905-c4e6-46ab-a89f-6d53e201e1a3"))
IAgStkGraphicsJpeg2000WriterInitializer : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WriteString (
        _bstr_t ImageUri,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile );
    HRESULT WriteExtentString (
        _bstr_t ImageUri,
        SAFEARRAY * * Extent,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile );
    HRESULT WriteExtentAndSubExtentString (
        _bstr_t ImageUri,
        SAFEARRAY * * Extent,
        SAFEARRAY * * SubExtent,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile );
    HRESULT WriteExtentAndSubExtentTransparentColorString (
        _bstr_t ImageUri,
        SAFEARRAY * * Extent,
        SAFEARRAY * * SubExtent,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile,
        OLE_COLOR TransparentColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WriteString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile ) = 0;
      virtual HRESULT __stdcall raw_WriteExtentString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile ) = 0;
      virtual HRESULT __stdcall raw_WriteExtentAndSubExtentString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ SAFEARRAY * * SubExtent,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile ) = 0;
      virtual HRESULT __stdcall raw_WriteExtentAndSubExtentTransparentColorString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ SAFEARRAY * * SubExtent,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile,
        /*[in]*/ OLE_COLOR TransparentColor ) = 0;
};

struct __declspec(uuid("e0d6dad5-cfcb-476a-95fd-2cd486114a68"))
IAgStkGraphicsLevelsFilter : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetLevelAdjustment (
        enum AgEStkGraphicsRasterBand Band,
        int Adjustment );
    HRESULT ClearAdjustments ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetLevelAdjustment (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[in]*/ int Adjustment ) = 0;
      virtual HRESULT __stdcall raw_ClearAdjustments ( ) = 0;
};

struct __declspec(uuid("30236afe-b593-4e6c-9e61-099216f14db1"))
IAgStkGraphicsLevelsFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsLevelsFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsLevelsFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("7af66bcf-c123-47b2-ac63-168bbdedec66"))
IAgStkGraphicsProjectionStream : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdateDelta,put=PutUpdateDelta))
    double UpdateDelta;

    //
    // Wrapper methods for error-handling
    //

    double GetUpdateDelta ( );
    void PutUpdateDelta (
        double pRetVal );
    VARIANT_BOOL Update (
        struct STKUtil::IAgDate * Time,
        struct STKUtil::IAgDate * NextTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UpdateDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct STKUtil::IAgDate * Time,
        /*[in]*/ struct STKUtil::IAgDate * NextTime,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("5a28d922-9211-4860-81ae-0d98d38ca6d7"))
IAgStkGraphicsProjectionRasterStreamPluginProxy : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRasterStream))
    IAgStkGraphicsRasterStreamPtr RasterStream;
    __declspec(property(get=GetProjectionStream))
    IAgStkGraphicsProjectionStreamPtr ProjectionStream;
    __declspec(property(get=GetIsRasterStreamSupported))
    VARIANT_BOOL IsRasterStreamSupported;
    __declspec(property(get=GetIsProjectionStreamSupported))
    VARIANT_BOOL IsProjectionStreamSupported;
    __declspec(property(get=GetRealPluginObject))
    IUnknownPtr RealPluginObject;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterStreamPtr GetRasterStream ( );
    IAgStkGraphicsProjectionStreamPtr GetProjectionStream ( );
    VARIANT_BOOL GetIsRasterStreamSupported ( );
    VARIANT_BOOL GetIsProjectionStreamSupported ( );
    IUnknownPtr GetRealPluginObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RasterStream (
        /*[out,retval]*/ struct IAgStkGraphicsRasterStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionStream (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRasterStreamSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsProjectionStreamSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RealPluginObject (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("0c1e9236-42e6-4539-9003-06e06f906432"))
IAgStkGraphicsProjectionRasterStreamPluginActivator : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectionRasterStreamPluginProxyPtr CreateFromDisplayName (
        _bstr_t DisplayName );
    SAFEARRAY * GetAvailableDisplayNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFromDisplayName (
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgStkGraphicsProjectionRasterStreamPluginProxy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("d7df6203-7dc8-4f07-8211-78e6d3c268a1"))
IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectionRasterStreamPluginActivatorPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionRasterStreamPluginActivator * * ppRetVal ) = 0;
};

struct __declspec(uuid("b4777c93-7685-452a-87df-8fd8bfd10e6f"))
IAgStkGraphicsRasterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterPtr InitializeWithStringUri (
        _bstr_t Uri );
    IAgStkGraphicsRasterPtr InitializeWithStringUriXYWidthAndHeight (
        _bstr_t Uri,
        int X,
        int Y,
        int Width,
        int Height );
    IAgStkGraphicsRasterPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUriXYWidthAndHeight (
        /*[in]*/ BSTR Uri,
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
};

struct __declspec(uuid("5e2aeff9-22ff-4a0f-984d-dc0d92d738c9"))
IAgStkGraphicsRasterAttributesFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterAttributesPtr InitializeWithFormat (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatAndType (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatTypeAndOrientation (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType,
        enum AgEStkGraphicsRasterOrientation RasterOrientation );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatTypeOrientationAndAlignment (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType,
        enum AgEStkGraphicsRasterOrientation RasterOrientation,
        int RowAlignment );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatTypeOrientationAlignmentAndRatio (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType,
        enum AgEStkGraphicsRasterOrientation RasterOrientation,
        int RowAlignment,
        double PixelAspectRatio );
    IAgStkGraphicsRasterAttributesPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithFormat (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatAndType (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatTypeAndOrientation (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[in]*/ enum AgEStkGraphicsRasterOrientation RasterOrientation,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatTypeOrientationAndAlignment (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[in]*/ enum AgEStkGraphicsRasterOrientation RasterOrientation,
        /*[in]*/ int RowAlignment,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatTypeOrientationAlignmentAndRatio (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[in]*/ enum AgEStkGraphicsRasterOrientation RasterOrientation,
        /*[in]*/ int RowAlignment,
        /*[in]*/ double PixelAspectRatio,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
};

struct __declspec(uuid("4b6dc620-04e1-4956-be55-890fdb25bd40"))
IAgStkGraphicsRotateFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("413b5f7f-9fa5-48ba-bb49-d57948acc6ed"))
IAgStkGraphicsRotateFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRotateFilterPtr Initialize ( );
    IAgStkGraphicsRotateFilterPtr InitializeWithAngle (
        double RotateAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsRotateFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAngle (
        /*[in]*/ double RotateAngle,
        /*[out,retval]*/ struct IAgStkGraphicsRotateFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("72e2b4cb-2be3-418e-b0c8-69f33164e475"))
IAgStkGraphicsSequenceFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetContinueOnFailure,put=PutContinueOnFailure))
    VARIANT_BOOL ContinueOnFailure;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetContinueOnFailure ( );
    void PutContinueOnFailure (
        VARIANT_BOOL pRetVal );
    int GetCount ( );
    HRESULT Add (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT Remove (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT Clear ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsRasterFilter * Filter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ContinueOnFailure (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContinueOnFailure (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b3f075e4-7de5-4d8c-adbe-89862537e530"))
IAgStkGraphicsSequenceFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSequenceFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSequenceFilter * * ppRetVal ) = 0;
};

enum AgEStkGraphicsSharpenMethod
{
    eStkGraphicsSharpenMethodMeanRemoval = 0,
    eStkGraphicsSharpenMethodBasic = 1
};

struct __declspec(uuid("927e244d-ace0-4387-8e3e-6f14bfe230eb"))
IAgStkGraphicsSharpenFilter : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsSharpenMethod Method;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsSharpenMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsSharpenMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsSharpenMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsSharpenMethod pRetVal ) = 0;
};

struct __declspec(uuid("953f907c-8223-40fa-9827-cb08278d5af4"))
IAgStkGraphicsSharpenFilterFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSharpenFilterPtr Initialize ( );
    IAgStkGraphicsSharpenFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsSharpenMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSharpenFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsSharpenMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsSharpenFilter * * ppRetVal ) = 0;
};

enum AgEStkGraphicsVideoPlayback
{
    eStkGraphicsVideoPlaybackRealTime = 0,
    eStkGraphicsVideoPlaybackTimeInterval = 1
};

struct __declspec(uuid("95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a"))
IAgStkGraphicsVideoStream : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetPlayback,put=PutPlayback))
    enum AgEStkGraphicsVideoPlayback Playback;
    __declspec(property(get=GetAudioUri))
    _bstr_t AudioUri;
    __declspec(property(get=GetFrameRate,put=PutFrameRate))
    double FrameRate;
    __declspec(property(get=GetIntervalStartTime,put=PutIntervalStartTime))
    STKUtil::IAgDatePtr IntervalStartTime;
    __declspec(property(get=GetIntervalEndTime,put=PutIntervalEndTime))
    STKUtil::IAgDatePtr IntervalEndTime;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    double StartTime;
    __declspec(property(get=GetEndTime,put=PutEndTime))
    double EndTime;
    __declspec(property(get=GetStartFrame,put=PutStartFrame))
    int StartFrame;
    __declspec(property(get=GetEndFrame,put=PutEndFrame))
    int EndFrame;
    __declspec(property(get=GetLoop,put=PutLoop))
    VARIANT_BOOL Loop;
    __declspec(property(get=GetIsPlaying))
    VARIANT_BOOL IsPlaying;
    __declspec(property(get=GetPacketAcquirementYieldTime,put=PutPacketAcquirementYieldTime))
    int PacketAcquirementYieldTime;
    __declspec(property(get=GetPacketBufferLimit,put=PutPacketBufferLimit))
    int PacketBufferLimit;
    __declspec(property(get=GetAllowFrameDrop,put=PutAllowFrameDrop))
    VARIANT_BOOL AllowFrameDrop;
    __declspec(property(get=GetEnableAudio,put=PutEnableAudio))
    VARIANT_BOOL EnableAudio;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUri ( );
    enum AgEStkGraphicsVideoPlayback GetPlayback ( );
    void PutPlayback (
        enum AgEStkGraphicsVideoPlayback pRetVal );
    double GetFrameRate ( );
    void PutFrameRate (
        double pRetVal );
    STKUtil::IAgDatePtr GetIntervalStartTime ( );
    void PutIntervalStartTime (
        struct STKUtil::IAgDate * ppRetVal );
    STKUtil::IAgDatePtr GetIntervalEndTime ( );
    void PutIntervalEndTime (
        struct STKUtil::IAgDate * ppRetVal );
    double GetStartTime ( );
    void PutStartTime (
        double pRetVal );
    double GetEndTime ( );
    void PutEndTime (
        double pRetVal );
    int GetStartFrame ( );
    void PutStartFrame (
        int pRetVal );
    int GetEndFrame ( );
    void PutEndFrame (
        int pRetVal );
    VARIANT_BOOL GetLoop ( );
    void PutLoop (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsPlaying ( );
    int GetPacketAcquirementYieldTime ( );
    void PutPacketAcquirementYieldTime (
        int pRetVal );
    int GetPacketBufferLimit ( );
    void PutPacketBufferLimit (
        int pRetVal );
    VARIANT_BOOL GetAllowFrameDrop ( );
    void PutAllowFrameDrop (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetEnableAudio ( );
    void PutEnableAudio (
        VARIANT_BOOL pRetVal );
    HRESULT ReinitializeWithStringUri (
        _bstr_t Uri );
    HRESULT Play ( );
    HRESULT Pause ( );
    HRESULT Stop ( );
    HRESULT Reset ( );
    HRESULT Close ( );
    _bstr_t GetAudioUri ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Playback (
        /*[out,retval]*/ enum AgEStkGraphicsVideoPlayback * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Playback (
        /*[in]*/ enum AgEStkGraphicsVideoPlayback pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrameRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrameRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalStartTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalStartTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalEndTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalEndTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndTime (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EndTime (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartFrame (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartFrame (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndFrame (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EndFrame (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Loop (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsPlaying (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PacketAcquirementYieldTime (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PacketAcquirementYieldTime (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_PacketBufferLimit (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PacketBufferLimit (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowFrameDrop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowFrameDrop (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_EnableAudio (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EnableAudio (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReinitializeWithStringUri (
        /*[in]*/ BSTR Uri ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_AudioUri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("fbde7847-ccff-4c4e-83cf-5f7b05468709"))
IAgStkGraphicsVideoStreamFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsVideoStreamPtr InitializeWithStringUri (
        _bstr_t Uri );
    IAgStkGraphicsVideoStreamPtr InitializeWithStringUriAndAudio (
        _bstr_t Uri,
        VARIANT_BOOL LoadAudio );
    IAgStkGraphicsVideoStreamPtr InitializeAudioVideoWithStringUri (
        _bstr_t Uri,
        _bstr_t AudioUri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsVideoStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUriAndAudio (
        /*[in]*/ BSTR Uri,
        /*[in]*/ VARIANT_BOOL LoadAudio,
        /*[out,retval]*/ struct IAgStkGraphicsVideoStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeAudioVideoWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[in]*/ BSTR AudioUri,
        /*[out,retval]*/ struct IAgStkGraphicsVideoStream * * ppRetVal ) = 0;
};

enum AgEStkGraphicsMarkerBatchSizeSource
{
    eStkGraphicsMarkerBatchSizeSourceFromTexture = 0,
    eStkGraphicsMarkerBatchSizeSourceUserDefined = 1
};

enum AgEStkGraphicsMarkerBatchSortOrder
{
    eStkGraphicsMarkerBatchSortOrderBackToFront = 0,
    eStkGraphicsMarkerBatchSortOrderFrontToBack = 1,
    eStkGraphicsMarkerBatchSortOrderByTexture = 2
};

enum AgEStkGraphicsSetHint
{
    eStkGraphicsSetHintInfrequent = 0,
    eStkGraphicsSetHintPartial = 1,
    eStkGraphicsSetHintFrequent = 2
};

enum AgEStkGraphicsMarkerBatchRenderingMethod
{
    eStkGraphicsMarkerBatchRenderingMethodGeometryShader = 0,
    eStkGraphicsMarkerBatchRenderingMethodVertexShader = 1,
    eStkGraphicsMarkerBatchRenderingMethodAutomatic = 2,
    eStkGraphicsMarkerBatchRenderingMethodFixedFunction = 3
};

enum AgEStkGraphicsMarkerBatchRenderPass
{
    eStkGraphicsMarkerBatchRenderPassOpaque = 0,
    eStkGraphicsMarkerBatchRenderPassTranslucent = 1,
    eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency = 2
};

enum AgEStkGraphicsMarkerBatchUnit
{
    eStkGraphicsMarkerBatchUnitPixels = 0,
    eStkGraphicsMarkerBatchUnitMeters = 1
};

enum AgEStkGraphicsOrigin
{
    eStkGraphicsOriginBottomLeft = 0,
    eStkGraphicsOriginBottomCenter = 1,
    eStkGraphicsOriginBottomRight = 2,
    eStkGraphicsOriginCenterLeft = 3,
    eStkGraphicsOriginCenter = 4,
    eStkGraphicsOriginCenterRight = 5,
    eStkGraphicsOriginTopLeft = 6,
    eStkGraphicsOriginTopCenter = 7,
    eStkGraphicsOriginTopRight = 8
};

struct __declspec(uuid("7303b63e-a1b7-445e-90e0-508a6937de86"))
IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetTextures (
        SAFEARRAY * * Textures );
    HRESULT SetSizes (
        SAFEARRAY * * Sizes );
    HRESULT SetColors (
        SAFEARRAY * * Colors );
    HRESULT SetOrigins (
        SAFEARRAY * * Origins );
    HRESULT SetPixelOffsets (
        SAFEARRAY * * PixelOffsets );
    HRESULT SetEyeOffsets (
        SAFEARRAY * * EyeOffsets );
    HRESULT SetRotations (
        SAFEARRAY * * RotationAngles );
    HRESULT SetTextureCoordinates (
        SAFEARRAY * * TextureCoordinates );
    HRESULT SetTimeIntervalDisplayConditions (
        SAFEARRAY * * TimeIntervals );
    HRESULT SetDisplays (
        SAFEARRAY * * Displays );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetTextures (
        /*[in]*/ SAFEARRAY * * Textures ) = 0;
      virtual HRESULT __stdcall raw_SetSizes (
        /*[in]*/ SAFEARRAY * * Sizes ) = 0;
      virtual HRESULT __stdcall raw_SetColors (
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetOrigins (
        /*[in]*/ SAFEARRAY * * Origins ) = 0;
      virtual HRESULT __stdcall raw_SetPixelOffsets (
        /*[in]*/ SAFEARRAY * * PixelOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetEyeOffsets (
        /*[in]*/ SAFEARRAY * * EyeOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetRotations (
        /*[in]*/ SAFEARRAY * * RotationAngles ) = 0;
      virtual HRESULT __stdcall raw_SetTextureCoordinates (
        /*[in]*/ SAFEARRAY * * TextureCoordinates ) = 0;
      virtual HRESULT __stdcall raw_SetTimeIntervalDisplayConditions (
        /*[in]*/ SAFEARRAY * * TimeIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetDisplays (
        /*[in]*/ SAFEARRAY * * Displays ) = 0;
};

enum AgEStkGraphicsRenderPassHint
{
    eStkGraphicsRenderPassHintOpaque = 0,
    eStkGraphicsRenderPassHintTranslucent = 1,
    eStkGraphicsRenderPassHintUnknown = 2
};

enum AgEStkGraphicsIndicesOrderHint
{
    eStkGraphicsIndicesOrderHintNotSorted = 0,
    eStkGraphicsIndicesOrderHintSortedAscending = 1
};

struct __declspec(uuid("235878c1-62d9-4ce6-85ff-9d82aff701e9"))
IAgStkGraphicsMarkerBatchPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSizeSource))
    enum AgEStkGraphicsMarkerBatchSizeSource SizeSource;
    __declspec(property(get=GetSortOrder))
    enum AgEStkGraphicsMarkerBatchSortOrder SortOrder;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetRenderingMethod))
    enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod;
    __declspec(property(get=GetRenderPass,put=PutRenderPass))
    enum AgEStkGraphicsMarkerBatchRenderPass RenderPass;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetBoundingSphereScale,put=PutBoundingSphereScale))
    double BoundingSphereScale;
    __declspec(property(get=GetDistanceDisplayConditionPerMarker,put=PutDistanceDisplayConditionPerMarker))
    IAgStkGraphicsDistanceDisplayConditionPtr DistanceDisplayConditionPerMarker;
    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetSizeUnit,put=PutSizeUnit))
    enum AgEStkGraphicsMarkerBatchUnit SizeUnit;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsOrigin Origin;
    __declspec(property(get=GetClampToPixel,put=PutClampToPixel))
    VARIANT_BOOL ClampToPixel;
    __declspec(property(get=GetPixelOffset,put=PutPixelOffset))
    SAFEARRAY * PixelOffset;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;
    __declspec(property(get=GetEyeOffset,put=PutEyeOffset))
    SAFEARRAY * EyeOffset;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetTextureCoordinate,put=PutTextureCoordinate))
    SAFEARRAY * TextureCoordinate;
    __declspec(property(get=GetAlignToPixel,put=PutAlignToPixel))
    VARIANT_BOOL AlignToPixel;
    __declspec(property(get=GetWireframe,put=PutWireframe))
    VARIANT_BOOL Wireframe;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsMarkerBatchSizeSource GetSizeSource ( );
    enum AgEStkGraphicsMarkerBatchSortOrder GetSortOrder ( );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    enum AgEStkGraphicsMarkerBatchRenderingMethod GetRenderingMethod ( );
    enum AgEStkGraphicsMarkerBatchRenderPass GetRenderPass ( );
    void PutRenderPass (
        enum AgEStkGraphicsMarkerBatchRenderPass pRetVal );
    double GetBoundingSphereScale ( );
    void PutBoundingSphereScale (
        double pRetVal );
    IAgStkGraphicsDistanceDisplayConditionPtr GetDistanceDisplayConditionPerMarker ( );
    void PutDistanceDisplayConditionPerMarker (
        struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal );
    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    enum AgEStkGraphicsMarkerBatchUnit GetSizeUnit ( );
    void PutSizeUnit (
        enum AgEStkGraphicsMarkerBatchUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    enum AgEStkGraphicsOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsOrigin pRetVal );
    SAFEARRAY * GetPixelOffset ( );
    void PutPixelOffset (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetEyeOffset ( );
    void PutEyeOffset (
        SAFEARRAY * ppRetVal );
    double GetRotation ( );
    void PutRotation (
        double pRetVal );
    SAFEARRAY * GetTextureCoordinate ( );
    void PutTextureCoordinate (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetAlignToPixel ( );
    void PutAlignToPixel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetWireframe ( );
    void PutWireframe (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions );
    HRESULT SetWithOptionalParameters (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetWithOptionalParametersAndRenderPassHint (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    HRESULT SetCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetCartographicWithOptionalParametersAndRenderPassHint (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithOptionalParameters (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod );
    VARIANT_BOOL GetClampToPixel ( );
    void PutClampToPixel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );
    HRESULT AlignToScreen ( );
    HRESULT AlignToNorth (
        _bstr_t CentralBody );
    HRESULT AlignToAxis (
        _bstr_t CentralBody,
        SAFEARRAY * * Axis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SizeSource (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchSizeSource * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SortOrder (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchSortOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderingMethod (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderPass (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchRenderPass * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RenderPass (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderPass pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphereScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphereScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayConditionPerMarker (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DistanceDisplayConditionPerMarker (
        /*[in]*/ struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeUnit (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SizeUnit (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PixelOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EyeOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EyeOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureCoordinate (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureCoordinate (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignToPixel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AlignToPixel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wireframe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wireframe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParametersAndRenderPassHint (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParametersAndRenderPassHint (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClampToPixel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClampToPixel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AlignToScreen ( ) = 0;
      virtual HRESULT __stdcall raw_AlignToNorth (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_AlignToAxis (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Axis ) = 0;
};

struct __declspec(uuid("02a33d9e-cfb3-41c8-be66-e452ae1b7ac3"))
IAgStkGraphicsMarkerBatchPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsMarkerBatchPrimitivePtr Initialize ( );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeWithSizeSource (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeWithSizeSourceAndSortOrder (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        enum AgEStkGraphicsMarkerBatchSortOrder SortOrder );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeSizeSourceSortOrderAndSetHint (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeSizeSourceSortOrderSetHintAndRenderingMethod (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        enum AgEStkGraphicsSetHint SetHint,
        enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSizeSource (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSizeSourceAndSortOrder (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeSizeSourceSortOrderAndSetHint (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeSizeSourceSortOrderSetHintAndRenderingMethod (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9b29c9ab-8fd6-4f2b-8183-b504e319617e"))
IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * * ppRetVal ) = 0;
};

struct __declspec(uuid("fcacfb20-3ffb-46c4-9e07-495b1446c52b"))
IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumCount,put=PutMaximumCount))
    int MaximumCount;
    __declspec(property(get=GetRemoveLocation,put=PutRemoveLocation))
    enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation;

    //
    // Wrapper methods for error-handling
    //

    int GetMaximumCount ( );
    void PutMaximumCount (
        int pRetVal );
    enum AgEStkGraphicsPathPrimitiveRemoveLocation GetRemoveLocation ( );
    void PutRemoveLocation (
        enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumCount (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumCount (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveLocation (
        /*[out,retval]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveLocation (
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) = 0;
};

struct __declspec(uuid("046383cc-b5b9-4ff5-b662-701e694170ba"))
IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr Initialize ( );
    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr InitializeWithParameters (
        int MaximumCount,
        enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithParameters (
        /*[in]*/ int MaximumCount,
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation,
        /*[out,retval]*/ struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
};

enum AgEStkGraphicsModelTransformationType
{
    eStkGraphicsModelTransformationTypeTranslateX = 0,
    eStkGraphicsModelTransformationTypeTranslateY = 1,
    eStkGraphicsModelTransformationTypeTranslateZ = 2,
    eStkGraphicsModelTransformationTypeRotateX = 3,
    eStkGraphicsModelTransformationTypeRotateY = 4,
    eStkGraphicsModelTransformationTypeRotateZ = 5,
    eStkGraphicsModelTransformationTypeScaleX = 6,
    eStkGraphicsModelTransformationTypeScaleY = 7,
    eStkGraphicsModelTransformationTypeScaleZ = 8,
    eStkGraphicsModelTransformationTypeScaleUniform = 9,
    eStkGraphicsModelTransformationTypeTextureTranslateX = 10,
    eStkGraphicsModelTransformationTypeTextureTranslateY = 11,
    eStkGraphicsModelTransformationTypeTextureTranslateZ = 12,
    eStkGraphicsModelTransformationTypeTextureRotateX = 13,
    eStkGraphicsModelTransformationTypeTextureRotateY = 14,
    eStkGraphicsModelTransformationTypeTextureRotateZ = 15,
    eStkGraphicsModelTransformationTypeTextureScaleX = 16,
    eStkGraphicsModelTransformationTypeTextureScaleY = 17,
    eStkGraphicsModelTransformationTypeTextureScaleZ = 18,
    eStkGraphicsModelTransformationTypeTextureScaleUniform = 19,
    eStkGraphicsModelTransformationTypeTranslateRed = 20,
    eStkGraphicsModelTransformationTypeTranslateGreen = 21,
    eStkGraphicsModelTransformationTypeTranslateBlue = 22
};

struct __declspec(uuid("c58f7fc4-2f63-494d-a461-2c385a53b9a2"))
IAgStkGraphicsModelTransformation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentValue,put=PutCurrentValue))
    double CurrentValue;
    __declspec(property(get=GetMinimumValue))
    double MinimumValue;
    __declspec(property(get=GetMaximumValue))
    double MaximumValue;
    __declspec(property(get=GetDefaultValue))
    double DefaultValue;
    __declspec(property(get=GetRange))
    double Range;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEStkGraphicsModelTransformationType Type;

    //
    // Wrapper methods for error-handling
    //

    double GetCurrentValue ( );
    void PutCurrentValue (
        double pRetVal );
    double GetMinimumValue ( );
    double GetMaximumValue ( );
    double GetDefaultValue ( );
    double GetRange ( );
    _bstr_t GetName ( );
    enum AgEStkGraphicsModelTransformationType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurrentValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurrentValue (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEStkGraphicsModelTransformationType * pRetVal ) = 0;
};

struct __declspec(uuid("4554a375-123b-4a39-b727-3e9131879196"))
IAgStkGraphicsModelArticulation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetItem))
    IAgStkGraphicsModelTransformationPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    int GetCount ( );
    IAgStkGraphicsModelTransformationPtr GetItem (
        int Index );
    IAgStkGraphicsModelTransformationPtr GetItemByString (
        _bstr_t Name );
    IAgStkGraphicsModelTransformationPtr GetByName (
        _bstr_t Name );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsModelTransformation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetItemByString (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelTransformation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelTransformation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("cf6e3054-4d92-42f8-ac4d-e43bfd93d23d"))
IAgStkGraphicsModelArticulationCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsModelArticulationPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IAgStkGraphicsModelArticulationPtr GetItem (
        int Index );
    IAgStkGraphicsModelArticulationPtr GetItemByString (
        _bstr_t Name );
    IAgStkGraphicsModelArticulationPtr GetByName (
        _bstr_t Name );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetItemByString (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgEStkGraphicsModelUpAxis
{
    eStkGraphicsModelUpAxisX = 0,
    eStkGraphicsModelUpAxisY = 1,
    eStkGraphicsModelUpAxisZ = 2,
    eStkGraphicsModelUpAxisNegativeX = 3,
    eStkGraphicsModelUpAxisNegativeY = 4,
    eStkGraphicsModelUpAxisNegativeZ = 5
};

struct __declspec(uuid("67a2ad57-e9b2-4dc9-b509-62cbebc405ca"))
IAgStkGraphicsModelPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetArticulations))
    IAgStkGraphicsModelArticulationCollectionPtr Articulations;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUriAsString ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    void PutOrientation (
        struct STKUtil::IAgOrientation * ppRetVal );
    IAgStkGraphicsModelArticulationCollectionPtr GetArticulations ( );
    HRESULT LoadWithStringUri (
        _bstr_t Uri );
    HRESULT LoadWithStringUriAndUpAxis (
        _bstr_t Uri,
        enum AgEStkGraphicsModelUpAxis UpAxis );
    HRESULT SetPositionCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Articulations (
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulationCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadWithStringUri (
        /*[in]*/ BSTR Uri ) = 0;
      virtual HRESULT __stdcall raw_LoadWithStringUriAndUpAxis (
        /*[in]*/ BSTR Uri,
        /*[in]*/ enum AgEStkGraphicsModelUpAxis UpAxis ) = 0;
      virtual HRESULT __stdcall raw_SetPositionCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position ) = 0;
};

struct __declspec(uuid("93ea79ef-8da7-4992-b8fa-81d372d4258a"))
IAgStkGraphicsModelPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsModelPrimitivePtr Initialize ( );
    IAgStkGraphicsModelPrimitivePtr InitializeWithStringUri (
        _bstr_t Uri );
    IAgStkGraphicsModelPrimitivePtr InitializeWithStringUriAndUpAxis (
        _bstr_t Uri,
        enum AgEStkGraphicsModelUpAxis UpAxis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUriAndUpAxis (
        /*[in]*/ BSTR Uri,
        /*[in]*/ enum AgEStkGraphicsModelUpAxis UpAxis,
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf"))
IAgStkGraphicsPixelSizeDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumPixelSize,put=PutMinimumPixelSize))
    int MinimumPixelSize;
    __declspec(property(get=GetMaximumPixelSize,put=PutMaximumPixelSize))
    int MaximumPixelSize;

    //
    // Wrapper methods for error-handling
    //

    int GetMinimumPixelSize ( );
    void PutMinimumPixelSize (
        int pRetVal );
    int GetMaximumPixelSize ( );
    void PutMaximumPixelSize (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumPixelSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumPixelSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPixelSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumPixelSize (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("2c7bb493-89f9-40f9-b562-feed771d08b7"))
IAgStkGraphicsPixelSizeDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPixelSizeDisplayConditionPtr Initialize ( );
    IAgStkGraphicsPixelSizeDisplayConditionPtr InitializeWithPixelSizes (
        int MinimumPixelSize,
        int MaximumPixelSize );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPixelSizeDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPixelSizes (
        /*[in]*/ int MinimumPixelSize,
        /*[in]*/ int MaximumPixelSize,
        /*[out,retval]*/ struct IAgStkGraphicsPixelSizeDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("ae6c6dca-3afe-4419-8aad-dd56bee51446"))
IAgStkGraphicsPointBatchPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    float PixelSize;
    __declspec(property(get=GetMinimumPixelSizeSupported))
    float MinimumPixelSizeSupported;
    __declspec(property(get=GetMaximumPixelSizeSupported))
    float MaximumPixelSizeSupported;
    __declspec(property(get=GetDistanceDisplayConditionPerPoint,put=PutDistanceDisplayConditionPerPoint))
    IAgStkGraphicsDistanceDisplayConditionPtr DistanceDisplayConditionPerPoint;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    float GetPixelSize ( );
    void PutPixelSize (
        float pRetVal );
    float GetMinimumPixelSizeSupported ( );
    float GetMaximumPixelSizeSupported ( );
    IAgStkGraphicsDistanceDisplayConditionPtr GetDistanceDisplayConditionPerPoint ( );
    void PutDistanceDisplayConditionPerPoint (
        struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions );
    HRESULT SetWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetWithColorsAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    HRESULT SetCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetCartographicWithColorsAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithColorsIndicesOrderAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayConditionPerPoint (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DistanceDisplayConditionPerPoint (
        /*[in]*/ struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetWithColorsAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColorsAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColorsIndicesOrderAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("5dd03481-3541-486c-973f-f079eb35973c"))
IAgStkGraphicsPointBatchPrimitiveFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumPixelSizeSupported))
    float MinimumPixelSizeSupported;
    __declspec(property(get=GetMaximumPixelSizeSupported))
    float MaximumPixelSizeSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPointBatchPrimitivePtr Initialize ( );
    IAgStkGraphicsPointBatchPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );
    float GetMinimumPixelSizeSupported ( );
    float GetMaximumPixelSizeSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPointBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPointBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("512c0d62-559e-42ce-98e2-218c02662290"))
IAgStkGraphicsPositionInterpolator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    SAFEARRAY * Interpolate (
        SAFEARRAY * * Positions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Interpolate (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0122dc2b-4232-443d-b8da-09b42967b841"))
IAgStkGraphicsPolylinePrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;
    __declspec(property(get=GetPositionInterpolator))
    IAgStkGraphicsPositionInterpolatorPtr PositionInterpolator;
    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;

    //
    // Wrapper methods for error-handling
    //

    float GetWidth ( );
    void PutWidth (
        float pRetVal );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );
    IAgStkGraphicsPositionInterpolatorPtr GetPositionInterpolator ( );
    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions );
    HRESULT SetWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetWithColorsAndHint (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetWithSurfaceShapesResult (
        struct IAgStkGraphicsSurfaceShapesResult * SurfaceShapesResult );
    HRESULT SetWithSurfaceTriangulatorResult (
        struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulatorResult );
    HRESULT SetWithSolidTriangulatorResult (
        struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    HRESULT SetCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetCartographicWithColorsAndHint (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetSubset (
        SAFEARRAY * * Positions,
        int Index,
        int Count );
    HRESULT SetSubsetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        int Index,
        int Count );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithColorsIndicesOrderAndRenderPassHint (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionInterpolator (
        /*[out,retval]*/ struct IAgStkGraphicsPositionInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetWithColorsAndHint (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetWithSurfaceShapesResult (
        /*[in]*/ struct IAgStkGraphicsSurfaceShapesResult * SurfaceShapesResult ) = 0;
      virtual HRESULT __stdcall raw_SetWithSurfaceTriangulatorResult (
        /*[in]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulatorResult ) = 0;
      virtual HRESULT __stdcall raw_SetWithSolidTriangulatorResult (
        /*[in]*/ struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColorsAndHint (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetSubset (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ int Index,
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_SetSubsetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ int Index,
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColorsIndicesOrderAndRenderPassHint (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("16a27023-42d5-4994-9ace-165e027e72d8"))
IAgStkGraphicsPolylinePrimitiveFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPolylinePrimitivePtr Initialize ( );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithInterpolatorAndSetHint (
        struct IAgStkGraphicsPositionInterpolator * Interpolator,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithTypeAndHint (
        enum AgEStkGraphicsPolylineType PolylineType,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithInterpolator (
        struct IAgStkGraphicsPositionInterpolator * Interpolator );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithHint (
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithType (
        enum AgEStkGraphicsPolylineType PolylineType );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithInterpolatorAndSetHint (
        /*[in]*/ struct IAgStkGraphicsPositionInterpolator * Interpolator,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTypeAndHint (
        /*[in]*/ enum AgEStkGraphicsPolylineType PolylineType,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithInterpolator (
        /*[in]*/ struct IAgStkGraphicsPositionInterpolator * Interpolator,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithType (
        /*[in]*/ enum AgEStkGraphicsPolylineType PolylineType,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("de016591-933e-4085-b6a4-401e117109e9"))
IAgStkGraphicsRasterImageGlobeOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTransparentColor,put=PutUseTransparentColor))
    VARIANT_BOOL UseTransparentColor;
    __declspec(property(get=GetTransparentColor,put=PutTransparentColor))
    OLE_COLOR TransparentColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseTransparentColor ( );
    void PutUseTransparentColor (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetTransparentColor ( );
    void PutTransparentColor (
        OLE_COLOR pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseTransparentColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparentColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
};

struct __declspec(uuid("00a01c47-a9d0-4020-a469-fd874b219713"))
IAgStkGraphicsRasterImageGlobeOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri,
        SAFEARRAY * * Extent );
    IAgStkGraphicsRasterImageGlobeOverlayPtr InitializeWithColor (
        OLE_COLOR Color,
        SAFEARRAY * * Extent );
    IAgStkGraphicsRasterImageGlobeOverlayPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster,
        SAFEARRAY * * Extent );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithColor (
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("ccdec605-222e-4dea-a897-2632b43af87f"))
IAgStkGraphicsRhumbLineInterpolator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    double GetGranularity ( );
    void PutGranularity (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1cf08578-668b-431a-9df2-8bb329e3fdf5"))
IAgStkGraphicsRhumbLineInterpolatorFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRhumbLineInterpolatorPtr Initialize ( );
    IAgStkGraphicsRhumbLineInterpolatorPtr InitializeWithCentralBody (
        _bstr_t CentralBody );
    IAgStkGraphicsRhumbLineInterpolatorPtr InitializeWithCentralBodyAndGranularity (
        _bstr_t CentralBody,
        double Granularity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBodyAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolator * * ppRetVal ) = 0;
};

struct __declspec(uuid("84cbf48f-1672-460e-86fd-9afda647bcca"))
IAgStkGraphicsSceneDisplayCondition : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetDisplayInScene (
        struct IAgStkGraphicsScene * Scene,
        VARIANT_BOOL On );
    VARIANT_BOOL GetDisplayInScene (
        struct IAgStkGraphicsScene * Scene );
    HRESULT DisplayOnlyInScene (
        struct IAgStkGraphicsScene * Scene );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDisplayInScene (
        /*[in]*/ struct IAgStkGraphicsScene * Scene,
        /*[in]*/ VARIANT_BOOL On ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayInScene (
        /*[in]*/ struct IAgStkGraphicsScene * Scene,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DisplayOnlyInScene (
        /*[in]*/ struct IAgStkGraphicsScene * Scene ) = 0;
};

struct __declspec(uuid("930929f7-1d93-4575-a18f-b376e9a16cf7"))
IAgStkGraphicsSceneDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSceneDisplayConditionPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSceneDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("39006599-c2ac-4f46-a190-958d173714fc"))
IAgStkGraphicsPrimitiveManager : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetPrecisionExponent,put=PutPrecisionExponent))
    int PrecisionExponent;
    __declspec(property(get=GetTranslucentPrimitivesSortOrder,put=PutTranslucentPrimitivesSortOrder))
    enum AgEStkGraphicsPrimitivesSortOrder TranslucentPrimitivesSortOrder;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    int GetPrecisionExponent ( );
    void PutPrecisionExponent (
        int pRetVal );
    enum AgEStkGraphicsPrimitivesSortOrder GetTranslucentPrimitivesSortOrder ( );
    void PutTranslucentPrimitivesSortOrder (
        enum AgEStkGraphicsPrimitivesSortOrder pRetVal );
    HRESULT Add (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Remove (
        struct IAgStkGraphicsPrimitive * Primitive );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Clear ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PrecisionExponent (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PrecisionExponent (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentPrimitivesSortOrder (
        /*[out,retval]*/ enum AgEStkGraphicsPrimitivesSortOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentPrimitivesSortOrder (
        /*[in]*/ enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("25bf4e85-98ce-48e3-9c15-f517115bc794"))
IAgStkGraphicsScreenOverlayManager : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetBounds ( );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("455fd9a8-e787-4459-a613-e3367dce25b8"))
IAgStkGraphicsTexture2DFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRendererTexture2DPtr LoadFromStringUri (
        _bstr_t Uri );
    IAgStkGraphicsRendererTexture2DPtr FromRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadFromStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("2864d6df-bbe2-42b7-9838-27d1f5ff5be6"))
IAgStkGraphicsGlobeOverlaySettings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainCacheSize,put=PutTerrainCacheSize))
    int TerrainCacheSize;
    __declspec(property(get=GetImageryCacheSize,put=PutImageryCacheSize))
    int ImageryCacheSize;
    __declspec(property(get=GetUsePerPixelLighting,put=PutUsePerPixelLighting))
    VARIANT_BOOL UsePerPixelLighting;
    __declspec(property(get=GetPreloadTerrainAndImagery,put=PutPreloadTerrainAndImagery))
    VARIANT_BOOL PreloadTerrainAndImagery;

    //
    // Wrapper methods for error-handling
    //

    int GetTerrainCacheSize ( );
    void PutTerrainCacheSize (
        int pRetVal );
    int GetImageryCacheSize ( );
    void PutImageryCacheSize (
        int pRetVal );
    VARIANT_BOOL GetUsePerPixelLighting ( );
    void PutUsePerPixelLighting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetPreloadTerrainAndImagery ( );
    void PutPreloadTerrainAndImagery (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainCacheSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TerrainCacheSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageryCacheSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageryCacheSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePerPixelLighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePerPixelLighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PreloadTerrainAndImagery (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PreloadTerrainAndImagery (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("dd3adf22-21f0-4220-8f3f-bda974157d48"))
IAgStkGraphicsSceneManagerInitializer : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimitives))
    IAgStkGraphicsPrimitiveManagerPtr Primitives;
    __declspec(property(get=GetScreenOverlays))
    IAgStkGraphicsScreenOverlayManagerPtr ScreenOverlays;
    __declspec(property(get=GetTextures))
    IAgStkGraphicsTexture2DFactoryPtr Textures;
    __declspec(property(get=GetGlobeOverlaySettings))
    IAgStkGraphicsGlobeOverlaySettingsPtr GlobeOverlaySettings;
    __declspec(property(get=GetScenes))
    IAgStkGraphicsSceneCollectionPtr Scenes;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPrimitiveManagerPtr GetPrimitives ( );
    IAgStkGraphicsScreenOverlayManagerPtr GetScreenOverlays ( );
    IAgStkGraphicsTexture2DFactoryPtr GetTextures ( );
    IAgStkGraphicsGlobeOverlaySettingsPtr GetGlobeOverlaySettings ( );
    IAgStkGraphicsSceneCollectionPtr GetScenes ( );
    HRESULT Render ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Primitives (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitiveManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScreenOverlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Textures (
        /*[out,retval]*/ struct IAgStkGraphicsTexture2DFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeOverlaySettings (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeOverlaySettings * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scenes (
        /*[out,retval]*/ struct IAgStkGraphicsSceneCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Render ( ) = 0;
};

struct __declspec(uuid("45754d2a-e83f-4c32-9792-c90d9620a83a"))
IAgStkGraphicsScreenOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsScreenOverlayPtr Initialize (
        double XPixels,
        double YPixels,
        double WidthPixels,
        double HeightPixels );
    IAgStkGraphicsScreenOverlayPtr InitializeWithPosAndSize (
        SAFEARRAY * * Position,
        SAFEARRAY * * Size );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ double WidthPixels,
        /*[in]*/ double HeightPixels,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPosAndSize (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
};

enum AgEStkGraphicsOutlineAppearance
{
    eStkGraphicsFrontAndBackLines = 0,
    eStkGraphicsFrontLinesOnly = 1,
    eStkGraphicsStylizeBackLines = 2
};

struct __declspec(uuid("10ae68b3-ec89-4ced-9b4c-8aae9123eb24"))
IAgStkGraphicsSolidPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAffectedByLighting,put=PutAffectedByLighting))
    VARIANT_BOOL AffectedByLighting;
    __declspec(property(get=GetScale,put=PutScale))
    SAFEARRAY * Scale;
    __declspec(property(get=GetDisplayFill,put=PutDisplayFill))
    VARIANT_BOOL DisplayFill;
    __declspec(property(get=GetBackLineWidth,put=PutBackLineWidth))
    float BackLineWidth;
    __declspec(property(get=GetDisplaySilhouette,put=PutDisplaySilhouette))
    VARIANT_BOOL DisplaySilhouette;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetSilhouetteColor,put=PutSilhouetteColor))
    OLE_COLOR SilhouetteColor;
    __declspec(property(get=GetSilhouetteTranslucency,put=PutSilhouetteTranslucency))
    float SilhouetteTranslucency;
    __declspec(property(get=GetSilhouetteWidth,put=PutSilhouetteWidth))
    float SilhouetteWidth;
    __declspec(property(get=GetMinimumSilhouetteWidthSupported))
    float MinimumSilhouetteWidthSupported;
    __declspec(property(get=GetMaximumSilhouetteWidthSupported))
    float MaximumSilhouetteWidthSupported;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetOutlineAppearance,put=PutOutlineAppearance))
    enum AgEStkGraphicsOutlineAppearance OutlineAppearance;
    __declspec(property(get=GetBackLineColor,put=PutBackLineColor))
    OLE_COLOR BackLineColor;
    __declspec(property(get=GetBackLineTranslucency,put=PutBackLineTranslucency))
    float BackLineTranslucency;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetRotation,put=PutRotation))
    STKUtil::IAgOrientationPtr Rotation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAffectedByLighting ( );
    void PutAffectedByLighting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayFill ( );
    void PutDisplayFill (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplaySilhouette ( );
    void PutDisplaySilhouette (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetSilhouetteColor ( );
    void PutSilhouetteColor (
        OLE_COLOR pRetVal );
    float GetSilhouetteTranslucency ( );
    void PutSilhouetteTranslucency (
        float pRetVal );
    float GetSilhouetteWidth ( );
    void PutSilhouetteWidth (
        float pRetVal );
    float GetMinimumSilhouetteWidthSupported ( );
    float GetMaximumSilhouetteWidthSupported ( );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    enum AgEStkGraphicsOutlineAppearance GetOutlineAppearance ( );
    void PutOutlineAppearance (
        enum AgEStkGraphicsOutlineAppearance pRetVal );
    OLE_COLOR GetBackLineColor ( );
    void PutBackLineColor (
        OLE_COLOR pRetVal );
    float GetBackLineTranslucency ( );
    void PutBackLineTranslucency (
        float pRetVal );
    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetRotation ( );
    void PutRotation (
        struct STKUtil::IAgOrientation * ppRetVal );
    SAFEARRAY * GetScale ( );
    void PutScale (
        SAFEARRAY * ppRetVal );
    float GetBackLineWidth ( );
    void PutBackLineWidth (
        float pRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    HRESULT SetWithResult (
        struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult );
    HRESULT Set (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Normals,
        SAFEARRAY * * Indices,
        SAFEARRAY * * OutlineIndices,
        enum AgEStkGraphicsWindingOrder WindingOrder,
        struct IAgStkGraphicsBoundingSphere * BoundingSphere,
        VARIANT_BOOL Closed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AffectedByLighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AffectedByLighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayFill (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplaySilhouette (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplaySilhouette (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SilhouetteColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SilhouetteColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SilhouetteTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SilhouetteTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_SilhouetteWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SilhouetteWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineAppearance (
        /*[out,retval]*/ enum AgEStkGraphicsOutlineAppearance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineAppearance (
        /*[in]*/ enum AgEStkGraphicsOutlineAppearance pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackLineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackLineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackLineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackLineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BackLineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackLineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetWithResult (
        /*[in]*/ struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Normals,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ SAFEARRAY * * OutlineIndices,
        /*[in]*/ enum AgEStkGraphicsWindingOrder WindingOrder,
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * BoundingSphere,
        /*[in]*/ VARIANT_BOOL Closed ) = 0;
};

struct __declspec(uuid("b76858bc-4b6c-41c0-928a-2ae8fe8d6e03"))
IAgStkGraphicsSolidPrimitiveFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumSilhouetteWidthSupported))
    float MinimumSilhouetteWidthSupported;
    __declspec(property(get=GetMaximumSilhouetteWidthSupported))
    float MaximumSilhouetteWidthSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidPrimitivePtr Initialize ( );
    IAgStkGraphicsSolidPrimitivePtr InitializeWithHint (
        enum AgEStkGraphicsSetHint SetHint );
    float GetMinimumSilhouetteWidthSupported ( );
    float GetMaximumSilhouetteWidthSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSolidPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsSolidPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

enum AgEStkGraphicsSurfaceMeshRenderingMethod
{
    eStkGraphicsSurfaceMeshRenderingMethodGeometryShader = 0,
    eStkGraphicsSurfaceMeshRenderingMethodVertexShader = 1,
    eStkGraphicsSurfaceMeshRenderingMethodAutomatic = 2
};

struct __declspec(uuid("0a4c4c8f-0131-466f-99a5-1f41f9db403b"))
IAgStkGraphicsTextureMatrix : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetM11))
    float M11;
    __declspec(property(get=GetM12))
    float M12;
    __declspec(property(get=GetM13))
    float M13;
    __declspec(property(get=GetM14))
    float M14;
    __declspec(property(get=GetM21))
    float M21;
    __declspec(property(get=GetM22))
    float M22;
    __declspec(property(get=GetM23))
    float M23;
    __declspec(property(get=GetM24))
    float M24;
    __declspec(property(get=GetM31))
    float M31;
    __declspec(property(get=GetM32))
    float M32;
    __declspec(property(get=GetM33))
    float M33;
    __declspec(property(get=GetM34))
    float M34;
    __declspec(property(get=GetM41))
    float M41;
    __declspec(property(get=GetM42))
    float M42;
    __declspec(property(get=GetM43))
    float M43;
    __declspec(property(get=GetM44))
    float M44;

    //
    // Wrapper methods for error-handling
    //

    float GetM11 ( );
    float GetM12 ( );
    float GetM13 ( );
    float GetM14 ( );
    float GetM21 ( );
    float GetM22 ( );
    float GetM23 ( );
    float GetM24 ( );
    float GetM31 ( );
    float GetM32 ( );
    float GetM33 ( );
    float GetM34 ( );
    float GetM41 ( );
    float GetM42 ( );
    float GetM43 ( );
    float GetM44 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_M11 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M12 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M13 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M14 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M21 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M22 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M23 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M24 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M31 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M32 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M33 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M34 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M41 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M42 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M43 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M44 (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("9f13f05b-9c30-4118-8d6b-ab331881aba6"))
IAgStkGraphicsSurfaceMeshPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetWireframe,put=PutWireframe))
    VARIANT_BOOL Wireframe;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetRenderingMethod))
    enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetTextureMatrix,put=PutTextureMatrix))
    IAgStkGraphicsTextureMatrixPtr TextureMatrix;
    __declspec(property(get=GetTransparentTextureBorder,put=PutTransparentTextureBorder))
    VARIANT_BOOL TransparentTextureBorder;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    VARIANT_BOOL GetWireframe ( );
    void PutWireframe (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    enum AgEStkGraphicsSurfaceMeshRenderingMethod GetRenderingMethod ( );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    IAgStkGraphicsTextureMatrixPtr GetTextureMatrix ( );
    void PutTextureMatrix (
        struct IAgStkGraphicsTextureMatrix * ppRetVal );
    VARIANT_BOOL GetTransparentTextureBorder ( );
    void PutTransparentTextureBorder (
        VARIANT_BOOL pRetVal );
    HRESULT Set (
        struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator );
    HRESULT SetWithoutTexturing (
        struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod );
    VARIANT_BOOL SupportedWithDefaultRenderingMethod ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Wireframe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wireframe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderingMethod (
        /*[out,retval]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureMatrix (
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureMatrix (
        /*[in]*/ struct IAgStkGraphicsTextureMatrix * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentTextureBorder (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentTextureBorder (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) = 0;
      virtual HRESULT __stdcall raw_SetWithoutTexturing (
        /*[in]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SupportedWithDefaultRenderingMethod (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("08c3d10b-0cf0-41e9-93d0-e73b9d25e329"))
IAgStkGraphicsSurfaceMeshPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceMeshPrimitivePtr Initialize ( );
    IAgStkGraphicsSurfaceMeshPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsSurfaceMeshPrimitivePtr InitializeWithSetHintAndRenderingMethod (
        enum AgEStkGraphicsSetHint SetHint,
        enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod );
    VARIANT_BOOL SupportedWithDefaultRenderingMethod ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHintAndRenderingMethod (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[in]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SupportedWithDefaultRenderingMethod (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("74c0acde-8d75-49df-87c1-2c39e3240283"))
IAgStkGraphicsTerrainOverlayInitializer : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("e18b012f-840d-4f32-8810-dd253c38ce7f"))
IAgStkGraphicsTextBatchPrimitiveOptionalParameters : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsOrigin Origin;
    __declspec(property(get=GetEyeOffset,put=PutEyeOffset))
    SAFEARRAY * EyeOffset;
    __declspec(property(get=GetPixelOffset,put=PutPixelOffset))
    SAFEARRAY * PixelOffset;
    __declspec(property(get=GetMaximumStringLength,put=PutMaximumStringLength))
    int MaximumStringLength;
    __declspec(property(get=GetScreenSpaceRendering,put=PutScreenSpaceRendering))
    VARIANT_BOOL ScreenSpaceRendering;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsOrigin pRetVal );
    SAFEARRAY * GetEyeOffset ( );
    void PutEyeOffset (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPixelOffset ( );
    void PutPixelOffset (
        SAFEARRAY * ppRetVal );
    int GetMaximumStringLength ( );
    void PutMaximumStringLength (
        int pRetVal );
    HRESULT SetOrigins (
        SAFEARRAY * * Origins );
    HRESULT SetEyeOffsets (
        SAFEARRAY * * EyeOffsets );
    HRESULT SetPixelOffsets (
        SAFEARRAY * * PixelOffsets );
    HRESULT SetColors (
        SAFEARRAY * * Colors );
    VARIANT_BOOL GetScreenSpaceRendering ( );
    void PutScreenSpaceRendering (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_EyeOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EyeOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PixelOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumStringLength (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumStringLength (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOrigins (
        /*[in]*/ SAFEARRAY * * Origins ) = 0;
      virtual HRESULT __stdcall raw_SetEyeOffsets (
        /*[in]*/ SAFEARRAY * * EyeOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetPixelOffsets (
        /*[in]*/ SAFEARRAY * * PixelOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetColors (
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall get_ScreenSpaceRendering (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScreenSpaceRendering (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("037722fb-c0e5-4052-b34d-60aa662b5d2b"))
IAgStkGraphicsTextBatchPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetBoundingSphereScale,put=PutBoundingSphereScale))
    double BoundingSphereScale;
    __declspec(property(get=GetFont))
    IAgStkGraphicsGraphicsFontPtr Font;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetAlignToPixel,put=PutAlignToPixel))
    VARIANT_BOOL AlignToPixel;
    __declspec(property(get=GetDistanceDisplayConditionPerString,put=PutDistanceDisplayConditionPerString))
    IAgStkGraphicsDistanceDisplayConditionPtr DistanceDisplayConditionPerString;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetRenderInScreenSpace,put=PutRenderInScreenSpace))
    VARIANT_BOOL RenderInScreenSpace;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsSetHint GetSetHint ( );
    double GetBoundingSphereScale ( );
    void PutBoundingSphereScale (
        double pRetVal );
    IAgStkGraphicsGraphicsFontPtr GetFont ( );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    VARIANT_BOOL GetAlignToPixel ( );
    void PutAlignToPixel (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDistanceDisplayConditionPtr GetDistanceDisplayConditionPerString ( );
    void PutDistanceDisplayConditionPerString (
        struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text );
    HRESULT SetWithOptionalParameters (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetWithOptionalParametersAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text );
    HRESULT SetCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetCartographicWithOptionalParametersAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithOptionalParameters (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    VARIANT_BOOL GetRenderInScreenSpace ( );
    void PutRenderInScreenSpace (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphereScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphereScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignToPixel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AlignToPixel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayConditionPerString (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DistanceDisplayConditionPerString (
        /*[in]*/ struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParametersAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParametersAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall get_RenderInScreenSpace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RenderInScreenSpace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a"))
IAgStkGraphicsTextBatchPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextBatchPrimitivePtr InitializeWithGraphicsFont (
        struct IAgStkGraphicsGraphicsFont * Font );
    IAgStkGraphicsTextBatchPrimitivePtr InitializeWithGraphicsFontAndSetHint (
        struct IAgStkGraphicsGraphicsFont * Font,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsTextBatchPrimitivePtr InitializeWithGraphicsFontAndSetHint2d (
        struct IAgStkGraphicsGraphicsFont * Font,
        enum AgEStkGraphicsSetHint SetHint,
        VARIANT_BOOL RenderInScreenSpace );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithGraphicsFont (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithGraphicsFontAndSetHint (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithGraphicsFontAndSetHint2d (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[in]*/ VARIANT_BOOL RenderInScreenSpace,
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("03511893-3980-4c0e-9b99-7f86398acadf"))
IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextBatchPrimitiveOptionalParametersPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * * ppRetVal ) = 0;
};

struct __declspec(uuid("d4fcc6c9-d53a-4988-a09e-3edc080936d4"))
IAgStkGraphicsTextureMatrixFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextureMatrixPtr Initialize ( );
    IAgStkGraphicsTextureMatrixPtr InitializeByValues (
        float M11,
        float M12,
        float M13,
        float M14,
        float M21,
        float M22,
        float M23,
        float M24,
        float M31,
        float M32,
        float M33,
        float M34,
        float M41,
        float M42,
        float M43,
        float M44 );
    IAgStkGraphicsTextureMatrixPtr InitializeWithAffineTransform (
        SAFEARRAY * * Matrix );
    IAgStkGraphicsTextureMatrixPtr InitializeWithRectangles (
        SAFEARRAY * * Corner0,
        SAFEARRAY * * Corner1,
        SAFEARRAY * * Corner2,
        SAFEARRAY * * Corner3 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeByValues (
        /*[in]*/ float M11,
        /*[in]*/ float M12,
        /*[in]*/ float M13,
        /*[in]*/ float M14,
        /*[in]*/ float M21,
        /*[in]*/ float M22,
        /*[in]*/ float M23,
        /*[in]*/ float M24,
        /*[in]*/ float M31,
        /*[in]*/ float M32,
        /*[in]*/ float M33,
        /*[in]*/ float M34,
        /*[in]*/ float M41,
        /*[in]*/ float M42,
        /*[in]*/ float M43,
        /*[in]*/ float M44,
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAffineTransform (
        /*[in]*/ SAFEARRAY * * Matrix,
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRectangles (
        /*[in]*/ SAFEARRAY * * Corner0,
        /*[in]*/ SAFEARRAY * * Corner1,
        /*[in]*/ SAFEARRAY * * Corner2,
        /*[in]*/ SAFEARRAY * * Corner3,
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
};

enum AgEStkGraphicsMaintainAspectRatio
{
    eStkGraphicsMaintainAspectRatioNone = 0,
    eStkGraphicsMaintainAspectRatioWidth = 1,
    eStkGraphicsMaintainAspectRatioHeight = 2
};

struct __declspec(uuid("4d09eb77-14cf-40a7-b7bb-130f4ddd60c6"))
IAgStkGraphicsTextureScreenOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetMaintainAspectRatio,put=PutMaintainAspectRatio))
    enum AgEStkGraphicsMaintainAspectRatio MaintainAspectRatio;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    enum AgEStkGraphicsMaintainAspectRatio GetMaintainAspectRatio ( );
    void PutMaintainAspectRatio (
        enum AgEStkGraphicsMaintainAspectRatio pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaintainAspectRatio (
        /*[out,retval]*/ enum AgEStkGraphicsMaintainAspectRatio * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaintainAspectRatio (
        /*[in]*/ enum AgEStkGraphicsMaintainAspectRatio pRetVal ) = 0;
};

struct __declspec(uuid("d68b862b-50c5-4803-9a98-d404c0aa967a"))
IAgStkGraphicsTextureScreenOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextureScreenOverlayPtr Initialize ( );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithXYWidthHeight (
        double XPixels,
        double YPixels,
        double WidthPixels,
        double HeightPixels );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithPositionSize (
        SAFEARRAY * * Position,
        SAFEARRAY * * Size );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithXYTexture (
        double XPixels,
        double YPixels,
        struct IAgStkGraphicsRendererTexture2D * Texture );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithPositionTexture (
        SAFEARRAY * * Position,
        struct IAgStkGraphicsRendererTexture2D * Texture );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithXYWidthHeight (
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ double WidthPixels,
        /*[in]*/ double HeightPixels,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPositionSize (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithXYTexture (
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * Texture,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPositionTexture (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * Texture,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0"))
IAgStkGraphicsTimeIntervalDisplayCondition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumTime,put=PutMinimumTime))
    STKUtil::IAgDatePtr MinimumTime;
    __declspec(property(get=GetMaximumTime,put=PutMaximumTime))
    STKUtil::IAgDatePtr MaximumTime;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDatePtr GetMinimumTime ( );
    void PutMinimumTime (
        struct STKUtil::IAgDate * ppRetVal );
    STKUtil::IAgDatePtr GetMaximumTime ( );
    void PutMaximumTime (
        struct STKUtil::IAgDate * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
};

struct __declspec(uuid("99ca1422-3ae0-4620-9046-d0bc4ca2bee5"))
IAgStkGraphicsTimeIntervalDisplayConditionFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTimeIntervalDisplayConditionPtr Initialize ( );
    IAgStkGraphicsTimeIntervalDisplayConditionPtr InitializeWithTimes (
        struct STKUtil::IAgDate * MinimumTime,
        struct STKUtil::IAgDate * MaximumTime );
    IAgStkGraphicsTimeIntervalDisplayConditionPtr InitializeWithTimeInterval (
        SAFEARRAY * * TimeInterval );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTimes (
        /*[in]*/ struct STKUtil::IAgDate * MinimumTime,
        /*[in]*/ struct STKUtil::IAgDate * MaximumTime,
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTimeInterval (
        /*[in]*/ SAFEARRAY * * TimeInterval,
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayCondition * * ppRetVal ) = 0;
};

enum AgEStkGraphicsCullFace
{
    eStkGraphicsECullFaceFront = 0,
    eStkGraphicsECullFaceBack = 1,
    eStkGraphicsECullFaceFrontAndBack = 2,
    eStkGraphicsECullFaceNeither = 3
};

enum AgEStkGraphicsRendererShadeModel
{
    eStkGraphicsRendererShadeModelFlat = 0,
    eStkGraphicsRendererShadeModelGouraud = 1
};

struct __declspec(uuid("881b260c-4a26-4fb7-9fec-779b3c540a94"))
IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetTextureCoordinates (
        SAFEARRAY * * TextureCoordinates );
    HRESULT SetPerVertexColors (
        SAFEARRAY * * Colors );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetTextureCoordinates (
        /*[in]*/ SAFEARRAY * * TextureCoordinates ) = 0;
      virtual HRESULT __stdcall raw_SetPerVertexColors (
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
};

struct __declspec(uuid("9dece859-d370-4674-8ffa-8caa98e60632"))
IAgStkGraphicsTriangulatorResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetNormals))
    SAFEARRAY * Normals;
    __declspec(property(get=GetIndices))
    SAFEARRAY * Indices;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetNormals ( );
    SAFEARRAY * GetIndices ( );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Normals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Indices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
};

struct __declspec(uuid("b878e10c-0fc9-446e-88ba-1e1088970150"))
IAgStkGraphicsTriangleMeshPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWireframe,put=PutWireframe))
    VARIANT_BOOL Wireframe;
    __declspec(property(get=GetRenderBackThenFrontFaces,put=PutRenderBackThenFrontFaces))
    VARIANT_BOOL RenderBackThenFrontFaces;
    __declspec(property(get=GetLighting,put=PutLighting))
    VARIANT_BOOL Lighting;
    __declspec(property(get=GetTriangleWindingOrder,put=PutTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetCullFace,put=PutCullFace))
    enum AgEStkGraphicsCullFace CullFace;
    __declspec(property(get=GetShadeModel,put=PutShadeModel))
    enum AgEStkGraphicsRendererShadeModel ShadeModel;
    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWireframe ( );
    void PutWireframe (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRenderBackThenFrontFaces ( );
    void PutRenderBackThenFrontFaces (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetLighting ( );
    void PutLighting (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    void PutTriangleWindingOrder (
        enum AgEStkGraphicsWindingOrder pRetVal );
    enum AgEStkGraphicsCullFace GetCullFace ( );
    void PutCullFace (
        enum AgEStkGraphicsCullFace pRetVal );
    enum AgEStkGraphicsRendererShadeModel GetShadeModel ( );
    void PutShadeModel (
        enum AgEStkGraphicsRendererShadeModel pRetVal );
    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    HRESULT Set (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Normals,
        SAFEARRAY * * Indices );
    HRESULT SetWithOptionalParameters (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Normals,
        SAFEARRAY * * Indices,
        struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetTriangulator (
        struct IAgStkGraphicsTriangulatorResult * Triangulator );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wireframe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wireframe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderBackThenFrontFaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RenderBackThenFrontFaces (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Lighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TriangleWindingOrder (
        /*[in]*/ enum AgEStkGraphicsWindingOrder pRetVal ) = 0;
      virtual HRESULT __stdcall get_CullFace (
        /*[out,retval]*/ enum AgEStkGraphicsCullFace * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CullFace (
        /*[in]*/ enum AgEStkGraphicsCullFace pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadeModel (
        /*[out,retval]*/ enum AgEStkGraphicsRendererShadeModel * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadeModel (
        /*[in]*/ enum AgEStkGraphicsRendererShadeModel pRetVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Normals,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Normals,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetTriangulator (
        /*[in]*/ struct IAgStkGraphicsTriangulatorResult * Triangulator ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38"))
IAgStkGraphicsTriangleMeshPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTriangleMeshPrimitivePtr Initialize ( );
    IAgStkGraphicsTriangleMeshPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("dab0d95c-d51e-4152-9f63-01441ca43ad9"))
IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * * ppRetVal ) = 0;
};

struct __declspec(uuid("7d847a28-dfe3-4f2c-923b-683f0250c491"))
IAgStkGraphicsTextOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetFont,put=PutFont))
    IAgStkGraphicsGraphicsFontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    IAgStkGraphicsGraphicsFontPtr GetFont ( );
    void PutFont (
        struct IAgStkGraphicsGraphicsFont * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * ppRetVal ) = 0;
};

enum AgEStkGraphicsScreenOverlayUnit
{
    eStkGraphicsScreenOverlayUnitPixels = 0,
    eStkGraphicsScreenOverlayUnitFraction = 1
};

struct __declspec(uuid("183a48a5-a123-493a-9e6e-688775a7ca79"))
IAgStkGraphicsTextOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextOverlayPtr Initialize (
        struct IAgStkGraphicsGraphicsFont * Font );
    IAgStkGraphicsTextOverlayPtr InitializeWithXYWidthHeight (
        struct IAgStkGraphicsGraphicsFont * Font,
        double XPixels,
        double YPixels,
        double WidthPixels,
        double HeightPixels );
    IAgStkGraphicsTextOverlayPtr InitializeWithPositionSize (
        struct IAgStkGraphicsGraphicsFont * Font,
        SAFEARRAY * * Position,
        SAFEARRAY * * Size );
    IAgStkGraphicsTextOverlayPtr InitializeWithWidthHeightUnits (
        struct IAgStkGraphicsGraphicsFont * Font,
        double Width,
        enum AgEStkGraphicsScreenOverlayUnit WidthUnit,
        double Height,
        enum AgEStkGraphicsScreenOverlayUnit HeightUnit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithXYWidthHeight (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ double WidthPixels,
        /*[in]*/ double HeightPixels,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPositionSize (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithWidthHeightUnits (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ double Width,
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit WidthUnit,
        /*[in]*/ double Height,
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit HeightUnit,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("59ef8436-aeec-4e60-8e3d-920e0f11feba"))
IAgStkGraphicsAGICustomTerrainOverlay : IUnknown
{};

struct __declspec(uuid("1af28259-1c26-45f4-8156-079012d5bce3"))
IAgStkGraphicsAGICustomTerrainOverlayFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGICustomTerrainOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGICustomTerrainOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("8892fb91-4aa2-4663-9307-68a737163045"))
IAgStkGraphicsAxesPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLighting,put=PutLighting))
    VARIANT_BOOL Lighting;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetDisplayLabel,put=PutDisplayLabel))
    VARIANT_BOOL DisplayLabel;
    __declspec(property(get=GetDisplayTrace,put=PutDisplayTrace))
    VARIANT_BOOL DisplayTrace;
    __declspec(property(get=GetDisplaySweep,put=PutDisplaySweep))
    VARIANT_BOOL DisplaySweep;
    __declspec(property(get=GetDisplayLines,put=PutDisplayLines))
    VARIANT_BOOL DisplayLines;
    __declspec(property(get=GetPersistenceWidth,put=PutPersistenceWidth))
    double PersistenceWidth;
    __declspec(property(get=GetFadePersistence,put=PutFadePersistence))
    VARIANT_BOOL FadePersistence;
    __declspec(property(get=GetPersistenceDuration,put=PutPersistenceDuration))
    double PersistenceDuration;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLighting ( );
    void PutLighting (
        VARIANT_BOOL pRetVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pRetVal );
    VARIANT_BOOL GetDisplayLabel ( );
    void PutDisplayLabel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayTrace ( );
    void PutDisplayTrace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplaySweep ( );
    void PutDisplaySweep (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayLines ( );
    void PutDisplayLines (
        VARIANT_BOOL pRetVal );
    double GetPersistenceWidth ( );
    void PutPersistenceWidth (
        double pRetVal );
    VARIANT_BOOL GetFadePersistence ( );
    void PutFadePersistence (
        VARIANT_BOOL pRetVal );
    double GetPersistenceDuration ( );
    void PutPersistenceDuration (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Lighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLabel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTrace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayTrace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplaySweep (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplaySweep (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FadePersistence (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FadePersistence (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceDuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ff0a767c-8a84-47f9-a108-32cc0bff8366"))
IAgStkGraphicsAxesPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAxesPrimitivePtr InitializeWithDirection (
        struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct IAgStkGraphicsGraphicsFont * Font );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsAxesPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("8244e37a-140a-40a8-9554-37dc0be9bd1b"))
IAgStkGraphicsVectorPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLighting,put=PutLighting))
    VARIANT_BOOL Lighting;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetDisplayLabel,put=PutDisplayLabel))
    VARIANT_BOOL DisplayLabel;
    __declspec(property(get=GetDisplayMagnitude,put=PutDisplayMagnitude))
    VARIANT_BOOL DisplayMagnitude;
    __declspec(property(get=GetDisplayRADec,put=PutDisplayRADec))
    VARIANT_BOOL DisplayRADec;
    __declspec(property(get=GetDisplayTrace,put=PutDisplayTrace))
    VARIANT_BOOL DisplayTrace;
    __declspec(property(get=GetDisplaySweep,put=PutDisplaySweep))
    VARIANT_BOOL DisplaySweep;
    __declspec(property(get=GetDisplayLines,put=PutDisplayLines))
    VARIANT_BOOL DisplayLines;
    __declspec(property(get=GetPersistenceWidth,put=PutPersistenceWidth))
    double PersistenceWidth;
    __declspec(property(get=GetFadePersistence,put=PutFadePersistence))
    VARIANT_BOOL FadePersistence;
    __declspec(property(get=GetPersistenceDuration,put=PutPersistenceDuration))
    double PersistenceDuration;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTrueScale,put=PutTrueScale))
    VARIANT_BOOL TrueScale;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLighting ( );
    void PutLighting (
        VARIANT_BOOL pRetVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pRetVal );
    VARIANT_BOOL GetDisplayLabel ( );
    void PutDisplayLabel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayMagnitude ( );
    void PutDisplayMagnitude (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayRADec ( );
    void PutDisplayRADec (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayTrace ( );
    void PutDisplayTrace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplaySweep ( );
    void PutDisplaySweep (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayLines ( );
    void PutDisplayLines (
        VARIANT_BOOL pRetVal );
    double GetPersistenceWidth ( );
    void PutPersistenceWidth (
        double pRetVal );
    VARIANT_BOOL GetFadePersistence ( );
    void PutFadePersistence (
        VARIANT_BOOL pRetVal );
    double GetPersistenceDuration ( );
    void PutPersistenceDuration (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    VARIANT_BOOL GetTrueScale ( );
    void PutTrueScale (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Lighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLabel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMagnitude (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMagnitude (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayRADec (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayRADec (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTrace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayTrace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplaySweep (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplaySweep (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FadePersistence (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FadePersistence (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceDuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrueScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TrueScale (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("a7013a6a-64ea-43b6-807f-4f789df05438"))
IAgStkGraphicsVectorPrimitiveFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsVectorPrimitivePtr InitializeWithDirection (
        struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        struct AgSTKVgtLib::IAgCrdnVector * Dir,
        struct IAgStkGraphicsGraphicsFont * Font );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Dir,
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsVectorPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("6388e15b-611e-454d-bbac-81d864672d2c"))
_IAgStkGraphicsExtrudedPolylineTriangulatorResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTopBoundaryPositions))
    SAFEARRAY * TopBoundaryPositions;
    __declspec(property(get=GetBottomBoundaryPositions))
    SAFEARRAY * BottomBoundaryPositions;
    __declspec(property(get=GetBoundaryPositionsWindingOrder))
    enum AgEStkGraphicsWindingOrder BoundaryPositionsWindingOrder;
    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetNormals))
    SAFEARRAY * Normals;
    __declspec(property(get=GetIndices))
    SAFEARRAY * Indices;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetNormals ( );
    SAFEARRAY * GetIndices ( );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    SAFEARRAY * GetTopBoundaryPositions ( );
    SAFEARRAY * GetBottomBoundaryPositions ( );
    enum AgEStkGraphicsWindingOrder GetBoundaryPositionsWindingOrder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Normals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Indices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TopBoundaryPositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BottomBoundaryPositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPositionsWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
};

struct __declspec(uuid("309394d2-2c69-4c34-bc54-b7ca1d878a90"))
_IAgStkGraphicsSolidTriangulatorResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOutlineIndices))
    SAFEARRAY * OutlineIndices;
    __declspec(property(get=GetOutlinePositions))
    SAFEARRAY * OutlinePositions;
    __declspec(property(get=GetOutlinePolylineType))
    enum AgEStkGraphicsPolylineType OutlinePolylineType;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetNormals))
    SAFEARRAY * Normals;
    __declspec(property(get=GetIndices))
    SAFEARRAY * Indices;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetNormals ( );
    SAFEARRAY * GetIndices ( );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    SAFEARRAY * GetOutlineIndices ( );
    SAFEARRAY * GetOutlinePositions ( );
    enum AgEStkGraphicsPolylineType GetOutlinePolylineType ( );
    VARIANT_BOOL GetClosed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Normals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Indices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineIndices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlinePositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlinePolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("7ccb711d-7efa-4ae7-978a-3b6f97f49e0e"))
_IAgStkGraphicsSurfaceShapesResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetPositionsWindingOrder))
    enum AgEStkGraphicsWindingOrder PositionsWindingOrder;
    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    enum AgEStkGraphicsWindingOrder GetPositionsWindingOrder ( );
    enum AgEStkGraphicsPolylineType GetPolylineType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionsWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
};

struct __declspec(uuid("56c43c99-21c4-4fe9-91aa-c3b53fb0c42e"))
_IAgStkGraphicsSurfaceTriangulatorResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBoundaryPositions))
    SAFEARRAY * BoundaryPositions;
    __declspec(property(get=GetBoundaryPositionsWindingOrder))
    enum AgEStkGraphicsWindingOrder BoundaryPositionsWindingOrder;
    __declspec(property(get=GetBoundaryPolylineType))
    enum AgEStkGraphicsPolylineType BoundaryPolylineType;
    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetNormals))
    SAFEARRAY * Normals;
    __declspec(property(get=GetIndices))
    SAFEARRAY * Indices;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetGranularity))
    double Granularity;
    __declspec(property(get=GetBoundaryIndices))
    SAFEARRAY * BoundaryIndices;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetNormals ( );
    SAFEARRAY * GetIndices ( );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    double GetGranularity ( );
    SAFEARRAY * GetBoundaryIndices ( );
    SAFEARRAY * GetBoundaryPositions ( );
    enum AgEStkGraphicsWindingOrder GetBoundaryPositionsWindingOrder ( );
    enum AgEStkGraphicsPolylineType GetBoundaryPolylineType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Normals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Indices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryIndices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPositions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPositionsWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryPolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
};

struct __declspec(uuid("fecd020a-354f-4325-bdf4-6024f322d98d"))
_IAgStkGraphicsTriangulatorResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositions))
    SAFEARRAY * Positions;
    __declspec(property(get=GetNormals))
    SAFEARRAY * Normals;
    __declspec(property(get=GetIndices))
    SAFEARRAY * Indices;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPositions ( );
    SAFEARRAY * GetNormals ( );
    SAFEARRAY * GetIndices ( );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Normals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Indices (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
};

struct __declspec(uuid("e59dfd9d-fd0f-40e8-bd38-bc4ebda8a548"))
_IAgStkGraphicsAGICustomTerrainOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetAltitudeOffset,put=PutAltitudeOffset))
    double AltitudeOffset;
    __declspec(property(get=GetAltitudeScale,put=PutAltitudeScale))
    double AltitudeScale;
    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;

    //
    // Wrapper methods for error-handling
    //

    double GetAltitudeOffset ( );
    void PutAltitudeOffset (
        double pRetVal );
    double GetAltitudeScale ( );
    void PutAltitudeScale (
        double pRetVal );
    VARIANT_BOOL GetSupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltitudeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
};

struct __declspec(uuid("ceb79e66-6c40-4e67-9e93-288fc1b32d9c"))
_IAgStkGraphicsAGIProcessedImageGlobeOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
};

struct __declspec(uuid("d5cb8980-19f7-4ad5-8ee3-83bdd581169c"))
_IAgStkGraphicsAGIProcessedTerrainOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetAltitudeOffset,put=PutAltitudeOffset))
    double AltitudeOffset;
    __declspec(property(get=GetAltitudeScale,put=PutAltitudeScale))
    double AltitudeScale;
    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;

    //
    // Wrapper methods for error-handling
    //

    double GetAltitudeOffset ( );
    void PutAltitudeOffset (
        double pRetVal );
    double GetAltitudeScale ( );
    void PutAltitudeScale (
        double pRetVal );
    VARIANT_BOOL GetSupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltitudeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
};

struct __declspec(uuid("195bcaf0-ee08-4d29-b918-04540dd96c9d"))
_IAgStkGraphicsAGIRoamImageGlobeOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
};

struct __declspec(uuid("69a47a1a-a6f6-47f5-901b-13aca5817e50"))
_IAgStkGraphicsCameraSnapshot : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SaveToFile (
        _bstr_t Filename,
        enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat );
    HRESULT SaveToFileWithWidthAndDPI (
        _bstr_t Filename,
        enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat,
        double WidthInInches,
        double DotsPerInch );
    HRESULT SaveToClipboard ( );
    IAgStkGraphicsRasterPtr SaveToRaster ( );
    IAgStkGraphicsRendererTexture2DPtr SaveToTexture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat ) = 0;
      virtual HRESULT __stdcall raw_SaveToFileWithWidthAndDPI (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat,
        /*[in]*/ double WidthInInches,
        /*[in]*/ double DotsPerInch ) = 0;
      virtual HRESULT __stdcall raw_SaveToClipboard ( ) = 0;
      virtual HRESULT __stdcall raw_SaveToRaster (
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveToTexture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("d04b52eb-cdaa-40b1-8b0e-fd9743dc9296"))
_IAgStkGraphicsCameraVideoRecording : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRecording))
    VARIANT_BOOL IsRecording;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsRecording ( );
    HRESULT StartRecording (
        _bstr_t WmvFilename,
        int VideoBitRate,
        int VideoFrameRate );
    HRESULT StartRecordingFrameStack (
        _bstr_t FileDirectory,
        _bstr_t FilePrefix,
        enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFileFormat,
        int StartingFrameNumber,
        int NumberOfFrameDigits );
    HRESULT StopRecording ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsRecording (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartRecording (
        /*[in]*/ BSTR WmvFilename,
        /*[in]*/ int VideoBitRate,
        /*[in]*/ int VideoFrameRate ) = 0;
      virtual HRESULT __stdcall raw_StartRecordingFrameStack (
        /*[in]*/ BSTR FileDirectory,
        /*[in]*/ BSTR FilePrefix,
        /*[in]*/ enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFileFormat,
        /*[in]*/ int StartingFrameNumber,
        /*[in]*/ int NumberOfFrameDigits ) = 0;
      virtual HRESULT __stdcall raw_StopRecording ( ) = 0;
};

struct __declspec(uuid("78acb4cb-51a1-40b7-9ab6-378ae46ca9d1"))
_IAgStkGraphicsCentralBodyGraphicsIndexer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsCentralBodyGraphicsPtr Item[];
    __declspec(property(get=GetEarth))
    IAgStkGraphicsCentralBodyGraphicsPtr Earth;
    __declspec(property(get=GetMoon))
    IAgStkGraphicsCentralBodyGraphicsPtr Moon;
    __declspec(property(get=GetSun))
    IAgStkGraphicsCentralBodyGraphicsPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCentralBodyGraphicsPtr GetEarth ( );
    IAgStkGraphicsCentralBodyGraphicsPtr GetMoon ( );
    IAgStkGraphicsCentralBodyGraphicsPtr GetSun ( );
    IAgStkGraphicsCentralBodyGraphicsPtr GetItem (
        _bstr_t CentralBody );
    IAgStkGraphicsCentralBodyGraphicsPtr GetByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Moon (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphics * * ppRetVal ) = 0;
};

struct __declspec(uuid("fd129a46-f352-4e7f-9b66-147c6b4ab24a"))
_IAgStkGraphicsCustomImageGlobeOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetIsTranslucent))
    VARIANT_BOOL IsTranslucent;
    __declspec(property(get=GetMaximumMetersPerPixel))
    double MaximumMetersPerPixel;
    __declspec(property(get=GetProjection))
    enum AgEStkGraphicsMapProjection Projection;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetIsTranslucent ( );
    double GetMaximumMetersPerPixel ( );
    enum AgEStkGraphicsMapProjection GetProjection ( );
    HRESULT StartUp (
        struct IAgStkGraphicsScene * Scene );
    HRESULT ShutDown (
        struct IAgStkGraphicsScene * Scene );
    HRESULT ClearCache ( );
    HRESULT Reload ( );
    VARIANT_BOOL Read (
        SAFEARRAY * * Extent,
        const _variant_t & UserTileData,
        IPictureDisp * Image );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsTranslucent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumMetersPerPixel (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ enum AgEStkGraphicsMapProjection * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartUp (
        /*[in]*/ struct IAgStkGraphicsScene * Scene ) = 0;
      virtual HRESULT __stdcall raw_ShutDown (
        /*[in]*/ struct IAgStkGraphicsScene * Scene ) = 0;
      virtual HRESULT __stdcall raw_ClearCache ( ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_Read (
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ VARIANT UserTileData,
        /*[in]*/ IPictureDisp * Image,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("79cba3b6-ddb6-4085-bc1f-4d0ffdbc7749"))
_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCustomImageGlobeOverlayPluginProxyPtr CreateFromDisplayName (
        _bstr_t DisplayName );
    SAFEARRAY * GetAvailableDisplayNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFromDisplayName (
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlayPluginProxy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("981cb1ad-9d4d-4803-bb54-3ac7a5ec31cc"))
_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCustomImageGlobeOverlay))
    IAgStkGraphicsCustomImageGlobeOverlayPtr CustomImageGlobeOverlay;
    __declspec(property(get=GetIsCustomImageGlobeOverlaySupported))
    VARIANT_BOOL IsCustomImageGlobeOverlaySupported;
    __declspec(property(get=GetRealPluginObject))
    IUnknownPtr RealPluginObject;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCustomImageGlobeOverlayPtr GetCustomImageGlobeOverlay ( );
    VARIANT_BOOL GetIsCustomImageGlobeOverlaySupported ( );
    IUnknownPtr GetRealPluginObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CustomImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCustomImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RealPluginObject (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("4d5b1b96-4b4a-4edc-96e2-043a0e152488"))
_IAgStkGraphicsGeospatialImageGlobeOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetUseTransparentColor,put=PutUseTransparentColor))
    VARIANT_BOOL UseTransparentColor;
    __declspec(property(get=GetTransparentColor,put=PutTransparentColor))
    OLE_COLOR TransparentColor;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetUseTransparentColor ( );
    void PutUseTransparentColor (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetTransparentColor ( );
    void PutTransparentColor (
        OLE_COLOR pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseTransparentColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparentColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
};

struct __declspec(uuid("d74695a1-b80b-446a-b7fc-cc6e30d9a2aa"))
_IAgStkGraphicsGlobeOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
};

struct __declspec(uuid("caf967d8-67dd-45f2-81c3-82f7810d3422"))
_IAgStkGraphicsGlobeOverlaySettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainCacheSize,put=PutTerrainCacheSize))
    int TerrainCacheSize;
    __declspec(property(get=GetImageryCacheSize,put=PutImageryCacheSize))
    int ImageryCacheSize;
    __declspec(property(get=GetPreloadTerrainAndImagery,put=PutPreloadTerrainAndImagery))
    VARIANT_BOOL PreloadTerrainAndImagery;
    __declspec(property(get=GetUsePerPixelLighting,put=PutUsePerPixelLighting))
    VARIANT_BOOL UsePerPixelLighting;

    //
    // Wrapper methods for error-handling
    //

    int GetTerrainCacheSize ( );
    void PutTerrainCacheSize (
        int pRetVal );
    int GetImageryCacheSize ( );
    void PutImageryCacheSize (
        int pRetVal );
    VARIANT_BOOL GetUsePerPixelLighting ( );
    void PutUsePerPixelLighting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetPreloadTerrainAndImagery ( );
    void PutPreloadTerrainAndImagery (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainCacheSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TerrainCacheSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageryCacheSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageryCacheSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePerPixelLighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePerPixelLighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PreloadTerrainAndImagery (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PreloadTerrainAndImagery (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("14443d95-fe9e-47b8-9b2c-aa87e03ad080"))
_IAgStkGraphicsLighting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetAmbientIntensity,put=PutAmbientIntensity))
    float AmbientIntensity;
    __declspec(property(get=GetDiffuseIntensity,put=PutDiffuseIntensity))
    float DiffuseIntensity;
    __declspec(property(get=GetNightLightsIntensity,put=PutNightLightsIntensity))
    float NightLightsIntensity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pRetVal );
    float GetAmbientIntensity ( );
    void PutAmbientIntensity (
        float pRetVal );
    float GetDiffuseIntensity ( );
    void PutDiffuseIntensity (
        float pRetVal );
    float GetNightLightsIntensity ( );
    void PutNightLightsIntensity (
        float pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AmbientIntensity (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AmbientIntensity (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffuseIntensity (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffuseIntensity (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_NightLightsIntensity (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NightLightsIntensity (
        /*[in]*/ float pRetVal ) = 0;
};

struct __declspec(uuid("76f6a184-95ea-4d75-96f4-96226c981fd9"))
_IAgStkGraphicsProjectedRasterOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetRaster,put=PutRaster))
    IAgStkGraphicsRasterPtr Raster;
    __declspec(property(get=GetProjection,put=PutProjection))
    IAgStkGraphicsProjectionPtr Projection;
    __declspec(property(get=GetShowShadows,put=PutShowShadows))
    VARIANT_BOOL ShowShadows;
    __declspec(property(get=GetShowFrustum,put=PutShowFrustum))
    VARIANT_BOOL ShowFrustum;
    __declspec(property(get=GetShowFarPlane,put=PutShowFarPlane))
    VARIANT_BOOL ShowFarPlane;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFrustumColor,put=PutFrustumColor))
    OLE_COLOR FrustumColor;
    __declspec(property(get=GetFarPlaneColor,put=PutFarPlaneColor))
    OLE_COLOR FarPlaneColor;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    float BorderWidth;
    __declspec(property(get=GetFrustumTranslucency,put=PutFrustumTranslucency))
    float FrustumTranslucency;
    __declspec(property(get=GetFarPlaneTranslucency,put=PutFarPlaneTranslucency))
    float FarPlaneTranslucency;
    __declspec(property(get=GetShadowTranslucency,put=PutShadowTranslucency))
    float ShadowTranslucency;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetUseTransparentColor,put=PutUseTransparentColor))
    VARIANT_BOOL UseTransparentColor;
    __declspec(property(get=GetTransparentColor,put=PutTransparentColor))
    OLE_COLOR TransparentColor;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetDirections))
    SAFEARRAY * Directions;
    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    IAgStkGraphicsRasterPtr GetRaster ( );
    void PutRaster (
        struct IAgStkGraphicsRaster * ppRetVal );
    IAgStkGraphicsProjectionPtr GetProjection ( );
    void PutProjection (
        struct IAgStkGraphicsProjection * ppRetVal );
    VARIANT_BOOL GetShowShadows ( );
    void PutShowShadows (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowFrustum ( );
    void PutShowFrustum (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowFarPlane ( );
    void PutShowFarPlane (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetFrustumColor ( );
    void PutFrustumColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetFarPlaneColor ( );
    void PutFarPlaneColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    float GetBorderWidth ( );
    void PutBorderWidth (
        float pRetVal );
    float GetFrustumTranslucency ( );
    void PutFrustumTranslucency (
        float pRetVal );
    float GetFarPlaneTranslucency ( );
    void PutFarPlaneTranslucency (
        float pRetVal );
    float GetShadowTranslucency ( );
    void PutShadowTranslucency (
        float pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseTransparentColor ( );
    void PutUseTransparentColor (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetTransparentColor ( );
    void PutTransparentColor (
        OLE_COLOR pRetVal );
    SAFEARRAY * GetDirections ( );
    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Raster (
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Raster (
        /*[in]*/ struct IAgStkGraphicsRaster * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Projection (
        /*[in]*/ struct IAgStkGraphicsProjection * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowShadows (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowShadows (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowFrustum (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowFrustum (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowFarPlane (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowFarPlane (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrustumColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrustumColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlaneColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlaneColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrustumTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrustumTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlaneTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlaneTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadowTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadowTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseTransparentColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparentColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Directions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("1db916e6-d9bd-4afd-a023-03929556c73c"))
_IAgStkGraphicsProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetFieldOfViewHorizontal,put=PutFieldOfViewHorizontal))
    double FieldOfViewHorizontal;
    __declspec(property(get=GetFieldOfViewVertical,put=PutFieldOfViewVertical))
    double FieldOfViewVertical;
    __declspec(property(get=GetNearPlane,put=PutNearPlane))
    double NearPlane;
    __declspec(property(get=GetFarPlane,put=PutFarPlane))
    double FarPlane;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    void PutOrientation (
        struct STKUtil::IAgOrientation * ppRetVal );
    double GetFieldOfViewHorizontal ( );
    void PutFieldOfViewHorizontal (
        double pRetVal );
    double GetFieldOfViewVertical ( );
    void PutFieldOfViewVertical (
        double pRetVal );
    double GetNearPlane ( );
    void PutNearPlane (
        double pRetVal );
    double GetFarPlane ( );
    void PutFarPlane (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfViewHorizontal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfViewHorizontal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfViewVertical (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfViewVertical (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NearPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlane (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ae0209d3-2af4-4881-a4a5-2d53eb3ac4d1"))
_IAgStkGraphicsProjectionStream : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdateDelta,put=PutUpdateDelta))
    double UpdateDelta;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetFieldOfViewHorizontal,put=PutFieldOfViewHorizontal))
    double FieldOfViewHorizontal;
    __declspec(property(get=GetFieldOfViewVertical,put=PutFieldOfViewVertical))
    double FieldOfViewVertical;
    __declspec(property(get=GetNearPlane,put=PutNearPlane))
    double NearPlane;
    __declspec(property(get=GetFarPlane,put=PutFarPlane))
    double FarPlane;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    void PutOrientation (
        struct STKUtil::IAgOrientation * ppRetVal );
    double GetFieldOfViewHorizontal ( );
    void PutFieldOfViewHorizontal (
        double pRetVal );
    double GetFieldOfViewVertical ( );
    void PutFieldOfViewVertical (
        double pRetVal );
    double GetNearPlane ( );
    void PutNearPlane (
        double pRetVal );
    double GetFarPlane ( );
    void PutFarPlane (
        double pRetVal );
    double GetUpdateDelta ( );
    void PutUpdateDelta (
        double pRetVal );
    VARIANT_BOOL Update (
        struct STKUtil::IAgDate * Time,
        struct STKUtil::IAgDate * NextTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfViewHorizontal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfViewHorizontal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfViewVertical (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfViewVertical (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NearPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UpdateDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct STKUtil::IAgDate * Time,
        /*[in]*/ struct STKUtil::IAgDate * NextTime,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("57cb8d32-6c6b-4999-9931-f47cf489ba60"))
_IAgStkGraphicsSceneGlobeOverlaySettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAntiAliasImagery,put=PutAntiAliasImagery))
    VARIANT_BOOL AntiAliasImagery;
    __declspec(property(get=GetTerrainMeshPixelError,put=PutTerrainMeshPixelError))
    double TerrainMeshPixelError;
    __declspec(property(get=GetImageryPixelError,put=PutImageryPixelError))
    double ImageryPixelError;
    __declspec(property(get=GetProjectedRasterModelProjection,put=PutProjectedRasterModelProjection))
    VARIANT_BOOL ProjectedRasterModelProjection;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAntiAliasImagery ( );
    void PutAntiAliasImagery (
        VARIANT_BOOL pRetVal );
    double GetTerrainMeshPixelError ( );
    void PutTerrainMeshPixelError (
        double pRetVal );
    double GetImageryPixelError ( );
    void PutImageryPixelError (
        double pRetVal );
    VARIANT_BOOL GetProjectedRasterModelProjection ( );
    void PutProjectedRasterModelProjection (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AntiAliasImagery (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AntiAliasImagery (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TerrainMeshPixelError (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TerrainMeshPixelError (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageryPixelError (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageryPixelError (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectedRasterModelProjection (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProjectedRasterModelProjection (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("49ea6365-0b8d-4fc5-ad52-c1d16ac7568d"))
IAgStkGraphicsScreenOverlayCollectionBase : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScreenOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsScreenOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsScreenOverlay * Item );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsScreenOverlay * Item );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsScreenOverlay * Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item ) = 0;
};

struct __declspec(uuid("6ce24480-d3bf-43b6-bccf-bb66cb99e9d5"))
_IAgStkGraphicsScreenOverlayCollectionBase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScreenOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsScreenOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsScreenOverlay * Item );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsScreenOverlay * Item );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsScreenOverlay * Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item ) = 0;
};

struct __declspec(uuid("2e7c8f73-1b1c-4387-8968-a016c2d61223"))
_IAgStkGraphicsTexture2DFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRendererTexture2DPtr LoadFromStringUri (
        _bstr_t Uri );
    IAgStkGraphicsRendererTexture2DPtr FromRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadFromStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
};

struct __declspec(uuid("9f32d169-ed79-4f50-8b9a-7fe23565563a"))
_IAgStkGraphicsAltitudeDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumAltitude,put=PutMinimumAltitude))
    double MinimumAltitude;
    __declspec(property(get=GetMaximumAltitude,put=PutMaximumAltitude))
    double MaximumAltitude;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumAltitude ( );
    void PutMinimumAltitude (
        double pRetVal );
    double GetMaximumAltitude ( );
    void PutMaximumAltitude (
        double pRetVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("846e3d58-4172-434c-93de-cfc47e155990"))
_IAgStkGraphicsAxesPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetLighting,put=PutLighting))
    VARIANT_BOOL Lighting;
    __declspec(property(get=GetDisplayTrace,put=PutDisplayTrace))
    VARIANT_BOOL DisplayTrace;
    __declspec(property(get=GetDisplaySweep,put=PutDisplaySweep))
    VARIANT_BOOL DisplaySweep;
    __declspec(property(get=GetDisplayLines,put=PutDisplayLines))
    VARIANT_BOOL DisplayLines;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetDisplayLabel,put=PutDisplayLabel))
    VARIANT_BOOL DisplayLabel;
    __declspec(property(get=GetPersistenceWidth,put=PutPersistenceWidth))
    double PersistenceWidth;
    __declspec(property(get=GetFadePersistence,put=PutFadePersistence))
    VARIANT_BOOL FadePersistence;
    __declspec(property(get=GetPersistenceDuration,put=PutPersistenceDuration))
    double PersistenceDuration;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetLighting ( );
    void PutLighting (
        VARIANT_BOOL pRetVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pRetVal );
    VARIANT_BOOL GetDisplayLabel ( );
    void PutDisplayLabel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayTrace ( );
    void PutDisplayTrace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplaySweep ( );
    void PutDisplaySweep (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayLines ( );
    void PutDisplayLines (
        VARIANT_BOOL pRetVal );
    double GetPersistenceWidth ( );
    void PutPersistenceWidth (
        double pRetVal );
    VARIANT_BOOL GetFadePersistence ( );
    void PutFadePersistence (
        VARIANT_BOOL pRetVal );
    double GetPersistenceDuration ( );
    void PutPersistenceDuration (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Lighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLabel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTrace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayTrace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplaySweep (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplaySweep (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FadePersistence (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FadePersistence (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceDuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("383a0860-9010-4aca-b2bc-b452f4c63030"))
_IAgStkGraphicsCamera : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVerticalFieldOfView))
    double VerticalFieldOfView;
    __declspec(property(get=GetNearPlane,put=PutNearPlane))
    double NearPlane;
    __declspec(property(get=GetFarPlane,put=PutFarPlane))
    double FarPlane;
    __declspec(property(get=GetFarNearPlaneRatio,put=PutFarNearPlaneRatio))
    double FarNearPlaneRatio;
    __declspec(property(get=GetDistancePerRadius))
    double DistancePerRadius;
    __declspec(property(get=GetSnapshot))
    IAgStkGraphicsCameraSnapshotPtr Snapshot;
    __declspec(property(get=GetVideoRecording))
    IAgStkGraphicsCameraVideoRecordingPtr VideoRecording;
    __declspec(property(get=GetPixelSizePerDistance))
    double PixelSizePerDistance;
    __declspec(property(get=GetPositionReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr PositionReferenceFrame;
    __declspec(property(get=GetReferencePointReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferencePointReferenceFrame;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetReferencePoint,put=PutReferencePoint))
    SAFEARRAY * ReferencePoint;
    __declspec(property(get=GetDirection,put=PutDirection))
    SAFEARRAY * Direction;
    __declspec(property(get=GetUpVector,put=PutUpVector))
    SAFEARRAY * UpVector;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetAxes,put=PutAxes))
    AgSTKVgtLib::IAgCrdnAxesPtr Axes;
    __declspec(property(get=GetConstrainedUpAxis,put=PutConstrainedUpAxis))
    enum AgEStkGraphicsConstrainedUpAxis ConstrainedUpAxis;
    __declspec(property(get=GetAllowRotationOverConstrainedUpAxis,put=PutAllowRotationOverConstrainedUpAxis))
    VARIANT_BOOL AllowRotationOverConstrainedUpAxis;
    __declspec(property(get=GetLockViewDirection,put=PutLockViewDirection))
    VARIANT_BOOL LockViewDirection;
    __declspec(property(get=GetFieldOfView,put=PutFieldOfView))
    double FieldOfView;
    __declspec(property(get=GetHorizontalFieldOfView))
    double HorizontalFieldOfView;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetReferencePoint ( );
    void PutReferencePoint (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetDirection ( );
    void PutDirection (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetUpVector ( );
    void PutUpVector (
        SAFEARRAY * ppRetVal );
    double GetDistance ( );
    void PutDistance (
        double pRetVal );
    AgSTKVgtLib::IAgCrdnAxesPtr GetAxes ( );
    void PutAxes (
        struct AgSTKVgtLib::IAgCrdnAxes * ppRetVal );
    enum AgEStkGraphicsConstrainedUpAxis GetConstrainedUpAxis ( );
    void PutConstrainedUpAxis (
        enum AgEStkGraphicsConstrainedUpAxis pRetVal );
    VARIANT_BOOL GetAllowRotationOverConstrainedUpAxis ( );
    void PutAllowRotationOverConstrainedUpAxis (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetLockViewDirection ( );
    void PutLockViewDirection (
        VARIANT_BOOL pRetVal );
    double GetFieldOfView ( );
    void PutFieldOfView (
        double pRetVal );
    double GetHorizontalFieldOfView ( );
    double GetVerticalFieldOfView ( );
    double GetNearPlane ( );
    void PutNearPlane (
        double pRetVal );
    double GetFarPlane ( );
    void PutFarPlane (
        double pRetVal );
    double GetFarNearPlaneRatio ( );
    void PutFarNearPlaneRatio (
        double pRetVal );
    double GetDistancePerRadius ( );
    IAgStkGraphicsCameraSnapshotPtr GetSnapshot ( );
    IAgStkGraphicsCameraVideoRecordingPtr GetVideoRecording ( );
    double GetPixelSizePerDistance ( );
    AgSTKVgtLib::IAgCrdnSystemPtr GetPositionReferenceFrame ( );
    AgSTKVgtLib::IAgCrdnSystemPtr GetReferencePointReferenceFrame ( );
    enum AgEStkGraphicsVisibility VisibilityTest (
        struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        struct IAgStkGraphicsBoundingSphere * Sphere );
    SAFEARRAY * CartographicToWindow (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    SAFEARRAY * TryCartographicToWindow (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    SAFEARRAY * WindowToCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    SAFEARRAY * TryWindowToCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    HRESULT ViewCentralBody (
        _bstr_t CentralBody,
        struct AgSTKVgtLib::IAgCrdnAxes * Axes );
    HRESULT ViewExtent (
        _bstr_t CentralBody,
        SAFEARRAY * * Extent );
    HRESULT ViewRectangularExtent (
        _bstr_t CentralBody,
        double West,
        double South,
        double East,
        double North );
    HRESULT ViewWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        SAFEARRAY * * UpAxis );
    HRESULT View (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint );
    HRESULT ViewDirectionWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnVector * Direction,
        SAFEARRAY * * UpAxis );
    HRESULT ViewDirection (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        struct AgSTKVgtLib::IAgCrdnVector * Direction );
    HRESULT ViewOffsetWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        SAFEARRAY * * Offset,
        SAFEARRAY * * UpAxis );
    HRESULT ViewOffset (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        SAFEARRAY * * Offset );
    HRESULT ViewOffsetDirectionWithUpAxis (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        struct AgSTKVgtLib::IAgCrdnVector * Direction,
        SAFEARRAY * * UpAxis );
    HRESULT ViewOffsetDirection (
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        struct AgSTKVgtLib::IAgCrdnVector * Direction );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferencePoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UpVector (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_UpVector (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedUpAxis (
        /*[out,retval]*/ enum AgEStkGraphicsConstrainedUpAxis * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstrainedUpAxis (
        /*[in]*/ enum AgEStkGraphicsConstrainedUpAxis pRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowRotationOverConstrainedUpAxis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowRotationOverConstrainedUpAxis (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_LockViewDirection (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LockViewDirection (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfView (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalFieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VerticalFieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NearPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarPlane (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarPlane (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarNearPlaneRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FarNearPlaneRatio (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistancePerRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snapshot (
        /*[out,retval]*/ struct IAgStkGraphicsCameraSnapshot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VideoRecording (
        /*[out,retval]*/ struct IAgStkGraphicsCameraVideoRecording * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelSizePerDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePointReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_VisibilityTest (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * Sphere,
        /*[out,retval]*/ enum AgEStkGraphicsVisibility * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CartographicToWindow (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TryCartographicToWindow (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_WindowToCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TryWindowToCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ViewCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes ) = 0;
      virtual HRESULT __stdcall raw_ViewExtent (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Extent ) = 0;
      virtual HRESULT __stdcall raw_ViewRectangularExtent (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double West,
        /*[in]*/ double South,
        /*[in]*/ double East,
        /*[in]*/ double North ) = 0;
      virtual HRESULT __stdcall raw_ViewWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_View (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint ) = 0;
      virtual HRESULT __stdcall raw_ViewDirectionWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_ViewDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction ) = 0;
      virtual HRESULT __stdcall raw_ViewOffsetWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ SAFEARRAY * * Offset,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_ViewOffset (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ SAFEARRAY * * Offset ) = 0;
      virtual HRESULT __stdcall raw_ViewOffsetDirectionWithUpAxis (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction,
        /*[in]*/ SAFEARRAY * * UpAxis ) = 0;
      virtual HRESULT __stdcall raw_ViewOffsetDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Direction ) = 0;
};

struct __declspec(uuid("a352878c-11ef-49b6-87d5-a7a9297d9cf1"))
_IAgStkGraphicsCentralBodyGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetSpecularColor,put=PutSpecularColor))
    OLE_COLOR SpecularColor;
    __declspec(property(get=GetShininess,put=PutShininess))
    double Shininess;
    __declspec(property(get=GetShowImagery,put=PutShowImagery))
    VARIANT_BOOL ShowImagery;
    __declspec(property(get=GetShow,put=PutShow))
    VARIANT_BOOL Show;
    __declspec(property(get=GetShowLabel,put=PutShowLabel))
    VARIANT_BOOL ShowLabel;
    __declspec(property(get=GetAltitudeOffset,put=PutAltitudeOffset))
    double AltitudeOffset;
    __declspec(property(get=GetBaseOverlay,put=PutBaseOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr BaseOverlay;
    __declspec(property(get=GetNightOverlay,put=PutNightOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr NightOverlay;
    __declspec(property(get=GetSpecularOverlay,put=PutSpecularOverlay))
    IAgStkGraphicsGlobeImageOverlayPtr SpecularOverlay;
    __declspec(property(get=GetTerrain))
    IAgStkGraphicsTerrainCollectionPtr Terrain;
    __declspec(property(get=GetImagery))
    IAgStkGraphicsImageCollectionPtr Imagery;
    __declspec(property(get=GetKml))
    IAgStkGraphicsKmlGraphicsPtr Kml;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    OLE_COLOR GetSpecularColor ( );
    void PutSpecularColor (
        OLE_COLOR pRetVal );
    double GetShininess ( );
    void PutShininess (
        double pRetVal );
    VARIANT_BOOL GetShowImagery ( );
    void PutShowImagery (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShow ( );
    void PutShow (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowLabel ( );
    void PutShowLabel (
        VARIANT_BOOL pRetVal );
    double GetAltitudeOffset ( );
    void PutAltitudeOffset (
        double pRetVal );
    IAgStkGraphicsGlobeImageOverlayPtr GetBaseOverlay ( );
    void PutBaseOverlay (
        struct IAgStkGraphicsGlobeImageOverlay * ppRetVal );
    IAgStkGraphicsGlobeImageOverlayPtr GetNightOverlay ( );
    void PutNightOverlay (
        struct IAgStkGraphicsGlobeImageOverlay * ppRetVal );
    IAgStkGraphicsGlobeImageOverlayPtr GetSpecularOverlay ( );
    void PutSpecularOverlay (
        struct IAgStkGraphicsGlobeImageOverlay * ppRetVal );
    IAgStkGraphicsTerrainCollectionPtr GetTerrain ( );
    IAgStkGraphicsImageCollectionPtr GetImagery ( );
    IAgStkGraphicsKmlGraphicsPtr GetKml ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpecularColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpecularColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shininess (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shininess (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowImagery (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowImagery (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Show (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Show (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowLabel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BaseOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BaseOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NightOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_NightOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpecularOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_SpecularOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Terrain (
        /*[out,retval]*/ struct IAgStkGraphicsTerrainCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Imagery (
        /*[out,retval]*/ struct IAgStkGraphicsImageCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Kml (
        /*[out,retval]*/ struct IAgStkGraphicsKmlGraphics * * ppRetVal ) = 0;
};

struct __declspec(uuid("a82ea570-430c-4b77-96de-ee6622f29368"))
_IAgStkGraphicsCompositeDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsDisplayConditionPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetCapacity))
    int Capacity;
    __declspec(property(get=GetLogicOperation,put=PutLogicOperation))
    enum AgEStkGraphicsBinaryLogicOperation LogicOperation;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    int GetCapacity ( );
    enum AgEStkGraphicsBinaryLogicOperation GetLogicOperation ( );
    void PutLogicOperation (
        enum AgEStkGraphicsBinaryLogicOperation pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Reserve (
        int Count );
    HRESULT AddWithNegate (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        VARIANT_BOOL Negate );
    HRESULT Add (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT InsertWithNegate (
        int Index,
        struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        VARIANT_BOOL Negate );
    HRESULT Insert (
        int Index,
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT Remove (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT RemoveAt (
        int Index );
    HRESULT Clear ( );
    VARIANT_BOOL GetNegate (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition );
    HRESULT SetNegate (
        struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        VARIANT_BOOL Negate );
    VARIANT_BOOL GetNegateAt (
        int Index );
    HRESULT SetNegateAt (
        int Index,
        VARIANT_BOOL Negate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Capacity (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LogicOperation (
        /*[out,retval]*/ enum AgEStkGraphicsBinaryLogicOperation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LogicOperation (
        /*[in]*/ enum AgEStkGraphicsBinaryLogicOperation pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reserve (
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_AddWithNegate (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition ) = 0;
      virtual HRESULT __stdcall raw_InsertWithNegate (
        /*[in]*/ int Index,
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetNegate (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNegate (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * DisplayCondition,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
      virtual HRESULT __stdcall raw_GetNegateAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNegateAt (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT_BOOL Negate ) = 0;
};

struct __declspec(uuid("cee8ec46-1212-47a6-bd22-e17b75524d2c"))
_IAgStkGraphicsCompositePrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetTranslucentPrimitivesSortOrder,put=PutTranslucentPrimitivesSortOrder))
    enum AgEStkGraphicsPrimitivesSortOrder TranslucentPrimitivesSortOrder;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    int GetCount ( );
    enum AgEStkGraphicsPrimitivesSortOrder GetTranslucentPrimitivesSortOrder ( );
    void PutTranslucentPrimitivesSortOrder (
        enum AgEStkGraphicsPrimitivesSortOrder pRetVal );
    HRESULT Add (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Remove (
        struct IAgStkGraphicsPrimitive * Primitive );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Clear ( );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentPrimitivesSortOrder (
        /*[out,retval]*/ enum AgEStkGraphicsPrimitivesSortOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentPrimitivesSortOrder (
        /*[in]*/ enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("afcc5e7b-e4af-46ee-9bc5-5e4c619a77c4"))
_IAgStkGraphicsConstantDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("01412474-4917-48e5-8dab-1d5c3ccbbbae"))
_IAgStkGraphicsDisplayCondition : IDispatch
{};

struct __declspec(uuid("2066622b-f492-4e40-a7d1-db7e73622e26"))
_IAgStkGraphicsDistanceDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistanceSquared ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("d596b411-5580-4825-b264-23d4997014ff"))
_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGlobeOverlay,put=PutGlobeOverlay))
    IAgStkGraphicsGlobeOverlayPtr GlobeOverlay;
    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGlobeOverlayPtr GetGlobeOverlay ( );
    void PutGlobeOverlay (
        struct IAgStkGraphicsGlobeOverlay * ppRetVal );
    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMaximumDistanceSquared ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_GlobeOverlay (
        /*[in]*/ struct IAgStkGraphicsGlobeOverlay * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("e6008d9a-119f-4ad2-ac26-75ed778d8b89"))
_IAgStkGraphicsDistanceToPositionDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMaximumDistanceSquared ( );
    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
};

struct __declspec(uuid("6cd1a08a-18b2-42f0-8852-cc59e8bb5ce4"))
_IAgStkGraphicsDistanceToPrimitiveDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimitive,put=PutPrimitive))
    IAgStkGraphicsPrimitivePtr Primitive;
    __declspec(property(get=GetMinimumDistance,put=PutMinimumDistance))
    double MinimumDistance;
    __declspec(property(get=GetMinimumDistanceSquared))
    double MinimumDistanceSquared;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetMaximumDistanceSquared))
    double MaximumDistanceSquared;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPrimitivePtr GetPrimitive ( );
    void PutPrimitive (
        struct IAgStkGraphicsPrimitive * ppRetVal );
    double GetMinimumDistance ( );
    void PutMinimumDistance (
        double pRetVal );
    double GetMinimumDistanceSquared ( );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetMaximumDistanceSquared ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Primitive (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Primitive (
        /*[in]*/ struct IAgStkGraphicsPrimitive * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistanceSquared (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("1fe45578-e11b-40a0-93aa-c40485aa067a"))
_IAgStkGraphicsGlobeImageOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("a1da7576-4448-43b4-beef-86eecfddef15"))
_IAgStkGraphicsGraphicsFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetStrikeout))
    VARIANT_BOOL Strikeout;
    __declspec(property(get=GetOutline))
    VARIANT_BOOL Outline;
    __declspec(property(get=GetStyle))
    enum AgEStkGraphicsFontStyle Style;
    __declspec(property(get=GetAntialias))
    VARIANT_BOOL Antialias;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSize))
    int Size;
    __declspec(property(get=GetBold))
    VARIANT_BOOL Bold;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    int GetSize ( );
    VARIANT_BOOL GetBold ( );
    VARIANT_BOOL GetItalic ( );
    VARIANT_BOOL GetUnderline ( );
    VARIANT_BOOL GetStrikeout ( );
    VARIANT_BOOL GetOutline ( );
    enum AgEStkGraphicsFontStyle GetStyle ( );
    VARIANT_BOOL GetAntialias ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Strikeout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum AgEStkGraphicsFontStyle * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Antialias (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("2fcf000f-0892-415b-b7d3-72797f0fabc0"))
_IAgStkGraphicsGreatArcInterpolator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    SAFEARRAY * Interpolate (
        SAFEARRAY * * Positions );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    double GetGranularity ( );
    void PutGranularity (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Interpolate (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("83dce447-fa4f-4cbd-89c7-12e2394fddeb"))
_IAgStkGraphicsImageCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsGlobeImageOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsGlobeImageOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    VARIANT_BOOL ContainsUriString (
        _bstr_t StringUri );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsGlobeImageOverlay * GlobeOverlay );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    HRESULT AddAsync (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    int IndexOf (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    int IndexOfUriString (
        _bstr_t StringUri );
    IAgStkGraphicsGlobeImageOverlayPtr AddUriString (
        _bstr_t Uri );
    IAgStkGraphicsGlobeImageOverlayPtr AddAsyncUriString (
        _bstr_t Uri );
    HRESULT Swap (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay1,
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay2 );
    HRESULT SwapByIndex (
        int Index1,
        int Index2 );
    HRESULT Move (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        int NewPosition );
    HRESULT MoveByIndex (
        int Index,
        int NewPosition );
    HRESULT BringToFront (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );
    HRESULT SendToBack (
        struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * GlobeOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
      virtual HRESULT __stdcall raw_AddAsync (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
      virtual HRESULT __stdcall raw_IndexOf (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IndexOfUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Swap (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay1,
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay2 ) = 0;
      virtual HRESULT __stdcall raw_SwapByIndex (
        /*[in]*/ int Index1,
        /*[in]*/ int Index2 ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_MoveByIndex (
        /*[in]*/ int Index,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[in]*/ struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) = 0;
};

struct __declspec(uuid("0375bd22-c555-41f2-b5f5-6505caf4a015"))
_IAgStkGraphicsAlphaFromLuminanceFilter : IDispatch
{};

struct __declspec(uuid("f4d7d64b-f841-4f85-9ba1-e2679851d025"))
_IAgStkGraphicsAlphaFromPixelFilter : IDispatch
{};

struct __declspec(uuid("7e2fcfce-41e4-45bb-879b-acdf1cf15aa9"))
_IAgStkGraphicsAlphaFromRasterFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRaster,put=PutRaster))
    IAgStkGraphicsRasterPtr Raster;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterPtr GetRaster ( );
    void PutRaster (
        struct IAgStkGraphicsRaster * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Raster (
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Raster (
        /*[in]*/ struct IAgStkGraphicsRaster * ppRetVal ) = 0;
};

struct __declspec(uuid("e76b02a6-f5f2-4ce3-8d4d-6caf7a09ca05"))
_IAgStkGraphicsBandExtractFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtractFormat,put=PutExtractFormat))
    enum AgEStkGraphicsRasterFormat ExtractFormat;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsRasterFormat GetExtractFormat ( );
    void PutExtractFormat (
        enum AgEStkGraphicsRasterFormat pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtractFormat (
        /*[out,retval]*/ enum AgEStkGraphicsRasterFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtractFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat pRetVal ) = 0;
};

struct __declspec(uuid("2e68ce72-cb22-4d0e-abc3-b1cd7d9afb46"))
_IAgStkGraphicsBandOrderFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBandOrder,put=PutBandOrder))
    enum AgEStkGraphicsRasterFormat BandOrder;
    __declspec(property(get=GetMaintainRasterFormat,put=PutMaintainRasterFormat))
    VARIANT_BOOL MaintainRasterFormat;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsRasterFormat GetBandOrder ( );
    void PutBandOrder (
        enum AgEStkGraphicsRasterFormat pRetVal );
    VARIANT_BOOL GetMaintainRasterFormat ( );
    void PutMaintainRasterFormat (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BandOrder (
        /*[out,retval]*/ enum AgEStkGraphicsRasterFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BandOrder (
        /*[in]*/ enum AgEStkGraphicsRasterFormat pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaintainRasterFormat (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaintainRasterFormat (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("db9a80cb-9fbc-400f-a82f-6e5972da0151"))
_IAgStkGraphicsBlurFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsBlurMethod Method;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );
    enum AgEStkGraphicsBlurMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsBlurMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsBlurMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsBlurMethod pRetVal ) = 0;
};

struct __declspec(uuid("93aaa744-5244-4c5e-934b-80a55e03820e"))
_IAgStkGraphicsBrightnessFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustment,put=PutAdjustment))
    double Adjustment;

    //
    // Wrapper methods for error-handling
    //

    double GetAdjustment ( );
    void PutAdjustment (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Adjustment (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Adjustment (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("56e0cb35-7afd-4926-9fa8-ee098e666502"))
_IAgStkGraphicsColorToLuminanceFilter : IDispatch
{};

struct __declspec(uuid("b62c8bd7-9c82-44be-a521-bbd0ecc03111"))
_IAgStkGraphicsContrastFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustment,put=PutAdjustment))
    double Adjustment;

    //
    // Wrapper methods for error-handling
    //

    double GetAdjustment ( );
    void PutAdjustment (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Adjustment (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Adjustment (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("92a18fc3-2e65-4bd9-8ef7-dbc93c534332"))
_IAgStkGraphicsConvolutionFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
};

struct __declspec(uuid("502b4e62-b19f-4cd4-831a-51af6c5d2d78"))
_IAgStkGraphicsEdgeDetectFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsEdgeDetectMethod Method;
    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );
    enum AgEStkGraphicsEdgeDetectMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsEdgeDetectMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsEdgeDetectMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsEdgeDetectMethod pRetVal ) = 0;
};

struct __declspec(uuid("97e42bf7-24a6-45a3-94e2-3766f34e4dfd"))
_IAgStkGraphicsFilteringRasterStream : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributes))
    IAgStkGraphicsRasterAttributesPtr Attributes;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetUpdateDelta,put=PutUpdateDelta))
    double UpdateDelta;
    __declspec(property(get=GetFilter))
    IAgStkGraphicsRasterFilterPtr Filter;
    __declspec(property(get=GetStream))
    IAgStkGraphicsRasterStreamPtr Stream;

    //
    // Wrapper methods for error-handling
    //

    double GetUpdateDelta ( );
    void PutUpdateDelta (
        double pRetVal );
    VARIANT_BOOL Update (
        struct STKUtil::IAgDate * Time,
        struct STKUtil::IAgDate * NextTime );
    IAgStkGraphicsRasterAttributesPtr GetAttributes ( );
    int GetWidth ( );
    int GetHeight ( );
    HRESULT Flip (
        enum AgEStkGraphicsFlipAxis Axis );
    HRESULT Rotate (
        double Angle );
    IAgStkGraphicsRasterPtr Apply (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT ApplyInPlace (
        struct IAgStkGraphicsRasterFilter * Filter );
    IAgStkGraphicsRasterPtr ExtractBand (
        enum AgEStkGraphicsRasterBand Band );
    IAgStkGraphicsRasterPtr ExtractBandFromRasterFormat (
        enum AgEStkGraphicsRasterFormat Format );
    HRESULT CopyFromRaster (
        struct IAgStkGraphicsRaster * Raster );
    IAgStkGraphicsRasterFilterPtr GetFilter ( );
    IAgStkGraphicsRasterStreamPtr GetStream ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UpdateDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct STKUtil::IAgDate * Time,
        /*[in]*/ struct STKUtil::IAgDate * NextTime,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum AgEStkGraphicsFlipAxis Axis ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyInPlace (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_ExtractBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtractBandFromRasterFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat Format,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ struct IAgStkGraphicsRasterFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Stream (
        /*[out,retval]*/ struct IAgStkGraphicsRasterStream * * ppRetVal ) = 0;
};

struct __declspec(uuid("831caac6-83aa-4295-8860-46b428ffe9da"))
_IAgStkGraphicsFlipFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFlipAxis,put=PutFlipAxis))
    enum AgEStkGraphicsFlipAxis FlipAxis;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsFlipAxis GetFlipAxis ( );
    void PutFlipAxis (
        enum AgEStkGraphicsFlipAxis pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FlipAxis (
        /*[out,retval]*/ enum AgEStkGraphicsFlipAxis * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipAxis (
        /*[in]*/ enum AgEStkGraphicsFlipAxis pRetVal ) = 0;
};

struct __declspec(uuid("07eef50c-4414-4183-935a-f5e2669eb4fb"))
_IAgStkGraphicsGammaCorrectionFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGamma,put=PutGamma))
    double Gamma;

    //
    // Wrapper methods for error-handling
    //

    double GetGamma ( );
    void PutGamma (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Gamma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Gamma (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("db2d7fb6-1eae-41dc-a07d-d52bb04c0be3"))
_IAgStkGraphicsGaussianBlurFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
};

struct __declspec(uuid("5d3a676a-4967-4432-b516-ad2a290fbede"))
_IAgStkGraphicsGradientDetectFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsGradientDetectMethod Method;
    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );
    enum AgEStkGraphicsGradientDetectMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsGradientDetectMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsGradientDetectMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsGradientDetectMethod pRetVal ) = 0;
};

struct __declspec(uuid("b79bcfb0-f005-45a4-96bb-460969de7def"))
_IAgStkGraphicsLevelsFilter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetLevelAdjustment (
        enum AgEStkGraphicsRasterBand Band,
        int Adjustment );
    HRESULT ClearAdjustments ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetLevelAdjustment (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[in]*/ int Adjustment ) = 0;
      virtual HRESULT __stdcall raw_ClearAdjustments ( ) = 0;
};

struct __declspec(uuid("aa59dcf0-3c76-4321-a05e-18dd75e1ec0a"))
_IAgStkGraphicsProjectionRasterStreamPluginActivator : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectionRasterStreamPluginProxyPtr CreateFromDisplayName (
        _bstr_t DisplayName );
    SAFEARRAY * GetAvailableDisplayNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFromDisplayName (
        /*[in]*/ BSTR DisplayName,
        /*[out,retval]*/ struct IAgStkGraphicsProjectionRasterStreamPluginProxy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDisplayNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("7fcd5139-01aa-405f-a359-1f69e9dbbaf4"))
_IAgStkGraphicsProjectionRasterStreamPluginProxy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRasterStream))
    IAgStkGraphicsRasterStreamPtr RasterStream;
    __declspec(property(get=GetProjectionStream))
    IAgStkGraphicsProjectionStreamPtr ProjectionStream;
    __declspec(property(get=GetIsRasterStreamSupported))
    VARIANT_BOOL IsRasterStreamSupported;
    __declspec(property(get=GetIsProjectionStreamSupported))
    VARIANT_BOOL IsProjectionStreamSupported;
    __declspec(property(get=GetRealPluginObject))
    IUnknownPtr RealPluginObject;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterStreamPtr GetRasterStream ( );
    IAgStkGraphicsProjectionStreamPtr GetProjectionStream ( );
    VARIANT_BOOL GetIsRasterStreamSupported ( );
    VARIANT_BOOL GetIsProjectionStreamSupported ( );
    IUnknownPtr GetRealPluginObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RasterStream (
        /*[out,retval]*/ struct IAgStkGraphicsRasterStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionStream (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRasterStreamSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsProjectionStreamSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RealPluginObject (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("7b25cc11-1894-4754-921e-e64ef4e2a5e9"))
_IAgStkGraphicsRaster : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributes))
    IAgStkGraphicsRasterAttributesPtr Attributes;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterAttributesPtr GetAttributes ( );
    int GetWidth ( );
    int GetHeight ( );
    HRESULT Flip (
        enum AgEStkGraphicsFlipAxis Axis );
    HRESULT Rotate (
        double Angle );
    IAgStkGraphicsRasterPtr Apply (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT ApplyInPlace (
        struct IAgStkGraphicsRasterFilter * Filter );
    IAgStkGraphicsRasterPtr ExtractBand (
        enum AgEStkGraphicsRasterBand Band );
    IAgStkGraphicsRasterPtr ExtractBandFromRasterFormat (
        enum AgEStkGraphicsRasterFormat Format );
    HRESULT CopyFromRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum AgEStkGraphicsFlipAxis Axis ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyInPlace (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_ExtractBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtractBandFromRasterFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat Format,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster ) = 0;
};

struct __declspec(uuid("d6e430ce-bf67-4a19-a5bd-5ff18632905d"))
_IAgStkGraphicsRasterAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat))
    enum AgEStkGraphicsRasterFormat Format;
    __declspec(property(get=GetType))
    enum AgEStkGraphicsRasterType Type;
    __declspec(property(get=GetOrientation))
    enum AgEStkGraphicsRasterOrientation Orientation;
    __declspec(property(get=GetByteLength))
    int ByteLength;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetPixelAspectRatio))
    double PixelAspectRatio;
    __declspec(property(get=GetRowAlignment))
    int RowAlignment;
    __declspec(property(get=GetNumberOfBands))
    int NumberOfBands;
    __declspec(property(get=GetRowStride))
    int RowStride;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsRasterFormat GetFormat ( );
    enum AgEStkGraphicsRasterType GetType ( );
    enum AgEStkGraphicsRasterOrientation GetOrientation ( );
    int GetByteLength ( );
    int GetWidth ( );
    int GetHeight ( );
    double GetPixelAspectRatio ( );
    int GetRowAlignment ( );
    int GetNumberOfBands ( );
    int GetRowStride ( );
    VARIANT_BOOL HasBand (
        enum AgEStkGraphicsRasterBand Band );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum AgEStkGraphicsRasterFormat * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEStkGraphicsRasterType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum AgEStkGraphicsRasterOrientation * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ByteLength (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelAspectRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowAlignment (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfBands (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowStride (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("4ff4eb55-b6c8-4a66-b7d3-e8d313de251a"))
_IAgStkGraphicsRasterFilter : IDispatch
{};

struct __declspec(uuid("3825591c-b395-4f7f-87d3-b3c8919959b5"))
_IAgStkGraphicsRasterStream : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributes))
    IAgStkGraphicsRasterAttributesPtr Attributes;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetUpdateDelta,put=PutUpdateDelta))
    double UpdateDelta;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterAttributesPtr GetAttributes ( );
    int GetWidth ( );
    int GetHeight ( );
    HRESULT Flip (
        enum AgEStkGraphicsFlipAxis Axis );
    HRESULT Rotate (
        double Angle );
    IAgStkGraphicsRasterPtr Apply (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT ApplyInPlace (
        struct IAgStkGraphicsRasterFilter * Filter );
    IAgStkGraphicsRasterPtr ExtractBand (
        enum AgEStkGraphicsRasterBand Band );
    IAgStkGraphicsRasterPtr ExtractBandFromRasterFormat (
        enum AgEStkGraphicsRasterFormat Format );
    HRESULT CopyFromRaster (
        struct IAgStkGraphicsRaster * Raster );
    double GetUpdateDelta ( );
    void PutUpdateDelta (
        double pRetVal );
    VARIANT_BOOL Update (
        struct STKUtil::IAgDate * Time,
        struct STKUtil::IAgDate * NextTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum AgEStkGraphicsFlipAxis Axis ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyInPlace (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_ExtractBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtractBandFromRasterFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat Format,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster ) = 0;
      virtual HRESULT __stdcall get_UpdateDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct STKUtil::IAgDate * Time,
        /*[in]*/ struct STKUtil::IAgDate * NextTime,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("23fd6d02-3861-4ae4-b77d-1ed451955dfd"))
_IAgStkGraphicsRotateFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("562f055d-d965-400c-a082-aa8cdf90bed1"))
_IAgStkGraphicsSequenceFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContinueOnFailure,put=PutContinueOnFailure))
    VARIANT_BOOL ContinueOnFailure;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetContinueOnFailure ( );
    void PutContinueOnFailure (
        VARIANT_BOOL pRetVal );
    int GetCount ( );
    HRESULT Add (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT Remove (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT Clear ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsRasterFilter * Filter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ContinueOnFailure (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContinueOnFailure (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("999ef99f-82e5-4f15-82db-8dbd6a7169e0"))
_IAgStkGraphicsSharpenFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEStkGraphicsSharpenMethod Method;
    __declspec(property(get=GetDivisor,put=PutDivisor))
    double Divisor;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetKernel,put=PutKernel))
    SAFEARRAY * Kernel;

    //
    // Wrapper methods for error-handling
    //

    double GetDivisor ( );
    void PutDivisor (
        double pRetVal );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    SAFEARRAY * GetKernel ( );
    void PutKernel (
        SAFEARRAY * ppRetVal );
    enum AgEStkGraphicsSharpenMethod GetMethod ( );
    void PutMethod (
        enum AgEStkGraphicsSharpenMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Divisor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Divisor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Kernel (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Kernel (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEStkGraphicsSharpenMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEStkGraphicsSharpenMethod pRetVal ) = 0;
};

struct __declspec(uuid("e6b0f377-d5e1-485a-a078-706ae7e7f1fc"))
_IAgStkGraphicsVideoStream : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartFrame,put=PutStartFrame))
    int StartFrame;
    __declspec(property(get=GetEndFrame,put=PutEndFrame))
    int EndFrame;
    __declspec(property(get=GetLoop,put=PutLoop))
    VARIANT_BOOL Loop;
    __declspec(property(get=GetIsPlaying))
    VARIANT_BOOL IsPlaying;
    __declspec(property(get=GetPacketAcquirementYieldTime,put=PutPacketAcquirementYieldTime))
    int PacketAcquirementYieldTime;
    __declspec(property(get=GetPacketBufferLimit,put=PutPacketBufferLimit))
    int PacketBufferLimit;
    __declspec(property(get=GetAllowFrameDrop,put=PutAllowFrameDrop))
    VARIANT_BOOL AllowFrameDrop;
    __declspec(property(get=GetAttributes))
    IAgStkGraphicsRasterAttributesPtr Attributes;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetEnableAudio,put=PutEnableAudio))
    VARIANT_BOOL EnableAudio;
    __declspec(property(get=GetAudioUri))
    _bstr_t AudioUri;
    __declspec(property(get=GetUpdateDelta,put=PutUpdateDelta))
    double UpdateDelta;
    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetPlayback,put=PutPlayback))
    enum AgEStkGraphicsVideoPlayback Playback;
    __declspec(property(get=GetFrameRate,put=PutFrameRate))
    double FrameRate;
    __declspec(property(get=GetIntervalStartTime,put=PutIntervalStartTime))
    STKUtil::IAgDatePtr IntervalStartTime;
    __declspec(property(get=GetIntervalEndTime,put=PutIntervalEndTime))
    STKUtil::IAgDatePtr IntervalEndTime;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    double StartTime;
    __declspec(property(get=GetEndTime,put=PutEndTime))
    double EndTime;

    //
    // Wrapper methods for error-handling
    //

    double GetUpdateDelta ( );
    void PutUpdateDelta (
        double pRetVal );
    VARIANT_BOOL Update (
        struct STKUtil::IAgDate * Time,
        struct STKUtil::IAgDate * NextTime );
    IAgStkGraphicsRasterAttributesPtr GetAttributes ( );
    int GetWidth ( );
    int GetHeight ( );
    HRESULT Flip (
        enum AgEStkGraphicsFlipAxis Axis );
    HRESULT Rotate (
        double Angle );
    IAgStkGraphicsRasterPtr Apply (
        struct IAgStkGraphicsRasterFilter * Filter );
    HRESULT ApplyInPlace (
        struct IAgStkGraphicsRasterFilter * Filter );
    IAgStkGraphicsRasterPtr ExtractBand (
        enum AgEStkGraphicsRasterBand Band );
    IAgStkGraphicsRasterPtr ExtractBandFromRasterFormat (
        enum AgEStkGraphicsRasterFormat Format );
    HRESULT CopyFromRaster (
        struct IAgStkGraphicsRaster * Raster );
    _bstr_t GetUri ( );
    enum AgEStkGraphicsVideoPlayback GetPlayback ( );
    void PutPlayback (
        enum AgEStkGraphicsVideoPlayback pRetVal );
    double GetFrameRate ( );
    void PutFrameRate (
        double pRetVal );
    STKUtil::IAgDatePtr GetIntervalStartTime ( );
    void PutIntervalStartTime (
        struct STKUtil::IAgDate * ppRetVal );
    STKUtil::IAgDatePtr GetIntervalEndTime ( );
    void PutIntervalEndTime (
        struct STKUtil::IAgDate * ppRetVal );
    double GetStartTime ( );
    void PutStartTime (
        double pRetVal );
    double GetEndTime ( );
    void PutEndTime (
        double pRetVal );
    int GetStartFrame ( );
    void PutStartFrame (
        int pRetVal );
    int GetEndFrame ( );
    void PutEndFrame (
        int pRetVal );
    VARIANT_BOOL GetLoop ( );
    void PutLoop (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsPlaying ( );
    int GetPacketAcquirementYieldTime ( );
    void PutPacketAcquirementYieldTime (
        int pRetVal );
    int GetPacketBufferLimit ( );
    void PutPacketBufferLimit (
        int pRetVal );
    VARIANT_BOOL GetAllowFrameDrop ( );
    void PutAllowFrameDrop (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetEnableAudio ( );
    void PutEnableAudio (
        VARIANT_BOOL pRetVal );
    HRESULT ReinitializeWithStringUri (
        _bstr_t Uri );
    HRESULT Play ( );
    HRESULT Pause ( );
    HRESULT Stop ( );
    HRESULT Reset ( );
    HRESULT Close ( );
    _bstr_t GetAudioUri ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UpdateDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct STKUtil::IAgDate * Time,
        /*[in]*/ struct STKUtil::IAgDate * NextTime,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum AgEStkGraphicsFlipAxis Axis ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyInPlace (
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter ) = 0;
      virtual HRESULT __stdcall raw_ExtractBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand Band,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtractBandFromRasterFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat Format,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster ) = 0;
      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Playback (
        /*[out,retval]*/ enum AgEStkGraphicsVideoPlayback * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Playback (
        /*[in]*/ enum AgEStkGraphicsVideoPlayback pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrameRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrameRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalStartTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalStartTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IntervalEndTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_IntervalEndTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndTime (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EndTime (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartFrame (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartFrame (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndFrame (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EndFrame (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Loop (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsPlaying (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PacketAcquirementYieldTime (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PacketAcquirementYieldTime (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_PacketBufferLimit (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PacketBufferLimit (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowFrameDrop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowFrameDrop (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_EnableAudio (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EnableAudio (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReinitializeWithStringUri (
        /*[in]*/ BSTR Uri ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_AudioUri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("32147ba1-8610-4270-9365-b8966730dd6f"))
IAgStkGraphicsKmlContainer : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetChildren))
    IAgStkGraphicsKmlFeatureCollectionPtr Children;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlFeatureCollectionPtr GetChildren ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkGraphicsKmlFeatureCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("b228ba4f-7048-4967-856f-deff6240f7f6"))
_IAgStkGraphicsKmlContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsLoaded))
    VARIANT_BOOL IsLoaded;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetContent))
    _bstr_t Content;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSnippet))
    _bstr_t Snippet;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetChildren))
    IAgStkGraphicsKmlFeatureCollectionPtr Children;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsLoaded ( );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    _bstr_t GetContent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetSnippet ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    HRESULT FlyTo ( );
    IAgStkGraphicsKmlFeatureCollectionPtr GetChildren ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo ( ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkGraphicsKmlFeatureCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("c8b32ebc-a5e1-4146-a9bc-82c6b35fcf4a"))
_IAgStkGraphicsKmlDocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsLoaded))
    VARIANT_BOOL IsLoaded;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetContent))
    _bstr_t Content;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetChildren))
    IAgStkGraphicsKmlFeatureCollectionPtr Children;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSnippet))
    _bstr_t Snippet;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetUri))
    _bstr_t Uri;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlFeatureCollectionPtr GetChildren ( );
    VARIANT_BOOL GetIsLoaded ( );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    _bstr_t GetContent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetSnippet ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    HRESULT FlyTo ( );
    _bstr_t GetUri ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkGraphicsKmlFeatureCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo ( ) = 0;
      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("9db25f35-fc7d-447c-b1cf-8512f7ed41e7"))
_IAgStkGraphicsKmlFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsLoaded))
    VARIANT_BOOL IsLoaded;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetContent))
    _bstr_t Content;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSnippet))
    _bstr_t Snippet;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsLoaded ( );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    _bstr_t GetContent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetSnippet ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    HRESULT FlyTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo ( ) = 0;
};

struct __declspec(uuid("28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f"))
IAgStkGraphicsKmlFolder : IUnknown
{};

struct __declspec(uuid("a779cdb0-acbe-4957-8104-613423a17936"))
_IAgStkGraphicsKmlFolder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsLoaded))
    VARIANT_BOOL IsLoaded;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetContent))
    _bstr_t Content;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetChildren))
    IAgStkGraphicsKmlFeatureCollectionPtr Children;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSnippet))
    _bstr_t Snippet;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlFeatureCollectionPtr GetChildren ( );
    VARIANT_BOOL GetIsLoaded ( );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    _bstr_t GetContent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetSnippet ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    HRESULT FlyTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkGraphicsKmlFeatureCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo ( ) = 0;
};

struct __declspec(uuid("29cadcd7-383e-4c19-91dd-7a3ac3b21178"))
_IAgStkGraphicsKmlGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDocuments))
    IAgStkGraphicsKmlDocumentCollectionPtr Documents;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsKmlDocumentCollectionPtr GetDocuments ( );
    IAgStkGraphicsKmlDocumentPtr LoadDocument (
        _bstr_t KmlUri );
    IAgStkGraphicsKmlDocumentPtr LoadDocumentString (
        _bstr_t KmlUri );
    IAgStkGraphicsKmlDocumentPtr Load (
        _bstr_t KmlDocument );
    HRESULT LoadDocumentAsync (
        _bstr_t KmlUri );
    HRESULT LoadDocumentAsyncString (
        _bstr_t KmlUri );
    HRESULT LoadAsync (
        _bstr_t KmlDocument );
    HRESULT Unload (
        struct IAgStkGraphicsKmlDocument * KmlDocument );
    HRESULT UnloadAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocumentCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDocument (
        /*[in]*/ BSTR KmlUri,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDocumentString (
        /*[in]*/ BSTR KmlUri,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR KmlDocument,
        /*[out,retval]*/ struct IAgStkGraphicsKmlDocument * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDocumentAsync (
        /*[in]*/ BSTR KmlUri ) = 0;
      virtual HRESULT __stdcall raw_LoadDocumentAsyncString (
        /*[in]*/ BSTR KmlUri ) = 0;
      virtual HRESULT __stdcall raw_LoadAsync (
        /*[in]*/ BSTR KmlDocument ) = 0;
      virtual HRESULT __stdcall raw_Unload (
        /*[in]*/ struct IAgStkGraphicsKmlDocument * KmlDocument ) = 0;
      virtual HRESULT __stdcall raw_UnloadAll ( ) = 0;
};

enum AgEStkGraphicsKmlNetworkLinkRefreshMode
{
    eStkGraphicsKmlNetworkLinkRefreshModeOnChange = 0,
    eStkGraphicsKmlNetworkLinkRefreshModeOnInterval = 1,
    eStkGraphicsKmlNetworkLinkRefreshModeOnExpire = 2
};

enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode
{
    eStkGraphicsKmlNetworkLinkViewRefreshModeNever = 0,
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest = 1,
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop = 2,
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion = 3
};

struct __declspec(uuid("0b66ea82-dd0d-444f-b097-dda9427e1b87"))
IAgStkGraphicsKmlNetworkLink : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetRefreshMode,put=PutRefreshMode))
    enum AgEStkGraphicsKmlNetworkLinkRefreshMode RefreshMode;
    __declspec(property(get=GetRefreshInterval,put=PutRefreshInterval))
    double RefreshInterval;
    __declspec(property(get=GetViewRefreshMode,put=PutViewRefreshMode))
    enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode ViewRefreshMode;
    __declspec(property(get=GetViewRefreshTime,put=PutViewRefreshTime))
    double ViewRefreshTime;
    __declspec(property(get=GetViewBoundScale,put=PutViewBoundScale))
    double ViewBoundScale;
    __declspec(property(get=GetMinimumRefreshPeriod))
    double MinimumRefreshPeriod;
    __declspec(property(get=GetCookie))
    _bstr_t Cookie;
    __declspec(property(get=GetMessage))
    _bstr_t Message;
    __declspec(property(get=GetLinkSnippet))
    _bstr_t LinkSnippet;
    __declspec(property(get=GetExpires))
    _bstr_t Expires;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUri ( );
    enum AgEStkGraphicsKmlNetworkLinkRefreshMode GetRefreshMode ( );
    void PutRefreshMode (
        enum AgEStkGraphicsKmlNetworkLinkRefreshMode pRetVal );
    double GetRefreshInterval ( );
    void PutRefreshInterval (
        double pRetVal );
    enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode GetViewRefreshMode ( );
    void PutViewRefreshMode (
        enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode pRetVal );
    double GetViewRefreshTime ( );
    void PutViewRefreshTime (
        double pRetVal );
    double GetViewBoundScale ( );
    void PutViewBoundScale (
        double pRetVal );
    double GetMinimumRefreshPeriod ( );
    _bstr_t GetCookie ( );
    _bstr_t GetMessage ( );
    _bstr_t GetLinkSnippet ( );
    _bstr_t GetExpires ( );
    HRESULT Refresh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefreshMode (
        /*[out,retval]*/ enum AgEStkGraphicsKmlNetworkLinkRefreshMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefreshMode (
        /*[in]*/ enum AgEStkGraphicsKmlNetworkLinkRefreshMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefreshInterval (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefreshInterval (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewRefreshMode (
        /*[out,retval]*/ enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewRefreshMode (
        /*[in]*/ enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewRefreshTime (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewRefreshTime (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewBoundScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewBoundScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumRefreshPeriod (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cookie (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinkSnippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Expires (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
};

struct __declspec(uuid("25277457-580d-45a4-bf1c-d378d2dd90c6"))
_IAgStkGraphicsKmlNetworkLink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCookie))
    _bstr_t Cookie;
    __declspec(property(get=GetMessage))
    _bstr_t Message;
    __declspec(property(get=GetLinkSnippet))
    _bstr_t LinkSnippet;
    __declspec(property(get=GetExpires))
    _bstr_t Expires;
    __declspec(property(get=GetIsLoaded))
    VARIANT_BOOL IsLoaded;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetContent))
    _bstr_t Content;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetSnippet))
    _bstr_t Snippet;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetRefreshMode,put=PutRefreshMode))
    enum AgEStkGraphicsKmlNetworkLinkRefreshMode RefreshMode;
    __declspec(property(get=GetRefreshInterval,put=PutRefreshInterval))
    double RefreshInterval;
    __declspec(property(get=GetViewRefreshMode,put=PutViewRefreshMode))
    enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode ViewRefreshMode;
    __declspec(property(get=GetViewRefreshTime,put=PutViewRefreshTime))
    double ViewRefreshTime;
    __declspec(property(get=GetViewBoundScale,put=PutViewBoundScale))
    double ViewBoundScale;
    __declspec(property(get=GetMinimumRefreshPeriod))
    double MinimumRefreshPeriod;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsLoaded ( );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    _bstr_t GetContent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetSnippet ( );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    HRESULT FlyTo ( );
    _bstr_t GetUri ( );
    enum AgEStkGraphicsKmlNetworkLinkRefreshMode GetRefreshMode ( );
    void PutRefreshMode (
        enum AgEStkGraphicsKmlNetworkLinkRefreshMode pRetVal );
    double GetRefreshInterval ( );
    void PutRefreshInterval (
        double pRetVal );
    enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode GetViewRefreshMode ( );
    void PutViewRefreshMode (
        enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode pRetVal );
    double GetViewRefreshTime ( );
    void PutViewRefreshTime (
        double pRetVal );
    double GetViewBoundScale ( );
    void PutViewBoundScale (
        double pRetVal );
    double GetMinimumRefreshPeriod ( );
    _bstr_t GetCookie ( );
    _bstr_t GetMessage ( );
    _bstr_t GetLinkSnippet ( );
    _bstr_t GetExpires ( );
    HRESULT Refresh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Snippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo ( ) = 0;
      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefreshMode (
        /*[out,retval]*/ enum AgEStkGraphicsKmlNetworkLinkRefreshMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefreshMode (
        /*[in]*/ enum AgEStkGraphicsKmlNetworkLinkRefreshMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefreshInterval (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefreshInterval (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewRefreshMode (
        /*[out,retval]*/ enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewRefreshMode (
        /*[in]*/ enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewRefreshTime (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewRefreshTime (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewBoundScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewBoundScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumRefreshPeriod (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cookie (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinkSnippet (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Expires (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
};

struct __declspec(uuid("a745a3b2-9cb1-4a76-a4f5-c2a1ae2c96d6"))
_IAgStkGraphicsMarkerBatchPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClampToPixel,put=PutClampToPixel))
    VARIANT_BOOL ClampToPixel;
    __declspec(property(get=GetSizeSource))
    enum AgEStkGraphicsMarkerBatchSizeSource SizeSource;
    __declspec(property(get=GetSortOrder))
    enum AgEStkGraphicsMarkerBatchSortOrder SortOrder;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetRenderingMethod))
    enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod;
    __declspec(property(get=GetRenderPass,put=PutRenderPass))
    enum AgEStkGraphicsMarkerBatchRenderPass RenderPass;
    __declspec(property(get=GetBoundingSphereScale,put=PutBoundingSphereScale))
    double BoundingSphereScale;
    __declspec(property(get=GetDistanceDisplayConditionPerMarker,put=PutDistanceDisplayConditionPerMarker))
    IAgStkGraphicsDistanceDisplayConditionPtr DistanceDisplayConditionPerMarker;
    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetSizeUnit,put=PutSizeUnit))
    enum AgEStkGraphicsMarkerBatchUnit SizeUnit;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsOrigin Origin;
    __declspec(property(get=GetPixelOffset,put=PutPixelOffset))
    SAFEARRAY * PixelOffset;
    __declspec(property(get=GetEyeOffset,put=PutEyeOffset))
    SAFEARRAY * EyeOffset;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetTextureCoordinate,put=PutTextureCoordinate))
    SAFEARRAY * TextureCoordinate;
    __declspec(property(get=GetAlignToPixel,put=PutAlignToPixel))
    VARIANT_BOOL AlignToPixel;
    __declspec(property(get=GetWireframe,put=PutWireframe))
    VARIANT_BOOL Wireframe;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    enum AgEStkGraphicsMarkerBatchSizeSource GetSizeSource ( );
    enum AgEStkGraphicsMarkerBatchSortOrder GetSortOrder ( );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    enum AgEStkGraphicsMarkerBatchRenderingMethod GetRenderingMethod ( );
    enum AgEStkGraphicsMarkerBatchRenderPass GetRenderPass ( );
    void PutRenderPass (
        enum AgEStkGraphicsMarkerBatchRenderPass pRetVal );
    double GetBoundingSphereScale ( );
    void PutBoundingSphereScale (
        double pRetVal );
    IAgStkGraphicsDistanceDisplayConditionPtr GetDistanceDisplayConditionPerMarker ( );
    void PutDistanceDisplayConditionPerMarker (
        struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal );
    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    enum AgEStkGraphicsMarkerBatchUnit GetSizeUnit ( );
    void PutSizeUnit (
        enum AgEStkGraphicsMarkerBatchUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    enum AgEStkGraphicsOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsOrigin pRetVal );
    SAFEARRAY * GetPixelOffset ( );
    void PutPixelOffset (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetEyeOffset ( );
    void PutEyeOffset (
        SAFEARRAY * ppRetVal );
    double GetRotation ( );
    void PutRotation (
        double pRetVal );
    SAFEARRAY * GetTextureCoordinate ( );
    void PutTextureCoordinate (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetAlignToPixel ( );
    void PutAlignToPixel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetWireframe ( );
    void PutWireframe (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions );
    HRESULT SetWithOptionalParameters (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetWithOptionalParametersAndRenderPassHint (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    HRESULT SetCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetCartographicWithOptionalParametersAndRenderPassHint (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithOptionalParameters (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetClampToPixel ( );
    void PutClampToPixel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );
    HRESULT AlignToScreen ( );
    HRESULT AlignToNorth (
        _bstr_t CentralBody );
    HRESULT AlignToAxis (
        _bstr_t CentralBody,
        SAFEARRAY * * Axis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeSource (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchSizeSource * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SortOrder (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchSortOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderingMethod (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderPass (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchRenderPass * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RenderPass (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderPass pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphereScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphereScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayConditionPerMarker (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DistanceDisplayConditionPerMarker (
        /*[in]*/ struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SizeUnit (
        /*[out,retval]*/ enum AgEStkGraphicsMarkerBatchUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SizeUnit (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PixelOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EyeOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EyeOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureCoordinate (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureCoordinate (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignToPixel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AlignToPixel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wireframe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wireframe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParametersAndRenderPassHint (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParametersAndRenderPassHint (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClampToPixel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClampToPixel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AlignToScreen ( ) = 0;
      virtual HRESULT __stdcall raw_AlignToNorth (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_AlignToAxis (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Axis ) = 0;
};

struct __declspec(uuid("2383aee1-c6e8-4c96-9ea0-f82e60da095a"))
_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetTextures (
        SAFEARRAY * * Textures );
    HRESULT SetSizes (
        SAFEARRAY * * Sizes );
    HRESULT SetColors (
        SAFEARRAY * * Colors );
    HRESULT SetOrigins (
        SAFEARRAY * * Origins );
    HRESULT SetPixelOffsets (
        SAFEARRAY * * PixelOffsets );
    HRESULT SetEyeOffsets (
        SAFEARRAY * * EyeOffsets );
    HRESULT SetRotations (
        SAFEARRAY * * RotationAngles );
    HRESULT SetTextureCoordinates (
        SAFEARRAY * * TextureCoordinates );
    HRESULT SetTimeIntervalDisplayConditions (
        SAFEARRAY * * TimeIntervals );
    HRESULT SetDisplays (
        SAFEARRAY * * Displays );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetTextures (
        /*[in]*/ SAFEARRAY * * Textures ) = 0;
      virtual HRESULT __stdcall raw_SetSizes (
        /*[in]*/ SAFEARRAY * * Sizes ) = 0;
      virtual HRESULT __stdcall raw_SetColors (
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetOrigins (
        /*[in]*/ SAFEARRAY * * Origins ) = 0;
      virtual HRESULT __stdcall raw_SetPixelOffsets (
        /*[in]*/ SAFEARRAY * * PixelOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetEyeOffsets (
        /*[in]*/ SAFEARRAY * * EyeOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetRotations (
        /*[in]*/ SAFEARRAY * * RotationAngles ) = 0;
      virtual HRESULT __stdcall raw_SetTextureCoordinates (
        /*[in]*/ SAFEARRAY * * TextureCoordinates ) = 0;
      virtual HRESULT __stdcall raw_SetTimeIntervalDisplayConditions (
        /*[in]*/ SAFEARRAY * * TimeIntervals ) = 0;
      virtual HRESULT __stdcall raw_SetDisplays (
        /*[in]*/ SAFEARRAY * * Displays ) = 0;
};

struct __declspec(uuid("d9db5e4d-1f0b-4188-8971-90eadb1024ce"))
_IAgStkGraphicsModelArticulation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsModelTransformationPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    int GetCount ( );
    IAgStkGraphicsModelTransformationPtr GetItem (
        int Index );
    IAgStkGraphicsModelTransformationPtr GetItemByString (
        _bstr_t Name );
    IAgStkGraphicsModelTransformationPtr GetByName (
        _bstr_t Name );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsModelTransformation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetItemByString (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelTransformation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelTransformation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("fd278907-e357-4cd9-9465-eae3c059a830"))
_IAgStkGraphicsModelArticulationCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsModelArticulationPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IAgStkGraphicsModelArticulationPtr GetItem (
        int Index );
    IAgStkGraphicsModelArticulationPtr GetItemByString (
        _bstr_t Name );
    IAgStkGraphicsModelArticulationPtr GetByName (
        _bstr_t Name );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetItemByString (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("7271ab5a-b51b-4b77-b7ce-602fb3f41ce4"))
_IAgStkGraphicsModelPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetArticulations))
    IAgStkGraphicsModelArticulationCollectionPtr Articulations;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    _bstr_t GetUriAsString ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    void PutOrientation (
        struct STKUtil::IAgOrientation * ppRetVal );
    IAgStkGraphicsModelArticulationCollectionPtr GetArticulations ( );
    HRESULT LoadWithStringUri (
        _bstr_t Uri );
    HRESULT LoadWithStringUriAndUpAxis (
        _bstr_t Uri,
        enum AgEStkGraphicsModelUpAxis UpAxis );
    HRESULT SetPositionCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Position );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Articulations (
        /*[out,retval]*/ struct IAgStkGraphicsModelArticulationCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadWithStringUri (
        /*[in]*/ BSTR Uri ) = 0;
      virtual HRESULT __stdcall raw_LoadWithStringUriAndUpAxis (
        /*[in]*/ BSTR Uri,
        /*[in]*/ enum AgEStkGraphicsModelUpAxis UpAxis ) = 0;
      virtual HRESULT __stdcall raw_SetPositionCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Position ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("71981bc3-13e5-4798-95ff-980e9dc84813"))
_IAgStkGraphicsModelTransformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentValue,put=PutCurrentValue))
    double CurrentValue;
    __declspec(property(get=GetMinimumValue))
    double MinimumValue;
    __declspec(property(get=GetMaximumValue))
    double MaximumValue;
    __declspec(property(get=GetDefaultValue))
    double DefaultValue;
    __declspec(property(get=GetRange))
    double Range;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEStkGraphicsModelTransformationType Type;

    //
    // Wrapper methods for error-handling
    //

    double GetCurrentValue ( );
    void PutCurrentValue (
        double pRetVal );
    double GetMinimumValue ( );
    double GetMaximumValue ( );
    double GetDefaultValue ( );
    double GetRange ( );
    _bstr_t GetName ( );
    enum AgEStkGraphicsModelTransformationType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurrentValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurrentValue (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEStkGraphicsModelTransformationType * pRetVal ) = 0;
};

enum AgEStkGraphicsScreenOverlayOrigin
{
    eStkGraphicsScreenOverlayOriginBottomLeft = 0,
    eStkGraphicsScreenOverlayOriginBottomCenter = 1,
    eStkGraphicsScreenOverlayOriginBottomRight = 2,
    eStkGraphicsScreenOverlayOriginCenterLeft = 3,
    eStkGraphicsScreenOverlayOriginCenter = 4,
    eStkGraphicsScreenOverlayOriginCenterRight = 5,
    eStkGraphicsScreenOverlayOriginTopLeft = 6,
    eStkGraphicsScreenOverlayOriginTopCenter = 7,
    eStkGraphicsScreenOverlayOriginTopRight = 8
};

enum AgEStkGraphicsScreenOverlayPinningOrigin
{
    eStkGraphicsScreenOverlayPinningOriginBottomLeft = 0,
    eStkGraphicsScreenOverlayPinningOriginBottomCenter = 1,
    eStkGraphicsScreenOverlayPinningOriginBottomRight = 2,
    eStkGraphicsScreenOverlayPinningOriginCenterLeft = 3,
    eStkGraphicsScreenOverlayPinningOriginCenter = 4,
    eStkGraphicsScreenOverlayPinningOriginCenterRight = 5,
    eStkGraphicsScreenOverlayPinningOriginTopLeft = 6,
    eStkGraphicsScreenOverlayPinningOriginTopCenter = 7,
    eStkGraphicsScreenOverlayPinningOriginTopRight = 8,
    eStkGraphicsScreenOverlayPinningOriginAutomatic = 9
};

struct __declspec(uuid("b7007235-5a52-450b-83af-1e8080d3b0be"))
IAgStkGraphicsOverlay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetPinningPosition,put=PutPinningPosition))
    SAFEARRAY * PinningPosition;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetControlSize))
    SAFEARRAY * ControlSize;
    __declspec(property(get=GetXUnit,put=PutXUnit))
    enum AgEStkGraphicsScreenOverlayUnit XUnit;
    __declspec(property(get=GetControlBounds))
    SAFEARRAY * ControlBounds;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetYUnit,put=PutYUnit))
    enum AgEStkGraphicsScreenOverlayUnit YUnit;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetWidthUnit,put=PutWidthUnit))
    enum AgEStkGraphicsScreenOverlayUnit WidthUnit;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    enum AgEStkGraphicsScreenOverlayUnit HeightUnit;
    __declspec(property(get=GetMinimumSize,put=PutMinimumSize))
    SAFEARRAY * MinimumSize;
    __declspec(property(get=GetMaximumSize,put=PutMaximumSize))
    SAFEARRAY * MaximumSize;
    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderSize,put=PutBorderSize))
    int BorderSize;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetTranslationX,put=PutTranslationX))
    double TranslationX;
    __declspec(property(get=GetTranslationY,put=PutTranslationY))
    double TranslationY;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetRotationPoint,put=PutRotationPoint))
    SAFEARRAY * RotationPoint;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetFlipX,put=PutFlipX))
    VARIANT_BOOL FlipX;
    __declspec(property(get=GetFlipY,put=PutFlipY))
    VARIANT_BOOL FlipY;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsScreenOverlayOrigin Origin;
    __declspec(property(get=GetPinningOrigin,put=PutPinningOrigin))
    enum AgEStkGraphicsScreenOverlayPinningOrigin PinningOrigin;
    __declspec(property(get=GetParent))
    IAgStkGraphicsScreenOverlayContainerPtr Parent;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPickingEnabled,put=PutPickingEnabled))
    VARIANT_BOOL PickingEnabled;
    __declspec(property(get=GetClipToParent,put=PutClipToParent))
    VARIANT_BOOL ClipToParent;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPinningPosition ( );
    void PutPinningPosition (
        SAFEARRAY * ppRetVal );
    double GetX ( );
    void PutX (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetXUnit ( );
    void PutXUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetYUnit ( );
    void PutYUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetWidthUnit ( );
    void PutWidthUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetHeightUnit ( );
    void PutHeightUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetMinimumSize ( );
    void PutMinimumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetMaximumSize ( );
    void PutMaximumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetBounds ( );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    int GetBorderSize ( );
    void PutBorderSize (
        int pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    double GetTranslationX ( );
    void PutTranslationX (
        double pRetVal );
    double GetTranslationY ( );
    void PutTranslationY (
        double pRetVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pRetVal );
    SAFEARRAY * GetRotationPoint ( );
    void PutRotationPoint (
        SAFEARRAY * ppRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetFlipX ( );
    void PutFlipX (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFlipY ( );
    void PutFlipY (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsScreenOverlayOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsScreenOverlayOrigin pRetVal );
    enum AgEStkGraphicsScreenOverlayPinningOrigin GetPinningOrigin ( );
    void PutPinningOrigin (
        enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal );
    IAgStkGraphicsScreenOverlayContainerPtr GetParent ( );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetPickingEnabled ( );
    void PutPickingEnabled (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetClipToParent ( );
    void PutClipToParent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    SAFEARRAY * GetControlPosition ( );
    SAFEARRAY * GetControlSize ( );
    SAFEARRAY * GetControlBounds ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    HRESULT BringToFront ( );
    HRESULT SendToBack ( );
    SAFEARRAY * OverlayToControl (
        double X,
        double Y );
    SAFEARRAY * ControlToOverlay (
        double X,
        double Y );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningPosition (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WidthUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WidthUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HeightUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationPoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationPoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipX (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipX (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipY (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipY (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningOrigin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningOrigin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayContainer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClipToParent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClipToParent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlBounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OverlayToControl (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ControlToOverlay (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("ee941cc2-13c4-407b-8854-141b879e8047"))
_IAgStkGraphicsOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetPinningPosition,put=PutPinningPosition))
    SAFEARRAY * PinningPosition;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetXUnit,put=PutXUnit))
    enum AgEStkGraphicsScreenOverlayUnit XUnit;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetYUnit,put=PutYUnit))
    enum AgEStkGraphicsScreenOverlayUnit YUnit;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetWidthUnit,put=PutWidthUnit))
    enum AgEStkGraphicsScreenOverlayUnit WidthUnit;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    enum AgEStkGraphicsScreenOverlayUnit HeightUnit;
    __declspec(property(get=GetMinimumSize,put=PutMinimumSize))
    SAFEARRAY * MinimumSize;
    __declspec(property(get=GetMaximumSize,put=PutMaximumSize))
    SAFEARRAY * MaximumSize;
    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderSize,put=PutBorderSize))
    int BorderSize;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetTranslationX,put=PutTranslationX))
    double TranslationX;
    __declspec(property(get=GetTranslationY,put=PutTranslationY))
    double TranslationY;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetRotationPoint,put=PutRotationPoint))
    SAFEARRAY * RotationPoint;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetFlipX,put=PutFlipX))
    VARIANT_BOOL FlipX;
    __declspec(property(get=GetFlipY,put=PutFlipY))
    VARIANT_BOOL FlipY;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsScreenOverlayOrigin Origin;
    __declspec(property(get=GetPinningOrigin,put=PutPinningOrigin))
    enum AgEStkGraphicsScreenOverlayPinningOrigin PinningOrigin;
    __declspec(property(get=GetParent))
    IAgStkGraphicsScreenOverlayContainerPtr Parent;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPickingEnabled,put=PutPickingEnabled))
    VARIANT_BOOL PickingEnabled;
    __declspec(property(get=GetClipToParent,put=PutClipToParent))
    VARIANT_BOOL ClipToParent;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetControlSize))
    SAFEARRAY * ControlSize;
    __declspec(property(get=GetControlBounds))
    SAFEARRAY * ControlBounds;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPinningPosition ( );
    void PutPinningPosition (
        SAFEARRAY * ppRetVal );
    double GetX ( );
    void PutX (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetXUnit ( );
    void PutXUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetYUnit ( );
    void PutYUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetWidthUnit ( );
    void PutWidthUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetHeightUnit ( );
    void PutHeightUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetMinimumSize ( );
    void PutMinimumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetMaximumSize ( );
    void PutMaximumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetBounds ( );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    int GetBorderSize ( );
    void PutBorderSize (
        int pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    double GetTranslationX ( );
    void PutTranslationX (
        double pRetVal );
    double GetTranslationY ( );
    void PutTranslationY (
        double pRetVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pRetVal );
    SAFEARRAY * GetRotationPoint ( );
    void PutRotationPoint (
        SAFEARRAY * ppRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetFlipX ( );
    void PutFlipX (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFlipY ( );
    void PutFlipY (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsScreenOverlayOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsScreenOverlayOrigin pRetVal );
    enum AgEStkGraphicsScreenOverlayPinningOrigin GetPinningOrigin ( );
    void PutPinningOrigin (
        enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal );
    IAgStkGraphicsScreenOverlayContainerPtr GetParent ( );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetPickingEnabled ( );
    void PutPickingEnabled (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetClipToParent ( );
    void PutClipToParent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    SAFEARRAY * GetControlPosition ( );
    SAFEARRAY * GetControlSize ( );
    SAFEARRAY * GetControlBounds ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    HRESULT BringToFront ( );
    HRESULT SendToBack ( );
    SAFEARRAY * OverlayToControl (
        double X,
        double Y );
    SAFEARRAY * ControlToOverlay (
        double X,
        double Y );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningPosition (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WidthUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WidthUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HeightUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationPoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationPoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipX (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipX (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipY (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipY (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningOrigin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningOrigin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayContainer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClipToParent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClipToParent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlBounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OverlayToControl (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ControlToOverlay (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("b8ea9de6-95de-479e-955a-227452645225"))
_IAgStkGraphicsPickResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects))
    IAgStkGraphicsObjectCollectionPtr Objects;
    __declspec(property(get=GetDepth))
    float Depth;
    __declspec(property(get=GetPosition))
    SAFEARRAY * Position;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsObjectCollectionPtr GetObjects ( );
    float GetDepth ( );
    SAFEARRAY * GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ struct IAgStkGraphicsObjectCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("3a8d7ac6-a828-41c7-8d1a-6e4719ea156d"))
_IAgStkGraphicsPixelSizeDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumPixelSize,put=PutMinimumPixelSize))
    int MinimumPixelSize;
    __declspec(property(get=GetMaximumPixelSize,put=PutMaximumPixelSize))
    int MaximumPixelSize;

    //
    // Wrapper methods for error-handling
    //

    int GetMinimumPixelSize ( );
    void PutMinimumPixelSize (
        int pRetVal );
    int GetMaximumPixelSize ( );
    void PutMaximumPixelSize (
        int pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumPixelSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumPixelSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPixelSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumPixelSize (
        /*[in]*/ int pRetVal ) = 0;
};

struct __declspec(uuid("085dcb71-3e40-49d4-ba42-629b1fb1835b"))
_IAgStkGraphicsPointBatchPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    float PixelSize;
    __declspec(property(get=GetMinimumPixelSizeSupported))
    float MinimumPixelSizeSupported;
    __declspec(property(get=GetMaximumPixelSizeSupported))
    float MaximumPixelSizeSupported;
    __declspec(property(get=GetDistanceDisplayConditionPerPoint,put=PutDistanceDisplayConditionPerPoint))
    IAgStkGraphicsDistanceDisplayConditionPtr DistanceDisplayConditionPerPoint;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    float GetPixelSize ( );
    void PutPixelSize (
        float pRetVal );
    float GetMinimumPixelSizeSupported ( );
    float GetMaximumPixelSizeSupported ( );
    IAgStkGraphicsDistanceDisplayConditionPtr GetDistanceDisplayConditionPerPoint ( );
    void PutDistanceDisplayConditionPerPoint (
        struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions );
    HRESULT SetWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetWithColorsAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    HRESULT SetCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetCartographicWithColorsAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithColorsIndicesOrderAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayConditionPerPoint (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DistanceDisplayConditionPerPoint (
        /*[in]*/ struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetWithColorsAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColorsAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColorsIndicesOrderAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("ffc71d68-97f4-49e2-b0f8-87206cba3913"))
_IAgStkGraphicsPolylinePrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;
    __declspec(property(get=GetPositionInterpolator))
    IAgStkGraphicsPositionInterpolatorPtr PositionInterpolator;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    float GetWidth ( );
    void PutWidth (
        float pRetVal );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );
    IAgStkGraphicsPositionInterpolatorPtr GetPositionInterpolator ( );
    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions );
    HRESULT SetWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetWithColorsAndHint (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetWithSurfaceShapesResult (
        struct IAgStkGraphicsSurfaceShapesResult * SurfaceShapesResult );
    HRESULT SetWithSurfaceTriangulatorResult (
        struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulatorResult );
    HRESULT SetWithSolidTriangulatorResult (
        struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    HRESULT SetCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors );
    HRESULT SetCartographicWithColorsAndHint (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetSubset (
        SAFEARRAY * * Positions,
        int Index,
        int Count );
    HRESULT SetSubsetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        int Index,
        int Count );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithColors (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithColorsIndicesOrderAndRenderPassHint (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithColors (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Colors,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionInterpolator (
        /*[out,retval]*/ struct IAgStkGraphicsPositionInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetWithColorsAndHint (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetWithSurfaceShapesResult (
        /*[in]*/ struct IAgStkGraphicsSurfaceShapesResult * SurfaceShapesResult ) = 0;
      virtual HRESULT __stdcall raw_SetWithSurfaceTriangulatorResult (
        /*[in]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulatorResult ) = 0;
      virtual HRESULT __stdcall raw_SetWithSolidTriangulatorResult (
        /*[in]*/ struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithColorsAndHint (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetSubset (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ int Index,
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_SetSubsetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ int Index,
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColors (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithColorsIndicesOrderAndRenderPassHint (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColors (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Colors,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("6fd1d9d8-fda6-49ee-8e24-0ce0f6e18622"))
_IAgStkGraphicsPositionInterpolator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    SAFEARRAY * Interpolate (
        SAFEARRAY * * Positions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Interpolate (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("d9958702-369b-4d95-82a8-b70a7d42cca9"))
_IAgStkGraphicsPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("952df8d5-aaa1-45a6-8fe6-06f291a18cd2"))
_IAgStkGraphicsPrimitiveManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetPrecisionExponent,put=PutPrecisionExponent))
    int PrecisionExponent;
    __declspec(property(get=GetTranslucentPrimitivesSortOrder,put=PutTranslucentPrimitivesSortOrder))
    enum AgEStkGraphicsPrimitivesSortOrder TranslucentPrimitivesSortOrder;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    int GetPrecisionExponent ( );
    void PutPrecisionExponent (
        int pRetVal );
    enum AgEStkGraphicsPrimitivesSortOrder GetTranslucentPrimitivesSortOrder ( );
    void PutTranslucentPrimitivesSortOrder (
        enum AgEStkGraphicsPrimitivesSortOrder pRetVal );
    HRESULT Add (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Remove (
        struct IAgStkGraphicsPrimitive * Primitive );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsPrimitive * Primitive );
    HRESULT Clear ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PrecisionExponent (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PrecisionExponent (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentPrimitivesSortOrder (
        /*[out,retval]*/ enum AgEStkGraphicsPrimitivesSortOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentPrimitivesSortOrder (
        /*[in]*/ enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("ee077130-347d-4b01-a45e-ac70d2e550d5"))
_IAgStkGraphicsRasterImageGlobeOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitudeBasedTranslucencyLowerTranslucency,put=PutAltitudeBasedTranslucencyLowerTranslucency))
    float AltitudeBasedTranslucencyLowerTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperTranslucency,put=PutAltitudeBasedTranslucencyUpperTranslucency))
    float AltitudeBasedTranslucencyUpperTranslucency;
    __declspec(property(get=GetAltitudeBasedTranslucencyLowerAltitude,put=PutAltitudeBasedTranslucencyLowerAltitude))
    double AltitudeBasedTranslucencyLowerAltitude;
    __declspec(property(get=GetAltitudeBasedTranslucencyUpperAltitude,put=PutAltitudeBasedTranslucencyUpperAltitude))
    double AltitudeBasedTranslucencyUpperAltitude;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetUseTransparentColor,put=PutUseTransparentColor))
    VARIANT_BOOL UseTransparentColor;
    __declspec(property(get=GetTransparentColor,put=PutTransparentColor))
    OLE_COLOR TransparentColor;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;
    __declspec(property(get=GetUseAltitudeBasedTranslucency,put=PutUseAltitudeBasedTranslucency))
    VARIANT_BOOL UseAltitudeBasedTranslucency;

    //
    // Wrapper methods for error-handling
    //

    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetUseAltitudeBasedTranslucency ( );
    void PutUseAltitudeBasedTranslucency (
        VARIANT_BOOL pRetVal );
    float GetAltitudeBasedTranslucencyLowerTranslucency ( );
    void PutAltitudeBasedTranslucencyLowerTranslucency (
        float pRetVal );
    float GetAltitudeBasedTranslucencyUpperTranslucency ( );
    void PutAltitudeBasedTranslucencyUpperTranslucency (
        float pRetVal );
    double GetAltitudeBasedTranslucencyLowerAltitude ( );
    void PutAltitudeBasedTranslucencyLowerAltitude (
        double pRetVal );
    double GetAltitudeBasedTranslucencyUpperAltitude ( );
    void PutAltitudeBasedTranslucencyUpperAltitude (
        double pRetVal );
    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );
    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetUseTransparentColor ( );
    void PutUseTransparentColor (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetTransparentColor ( );
    void PutTransparentColor (
        OLE_COLOR pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAltitudeBasedTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAltitudeBasedTranslucency (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyLowerAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyLowerAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeBasedTranslucencyUpperAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeBasedTranslucencyUpperAltitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseTransparentColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparentColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
};

struct __declspec(uuid("7b8ccea0-ca75-4ac5-abd2-6e8cf4aa3331"))
_IAgStkGraphicsRhumbLineInterpolator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    SAFEARRAY * Interpolate (
        SAFEARRAY * * Positions );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pRetVal );
    double GetGranularity ( );
    void PutGranularity (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Interpolate (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8ac55871-2131-41fb-96cd-ccdd303f88c3"))
_IAgStkGraphicsScene : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCamera))
    IAgStkGraphicsCameraPtr Camera;
    __declspec(property(get=GetLighting))
    IAgStkGraphicsLightingPtr Lighting;
    __declspec(property(get=GetShowSunshine,put=PutShowSunshine))
    VARIANT_BOOL ShowSunshine;
    __declspec(property(get=GetCentralBodies))
    IAgStkGraphicsCentralBodyGraphicsIndexerPtr CentralBodies;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetShadeSkyBasedOnAltitude,put=PutShadeSkyBasedOnAltitude))
    VARIANT_BOOL ShadeSkyBasedOnAltitude;
    __declspec(property(get=GetShowStars,put=PutShowStars))
    VARIANT_BOOL ShowStars;
    __declspec(property(get=GetGlobeOverlaySettings))
    IAgStkGraphicsSceneGlobeOverlaySettingsPtr GlobeOverlaySettings;
    __declspec(property(get=GetSceneID))
    int SceneID;
    __declspec(property(get=GetShowWaterSurface,put=PutShowWaterSurface))
    VARIANT_BOOL ShowWaterSurface;
    __declspec(property(get=GetAntiAliasing,put=PutAntiAliasing))
    enum AgEStkGraphicsAntiAliasing AntiAliasing;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCameraPtr GetCamera ( );
    IAgStkGraphicsLightingPtr GetLighting ( );
    VARIANT_BOOL GetShowSunshine ( );
    void PutShowSunshine (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsCentralBodyGraphicsIndexerPtr GetCentralBodies ( );
    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetShadeSkyBasedOnAltitude ( );
    void PutShadeSkyBasedOnAltitude (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowStars ( );
    void PutShowStars (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsSceneGlobeOverlaySettingsPtr GetGlobeOverlaySettings ( );
    HRESULT Render ( );
    IAgStkGraphicsPickResultCollectionPtr Pick (
        int X,
        int Y );
    IAgStkGraphicsPickResultCollectionPtr PickRectangular (
        int Left,
        int Bottom,
        int Right,
        int Top );
    IAgStkGraphicsScreenOverlayPickResultCollectionPtr PickScreenOverlays (
        int X,
        int Y );
    int GetSceneID ( );
    VARIANT_BOOL GetShowWaterSurface ( );
    void PutShowWaterSurface (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsAntiAliasing GetAntiAliasing ( );
    void PutAntiAliasing (
        enum AgEStkGraphicsAntiAliasing pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Camera (
        /*[out,retval]*/ struct IAgStkGraphicsCamera * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgStkGraphicsLighting * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowSunshine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowSunshine (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodies (
        /*[out,retval]*/ struct IAgStkGraphicsCentralBodyGraphicsIndexer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadeSkyBasedOnAltitude (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadeSkyBasedOnAltitude (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowStars (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowStars (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeOverlaySettings (
        /*[out,retval]*/ struct IAgStkGraphicsSceneGlobeOverlaySettings * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Render ( ) = 0;
      virtual HRESULT __stdcall raw_Pick (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ struct IAgStkGraphicsPickResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_PickRectangular (
        /*[in]*/ int Left,
        /*[in]*/ int Bottom,
        /*[in]*/ int Right,
        /*[in]*/ int Top,
        /*[out,retval]*/ struct IAgStkGraphicsPickResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_PickScreenOverlays (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayPickResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SceneID (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowWaterSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowWaterSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AntiAliasing (
        /*[out,retval]*/ enum AgEStkGraphicsAntiAliasing * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AntiAliasing (
        /*[in]*/ enum AgEStkGraphicsAntiAliasing pRetVal ) = 0;
};

struct __declspec(uuid("331c376c-8a84-4a4b-a047-2a41d07ad938"))
_IAgStkGraphicsSceneDisplayCondition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetDisplayInScene (
        struct IAgStkGraphicsScene * Scene,
        VARIANT_BOOL On );
    VARIANT_BOOL GetDisplayInScene (
        struct IAgStkGraphicsScene * Scene );
    HRESULT DisplayOnlyInScene (
        struct IAgStkGraphicsScene * Scene );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDisplayInScene (
        /*[in]*/ struct IAgStkGraphicsScene * Scene,
        /*[in]*/ VARIANT_BOOL On ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayInScene (
        /*[in]*/ struct IAgStkGraphicsScene * Scene,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DisplayOnlyInScene (
        /*[in]*/ struct IAgStkGraphicsScene * Scene ) = 0;
};

struct __declspec(uuid("60839368-5830-4ffc-a295-5574d669fd45"))
_IAgStkGraphicsScreenOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetPinningPosition,put=PutPinningPosition))
    SAFEARRAY * PinningPosition;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetXUnit,put=PutXUnit))
    enum AgEStkGraphicsScreenOverlayUnit XUnit;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetYUnit,put=PutYUnit))
    enum AgEStkGraphicsScreenOverlayUnit YUnit;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetWidthUnit,put=PutWidthUnit))
    enum AgEStkGraphicsScreenOverlayUnit WidthUnit;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    enum AgEStkGraphicsScreenOverlayUnit HeightUnit;
    __declspec(property(get=GetMinimumSize,put=PutMinimumSize))
    SAFEARRAY * MinimumSize;
    __declspec(property(get=GetMaximumSize,put=PutMaximumSize))
    SAFEARRAY * MaximumSize;
    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderSize,put=PutBorderSize))
    int BorderSize;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetTranslationX,put=PutTranslationX))
    double TranslationX;
    __declspec(property(get=GetTranslationY,put=PutTranslationY))
    double TranslationY;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetRotationPoint,put=PutRotationPoint))
    SAFEARRAY * RotationPoint;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetFlipX,put=PutFlipX))
    VARIANT_BOOL FlipX;
    __declspec(property(get=GetFlipY,put=PutFlipY))
    VARIANT_BOOL FlipY;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsScreenOverlayOrigin Origin;
    __declspec(property(get=GetPinningOrigin,put=PutPinningOrigin))
    enum AgEStkGraphicsScreenOverlayPinningOrigin PinningOrigin;
    __declspec(property(get=GetParent))
    IAgStkGraphicsScreenOverlayContainerPtr Parent;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPickingEnabled,put=PutPickingEnabled))
    VARIANT_BOOL PickingEnabled;
    __declspec(property(get=GetClipToParent,put=PutClipToParent))
    VARIANT_BOOL ClipToParent;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetControlSize))
    SAFEARRAY * ControlSize;
    __declspec(property(get=GetControlBounds))
    SAFEARRAY * ControlBounds;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPinningPosition ( );
    void PutPinningPosition (
        SAFEARRAY * ppRetVal );
    double GetX ( );
    void PutX (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetXUnit ( );
    void PutXUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetYUnit ( );
    void PutYUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetWidthUnit ( );
    void PutWidthUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetHeightUnit ( );
    void PutHeightUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetMinimumSize ( );
    void PutMinimumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetMaximumSize ( );
    void PutMaximumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetBounds ( );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    int GetBorderSize ( );
    void PutBorderSize (
        int pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    double GetTranslationX ( );
    void PutTranslationX (
        double pRetVal );
    double GetTranslationY ( );
    void PutTranslationY (
        double pRetVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pRetVal );
    SAFEARRAY * GetRotationPoint ( );
    void PutRotationPoint (
        SAFEARRAY * ppRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetFlipX ( );
    void PutFlipX (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFlipY ( );
    void PutFlipY (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsScreenOverlayOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsScreenOverlayOrigin pRetVal );
    enum AgEStkGraphicsScreenOverlayPinningOrigin GetPinningOrigin ( );
    void PutPinningOrigin (
        enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal );
    IAgStkGraphicsScreenOverlayContainerPtr GetParent ( );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetPickingEnabled ( );
    void PutPickingEnabled (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetClipToParent ( );
    void PutClipToParent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    SAFEARRAY * GetControlPosition ( );
    SAFEARRAY * GetControlSize ( );
    SAFEARRAY * GetControlBounds ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    HRESULT BringToFront ( );
    HRESULT SendToBack ( );
    SAFEARRAY * OverlayToControl (
        double X,
        double Y );
    SAFEARRAY * ControlToOverlay (
        double X,
        double Y );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningPosition (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WidthUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WidthUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HeightUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationPoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationPoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipX (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipX (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipY (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipY (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningOrigin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningOrigin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayContainer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClipToParent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClipToParent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlBounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OverlayToControl (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ControlToOverlay (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("ee1173b3-b4cf-47af-9725-383e961d6564"))
_IAgStkGraphicsScreenOverlayCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScreenOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsScreenOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsScreenOverlay * Item );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsScreenOverlay * Item );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsScreenOverlay * Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item ) = 0;
};

struct __declspec(uuid("5da07cb8-db02-40c2-95fa-39f59a11a607"))
_IAgStkGraphicsScreenOverlayManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsScreenOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsScreenOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsScreenOverlay * Item );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsScreenOverlay * Item );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsScreenOverlay * Item );
    SAFEARRAY * GetBounds ( );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsScreenOverlay * Item ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("bbb59898-aba6-46e0-b61d-352b37d72ff9"))
_IAgStkGraphicsScreenOverlayPickResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetOverlay))
    IAgStkGraphicsScreenOverlayPtr Overlay;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    SAFEARRAY * GetControlPosition ( );
    IAgStkGraphicsScreenOverlayPtr GetOverlay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlay (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("aa50a136-754c-4064-a61b-7226a84b2190"))
_IAgStkGraphicsSolidPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetOutlineAppearance,put=PutOutlineAppearance))
    enum AgEStkGraphicsOutlineAppearance OutlineAppearance;
    __declspec(property(get=GetBackLineColor,put=PutBackLineColor))
    OLE_COLOR BackLineColor;
    __declspec(property(get=GetBackLineTranslucency,put=PutBackLineTranslucency))
    float BackLineTranslucency;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;
    __declspec(property(get=GetRotation,put=PutRotation))
    STKUtil::IAgOrientationPtr Rotation;
    __declspec(property(get=GetScale,put=PutScale))
    SAFEARRAY * Scale;
    __declspec(property(get=GetBackLineWidth,put=PutBackLineWidth))
    float BackLineWidth;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetAffectedByLighting,put=PutAffectedByLighting))
    VARIANT_BOOL AffectedByLighting;
    __declspec(property(get=GetDisplayFill,put=PutDisplayFill))
    VARIANT_BOOL DisplayFill;
    __declspec(property(get=GetDisplaySilhouette,put=PutDisplaySilhouette))
    VARIANT_BOOL DisplaySilhouette;
    __declspec(property(get=GetSilhouetteColor,put=PutSilhouetteColor))
    OLE_COLOR SilhouetteColor;
    __declspec(property(get=GetSilhouetteTranslucency,put=PutSilhouetteTranslucency))
    float SilhouetteTranslucency;
    __declspec(property(get=GetSilhouetteWidth,put=PutSilhouetteWidth))
    float SilhouetteWidth;
    __declspec(property(get=GetMinimumSilhouetteWidthSupported))
    float MinimumSilhouetteWidthSupported;
    __declspec(property(get=GetMaximumSilhouetteWidthSupported))
    float MaximumSilhouetteWidthSupported;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetAffectedByLighting ( );
    void PutAffectedByLighting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayFill ( );
    void PutDisplayFill (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplaySilhouette ( );
    void PutDisplaySilhouette (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetSilhouetteColor ( );
    void PutSilhouetteColor (
        OLE_COLOR pRetVal );
    float GetSilhouetteTranslucency ( );
    void PutSilhouetteTranslucency (
        float pRetVal );
    float GetSilhouetteWidth ( );
    void PutSilhouetteWidth (
        float pRetVal );
    float GetMinimumSilhouetteWidthSupported ( );
    float GetMaximumSilhouetteWidthSupported ( );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    enum AgEStkGraphicsOutlineAppearance GetOutlineAppearance ( );
    void PutOutlineAppearance (
        enum AgEStkGraphicsOutlineAppearance pRetVal );
    OLE_COLOR GetBackLineColor ( );
    void PutBackLineColor (
        OLE_COLOR pRetVal );
    float GetBackLineTranslucency ( );
    void PutBackLineTranslucency (
        float pRetVal );
    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    STKUtil::IAgOrientationPtr GetRotation ( );
    void PutRotation (
        struct STKUtil::IAgOrientation * ppRetVal );
    SAFEARRAY * GetScale ( );
    void PutScale (
        SAFEARRAY * ppRetVal );
    float GetBackLineWidth ( );
    void PutBackLineWidth (
        float pRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    HRESULT SetWithResult (
        struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult );
    HRESULT Set (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Normals,
        SAFEARRAY * * Indices,
        SAFEARRAY * * OutlineIndices,
        enum AgEStkGraphicsWindingOrder WindingOrder,
        struct IAgStkGraphicsBoundingSphere * BoundingSphere,
        VARIANT_BOOL Closed );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AffectedByLighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AffectedByLighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayFill (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplaySilhouette (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplaySilhouette (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SilhouetteColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SilhouetteColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SilhouetteTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SilhouetteTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_SilhouetteWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SilhouetteWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineAppearance (
        /*[out,retval]*/ enum AgEStkGraphicsOutlineAppearance * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineAppearance (
        /*[in]*/ enum AgEStkGraphicsOutlineAppearance pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackLineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackLineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackLineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackLineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ struct STKUtil::IAgOrientation * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BackLineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackLineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetWithResult (
        /*[in]*/ struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Normals,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ SAFEARRAY * * OutlineIndices,
        /*[in]*/ enum AgEStkGraphicsWindingOrder WindingOrder,
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * BoundingSphere,
        /*[in]*/ VARIANT_BOOL Closed ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

enum AgEStkGraphicsStereoscopicDisplayMode
{
    eStkGraphicsStereoscopicDisplayModeOff = 0,
    eStkGraphicsStereoscopicDisplayModeQuadBuffer = 1,
    eStkGraphicsStereoscopicDisplayModeAnaglyph = 2,
    eStkGraphicsStereoscopicDisplayModeLeftEye = 3,
    eStkGraphicsStereoscopicDisplayModeRightEye = 4,
    eStkGraphicsStereoscopicDisplayModeSideBySide = 5
};

enum AgEStkGraphicsStereoProjectionMode
{
    eStkGraphicsStereoProjectionParallel = 0,
    eStkGraphicsStereoProjectionFixedDistance = 1,
    eStkGraphicsStereoProjectionAutomatic = 2
};

struct __declspec(uuid("41d0e11b-d00c-4255-b869-2fc8430f994e"))
IAgStkGraphicsStereoscopic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayMode,put=PutDisplayMode))
    enum AgEStkGraphicsStereoscopicDisplayMode DisplayMode;
    __declspec(property(get=GetAutomaticallyComputeProjectionDistance,put=PutAutomaticallyComputeProjectionDistance))
    VARIANT_BOOL AutomaticallyComputeProjectionDistance;
    __declspec(property(get=GetProjectionMode,put=PutProjectionMode))
    enum AgEStkGraphicsStereoProjectionMode ProjectionMode;
    __declspec(property(get=GetProjectionDistance,put=PutProjectionDistance))
    double ProjectionDistance;
    __declspec(property(get=GetEyeSeparationFactor,put=PutEyeSeparationFactor))
    double EyeSeparationFactor;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsStereoscopicDisplayMode GetDisplayMode ( );
    void PutDisplayMode (
        enum AgEStkGraphicsStereoscopicDisplayMode pRetVal );
    VARIANT_BOOL GetAutomaticallyComputeProjectionDistance ( );
    void PutAutomaticallyComputeProjectionDistance (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsStereoProjectionMode GetProjectionMode ( );
    void PutProjectionMode (
        enum AgEStkGraphicsStereoProjectionMode pRetVal );
    double GetProjectionDistance ( );
    void PutProjectionDistance (
        double pRetVal );
    double GetEyeSeparationFactor ( );
    void PutEyeSeparationFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayMode (
        /*[out,retval]*/ enum AgEStkGraphicsStereoscopicDisplayMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMode (
        /*[in]*/ enum AgEStkGraphicsStereoscopicDisplayMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeProjectionDistance (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeProjectionDistance (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionMode (
        /*[out,retval]*/ enum AgEStkGraphicsStereoProjectionMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionMode (
        /*[in]*/ enum AgEStkGraphicsStereoProjectionMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_EyeSeparationFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EyeSeparationFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cf28baee-4b52-409d-a28a-bb67d0a90490"))
_IAgStkGraphicsStereoscopic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEyeSeparationFactor,put=PutEyeSeparationFactor))
    double EyeSeparationFactor;
    __declspec(property(get=GetProjectionMode,put=PutProjectionMode))
    enum AgEStkGraphicsStereoProjectionMode ProjectionMode;
    __declspec(property(get=GetDisplayMode,put=PutDisplayMode))
    enum AgEStkGraphicsStereoscopicDisplayMode DisplayMode;
    __declspec(property(get=GetAutomaticallyComputeProjectionDistance,put=PutAutomaticallyComputeProjectionDistance))
    VARIANT_BOOL AutomaticallyComputeProjectionDistance;
    __declspec(property(get=GetProjectionDistance,put=PutProjectionDistance))
    double ProjectionDistance;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsStereoscopicDisplayMode GetDisplayMode ( );
    void PutDisplayMode (
        enum AgEStkGraphicsStereoscopicDisplayMode pRetVal );
    VARIANT_BOOL GetAutomaticallyComputeProjectionDistance ( );
    void PutAutomaticallyComputeProjectionDistance (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsStereoProjectionMode GetProjectionMode ( );
    void PutProjectionMode (
        enum AgEStkGraphicsStereoProjectionMode pRetVal );
    double GetProjectionDistance ( );
    void PutProjectionDistance (
        double pRetVal );
    double GetEyeSeparationFactor ( );
    void PutEyeSeparationFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayMode (
        /*[out,retval]*/ enum AgEStkGraphicsStereoscopicDisplayMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMode (
        /*[in]*/ enum AgEStkGraphicsStereoscopicDisplayMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeProjectionDistance (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeProjectionDistance (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionMode (
        /*[out,retval]*/ enum AgEStkGraphicsStereoProjectionMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionMode (
        /*[in]*/ enum AgEStkGraphicsStereoProjectionMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_EyeSeparationFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EyeSeparationFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("dc5a468a-3f04-4ecd-96c3-173f92ce90b3"))
_IAgStkGraphicsSurfaceMeshPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetRenderingMethod))
    enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetTextureMatrix,put=PutTextureMatrix))
    IAgStkGraphicsTextureMatrixPtr TextureMatrix;
    __declspec(property(get=GetTransparentTextureBorder,put=PutTransparentTextureBorder))
    VARIANT_BOOL TransparentTextureBorder;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetWireframe,put=PutWireframe))
    VARIANT_BOOL Wireframe;
    __declspec(property(get=GetTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    VARIANT_BOOL GetWireframe ( );
    void PutWireframe (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    enum AgEStkGraphicsSurfaceMeshRenderingMethod GetRenderingMethod ( );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    IAgStkGraphicsTextureMatrixPtr GetTextureMatrix ( );
    void PutTextureMatrix (
        struct IAgStkGraphicsTextureMatrix * ppRetVal );
    VARIANT_BOOL GetTransparentTextureBorder ( );
    void PutTransparentTextureBorder (
        VARIANT_BOOL pRetVal );
    HRESULT Set (
        struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator );
    HRESULT SetWithoutTexturing (
        struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod );
    VARIANT_BOOL SupportedWithDefaultRenderingMethod ( );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Wireframe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wireframe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderingMethod (
        /*[out,retval]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureMatrix (
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureMatrix (
        /*[in]*/ struct IAgStkGraphicsTextureMatrix * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TransparentTextureBorder (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransparentTextureBorder (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) = 0;
      virtual HRESULT __stdcall raw_SetWithoutTexturing (
        /*[in]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SupportedWithDefaultRenderingMethod (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("fe65e27b-d614-483b-b00d-5f80099dd528"))
_IAgStkGraphicsTerrainCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsTerrainOverlayPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgStkGraphicsTerrainOverlayPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    VARIANT_BOOL ContainsUriString (
        _bstr_t StringUri );
    VARIANT_BOOL Remove (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    HRESULT Clear ( );
    HRESULT Add (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    HRESULT AddAsync (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    int IndexOf (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    int IndexOfUriString (
        _bstr_t StringUri );
    IAgStkGraphicsTerrainOverlayPtr AddUriString (
        _bstr_t Uri );
    IAgStkGraphicsTerrainOverlayPtr AddAsyncUriString (
        _bstr_t Uri );
    HRESULT Swap (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay1,
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay2 );
    HRESULT SwapByIndex (
        int Index1,
        int Index2 );
    HRESULT Move (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        int NewPosition );
    HRESULT MoveByIndex (
        int Index,
        int NewPosition );
    HRESULT BringToFront (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );
    HRESULT SendToBack (
        struct IAgStkGraphicsTerrainOverlay * TerrainOverlay );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
      virtual HRESULT __stdcall raw_AddAsync (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
      virtual HRESULT __stdcall raw_IndexOf (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IndexOfUriString (
        /*[in]*/ BSTR StringUri,
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncUriString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Swap (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay1,
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay2 ) = 0;
      virtual HRESULT __stdcall raw_SwapByIndex (
        /*[in]*/ int Index1,
        /*[in]*/ int Index2 ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_MoveByIndex (
        /*[in]*/ int Index,
        /*[in]*/ int NewPosition ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[in]*/ struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) = 0;
};

struct __declspec(uuid("ed293676-558e-42de-9ad9-a82b3aa5b34a"))
_IAgStkGraphicsTerrainOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetExtent))
    SAFEARRAY * Extent;
    __declspec(property(get=GetRole))
    enum AgEStkGraphicsGlobeOverlayRole Role;
    __declspec(property(get=GetUriAsString))
    _bstr_t UriAsString;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetAltitudeOffset,put=PutAltitudeOffset))
    double AltitudeOffset;
    __declspec(property(get=GetAltitudeScale,put=PutAltitudeScale))
    double AltitudeScale;
    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    SAFEARRAY * GetExtent ( );
    enum AgEStkGraphicsGlobeOverlayRole GetRole ( );
    _bstr_t GetUriAsString ( );
    VARIANT_BOOL GetIsValid ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    double GetAltitudeOffset ( );
    void PutAltitudeOffset (
        double pRetVal );
    double GetAltitudeScale ( );
    void PutAltitudeScale (
        double pRetVal );
    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum AgEStkGraphicsGlobeOverlayRole * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UriAsString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("8070fb92-1abb-44f6-b78d-38a8567bfd33"))
_IAgStkGraphicsTextBatchPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetBoundingSphereScale,put=PutBoundingSphereScale))
    double BoundingSphereScale;
    __declspec(property(get=GetFont))
    IAgStkGraphicsGraphicsFontPtr Font;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOutlineTranslucency,put=PutOutlineTranslucency))
    float OutlineTranslucency;
    __declspec(property(get=GetAlignToPixel,put=PutAlignToPixel))
    VARIANT_BOOL AlignToPixel;
    __declspec(property(get=GetDistanceDisplayConditionPerString,put=PutDistanceDisplayConditionPerString))
    IAgStkGraphicsDistanceDisplayConditionPtr DistanceDisplayConditionPerString;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetRenderInScreenSpace,put=PutRenderInScreenSpace))
    VARIANT_BOOL RenderInScreenSpace;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    double GetBoundingSphereScale ( );
    void PutBoundingSphereScale (
        double pRetVal );
    IAgStkGraphicsGraphicsFontPtr GetFont ( );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    float GetOutlineTranslucency ( );
    void PutOutlineTranslucency (
        float pRetVal );
    VARIANT_BOOL GetAlignToPixel ( );
    void PutAlignToPixel (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDistanceDisplayConditionPtr GetDistanceDisplayConditionPerString ( );
    void PutDistanceDisplayConditionPerString (
        struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    HRESULT Set (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text );
    HRESULT SetWithOptionalParameters (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetWithOptionalParametersAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text );
    HRESULT SetCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetCartographicWithOptionalParametersAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartial (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithIndicesOrder (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialWithOptionalParameters (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    HRESULT SetPartialCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithIndicesOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint );
    HRESULT SetPartialCartographicWithOptionalParameters (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices );
    HRESULT SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * Text,
        struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        SAFEARRAY * * Indices,
        enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        enum AgEStkGraphicsRenderPassHint RenderPassHint );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetRenderInScreenSpace ( );
    void PutRenderInScreenSpace (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphereScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphereScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignToPixel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AlignToPixel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayConditionPerString (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DistanceDisplayConditionPerString (
        /*[in]*/ struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParametersAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetCartographicWithOptionalParametersAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartial (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithIndicesOrder (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithIndicesOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParameters (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Text,
        /*[in]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint,
        /*[in]*/ enum AgEStkGraphicsRenderPassHint RenderPassHint ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderInScreenSpace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RenderInScreenSpace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("6842f963-0a04-4776-9d5e-88422f78244a"))
_IAgStkGraphicsTextBatchPrimitiveOptionalParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsOrigin Origin;
    __declspec(property(get=GetEyeOffset,put=PutEyeOffset))
    SAFEARRAY * EyeOffset;
    __declspec(property(get=GetPixelOffset,put=PutPixelOffset))
    SAFEARRAY * PixelOffset;
    __declspec(property(get=GetMaximumStringLength,put=PutMaximumStringLength))
    int MaximumStringLength;
    __declspec(property(get=GetScreenSpaceRendering,put=PutScreenSpaceRendering))
    VARIANT_BOOL ScreenSpaceRendering;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkGraphicsOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsOrigin pRetVal );
    SAFEARRAY * GetEyeOffset ( );
    void PutEyeOffset (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPixelOffset ( );
    void PutPixelOffset (
        SAFEARRAY * ppRetVal );
    int GetMaximumStringLength ( );
    void PutMaximumStringLength (
        int pRetVal );
    HRESULT SetOrigins (
        SAFEARRAY * * Origins );
    HRESULT SetEyeOffsets (
        SAFEARRAY * * EyeOffsets );
    HRESULT SetPixelOffsets (
        SAFEARRAY * * PixelOffsets );
    HRESULT SetColors (
        SAFEARRAY * * Colors );
    VARIANT_BOOL GetScreenSpaceRendering ( );
    void PutScreenSpaceRendering (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_EyeOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_EyeOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelOffset (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PixelOffset (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumStringLength (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumStringLength (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOrigins (
        /*[in]*/ SAFEARRAY * * Origins ) = 0;
      virtual HRESULT __stdcall raw_SetEyeOffsets (
        /*[in]*/ SAFEARRAY * * EyeOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetPixelOffsets (
        /*[in]*/ SAFEARRAY * * PixelOffsets ) = 0;
      virtual HRESULT __stdcall raw_SetColors (
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
      virtual HRESULT __stdcall get_ScreenSpaceRendering (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScreenSpaceRendering (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("b89fb40c-5d0c-47c6-b1bb-aa0862b46cfc"))
_IAgStkGraphicsTextOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPinningPosition,put=PutPinningPosition))
    SAFEARRAY * PinningPosition;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetXUnit,put=PutXUnit))
    enum AgEStkGraphicsScreenOverlayUnit XUnit;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetYUnit,put=PutYUnit))
    enum AgEStkGraphicsScreenOverlayUnit YUnit;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetWidthUnit,put=PutWidthUnit))
    enum AgEStkGraphicsScreenOverlayUnit WidthUnit;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    enum AgEStkGraphicsScreenOverlayUnit HeightUnit;
    __declspec(property(get=GetMinimumSize,put=PutMinimumSize))
    SAFEARRAY * MinimumSize;
    __declspec(property(get=GetMaximumSize,put=PutMaximumSize))
    SAFEARRAY * MaximumSize;
    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderSize,put=PutBorderSize))
    int BorderSize;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetTranslationX,put=PutTranslationX))
    double TranslationX;
    __declspec(property(get=GetTranslationY,put=PutTranslationY))
    double TranslationY;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetRotationPoint,put=PutRotationPoint))
    SAFEARRAY * RotationPoint;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetFlipX,put=PutFlipX))
    VARIANT_BOOL FlipX;
    __declspec(property(get=GetFlipY,put=PutFlipY))
    VARIANT_BOOL FlipY;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsScreenOverlayOrigin Origin;
    __declspec(property(get=GetPinningOrigin,put=PutPinningOrigin))
    enum AgEStkGraphicsScreenOverlayPinningOrigin PinningOrigin;
    __declspec(property(get=GetParent))
    IAgStkGraphicsScreenOverlayContainerPtr Parent;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPickingEnabled,put=PutPickingEnabled))
    VARIANT_BOOL PickingEnabled;
    __declspec(property(get=GetClipToParent,put=PutClipToParent))
    VARIANT_BOOL ClipToParent;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetControlSize))
    SAFEARRAY * ControlSize;
    __declspec(property(get=GetControlBounds))
    SAFEARRAY * ControlBounds;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetFont,put=PutFont))
    IAgStkGraphicsGraphicsFontPtr Font;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPinningPosition ( );
    void PutPinningPosition (
        SAFEARRAY * ppRetVal );
    double GetX ( );
    void PutX (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetXUnit ( );
    void PutXUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetYUnit ( );
    void PutYUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetWidthUnit ( );
    void PutWidthUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetHeightUnit ( );
    void PutHeightUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetMinimumSize ( );
    void PutMinimumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetMaximumSize ( );
    void PutMaximumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetBounds ( );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    int GetBorderSize ( );
    void PutBorderSize (
        int pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    double GetTranslationX ( );
    void PutTranslationX (
        double pRetVal );
    double GetTranslationY ( );
    void PutTranslationY (
        double pRetVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pRetVal );
    SAFEARRAY * GetRotationPoint ( );
    void PutRotationPoint (
        SAFEARRAY * ppRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetFlipX ( );
    void PutFlipX (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFlipY ( );
    void PutFlipY (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsScreenOverlayOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsScreenOverlayOrigin pRetVal );
    enum AgEStkGraphicsScreenOverlayPinningOrigin GetPinningOrigin ( );
    void PutPinningOrigin (
        enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal );
    IAgStkGraphicsScreenOverlayContainerPtr GetParent ( );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetPickingEnabled ( );
    void PutPickingEnabled (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetClipToParent ( );
    void PutClipToParent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    SAFEARRAY * GetControlPosition ( );
    SAFEARRAY * GetControlSize ( );
    SAFEARRAY * GetControlBounds ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    HRESULT BringToFront ( );
    HRESULT SendToBack ( );
    SAFEARRAY * OverlayToControl (
        double X,
        double Y );
    SAFEARRAY * ControlToOverlay (
        double X,
        double Y );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pRetVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pRetVal );
    IAgStkGraphicsGraphicsFontPtr GetFont ( );
    void PutFont (
        struct IAgStkGraphicsGraphicsFont * ppRetVal );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningPosition (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WidthUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WidthUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HeightUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationPoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationPoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipX (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipX (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipY (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipY (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningOrigin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningOrigin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayContainer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClipToParent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClipToParent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlBounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OverlayToControl (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ControlToOverlay (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("070a7541-641c-4321-900b-9e65fedff00d"))
_IAgStkGraphicsTextureMatrix : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetM11))
    float M11;
    __declspec(property(get=GetM12))
    float M12;
    __declspec(property(get=GetM13))
    float M13;
    __declspec(property(get=GetM14))
    float M14;
    __declspec(property(get=GetM21))
    float M21;
    __declspec(property(get=GetM22))
    float M22;
    __declspec(property(get=GetM23))
    float M23;
    __declspec(property(get=GetM24))
    float M24;
    __declspec(property(get=GetM31))
    float M31;
    __declspec(property(get=GetM32))
    float M32;
    __declspec(property(get=GetM33))
    float M33;
    __declspec(property(get=GetM34))
    float M34;
    __declspec(property(get=GetM41))
    float M41;
    __declspec(property(get=GetM42))
    float M42;
    __declspec(property(get=GetM43))
    float M43;
    __declspec(property(get=GetM44))
    float M44;

    //
    // Wrapper methods for error-handling
    //

    float GetM11 ( );
    float GetM12 ( );
    float GetM13 ( );
    float GetM14 ( );
    float GetM21 ( );
    float GetM22 ( );
    float GetM23 ( );
    float GetM24 ( );
    float GetM31 ( );
    float GetM32 ( );
    float GetM33 ( );
    float GetM34 ( );
    float GetM41 ( );
    float GetM42 ( );
    float GetM43 ( );
    float GetM44 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_M11 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M12 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M13 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M14 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M21 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M22 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M23 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M24 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M31 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M32 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M33 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M34 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M41 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M42 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M43 (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M44 (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("78ae9714-2472-4393-b81d-13e81160497b"))
_IAgStkGraphicsTextureScreenOverlay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPinningPosition,put=PutPinningPosition))
    SAFEARRAY * PinningPosition;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetXUnit,put=PutXUnit))
    enum AgEStkGraphicsScreenOverlayUnit XUnit;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetYUnit,put=PutYUnit))
    enum AgEStkGraphicsScreenOverlayUnit YUnit;
    __declspec(property(get=GetSize,put=PutSize))
    SAFEARRAY * Size;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetWidthUnit,put=PutWidthUnit))
    enum AgEStkGraphicsScreenOverlayUnit WidthUnit;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    enum AgEStkGraphicsScreenOverlayUnit HeightUnit;
    __declspec(property(get=GetMinimumSize,put=PutMinimumSize))
    SAFEARRAY * MinimumSize;
    __declspec(property(get=GetMaximumSize,put=PutMaximumSize))
    SAFEARRAY * MaximumSize;
    __declspec(property(get=GetBounds))
    SAFEARRAY * Bounds;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderSize,put=PutBorderSize))
    int BorderSize;
    __declspec(property(get=GetBorderTranslucency,put=PutBorderTranslucency))
    float BorderTranslucency;
    __declspec(property(get=GetTranslationX,put=PutTranslationX))
    double TranslationX;
    __declspec(property(get=GetTranslationY,put=PutTranslationY))
    double TranslationY;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetRotationPoint,put=PutRotationPoint))
    SAFEARRAY * RotationPoint;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetFlipX,put=PutFlipX))
    VARIANT_BOOL FlipX;
    __declspec(property(get=GetFlipY,put=PutFlipY))
    VARIANT_BOOL FlipY;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    enum AgEStkGraphicsScreenOverlayOrigin Origin;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetMaintainAspectRatio,put=PutMaintainAspectRatio))
    enum AgEStkGraphicsMaintainAspectRatio MaintainAspectRatio;
    __declspec(property(get=GetPinningOrigin,put=PutPinningOrigin))
    enum AgEStkGraphicsScreenOverlayPinningOrigin PinningOrigin;
    __declspec(property(get=GetParent))
    IAgStkGraphicsScreenOverlayContainerPtr Parent;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPickingEnabled,put=PutPickingEnabled))
    VARIANT_BOOL PickingEnabled;
    __declspec(property(get=GetClipToParent,put=PutClipToParent))
    VARIANT_BOOL ClipToParent;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetControlPosition))
    SAFEARRAY * ControlPosition;
    __declspec(property(get=GetControlSize))
    SAFEARRAY * ControlSize;
    __declspec(property(get=GetControlBounds))
    SAFEARRAY * ControlBounds;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetOverlays))
    IAgStkGraphicsScreenOverlayCollectionPtr Overlays;
    __declspec(property(get=GetPadding,put=PutPadding))
    SAFEARRAY * Padding;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetPosition,put=PutPosition))
    SAFEARRAY * Position;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetPosition ( );
    void PutPosition (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetPinningPosition ( );
    void PutPinningPosition (
        SAFEARRAY * ppRetVal );
    double GetX ( );
    void PutX (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetXUnit ( );
    void PutXUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetYUnit ( );
    void PutYUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetSize ( );
    void PutSize (
        SAFEARRAY * ppRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetWidthUnit ( );
    void PutWidthUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    enum AgEStkGraphicsScreenOverlayUnit GetHeightUnit ( );
    void PutHeightUnit (
        enum AgEStkGraphicsScreenOverlayUnit pRetVal );
    SAFEARRAY * GetMinimumSize ( );
    void PutMinimumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetMaximumSize ( );
    void PutMaximumSize (
        SAFEARRAY * ppRetVal );
    SAFEARRAY * GetBounds ( );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pRetVal );
    int GetBorderSize ( );
    void PutBorderSize (
        int pRetVal );
    float GetBorderTranslucency ( );
    void PutBorderTranslucency (
        float pRetVal );
    double GetTranslationX ( );
    void PutTranslationX (
        double pRetVal );
    double GetTranslationY ( );
    void PutTranslationY (
        double pRetVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pRetVal );
    SAFEARRAY * GetRotationPoint ( );
    void PutRotationPoint (
        SAFEARRAY * ppRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetFlipX ( );
    void PutFlipX (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFlipY ( );
    void PutFlipY (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsScreenOverlayOrigin GetOrigin ( );
    void PutOrigin (
        enum AgEStkGraphicsScreenOverlayOrigin pRetVal );
    enum AgEStkGraphicsScreenOverlayPinningOrigin GetPinningOrigin ( );
    void PutPinningOrigin (
        enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal );
    IAgStkGraphicsScreenOverlayContainerPtr GetParent ( );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    VARIANT_BOOL GetPickingEnabled ( );
    void PutPickingEnabled (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetClipToParent ( );
    void PutClipToParent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    SAFEARRAY * GetControlPosition ( );
    SAFEARRAY * GetControlSize ( );
    SAFEARRAY * GetControlBounds ( );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    IAgStkGraphicsScreenOverlayCollectionPtr GetOverlays ( );
    SAFEARRAY * GetPadding ( );
    void PutPadding (
        SAFEARRAY * ppRetVal );
    HRESULT BringToFront ( );
    HRESULT SendToBack ( );
    SAFEARRAY * OverlayToControl (
        double X,
        double Y );
    SAFEARRAY * ControlToOverlay (
        double X,
        double Y );
    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    enum AgEStkGraphicsMaintainAspectRatio GetMaintainAspectRatio ( );
    void PutMaintainAspectRatio (
        enum AgEStkGraphicsMaintainAspectRatio pRetVal );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningPosition (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WidthUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WidthUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightUnit (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayUnit * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HeightUnit (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSize (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderSize (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderSize (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_BorderTranslucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BorderTranslucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslationY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TranslationY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationPoint (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationPoint (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipX (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipX (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipY (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FlipY (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_PinningOrigin (
        /*[out,retval]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PinningOrigin (
        /*[in]*/ enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayContainer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClipToParent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClipToParent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlPosition (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlSize (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ControlBounds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Overlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Padding (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Padding (
        /*[in]*/ SAFEARRAY * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OverlayToControl (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ControlToOverlay (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaintainAspectRatio (
        /*[out,retval]*/ enum AgEStkGraphicsMaintainAspectRatio * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaintainAspectRatio (
        /*[in]*/ enum AgEStkGraphicsMaintainAspectRatio pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("da1fcaec-f7b9-46be-9811-9467bcfcead4"))
_IAgStkGraphicsTimeIntervalDisplayCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumTime,put=PutMinimumTime))
    STKUtil::IAgDatePtr MinimumTime;
    __declspec(property(get=GetMaximumTime,put=PutMaximumTime))
    STKUtil::IAgDatePtr MaximumTime;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDatePtr GetMinimumTime ( );
    void PutMinimumTime (
        struct STKUtil::IAgDate * ppRetVal );
    STKUtil::IAgDatePtr GetMaximumTime ( );
    void PutMaximumTime (
        struct STKUtil::IAgDate * ppRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTime (
        /*[out,retval]*/ struct STKUtil::IAgDate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTime (
        /*[in]*/ struct STKUtil::IAgDate * ppRetVal ) = 0;
};

struct __declspec(uuid("b7a2db6c-0cb2-40a0-b02f-b5da4ae012ef"))
_IAgStkGraphicsTriangleMeshPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetWireframe,put=PutWireframe))
    VARIANT_BOOL Wireframe;
    __declspec(property(get=GetRenderBackThenFrontFaces,put=PutRenderBackThenFrontFaces))
    VARIANT_BOOL RenderBackThenFrontFaces;
    __declspec(property(get=GetTriangleWindingOrder,put=PutTriangleWindingOrder))
    enum AgEStkGraphicsWindingOrder TriangleWindingOrder;
    __declspec(property(get=GetCullFace,put=PutCullFace))
    enum AgEStkGraphicsCullFace CullFace;
    __declspec(property(get=GetSetHint))
    enum AgEStkGraphicsSetHint SetHint;
    __declspec(property(get=GetLighting,put=PutLighting))
    VARIANT_BOOL Lighting;
    __declspec(property(get=GetTexture,put=PutTexture))
    IAgStkGraphicsRendererTexture2DPtr Texture;
    __declspec(property(get=GetTextureFilter,put=PutTextureFilter))
    IAgStkGraphicsTextureFilter2DPtr TextureFilter;
    __declspec(property(get=GetShadeModel,put=PutShadeModel))
    enum AgEStkGraphicsRendererShadeModel ShadeModel;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetWireframe ( );
    void PutWireframe (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRenderBackThenFrontFaces ( );
    void PutRenderBackThenFrontFaces (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetLighting ( );
    void PutLighting (
        VARIANT_BOOL pRetVal );
    enum AgEStkGraphicsWindingOrder GetTriangleWindingOrder ( );
    void PutTriangleWindingOrder (
        enum AgEStkGraphicsWindingOrder pRetVal );
    enum AgEStkGraphicsCullFace GetCullFace ( );
    void PutCullFace (
        enum AgEStkGraphicsCullFace pRetVal );
    enum AgEStkGraphicsRendererShadeModel GetShadeModel ( );
    void PutShadeModel (
        enum AgEStkGraphicsRendererShadeModel pRetVal );
    IAgStkGraphicsRendererTexture2DPtr GetTexture ( );
    void PutTexture (
        struct IAgStkGraphicsRendererTexture2D * ppRetVal );
    IAgStkGraphicsTextureFilter2DPtr GetTextureFilter ( );
    void PutTextureFilter (
        struct IAgStkGraphicsTextureFilter2D * ppRetVal );
    enum AgEStkGraphicsSetHint GetSetHint ( );
    HRESULT Set (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Normals,
        SAFEARRAY * * Indices );
    HRESULT SetWithOptionalParameters (
        SAFEARRAY * * Positions,
        SAFEARRAY * * Normals,
        SAFEARRAY * * Indices,
        struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * OptionalParameters );
    HRESULT SetTriangulator (
        struct IAgStkGraphicsTriangulatorResult * Triangulator );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wireframe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wireframe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RenderBackThenFrontFaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RenderBackThenFrontFaces (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Lighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleWindingOrder (
        /*[out,retval]*/ enum AgEStkGraphicsWindingOrder * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TriangleWindingOrder (
        /*[in]*/ enum AgEStkGraphicsWindingOrder pRetVal ) = 0;
      virtual HRESULT __stdcall get_CullFace (
        /*[out,retval]*/ enum AgEStkGraphicsCullFace * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CullFace (
        /*[in]*/ enum AgEStkGraphicsCullFace pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShadeModel (
        /*[out,retval]*/ enum AgEStkGraphicsRendererShadeModel * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShadeModel (
        /*[in]*/ enum AgEStkGraphicsRendererShadeModel pRetVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IAgStkGraphicsRendererTexture2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2D * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_TextureFilter (
        /*[in]*/ struct IAgStkGraphicsTextureFilter2D * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SetHint (
        /*[out,retval]*/ enum AgEStkGraphicsSetHint * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Normals,
        /*[in]*/ SAFEARRAY * * Indices ) = 0;
      virtual HRESULT __stdcall raw_SetWithOptionalParameters (
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * Normals,
        /*[in]*/ SAFEARRAY * * Indices,
        /*[in]*/ struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * OptionalParameters ) = 0;
      virtual HRESULT __stdcall raw_SetTriangulator (
        /*[in]*/ struct IAgStkGraphicsTriangulatorResult * Triangulator ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("998a3f41-1f74-4b2c-bcd6-08e182a6f93b"))
_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetTextureCoordinates (
        SAFEARRAY * * TextureCoordinates );
    HRESULT SetPerVertexColors (
        SAFEARRAY * * Colors );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetTextureCoordinates (
        /*[in]*/ SAFEARRAY * * TextureCoordinates ) = 0;
      virtual HRESULT __stdcall raw_SetPerVertexColors (
        /*[in]*/ SAFEARRAY * * Colors ) = 0;
};

struct __declspec(uuid("26aaec7d-206d-412f-82a2-059e892b5ee1"))
_IAgStkGraphicsVectorPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLighting,put=PutLighting))
    VARIANT_BOOL Lighting;
    __declspec(property(get=GetDisplayLabel,put=PutDisplayLabel))
    VARIANT_BOOL DisplayLabel;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetDisplayMagnitude,put=PutDisplayMagnitude))
    VARIANT_BOOL DisplayMagnitude;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetDisplayRADec,put=PutDisplayRADec))
    VARIANT_BOOL DisplayRADec;
    __declspec(property(get=GetDisplayTrace,put=PutDisplayTrace))
    VARIANT_BOOL DisplayTrace;
    __declspec(property(get=GetDisplaySweep,put=PutDisplaySweep))
    VARIANT_BOOL DisplaySweep;
    __declspec(property(get=GetDisplayLines,put=PutDisplayLines))
    VARIANT_BOOL DisplayLines;
    __declspec(property(get=GetPersistenceWidth,put=PutPersistenceWidth))
    double PersistenceWidth;
    __declspec(property(get=GetFadePersistence,put=PutFadePersistence))
    VARIANT_BOOL FadePersistence;
    __declspec(property(get=GetPersistenceDuration,put=PutPersistenceDuration))
    double PersistenceDuration;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTrueScale,put=PutTrueScale))
    VARIANT_BOOL TrueScale;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    VARIANT_BOOL GetLighting ( );
    void PutLighting (
        VARIANT_BOOL pRetVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pRetVal );
    VARIANT_BOOL GetDisplayLabel ( );
    void PutDisplayLabel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayMagnitude ( );
    void PutDisplayMagnitude (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayRADec ( );
    void PutDisplayRADec (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayTrace ( );
    void PutDisplayTrace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplaySweep ( );
    void PutDisplaySweep (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayLines ( );
    void PutDisplayLines (
        VARIANT_BOOL pRetVal );
    double GetPersistenceWidth ( );
    void PutPersistenceWidth (
        double pRetVal );
    VARIANT_BOOL GetFadePersistence ( );
    void PutFadePersistence (
        VARIANT_BOOL pRetVal );
    double GetPersistenceDuration ( );
    void PutPersistenceDuration (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    VARIANT_BOOL GetTrueScale ( );
    void PutTrueScale (
        VARIANT_BOOL pRetVal );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Lighting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLabel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMagnitude (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMagnitude (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayRADec (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayRADec (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTrace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayTrace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplaySweep (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplaySweep (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FadePersistence (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FadePersistence (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceDuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceDuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrueScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TrueScale (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("9317bc85-097d-4524-86bd-fac9093f1bc9"))
_IAgStkGraphicsBoxTriangulatorInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidTriangulatorResultPtr Compute (
        SAFEARRAY * * Size );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("ce930b2e-35a6-4950-b0c0-c217e02f949d"))
_IAgStkGraphicsCylinderTriangulatorInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidTriangulatorResultPtr CreateSimple (
        double Length,
        double Radius );
    IAgStkGraphicsSolidTriangulatorResultPtr Compute (
        double Length,
        double BottomRadius,
        double TopRadius,
        int Slices,
        enum AgEStkGraphicsCylinderFill CylinderFill );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateSimple (
        /*[in]*/ double Length,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ double Length,
        /*[in]*/ double BottomRadius,
        /*[in]*/ double TopRadius,
        /*[in]*/ int Slices,
        /*[in]*/ enum AgEStkGraphicsCylinderFill CylinderFill,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("80d84899-b026-41df-ab91-357ce9e156a4"))
_IAgStkGraphicsEllipsoidTriangulatorInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidTriangulatorResultPtr ComputeSimple (
        SAFEARRAY * * Radii );
    IAgStkGraphicsSolidTriangulatorResultPtr Compute (
        SAFEARRAY * * Radii,
        int Slices,
        int Stacks );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ComputeSimple (
        /*[in]*/ SAFEARRAY * * Radii,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ SAFEARRAY * * Radii,
        /*[in]*/ int Slices,
        /*[in]*/ int Stacks,
        /*[out,retval]*/ struct IAgStkGraphicsSolidTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("33fa7be9-4b80-43e8-9ff4-5cb8c6dc2e0e"))
_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr Compute (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographicWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * BottomPositions,
        SAFEARRAY * * TopPositions,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeWithAltitudes (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeWithAltitudesAndWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographicWithAltitudes (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeCartographicWithAltitudesAndWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double BottomAltitude,
        double TopAltitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitude (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitudeWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitudeCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude );
    IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr ComputeSingleConstantAltitudeCartographicWithWindingOrder (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * BottomPositions,
        /*[in]*/ SAFEARRAY * * TopPositions,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithAltitudes (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithAltitudesAndWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithAltitudes (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithAltitudesAndWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double BottomAltitude,
        /*[in]*/ double TopAltitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitude (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitudeWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitudeCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSingleConstantAltitudeCartographicWithWindingOrder (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("f802688e-3ac8-4c31-a1db-05f671a6807a"))
_IAgStkGraphicsSurfaceExtentTriangulatorInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeSimple (
        _bstr_t CentralBody,
        SAFEARRAY * * Extent );
    IAgStkGraphicsSurfaceTriangulatorResultPtr Compute (
        _bstr_t CentralBody,
        SAFEARRAY * * Extent,
        double Altitude,
        double Granularity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ComputeSimple (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("eaa1854f-7232-421e-bb65-89794de686e2"))
_IAgStkGraphicsSurfacePolygonTriangulatorInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceTriangulatorResultPtr Compute (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeWithHole (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * HolePositions );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeWithHoleAltitudeAndGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        SAFEARRAY * * HolePositions,
        double Altitude,
        double Granularity );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeWithAltitudeAndGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        double Granularity,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );
    IAgStkGraphicsSurfaceTriangulatorResultPtr ComputeCartographicWithAltitudeAndGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Positions,
        double Altitude,
        double Granularity,
        enum AgEStkGraphicsWindingOrder PositionsWindingOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithHole (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * HolePositions,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithHoleAltitudeAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ SAFEARRAY * * HolePositions,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeWithAltitudeAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCartographicWithAltitudeAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Positions,
        /*[in]*/ double Altitude,
        /*[in]*/ double Granularity,
        /*[in]*/ enum AgEStkGraphicsWindingOrder PositionsWindingOrder,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceTriangulatorResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("e0a2e684-87ad-4260-b4b7-a122ff88e78e"))
_IAgStkGraphicsSurfaceShapesInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircleWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircle (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircleCartographicWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeCircleCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double Radius );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipseWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipse (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipseCartographicWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeEllipseCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double MajorAxisRadius,
        double MinorAxisRadius,
        double Bearing );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSectorWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSector (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSectorCartographicWithGranularity (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing,
        double Granularity );
    IAgStkGraphicsSurfaceShapesResultPtr ComputeSectorCartographic (
        _bstr_t CentralBody,
        SAFEARRAY * * Center,
        double InnerRadius,
        double OuterRadius,
        double StartBearing,
        double EndBearing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ComputeCircleWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCircle (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCircleCartographicWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeCircleCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipseWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipse (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipseCartographicWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeEllipseCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double MajorAxisRadius,
        /*[in]*/ double MinorAxisRadius,
        /*[in]*/ double Bearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSectorWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSector (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSectorCartographicWithGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSectorCartographic (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ SAFEARRAY * * Center,
        /*[in]*/ double InnerRadius,
        /*[in]*/ double OuterRadius,
        /*[in]*/ double StartBearing,
        /*[in]*/ double EndBearing,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("97850345-8ef0-4d7e-86b8-5ab5b2e820a1"))
_IAgStkGraphicsAGICustomTerrainOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGICustomTerrainOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGICustomTerrainOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("dc808d40-4cdb-42b6-bccf-2f4cae0bb169"))
_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGIProcessedImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("a49e071c-83f8-4b52-82a6-eeefdf12371f"))
_IAgStkGraphicsAGIProcessedTerrainOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGIProcessedTerrainOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedTerrainOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("26025481-cdba-4451-93ef-6f531e0f4dea"))
_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAGIRoamImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsAGIRoamImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("c0e4975c-2754-40d7-876f-69cfaa805c65"))
_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivator * * ppRetVal ) = 0;
};

struct __declspec(uuid("3ee30319-7010-40c2-ab8a-9abf917b01f8"))
_IAgStkGraphicsGeospatialImageGlobeOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGeospatialImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsGeospatialImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("e1b209fc-0710-47c2-a8b2-7508e2b2adc1"))
_IAgStkGraphicsProjectedRasterOverlayFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectedRasterOverlayPtr Initialize (
        struct IAgStkGraphicsRaster * Raster,
        struct IAgStkGraphicsProjection * Projection );
    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[in]*/ struct IAgStkGraphicsProjection * Projection,
        /*[out,retval]*/ struct IAgStkGraphicsProjectedRasterOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("53637eec-bc39-4eeb-a6e2-166631fb634b"))
_IAgStkGraphicsProjectionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectionPtr Initialize ( );
    IAgStkGraphicsProjectionPtr InitializeWithData (
        SAFEARRAY * * Position,
        struct STKUtil::IAgOrientation * Orientation,
        double FieldOfViewHorizontal,
        double FieldOfViewVertical,
        double NearPlane,
        double FarPlane );
    IAgStkGraphicsProjectionPtr InitializeFromProjection (
        struct IAgStkGraphicsProjection * Projection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithData (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ struct STKUtil::IAgOrientation * Orientation,
        /*[in]*/ double FieldOfViewHorizontal,
        /*[in]*/ double FieldOfViewVertical,
        /*[in]*/ double NearPlane,
        /*[in]*/ double FarPlane,
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeFromProjection (
        /*[in]*/ struct IAgStkGraphicsProjection * Projection,
        /*[out,retval]*/ struct IAgStkGraphicsProjection * * ppRetVal ) = 0;
};

struct __declspec(uuid("2fa80ef1-107d-46ca-a6be-2d8328887508"))
_IAgStkGraphicsAltitudeDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAltitudeDisplayConditionPtr Initialize ( );
    IAgStkGraphicsAltitudeDisplayConditionPtr InitializeWithAltitudes (
        double MinimumAltitude,
        double MaximumAltitude );
    IAgStkGraphicsAltitudeDisplayConditionPtr InitializeWithCentralBodyAndAltitudes (
        _bstr_t CentralBody,
        double MinimumAltitude,
        double MaximumAltitude );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAltitudes (
        /*[in]*/ double MinimumAltitude,
        /*[in]*/ double MaximumAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBodyAndAltitudes (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double MinimumAltitude,
        /*[in]*/ double MaximumAltitude,
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("a4bb30ec-b707-4f52-b642-b913386ce91f"))
_IAgStkGraphicsAxesPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAxesPrimitivePtr InitializeWithDirection (
        struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        struct IAgStkGraphicsGraphicsFont * Font );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnAxes * Axes,
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsAxesPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("201c8822-14de-4274-bc56-e3b47948439f"))
_IAgStkGraphicsCompositeDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCompositeDisplayConditionPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsCompositeDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("31ac78a0-eb1b-4738-be5f-bf392f2c418e"))
_IAgStkGraphicsCompositePrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsCompositePrimitivePtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsCompositePrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("63c9269a-7fac-4d30-ab29-5e94d32412d7"))
_IAgStkGraphicsConstantDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsConstantDisplayConditionPtr Initialize ( );
    IAgStkGraphicsConstantDisplayConditionPtr InitializeDisplay (
        VARIANT_BOOL Display );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsConstantDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeDisplay (
        /*[in]*/ VARIANT_BOOL Display,
        /*[out,retval]*/ struct IAgStkGraphicsConstantDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("b0ac6006-06b2-4c5d-a1cc-bc20f3940678"))
_IAgStkGraphicsDistanceDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceDisplayConditionPtr InitializeWithDistances (
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("a7333e50-c8eb-4360-9289-d28481e41d44"))
_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr InitializeWithDistances (
        struct IAgStkGraphicsGlobeOverlay * GlobeOverlay,
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ struct IAgStkGraphicsGlobeOverlay * GlobeOverlay,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("48a7bf0f-e890-460f-aab7-70813c22bbdd"))
_IAgStkGraphicsDistanceToPositionDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceToPositionDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceToPositionDisplayConditionPtr InitializeWithDistances (
        SAFEARRAY * * Position,
        double MinimumDistance,
        double MaximumDistance );
    IAgStkGraphicsDistanceToPositionDisplayConditionPtr InitializeWithReferenceFrameAndDistances (
        struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        SAFEARRAY * * Position,
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithReferenceFrameAndDistances (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("15fa16d0-33f5-47f4-8af5-658502a97401"))
_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr Initialize ( );
    IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr InitializeWithDistances (
        struct IAgStkGraphicsPrimitive * Primitive,
        double MinimumDistance,
        double MaximumDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithDistances (
        /*[in]*/ struct IAgStkGraphicsPrimitive * Primitive,
        /*[in]*/ double MinimumDistance,
        /*[in]*/ double MaximumDistance,
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("6b75d9d4-819c-453b-8a54-7b2b72e30e60"))
_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr Initialize ( );
    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr InitializeWithParameters (
        double Duration,
        enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithParameters (
        /*[in]*/ double Duration,
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation,
        /*[out,retval]*/ struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
};

struct __declspec(uuid("9088209c-9633-4094-a48b-53f8a4d3f10a"))
_IAgStkGraphicsGlobeImageOverlayInitializer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMoreThanOneImageGlobeOverlaySupported))
    VARIANT_BOOL MoreThanOneImageGlobeOverlaySupported;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMoreThanOneImageGlobeOverlaySupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MoreThanOneImageGlobeOverlaySupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("23a6de17-5972-41fa-a0ad-418e247042d5"))
_IAgStkGraphicsGraphicsFontFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGraphicsFontPtr InitializeWithNameSizeFontStyleOutline (
        _bstr_t Name,
        int Size,
        enum AgEStkGraphicsFontStyle FontStyle,
        VARIANT_BOOL Outline );
    IAgStkGraphicsGraphicsFontPtr InitializeWithNameSize (
        _bstr_t Name,
        int Size );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithNameSizeFontStyleOutline (
        /*[in]*/ BSTR Name,
        /*[in]*/ int Size,
        /*[in]*/ enum AgEStkGraphicsFontStyle FontStyle,
        /*[in]*/ VARIANT_BOOL Outline,
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithNameSize (
        /*[in]*/ BSTR Name,
        /*[in]*/ int Size,
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFont * * ppRetVal ) = 0;
};

struct __declspec(uuid("6a19e993-a462-476a-9d4c-20810b263445"))
_IAgStkGraphicsGreatArcInterpolatorFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGreatArcInterpolatorPtr Initialize ( );
    IAgStkGraphicsGreatArcInterpolatorPtr InitializeWithCentralBody (
        _bstr_t CentralBody );
    IAgStkGraphicsGreatArcInterpolatorPtr InitializeWithCentralBodyAndGranularity (
        _bstr_t CentralBody,
        double Granularity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBodyAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolator * * ppRetVal ) = 0;
};

struct __declspec(uuid("1f130a3d-9187-4fc1-ab93-ad1648c1bf3b"))
_IAgStkGraphicsAlphaFromLuminanceFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAlphaFromLuminanceFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromLuminanceFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("cc72502f-8bb7-4dc6-80a0-7790631539f4"))
_IAgStkGraphicsAlphaFromPixelFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAlphaFromPixelFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromPixelFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("c2343dc8-8154-436d-b4f0-4119deeb9beb"))
_IAgStkGraphicsAlphaFromRasterFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsAlphaFromRasterFilterPtr Initialize ( );
    IAgStkGraphicsAlphaFromRasterFilterPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromRasterFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromRasterFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("89eb0d62-0b45-406c-8f8b-bcb01053a0e9"))
_IAgStkGraphicsBandExtractFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBandExtractFilterPtr Initialize ( );
    IAgStkGraphicsBandExtractFilterPtr InitializeWithBand (
        enum AgEStkGraphicsRasterBand RasterBand );
    IAgStkGraphicsBandExtractFilterPtr InitializeWithFormat (
        enum AgEStkGraphicsRasterFormat RasterFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithBand (
        /*[in]*/ enum AgEStkGraphicsRasterBand RasterBand,
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormat (
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("91ee6cd7-d909-42a8-8912-cb39d8cfc116"))
_IAgStkGraphicsBandOrderFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBandOrderFilterPtr Initialize ( );
    IAgStkGraphicsBandOrderFilterPtr InitializeWithOrder (
        enum AgEStkGraphicsRasterFormat BandOrder );
    IAgStkGraphicsBandOrderFilterPtr InitializeWithOrderAndBool (
        enum AgEStkGraphicsRasterFormat BandOrder,
        VARIANT_BOOL MaintainImageFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithOrder (
        /*[in]*/ enum AgEStkGraphicsRasterFormat BandOrder,
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithOrderAndBool (
        /*[in]*/ enum AgEStkGraphicsRasterFormat BandOrder,
        /*[in]*/ VARIANT_BOOL MaintainImageFormat,
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("2a8657f1-2eb1-48ff-b058-a80d995cb051"))
_IAgStkGraphicsBlurFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBlurFilterPtr Initialize ( );
    IAgStkGraphicsBlurFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsBlurMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBlurFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsBlurMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsBlurFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("7fab93ca-a455-45cf-912c-64378aee3c53"))
_IAgStkGraphicsBrightnessFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBrightnessFilterPtr Initialize ( );
    IAgStkGraphicsBrightnessFilterPtr InitializeWithAdjustment (
        double Adjustment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsBrightnessFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAdjustment (
        /*[in]*/ double Adjustment,
        /*[out,retval]*/ struct IAgStkGraphicsBrightnessFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("949b826c-5cae-481f-97aa-279396e174d2"))
_IAgStkGraphicsColorToLuminanceFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsColorToLuminanceFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsColorToLuminanceFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("561484bc-d70e-496b-938d-52f6b72721b1"))
_IAgStkGraphicsContrastFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsContrastFilterPtr Initialize ( );
    IAgStkGraphicsContrastFilterPtr InitializeWithAdjustment (
        double Adjustment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsContrastFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAdjustment (
        /*[in]*/ double Adjustment,
        /*[out,retval]*/ struct IAgStkGraphicsContrastFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("6c4bf836-577c-4843-aa23-577b73732245"))
_IAgStkGraphicsConvolutionFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsConvolutionFilterPtr Initialize ( );
    IAgStkGraphicsConvolutionFilterPtr InitializeWithKernel (
        SAFEARRAY * * Kernel );
    IAgStkGraphicsConvolutionFilterPtr InitializeWithKernelAndDivisor (
        SAFEARRAY * * Kernel,
        double Divisor );
    IAgStkGraphicsConvolutionFilterPtr InitializeWithKernelDivisorAndOffset (
        SAFEARRAY * * Kernel,
        double Divisor,
        double Offset );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithKernel (
        /*[in]*/ SAFEARRAY * * Kernel,
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithKernelAndDivisor (
        /*[in]*/ SAFEARRAY * * Kernel,
        /*[in]*/ double Divisor,
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithKernelDivisorAndOffset (
        /*[in]*/ SAFEARRAY * * Kernel,
        /*[in]*/ double Divisor,
        /*[in]*/ double Offset,
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("87280e66-2578-4ea4-8aaf-157b6a1fcb4f"))
_IAgStkGraphicsEdgeDetectFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsEdgeDetectFilterPtr Initialize ( );
    IAgStkGraphicsEdgeDetectFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsEdgeDetectMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsEdgeDetectFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsEdgeDetectMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsEdgeDetectFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("eac3bbe2-9633-4622-9427-47ecdd5cde5c"))
_IAgStkGraphicsFilteringRasterStreamFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsFilteringRasterStreamPtr Initialize (
        struct IAgStkGraphicsRasterStream * RasterStream,
        struct IAgStkGraphicsRasterFilter * Filter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ struct IAgStkGraphicsRasterStream * RasterStream,
        /*[in]*/ struct IAgStkGraphicsRasterFilter * Filter,
        /*[out,retval]*/ struct IAgStkGraphicsFilteringRasterStream * * ppRetVal ) = 0;
};

struct __declspec(uuid("f163c52a-ddf6-4e7f-b6b7-cce692e98774"))
_IAgStkGraphicsFlipFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsFlipFilterPtr Initialize ( );
    IAgStkGraphicsFlipFilterPtr InitializeWithFlipAxis (
        enum AgEStkGraphicsFlipAxis FlipAxis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsFlipFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFlipAxis (
        /*[in]*/ enum AgEStkGraphicsFlipAxis FlipAxis,
        /*[out,retval]*/ struct IAgStkGraphicsFlipFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("717ae738-297e-47bf-b127-e57689e4d3ab"))
_IAgStkGraphicsGammaCorrectionFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGammaCorrectionFilterPtr Initialize ( );
    IAgStkGraphicsGammaCorrectionFilterPtr InitializeWithGamma (
        double Gamma );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGammaCorrectionFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithGamma (
        /*[in]*/ double Gamma,
        /*[out,retval]*/ struct IAgStkGraphicsGammaCorrectionFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("84585c55-4425-4787-88d8-0ae73b282dec"))
_IAgStkGraphicsGaussianBlurFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGaussianBlurFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGaussianBlurFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("b2b0aac8-e2b5-4bdf-ac80-7d62e23b1ae4"))
_IAgStkGraphicsGradientDetectFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsGradientDetectFilterPtr Initialize ( );
    IAgStkGraphicsGradientDetectFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsGradientDetectMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsGradientDetectFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsGradientDetectMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsGradientDetectFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("707530d9-bc4a-4d1b-9a2b-a8cbef31dd9d"))
_IAgStkGraphicsJpeg2000WriterInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WriteString (
        _bstr_t ImageUri,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile );
    HRESULT WriteExtentString (
        _bstr_t ImageUri,
        SAFEARRAY * * Extent,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile );
    HRESULT WriteExtentAndSubExtentString (
        _bstr_t ImageUri,
        SAFEARRAY * * Extent,
        SAFEARRAY * * SubExtent,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile );
    HRESULT WriteExtentAndSubExtentTransparentColorString (
        _bstr_t ImageUri,
        SAFEARRAY * * Extent,
        SAFEARRAY * * SubExtent,
        enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        int CompressionRate,
        _bstr_t Jpeg2000Uri,
        VARIANT_BOOL OverwriteExistingFile,
        OLE_COLOR TransparentColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WriteString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile ) = 0;
      virtual HRESULT __stdcall raw_WriteExtentString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile ) = 0;
      virtual HRESULT __stdcall raw_WriteExtentAndSubExtentString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ SAFEARRAY * * SubExtent,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile ) = 0;
      virtual HRESULT __stdcall raw_WriteExtentAndSubExtentTransparentColorString (
        /*[in]*/ BSTR ImageUri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[in]*/ SAFEARRAY * * SubExtent,
        /*[in]*/ enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile,
        /*[in]*/ int CompressionRate,
        /*[in]*/ BSTR Jpeg2000Uri,
        /*[in]*/ VARIANT_BOOL OverwriteExistingFile,
        /*[in]*/ OLE_COLOR TransparentColor ) = 0;
};

struct __declspec(uuid("9260e17f-e9a7-4b45-aa91-9c09e89163c0"))
_IAgStkGraphicsLevelsFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsLevelsFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsLevelsFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("5e50d808-f143-434b-a9c3-580a9a1c724d"))
_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsProjectionRasterStreamPluginActivatorPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionRasterStreamPluginActivator * * ppRetVal ) = 0;
};

struct __declspec(uuid("6167d52c-eea2-418d-bb11-d8abe37a4baf"))
_IAgStkGraphicsRasterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterPtr InitializeWithStringUri (
        _bstr_t Uri );
    IAgStkGraphicsRasterPtr InitializeWithStringUriXYWidthAndHeight (
        _bstr_t Uri,
        int X,
        int Y,
        int Width,
        int Height );
    IAgStkGraphicsRasterPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUriXYWidthAndHeight (
        /*[in]*/ BSTR Uri,
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsRaster * * ppRetVal ) = 0;
};

struct __declspec(uuid("d635164d-94d9-40ed-8fd0-f1050eb97f3e"))
_IAgStkGraphicsRasterAttributesFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterAttributesPtr InitializeWithFormat (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatAndType (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatTypeAndOrientation (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType,
        enum AgEStkGraphicsRasterOrientation RasterOrientation );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatTypeOrientationAndAlignment (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType,
        enum AgEStkGraphicsRasterOrientation RasterOrientation,
        int RowAlignment );
    IAgStkGraphicsRasterAttributesPtr InitializeWithFormatTypeOrientationAlignmentAndRatio (
        int Width,
        int Height,
        enum AgEStkGraphicsRasterFormat RasterFormat,
        enum AgEStkGraphicsRasterType RasterType,
        enum AgEStkGraphicsRasterOrientation RasterOrientation,
        int RowAlignment,
        double PixelAspectRatio );
    IAgStkGraphicsRasterAttributesPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithFormat (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatAndType (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatTypeAndOrientation (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[in]*/ enum AgEStkGraphicsRasterOrientation RasterOrientation,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatTypeOrientationAndAlignment (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[in]*/ enum AgEStkGraphicsRasterOrientation RasterOrientation,
        /*[in]*/ int RowAlignment,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithFormatTypeOrientationAlignmentAndRatio (
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ enum AgEStkGraphicsRasterFormat RasterFormat,
        /*[in]*/ enum AgEStkGraphicsRasterType RasterType,
        /*[in]*/ enum AgEStkGraphicsRasterOrientation RasterOrientation,
        /*[in]*/ int RowAlignment,
        /*[in]*/ double PixelAspectRatio,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributes * * ppRetVal ) = 0;
};

struct __declspec(uuid("1a43c398-befc-4622-a707-0357ea5640ac"))
_IAgStkGraphicsRotateFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRotateFilterPtr Initialize ( );
    IAgStkGraphicsRotateFilterPtr InitializeWithAngle (
        double RotateAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsRotateFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAngle (
        /*[in]*/ double RotateAngle,
        /*[out,retval]*/ struct IAgStkGraphicsRotateFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("4ac9b3dc-c2ab-4af8-83ed-44aeec3ccc18"))
_IAgStkGraphicsSequenceFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSequenceFilterPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSequenceFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("c5315311-2241-4533-a81f-290b04488c4d"))
_IAgStkGraphicsSharpenFilterFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSharpenFilterPtr Initialize ( );
    IAgStkGraphicsSharpenFilterPtr InitializeWithMethod (
        enum AgEStkGraphicsSharpenMethod Method );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSharpenFilter * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithMethod (
        /*[in]*/ enum AgEStkGraphicsSharpenMethod Method,
        /*[out,retval]*/ struct IAgStkGraphicsSharpenFilter * * ppRetVal ) = 0;
};

struct __declspec(uuid("b8bd0c96-6723-4bb1-8ef1-af4fb6ce2e10"))
_IAgStkGraphicsVideoStreamFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsVideoStreamPtr InitializeWithStringUri (
        _bstr_t Uri );
    IAgStkGraphicsVideoStreamPtr InitializeWithStringUriAndAudio (
        _bstr_t Uri,
        VARIANT_BOOL LoadAudio );
    IAgStkGraphicsVideoStreamPtr InitializeAudioVideoWithStringUri (
        _bstr_t Uri,
        _bstr_t AudioUri );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsVideoStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUriAndAudio (
        /*[in]*/ BSTR Uri,
        /*[in]*/ VARIANT_BOOL LoadAudio,
        /*[out,retval]*/ struct IAgStkGraphicsVideoStream * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeAudioVideoWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[in]*/ BSTR AudioUri,
        /*[out,retval]*/ struct IAgStkGraphicsVideoStream * * ppRetVal ) = 0;
};

struct __declspec(uuid("888a9537-fbd8-4e2f-8e0e-8e7a1a4d04d1"))
_IAgStkGraphicsMarkerBatchPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsMarkerBatchPrimitivePtr Initialize ( );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeWithSizeSource (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeWithSizeSourceAndSortOrder (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        enum AgEStkGraphicsMarkerBatchSortOrder SortOrder );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeSizeSourceSortOrderAndSetHint (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsMarkerBatchPrimitivePtr InitializeSizeSourceSortOrderSetHintAndRenderingMethod (
        enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        enum AgEStkGraphicsSetHint SetHint,
        enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSizeSource (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSizeSourceAndSortOrder (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeSizeSourceSortOrderAndSetHint (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeSizeSourceSortOrderSetHintAndRenderingMethod (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSizeSource SizeSource,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchSortOrder SortOrder,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod,
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("fb05ce13-9227-42bc-aeb6-9ecd0162d721"))
_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * * ppRetVal ) = 0;
};

struct __declspec(uuid("6770735d-5892-48fd-b74e-ee6980fbab86"))
_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr Initialize ( );
    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr InitializeWithParameters (
        int MaximumCount,
        enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithParameters (
        /*[in]*/ int MaximumCount,
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation,
        /*[out,retval]*/ struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
};

struct __declspec(uuid("6a522543-68d2-484e-b624-a9edb2db69a2"))
_IAgStkGraphicsModelPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsModelPrimitivePtr Initialize ( );
    IAgStkGraphicsModelPrimitivePtr InitializeWithStringUri (
        _bstr_t Uri );
    IAgStkGraphicsModelPrimitivePtr InitializeWithStringUriAndUpAxis (
        _bstr_t Uri,
        enum AgEStkGraphicsModelUpAxis UpAxis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUri (
        /*[in]*/ BSTR Uri,
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithStringUriAndUpAxis (
        /*[in]*/ BSTR Uri,
        /*[in]*/ enum AgEStkGraphicsModelUpAxis UpAxis,
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("29703747-5639-441b-ab7c-6affb05bd783"))
_IAgStkGraphicsPixelSizeDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPixelSizeDisplayConditionPtr Initialize ( );
    IAgStkGraphicsPixelSizeDisplayConditionPtr InitializeWithPixelSizes (
        int MinimumPixelSize,
        int MaximumPixelSize );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPixelSizeDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPixelSizes (
        /*[in]*/ int MinimumPixelSize,
        /*[in]*/ int MaximumPixelSize,
        /*[out,retval]*/ struct IAgStkGraphicsPixelSizeDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("485b18d4-bb4c-48cb-80e5-104775b55efe"))
_IAgStkGraphicsPointBatchPrimitiveFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumPixelSizeSupported))
    float MinimumPixelSizeSupported;
    __declspec(property(get=GetMaximumPixelSizeSupported))
    float MaximumPixelSizeSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPointBatchPrimitivePtr Initialize ( );
    IAgStkGraphicsPointBatchPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );
    float GetMinimumPixelSizeSupported ( );
    float GetMaximumPixelSizeSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPointBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPointBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPixelSizeSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("8b93b6dc-026d-43b3-8604-65e89eb49d51"))
_IAgStkGraphicsPolylinePrimitiveFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPolylinePrimitivePtr Initialize ( );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithInterpolatorAndSetHint (
        struct IAgStkGraphicsPositionInterpolator * Interpolator,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithTypeAndHint (
        enum AgEStkGraphicsPolylineType PolylineType,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithInterpolator (
        struct IAgStkGraphicsPositionInterpolator * Interpolator );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithHint (
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsPolylinePrimitivePtr InitializeWithType (
        enum AgEStkGraphicsPolylineType PolylineType );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithInterpolatorAndSetHint (
        /*[in]*/ struct IAgStkGraphicsPositionInterpolator * Interpolator,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTypeAndHint (
        /*[in]*/ enum AgEStkGraphicsPolylineType PolylineType,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithInterpolator (
        /*[in]*/ struct IAgStkGraphicsPositionInterpolator * Interpolator,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithType (
        /*[in]*/ enum AgEStkGraphicsPolylineType PolylineType,
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("f8fe66d8-aab1-499f-bfb2-535d0c430e34"))
_IAgStkGraphicsRasterImageGlobeOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRasterImageGlobeOverlayPtr InitializeWithString (
        _bstr_t Uri,
        SAFEARRAY * * Extent );
    IAgStkGraphicsRasterImageGlobeOverlayPtr InitializeWithColor (
        OLE_COLOR Color,
        SAFEARRAY * * Extent );
    IAgStkGraphicsRasterImageGlobeOverlayPtr InitializeWithRaster (
        struct IAgStkGraphicsRaster * Raster,
        SAFEARRAY * * Extent );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithString (
        /*[in]*/ BSTR Uri,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithColor (
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRaster (
        /*[in]*/ struct IAgStkGraphicsRaster * Raster,
        /*[in]*/ SAFEARRAY * * Extent,
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("3e8fe3b1-1c3f-431f-8680-e20eeafdf3c6"))
_IAgStkGraphicsRhumbLineInterpolatorFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsRhumbLineInterpolatorPtr Initialize ( );
    IAgStkGraphicsRhumbLineInterpolatorPtr InitializeWithCentralBody (
        _bstr_t CentralBody );
    IAgStkGraphicsRhumbLineInterpolatorPtr InitializeWithCentralBodyAndGranularity (
        _bstr_t CentralBody,
        double Granularity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolator * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCentralBodyAndGranularity (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ double Granularity,
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolator * * ppRetVal ) = 0;
};

struct __declspec(uuid("bf23eb15-96b5-4ac3-b342-6c5a17fd5b71"))
_IAgStkGraphicsSceneDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSceneDisplayConditionPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSceneDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("57980a47-e8c1-4c2f-955b-0e231cb60006"))
_IAgStkGraphicsSceneManagerInitializer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextures))
    IAgStkGraphicsTexture2DFactoryPtr Textures;
    __declspec(property(get=GetGlobeOverlaySettings))
    IAgStkGraphicsGlobeOverlaySettingsPtr GlobeOverlaySettings;
    __declspec(property(get=GetPrimitives))
    IAgStkGraphicsPrimitiveManagerPtr Primitives;
    __declspec(property(get=GetScreenOverlays))
    IAgStkGraphicsScreenOverlayManagerPtr ScreenOverlays;
    __declspec(property(get=GetScenes))
    IAgStkGraphicsSceneCollectionPtr Scenes;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPrimitiveManagerPtr GetPrimitives ( );
    IAgStkGraphicsScreenOverlayManagerPtr GetScreenOverlays ( );
    IAgStkGraphicsTexture2DFactoryPtr GetTextures ( );
    IAgStkGraphicsGlobeOverlaySettingsPtr GetGlobeOverlaySettings ( );
    IAgStkGraphicsSceneCollectionPtr GetScenes ( );
    HRESULT Render ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Primitives (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitiveManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScreenOverlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Textures (
        /*[out,retval]*/ struct IAgStkGraphicsTexture2DFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeOverlaySettings (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeOverlaySettings * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scenes (
        /*[out,retval]*/ struct IAgStkGraphicsSceneCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Render ( ) = 0;
};

struct __declspec(uuid("011ba34f-088e-4052-b404-c0a80c591ff6"))
_IAgStkGraphicsScreenOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsScreenOverlayPtr Initialize (
        double XPixels,
        double YPixels,
        double WidthPixels,
        double HeightPixels );
    IAgStkGraphicsScreenOverlayPtr InitializeWithPosAndSize (
        SAFEARRAY * * Position,
        SAFEARRAY * * Size );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ double WidthPixels,
        /*[in]*/ double HeightPixels,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPosAndSize (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("0e76f5df-ea69-4755-8ff7-8f260c3aae96"))
_IAgStkGraphicsSolidPrimitiveFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumSilhouetteWidthSupported))
    float MinimumSilhouetteWidthSupported;
    __declspec(property(get=GetMaximumSilhouetteWidthSupported))
    float MaximumSilhouetteWidthSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSolidPrimitivePtr Initialize ( );
    IAgStkGraphicsSolidPrimitivePtr InitializeWithHint (
        enum AgEStkGraphicsSetHint SetHint );
    float GetMinimumSilhouetteWidthSupported ( );
    float GetMaximumSilhouetteWidthSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSolidPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsSolidPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSilhouetteWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("0c754029-69a0-4233-bab9-26e98e5a4cf7"))
_IAgStkGraphicsSurfaceMeshPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsSurfaceMeshPrimitivePtr Initialize ( );
    IAgStkGraphicsSurfaceMeshPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsSurfaceMeshPrimitivePtr InitializeWithSetHintAndRenderingMethod (
        enum AgEStkGraphicsSetHint SetHint,
        enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod );
    VARIANT_BOOL Supported (
        enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod );
    VARIANT_BOOL SupportedWithDefaultRenderingMethod ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHintAndRenderingMethod (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[in]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod,
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Supported (
        /*[in]*/ enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SupportedWithDefaultRenderingMethod (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b31c16ca-d2c0-4784-830f-b17d07a1d6f8"))
_IAgStkGraphicsTerrainOverlayInitializer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSupported))
    VARIANT_BOOL Supported;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Supported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("92460a04-1900-4108-ba29-d27b8b1b2973"))
_IAgStkGraphicsTextBatchPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextBatchPrimitivePtr InitializeWithGraphicsFont (
        struct IAgStkGraphicsGraphicsFont * Font );
    IAgStkGraphicsTextBatchPrimitivePtr InitializeWithGraphicsFontAndSetHint (
        struct IAgStkGraphicsGraphicsFont * Font,
        enum AgEStkGraphicsSetHint SetHint );
    IAgStkGraphicsTextBatchPrimitivePtr InitializeWithGraphicsFontAndSetHint2d (
        struct IAgStkGraphicsGraphicsFont * Font,
        enum AgEStkGraphicsSetHint SetHint,
        VARIANT_BOOL RenderInScreenSpace );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithGraphicsFont (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithGraphicsFontAndSetHint (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithGraphicsFontAndSetHint2d (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[in]*/ VARIANT_BOOL RenderInScreenSpace,
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("f3f1aab9-a67b-4eab-912e-4099608ec970"))
_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextBatchPrimitiveOptionalParametersPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * * ppRetVal ) = 0;
};

struct __declspec(uuid("abb2dfab-3c6e-4d7a-bc38-5b8b3dde016a"))
_IAgStkGraphicsTextOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextOverlayPtr Initialize (
        struct IAgStkGraphicsGraphicsFont * Font );
    IAgStkGraphicsTextOverlayPtr InitializeWithXYWidthHeight (
        struct IAgStkGraphicsGraphicsFont * Font,
        double XPixels,
        double YPixels,
        double WidthPixels,
        double HeightPixels );
    IAgStkGraphicsTextOverlayPtr InitializeWithPositionSize (
        struct IAgStkGraphicsGraphicsFont * Font,
        SAFEARRAY * * Position,
        SAFEARRAY * * Size );
    IAgStkGraphicsTextOverlayPtr InitializeWithWidthHeightUnits (
        struct IAgStkGraphicsGraphicsFont * Font,
        double Width,
        enum AgEStkGraphicsScreenOverlayUnit WidthUnit,
        double Height,
        enum AgEStkGraphicsScreenOverlayUnit HeightUnit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithXYWidthHeight (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ double WidthPixels,
        /*[in]*/ double HeightPixels,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPositionSize (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithWidthHeightUnits (
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[in]*/ double Width,
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit WidthUnit,
        /*[in]*/ double Height,
        /*[in]*/ enum AgEStkGraphicsScreenOverlayUnit HeightUnit,
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("c2419de2-1ca9-47d8-9cba-13bc141596a2"))
_IAgStkGraphicsTextureMatrixFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextureMatrixPtr Initialize ( );
    IAgStkGraphicsTextureMatrixPtr InitializeByValues (
        float M11,
        float M12,
        float M13,
        float M14,
        float M21,
        float M22,
        float M23,
        float M24,
        float M31,
        float M32,
        float M33,
        float M34,
        float M41,
        float M42,
        float M43,
        float M44 );
    IAgStkGraphicsTextureMatrixPtr InitializeWithAffineTransform (
        SAFEARRAY * * Matrix );
    IAgStkGraphicsTextureMatrixPtr InitializeWithRectangles (
        SAFEARRAY * * Corner0,
        SAFEARRAY * * Corner1,
        SAFEARRAY * * Corner2,
        SAFEARRAY * * Corner3 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeByValues (
        /*[in]*/ float M11,
        /*[in]*/ float M12,
        /*[in]*/ float M13,
        /*[in]*/ float M14,
        /*[in]*/ float M21,
        /*[in]*/ float M22,
        /*[in]*/ float M23,
        /*[in]*/ float M24,
        /*[in]*/ float M31,
        /*[in]*/ float M32,
        /*[in]*/ float M33,
        /*[in]*/ float M34,
        /*[in]*/ float M41,
        /*[in]*/ float M42,
        /*[in]*/ float M43,
        /*[in]*/ float M44,
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithAffineTransform (
        /*[in]*/ SAFEARRAY * * Matrix,
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithRectangles (
        /*[in]*/ SAFEARRAY * * Corner0,
        /*[in]*/ SAFEARRAY * * Corner1,
        /*[in]*/ SAFEARRAY * * Corner2,
        /*[in]*/ SAFEARRAY * * Corner3,
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrix * * ppRetVal ) = 0;
};

struct __declspec(uuid("0608cf24-ad8b-4d10-a6e3-41d42fc55462"))
_IAgStkGraphicsTextureScreenOverlayFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTextureScreenOverlayPtr Initialize ( );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithXYWidthHeight (
        double XPixels,
        double YPixels,
        double WidthPixels,
        double HeightPixels );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithPositionSize (
        SAFEARRAY * * Position,
        SAFEARRAY * * Size );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithXYTexture (
        double XPixels,
        double YPixels,
        struct IAgStkGraphicsRendererTexture2D * Texture );
    IAgStkGraphicsTextureScreenOverlayPtr InitializeWithPositionTexture (
        SAFEARRAY * * Position,
        struct IAgStkGraphicsRendererTexture2D * Texture );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithXYWidthHeight (
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ double WidthPixels,
        /*[in]*/ double HeightPixels,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPositionSize (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ SAFEARRAY * * Size,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithXYTexture (
        /*[in]*/ double XPixels,
        /*[in]*/ double YPixels,
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * Texture,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithPositionTexture (
        /*[in]*/ SAFEARRAY * * Position,
        /*[in]*/ struct IAgStkGraphicsRendererTexture2D * Texture,
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlay * * ppRetVal ) = 0;
};

struct __declspec(uuid("0ee98d96-3d78-464c-9e21-6b1f7a0e2b7c"))
_IAgStkGraphicsTimeIntervalDisplayConditionFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTimeIntervalDisplayConditionPtr Initialize ( );
    IAgStkGraphicsTimeIntervalDisplayConditionPtr InitializeWithTimes (
        struct STKUtil::IAgDate * MinimumTime,
        struct STKUtil::IAgDate * MaximumTime );
    IAgStkGraphicsTimeIntervalDisplayConditionPtr InitializeWithTimeInterval (
        SAFEARRAY * * TimeInterval );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTimes (
        /*[in]*/ struct STKUtil::IAgDate * MinimumTime,
        /*[in]*/ struct STKUtil::IAgDate * MaximumTime,
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithTimeInterval (
        /*[in]*/ SAFEARRAY * * TimeInterval,
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayCondition * * ppRetVal ) = 0;
};

struct __declspec(uuid("12940185-0225-45d7-ac39-8ae8f181cc0c"))
_IAgStkGraphicsTriangleMeshPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTriangleMeshPrimitivePtr Initialize ( );
    IAgStkGraphicsTriangleMeshPrimitivePtr InitializeWithSetHint (
        enum AgEStkGraphicsSetHint SetHint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithSetHint (
        /*[in]*/ enum AgEStkGraphicsSetHint SetHint,
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitive * * ppRetVal ) = 0;
};

struct __declspec(uuid("f17c503d-ec72-4b5b-8e25-20a2f7d161cb"))
_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersPtr Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * * ppRetVal ) = 0;
};

struct __declspec(uuid("a7b31603-e51b-4e11-a6cc-d242c5c2793c"))
_IAgStkGraphicsVectorPrimitiveFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsVectorPrimitivePtr InitializeWithDirection (
        struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        struct AgSTKVgtLib::IAgCrdnVector * Dir,
        struct IAgStkGraphicsGraphicsFont * Font );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeWithDirection (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * Sys,
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnVector * Dir,
        /*[in]*/ struct IAgStkGraphicsGraphicsFont * Font,
        /*[out,retval]*/ struct IAgStkGraphicsVectorPrimitive * * ppRetVal ) = 0;
};

enum AgEStkGraphicsRefreshRate
{
    eStkGraphicsRefreshRateFastest = 0,
    eStkGraphicsRefreshRateTargetedFramesPerSecond = 1
};

enum AgEStkGraphicsRenderPass
{
    eStkGraphicsRenderPassOpaque = 1,
    eStkGraphicsRenderPassTranslucent = 2,
    eStkGraphicsRenderPassCentralBodyClipped = 4,
    eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped = 8,
    eStkGraphicsRenderPassOrderedComposite = 16,
    eStkGraphicsRenderPassTerrain = 32
};

struct __declspec(uuid("26d3cc1e-cf8b-49a5-853a-97fcad8272c8"))
IAgStkGraphicsImageCollectionEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AddComplete (
        const _variant_t & Sender,
        struct IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs * Args );
};

struct __declspec(uuid("37f5831c-24d2-4e56-b3e4-6b3927a459f6"))
IAgStkGraphicsKmlGraphicsEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT DocumentLoaded (
        const _variant_t & Sender,
        struct IAgStkGraphicsKmlDocumentLoadedEventArgs * Args );
};

struct __declspec(uuid("39d3a8dd-0d1a-4ab7-ba29-81ffd591274c"))
IAgStkGraphicsSceneEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Rendering (
        const _variant_t & Sender,
        struct IAgStkGraphicsRenderingEventArgs * Args );
};

struct __declspec(uuid("0301317f-e5be-44cf-9b52-e15d3ee8cbe5"))
IAgStkGraphicsSceneManagerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Rendering (
        const _variant_t & Sender,
        struct IAgStkGraphicsRenderingEventArgs * Args );
};

struct __declspec(uuid("fe5c3cb3-727a-4887-bcfe-0d311b17b092"))
IAgStkGraphicsTerrainCollectionEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AddComplete (
        const _variant_t & Sender,
        struct IAgStkGraphicsTerrainOverlayAddCompleteEventArgs * Args );
};

struct __declspec(uuid("8e4be765-6a2b-4118-b17b-2252073c4010"))
AgStkGraphicsPathPoint;
    // [ default ] interface _IAgStkGraphicsPathPoint
    // interface IAgStkGraphicsPathPoint

struct __declspec(uuid("b9f4d355-f31b-4ed5-8631-337fffc32df8"))
AgStkGraphicsPathPointFactory;
    // [ default ] interface _IAgStkGraphicsPathPointFactory
    // interface IAgStkGraphicsPathPointFactory

struct __declspec(uuid("81fc7252-98a3-4cb7-9ae7-64217f66ba78"))
AgStkGraphicsBoundingSphere;
    // [ default ] interface _IAgStkGraphicsBoundingSphere
    // interface IAgStkGraphicsBoundingSphere

struct __declspec(uuid("fe586a48-a273-4577-8403-6acc7e948169"))
AgStkGraphicsBoundingSphereFactory;
    // [ default ] interface _IAgStkGraphicsBoundingSphereFactory
    // interface IAgStkGraphicsBoundingSphereFactory

struct __declspec(uuid("efd1a44f-bb50-4443-abe9-1025b82fb1c9"))
AgStkGraphicsTextureFilter2D;
    // [ default ] interface _IAgStkGraphicsTextureFilter2D
    // interface IAgStkGraphicsTextureFilter2D

struct __declspec(uuid("ef66e104-263b-4b9a-bd8d-b443ce97af95"))
AgStkGraphicsTextureFilter2DFactory;
    // [ default ] interface _IAgStkGraphicsTextureFilter2DFactory
    // interface IAgStkGraphicsTextureFilter2DFactory

struct __declspec(uuid("9aaa86b8-0e5e-4227-a556-36c99fac404a"))
AgStkGraphicsRendererTexture2D;
    // [ default ] interface _IAgStkGraphicsRendererTexture2D
    // interface IAgStkGraphicsRendererTexture2D

struct __declspec(uuid("286e02a9-3815-417c-902a-e04e7a0d787d"))
AgStkGraphicsRendererTextureTemplate2D;
    // [ default ] interface _IAgStkGraphicsRendererTextureTemplate2D
    // interface IAgStkGraphicsRendererTextureTemplate2D

struct __declspec(uuid("f99fc5f2-ad00-4359-9919-36177646f468"))
AgStkGraphicsPathPointCollection;
    // [ default ] interface _IAgStkGraphicsPathPointCollection
    // interface IAgStkGraphicsPathPointCollection

struct __declspec(uuid("3dbda5bf-2f8d-4275-a6c5-3d6f7982544a"))
AgStkGraphicsObjectCollection;
    // [ default ] interface _IAgStkGraphicsObjectCollection
    // interface IAgStkGraphicsObjectCollection

struct __declspec(uuid("cac2d443-b384-43dd-a77c-3013c7c789d1"))
AgStkGraphicsSceneCollection;
    // [ default ] interface _IAgStkGraphicsSceneCollection
    // interface IAgStkGraphicsSceneCollection

struct __declspec(uuid("2768d437-1606-401d-8520-392aeaa09415"))
AgStkGraphicsScreenOverlayPickResultCollection;
    // [ default ] interface _IAgStkGraphicsScreenOverlayPickResultCollection
    // interface IAgStkGraphicsScreenOverlayPickResultCollection

struct __declspec(uuid("21663915-b2d1-4890-89ea-ec8dcbf3287f"))
AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs;
    // [ default ] interface _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs
    // interface IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs

struct __declspec(uuid("4ff9ef5b-4057-456d-b7e3-cb1ff446899b"))
AgStkGraphicsTerrainOverlayAddCompleteEventArgs;
    // [ default ] interface _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs
    // interface IAgStkGraphicsTerrainOverlayAddCompleteEventArgs

struct __declspec(uuid("70da7df1-b75a-4948-b628-3d06630fd572"))
AgStkGraphicsPickResultCollection;
    // [ default ] interface _IAgStkGraphicsPickResultCollection
    // interface IAgStkGraphicsPickResultCollection

struct __declspec(uuid("ed254add-aa1e-4b95-a98f-bcca2d157b2f"))
AgStkGraphicsRenderingEventArgs;
    // [ default ] interface _IAgStkGraphicsRenderingEventArgs
    // interface IAgStkGraphicsRenderingEventArgs

struct __declspec(uuid("f554b935-7096-46fb-a6d8-d2e4c479180d"))
AgStkGraphicsBatchPrimitiveIndex;
    // [ default ] interface _IAgStkGraphicsBatchPrimitiveIndex
    // interface IAgStkGraphicsBatchPrimitiveIndex

struct __declspec(uuid("7f29a0fb-3083-4fa9-855a-b1cd29e38a82"))
AgStkGraphicsKmlDocumentCollection;
    // [ default ] interface _IAgStkGraphicsKmlDocumentCollection
    // interface IAgStkGraphicsKmlDocumentCollection

struct __declspec(uuid("dc206dad-cc6d-43de-8650-aa7ff714e136"))
AgStkGraphicsKmlFeatureCollection;
    // [ default ] interface _IAgStkGraphicsKmlFeatureCollection
    // interface IAgStkGraphicsKmlFeatureCollection

struct __declspec(uuid("afce5af0-b1ce-47cc-9805-9dc75e06c6d4"))
AgStkGraphicsKmlDocumentLoadedEventArgs;
    // [ default ] interface _IAgStkGraphicsKmlDocumentLoadedEventArgs
    // interface IAgStkGraphicsKmlDocumentLoadedEventArgs

struct __declspec(uuid("19fa48f4-a520-4ec2-94c7-3045bdc6e658"))
AgStkGraphicsFactoryAndInitializers;
    // [ default ] interface _IAgStkGraphicsFactoryAndInitializers
    // interface IAgStkGraphicsFactoryAndInitializers

struct __declspec(uuid("3efeb652-a2ce-432f-8596-0860fe9f5c98"))
AgStkGraphicsExtrudedPolylineTriangulatorResult;
    // [ default ] interface _IAgStkGraphicsExtrudedPolylineTriangulatorResult
    // interface IAgStkGraphicsExtrudedPolylineTriangulatorResult
    // interface IAgStkGraphicsTriangulatorResult

struct __declspec(uuid("3ba72c70-dd5f-4186-90a8-e1fe3b1bed85"))
AgStkGraphicsSolidTriangulatorResult;
    // [ default ] interface _IAgStkGraphicsSolidTriangulatorResult
    // interface IAgStkGraphicsSolidTriangulatorResult
    // interface IAgStkGraphicsTriangulatorResult

struct __declspec(uuid("c9c1cbe5-a2cb-4226-b2df-7e343628c41a"))
AgStkGraphicsSurfaceShapesResult;
    // [ default ] interface _IAgStkGraphicsSurfaceShapesResult
    // interface IAgStkGraphicsSurfaceShapesResult

struct __declspec(uuid("f2c6c4dd-c085-4aab-ac47-dc201f02f235"))
AgStkGraphicsSurfaceTriangulatorResult;
    // [ default ] interface _IAgStkGraphicsSurfaceTriangulatorResult
    // interface IAgStkGraphicsSurfaceTriangulatorResult
    // interface IAgStkGraphicsTriangulatorResult

struct __declspec(uuid("1f8d5080-4d48-436a-9451-3b853343b74b"))
AgStkGraphicsTriangulatorResult;
    // [ default ] interface _IAgStkGraphicsTriangulatorResult
    // interface IAgStkGraphicsTriangulatorResult

struct __declspec(uuid("424c29ae-4567-4130-9a8f-542229724218"))
AgStkGraphicsAGICustomTerrainOverlay;
    // [ default ] interface _IAgStkGraphicsAGICustomTerrainOverlay
    // interface IAgStkGraphicsAGICustomTerrainOverlay
    // interface IAgStkGraphicsTerrainOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("9982cf4c-2831-4816-8cb8-6fbb8afb1b5a"))
AgStkGraphicsAGIProcessedImageGlobeOverlay;
    // [ default ] interface _IAgStkGraphicsAGIProcessedImageGlobeOverlay
    // interface IAgStkGraphicsAGIProcessedImageGlobeOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("7429dea7-1dfd-409b-b60c-fae252f90c80"))
AgStkGraphicsAGIProcessedTerrainOverlay;
    // [ default ] interface _IAgStkGraphicsAGIProcessedTerrainOverlay
    // interface IAgStkGraphicsAGIProcessedTerrainOverlay
    // interface IAgStkGraphicsTerrainOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("251cd599-4a5c-4a3b-9986-6ea88c17097d"))
AgStkGraphicsAGIRoamImageGlobeOverlay;
    // [ default ] interface _IAgStkGraphicsAGIRoamImageGlobeOverlay
    // interface IAgStkGraphicsAGIRoamImageGlobeOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("6eb983e7-08d0-48fa-b542-46703f1b5b13"))
AgStkGraphicsCameraSnapshot;
    // [ default ] interface _IAgStkGraphicsCameraSnapshot
    // interface IAgStkGraphicsCameraSnapshot

struct __declspec(uuid("82bfc0c5-614b-44e7-a41b-0e7c62bc35c3"))
AgStkGraphicsCameraVideoRecording;
    // [ default ] interface _IAgStkGraphicsCameraVideoRecording
    // interface IAgStkGraphicsCameraVideoRecording

struct __declspec(uuid("03b06e51-153e-43f6-b007-d5feae517951"))
AgStkGraphicsCentralBodyGraphicsIndexer;
    // [ default ] interface _IAgStkGraphicsCentralBodyGraphicsIndexer
    // interface IAgStkGraphicsCentralBodyGraphicsIndexer

struct __declspec(uuid("ce406076-60ba-4be5-8e83-08d9682ac88e"))
AgStkGraphicsCustomImageGlobeOverlay;
    // [ default ] interface _IAgStkGraphicsCustomImageGlobeOverlay
    // interface IAgStkGraphicsCustomImageGlobeOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("45acd5ce-08b4-4554-88c0-da8b917eb6ae"))
AgStkGraphicsCustomImageGlobeOverlayPluginActivator;
    // [ default ] interface _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator
    // interface IAgStkGraphicsCustomImageGlobeOverlayPluginActivator

struct __declspec(uuid("47da4312-9c76-46c1-bcd1-2aa420f92976"))
AgStkGraphicsCustomImageGlobeOverlayPluginProxy;
    // [ default ] interface _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy
    // interface IAgStkGraphicsCustomImageGlobeOverlayPluginProxy

struct __declspec(uuid("08ae7920-15b1-4a1a-b348-a3ce215f3c88"))
AgStkGraphicsGeospatialImageGlobeOverlay;
    // [ default ] interface _IAgStkGraphicsGeospatialImageGlobeOverlay
    // interface IAgStkGraphicsGeospatialImageGlobeOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("1c50eece-149a-46d7-8bde-55d468de5ce7"))
AgStkGraphicsGlobeOverlay;
    // [ default ] interface _IAgStkGraphicsGlobeOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("05dfcac3-8be7-4b8c-93ff-f774b43536ad"))
AgStkGraphicsGlobeOverlaySettings;
    // [ default ] interface _IAgStkGraphicsGlobeOverlaySettings
    // interface IAgStkGraphicsGlobeOverlaySettings

struct __declspec(uuid("90335c3a-bb57-486d-9d0d-21c2b27e3876"))
AgStkGraphicsLighting;
    // [ default ] interface _IAgStkGraphicsLighting
    // interface IAgStkGraphicsLighting

struct __declspec(uuid("72db179a-e7b0-4fc5-8ee5-9e8bac7301e9"))
AgStkGraphicsPathPrimitiveUpdatePolicy;
    // [ default ] interface _IAgStkGraphicsPathPrimitiveUpdatePolicy
    // interface IAgStkGraphicsPathPrimitiveUpdatePolicy

struct __declspec(uuid("f9b29d90-1552-4dba-95a2-5b90a6bcaea8"))
AgStkGraphicsProjectedRasterOverlay;
    // [ default ] interface _IAgStkGraphicsProjectedRasterOverlay
    // interface IAgStkGraphicsProjectedRasterOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("bf754aca-c4d0-4c55-8d2b-862e53dabe35"))
AgStkGraphicsProjection;
    // [ default ] interface _IAgStkGraphicsProjection
    // interface IAgStkGraphicsProjection

struct __declspec(uuid("395e2ae9-08af-4fba-be32-5f3141d89d3c"))
AgStkGraphicsProjectionStream;
    // [ default ] interface _IAgStkGraphicsProjectionStream
    // interface IAgStkGraphicsProjectionStream
    // interface IAgStkGraphicsProjection

struct __declspec(uuid("fed84d60-dc17-431e-8b24-fe7585e62d2d"))
AgStkGraphicsSceneGlobeOverlaySettings;
    // [ default ] interface _IAgStkGraphicsSceneGlobeOverlaySettings
    // interface IAgStkGraphicsSceneGlobeOverlaySettings

struct __declspec(uuid("4adc0a17-06fb-47ed-b7d5-22915224ba51"))
AgStkGraphicsScreenOverlayCollectionBase;
    // [ default ] interface _IAgStkGraphicsScreenOverlayCollectionBase
    // interface IAgStkGraphicsScreenOverlayCollectionBase

struct __declspec(uuid("c037724b-44bd-42df-8c9c-f8afd8b09900"))
AgStkGraphicsTexture2DFactory;
    // [ default ] interface _IAgStkGraphicsTexture2DFactory
    // interface IAgStkGraphicsTexture2DFactory

struct __declspec(uuid("8711c6fb-5ff6-4d07-8fe8-f7bf63eefba9"))
AgStkGraphicsAltitudeDisplayCondition;
    // [ default ] interface _IAgStkGraphicsAltitudeDisplayCondition
    // interface IAgStkGraphicsAltitudeDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("98e5b19d-1126-43bc-a9df-e793fd23d9b4"))
AgStkGraphicsAxesPrimitive;
    // [ default ] interface _IAgStkGraphicsAxesPrimitive
    // interface IAgStkGraphicsAxesPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("fed870ec-b124-4047-95e6-e90c2495036a"))
AgStkGraphicsCamera;
    // [ default ] interface _IAgStkGraphicsCamera
    // interface IAgStkGraphicsCamera

struct __declspec(uuid("60b017e2-d40b-464e-b26f-b236df91ec8b"))
AgStkGraphicsCentralBodyGraphics;
    // [ default ] interface _IAgStkGraphicsCentralBodyGraphics
    // interface IAgStkGraphicsCentralBodyGraphics

struct __declspec(uuid("6b61802c-9a7b-4cc2-b31e-d8ef519307d2"))
AgStkGraphicsCompositeDisplayCondition;
    // [ default ] interface _IAgStkGraphicsCompositeDisplayCondition
    // interface IAgStkGraphicsCompositeDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("d4874178-cac6-4b1d-9166-0c0ca7b70ec4"))
AgStkGraphicsCompositePrimitive;
    // [ default ] interface _IAgStkGraphicsCompositePrimitive
    // interface IAgStkGraphicsCompositePrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("d006f72b-1c3f-48b6-9b13-cc8b50c58ffd"))
AgStkGraphicsConstantDisplayCondition;
    // [ default ] interface _IAgStkGraphicsConstantDisplayCondition
    // interface IAgStkGraphicsConstantDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("fdde8f96-5671-4e22-8e97-6dc03d5a6995"))
AgStkGraphicsDisplayCondition;
    // [ default ] interface _IAgStkGraphicsDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("279f68c0-dec1-43c8-bdf8-2cc59edd6586"))
AgStkGraphicsDistanceDisplayCondition;
    // [ default ] interface _IAgStkGraphicsDistanceDisplayCondition
    // interface IAgStkGraphicsDistanceDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("75aeffe4-cc1c-4698-b9a8-99be63e9793b"))
AgStkGraphicsDistanceToGlobeOverlayDisplayCondition;
    // [ default ] interface _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition
    // interface IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("787fd055-8e5e-40a8-a620-9b8bd0be8fb3"))
AgStkGraphicsDistanceToPositionDisplayCondition;
    // [ default ] interface _IAgStkGraphicsDistanceToPositionDisplayCondition
    // interface IAgStkGraphicsDistanceToPositionDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("62068d88-2c38-4baa-9c60-8bad7c9a580e"))
AgStkGraphicsDistanceToPrimitiveDisplayCondition;
    // [ default ] interface _IAgStkGraphicsDistanceToPrimitiveDisplayCondition
    // interface IAgStkGraphicsDistanceToPrimitiveDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("cb9e4e48-cb8a-4ef0-a528-4465ef9eab61"))
AgStkGraphicsDurationPathPrimitiveUpdatePolicy;
    // [ default ] interface _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy
    // interface IAgStkGraphicsDurationPathPrimitiveUpdatePolicy
    // interface IAgStkGraphicsPathPrimitiveUpdatePolicy

struct __declspec(uuid("222f6a2f-349a-473a-b94c-dd30d0903b5b"))
AgStkGraphicsGlobeImageOverlay;
    // [ default ] interface _IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("ee0fb486-6e04-4f68-bc78-c92761bde1a6"))
AgStkGraphicsGraphicsFont;
    // [ default ] interface _IAgStkGraphicsGraphicsFont
    // interface IAgStkGraphicsGraphicsFont

struct __declspec(uuid("e990a7b4-a62b-4373-962e-032fdb65aa6b"))
AgStkGraphicsGreatArcInterpolator;
    // [ default ] interface _IAgStkGraphicsGreatArcInterpolator
    // interface IAgStkGraphicsGreatArcInterpolator
    // interface IAgStkGraphicsPositionInterpolator

struct __declspec(uuid("066f5c95-c5b3-4bd3-929b-80da9b6f3392"))
AgStkGraphicsImageCollection;
    // [ default ] interface _IAgStkGraphicsImageCollection
    // interface IAgStkGraphicsImageCollection
    // [ default, source ] dispinterface IAgStkGraphicsImageCollectionEvents

struct __declspec(uuid("87c1bf94-457e-4aa2-b4d7-d6a22cf18371"))
AgStkGraphicsAlphaFromLuminanceFilter;
    // [ default ] interface _IAgStkGraphicsAlphaFromLuminanceFilter
    // interface IAgStkGraphicsAlphaFromLuminanceFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("35ad06e8-947e-41d3-a8a9-625ea9a3e0c5"))
AgStkGraphicsAlphaFromPixelFilter;
    // [ default ] interface _IAgStkGraphicsAlphaFromPixelFilter
    // interface IAgStkGraphicsAlphaFromPixelFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("c925d56f-7286-4fe5-8ee5-72009682d84e"))
AgStkGraphicsAlphaFromRasterFilter;
    // [ default ] interface _IAgStkGraphicsAlphaFromRasterFilter
    // interface IAgStkGraphicsAlphaFromRasterFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("bcff5d70-6169-4d62-ad7d-6b6f0a4feda2"))
AgStkGraphicsBandExtractFilter;
    // [ default ] interface _IAgStkGraphicsBandExtractFilter
    // interface IAgStkGraphicsBandExtractFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("a5564cf0-77d6-4153-83de-417a83c4665b"))
AgStkGraphicsBandOrderFilter;
    // [ default ] interface _IAgStkGraphicsBandOrderFilter
    // interface IAgStkGraphicsBandOrderFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("19e2363c-0728-46b3-b0f8-2c39aadf0cfd"))
AgStkGraphicsBlurFilter;
    // [ default ] interface _IAgStkGraphicsBlurFilter
    // interface IAgStkGraphicsBlurFilter
    // interface IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("cdf1f54f-28df-466e-b2d9-60ab231f7ad7"))
AgStkGraphicsBrightnessFilter;
    // [ default ] interface _IAgStkGraphicsBrightnessFilter
    // interface IAgStkGraphicsBrightnessFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("59837fdd-bda7-47dd-8e1a-069eac463075"))
AgStkGraphicsColorToLuminanceFilter;
    // [ default ] interface _IAgStkGraphicsColorToLuminanceFilter
    // interface IAgStkGraphicsColorToLuminanceFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("6215b11b-c04f-4b28-b098-b82ded50c41d"))
AgStkGraphicsContrastFilter;
    // [ default ] interface _IAgStkGraphicsContrastFilter
    // interface IAgStkGraphicsContrastFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("0b22ddce-d98f-487d-947c-133df3840c33"))
AgStkGraphicsConvolutionFilter;
    // [ default ] interface _IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("cca6b23c-f654-466b-82cc-c6eb430e6d44"))
AgStkGraphicsEdgeDetectFilter;
    // [ default ] interface _IAgStkGraphicsEdgeDetectFilter
    // interface IAgStkGraphicsEdgeDetectFilter
    // interface IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("fc627209-4675-4f54-b648-53d3bd1d9280"))
AgStkGraphicsFilteringRasterStream;
    // [ default ] interface _IAgStkGraphicsFilteringRasterStream
    // interface IAgStkGraphicsFilteringRasterStream
    // interface IAgStkGraphicsRasterStream
    // interface IAgStkGraphicsRaster

struct __declspec(uuid("eb7eeade-633c-43c1-adcc-238694acd792"))
AgStkGraphicsFlipFilter;
    // [ default ] interface _IAgStkGraphicsFlipFilter
    // interface IAgStkGraphicsFlipFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("75fcbcf0-bf90-4c95-863e-8a4c4fae3ab6"))
AgStkGraphicsGammaCorrectionFilter;
    // [ default ] interface _IAgStkGraphicsGammaCorrectionFilter
    // interface IAgStkGraphicsGammaCorrectionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("02cce59f-5cdf-4c22-a2ad-0966363f5c89"))
AgStkGraphicsGaussianBlurFilter;
    // [ default ] interface _IAgStkGraphicsGaussianBlurFilter
    // interface IAgStkGraphicsGaussianBlurFilter
    // interface IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("697ad63c-4968-49bf-bd8c-10bebbd376a8"))
AgStkGraphicsGradientDetectFilter;
    // [ default ] interface _IAgStkGraphicsGradientDetectFilter
    // interface IAgStkGraphicsGradientDetectFilter
    // interface IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("50d3dd49-7536-43ab-870a-4abbb6049955"))
AgStkGraphicsLevelsFilter;
    // [ default ] interface _IAgStkGraphicsLevelsFilter
    // interface IAgStkGraphicsLevelsFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("630b395d-f7fe-49a3-b98b-59c879810e4d"))
AgStkGraphicsProjectionRasterStreamPluginActivator;
    // [ default ] interface _IAgStkGraphicsProjectionRasterStreamPluginActivator
    // interface IAgStkGraphicsProjectionRasterStreamPluginActivator

struct __declspec(uuid("82623680-8635-448c-a4f7-598d2b332ddb"))
AgStkGraphicsProjectionRasterStreamPluginProxy;
    // [ default ] interface _IAgStkGraphicsProjectionRasterStreamPluginProxy
    // interface IAgStkGraphicsProjectionRasterStreamPluginProxy

struct __declspec(uuid("136f44d6-d316-4c64-b3da-b342e2836a76"))
AgStkGraphicsRaster;
    // [ default ] interface _IAgStkGraphicsRaster
    // interface IAgStkGraphicsRaster

struct __declspec(uuid("409028d0-8bdb-4e7a-b0df-4d1aa6558a54"))
AgStkGraphicsRasterAttributes;
    // [ default ] interface _IAgStkGraphicsRasterAttributes
    // interface IAgStkGraphicsRasterAttributes

struct __declspec(uuid("7a7d2e68-a56f-415b-aca2-efde4be4d8c3"))
AgStkGraphicsRasterFilter;
    // [ default ] interface _IAgStkGraphicsRasterFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("8d14c4d9-31c4-4565-a72c-f9aa6610b019"))
AgStkGraphicsRasterStream;
    // [ default ] interface _IAgStkGraphicsRasterStream
    // interface IAgStkGraphicsRasterStream
    // interface IAgStkGraphicsRaster

struct __declspec(uuid("c83ab663-4646-4dba-9c3d-c68180deaba9"))
AgStkGraphicsRotateFilter;
    // [ default ] interface _IAgStkGraphicsRotateFilter
    // interface IAgStkGraphicsRotateFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("8f8f7fa3-2c25-4efa-8363-ab756e658f24"))
AgStkGraphicsSequenceFilter;
    // [ default ] interface _IAgStkGraphicsSequenceFilter
    // interface IAgStkGraphicsSequenceFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("63f68d1d-d7fe-485b-88a7-bf67c3c3c1d7"))
AgStkGraphicsSharpenFilter;
    // [ default ] interface _IAgStkGraphicsSharpenFilter
    // interface IAgStkGraphicsSharpenFilter
    // interface IAgStkGraphicsConvolutionFilter
    // interface IAgStkGraphicsRasterFilter

struct __declspec(uuid("133ab3d0-5c67-444e-bc4e-3150e1345049"))
AgStkGraphicsVideoStream;
    // [ default ] interface _IAgStkGraphicsVideoStream
    // interface IAgStkGraphicsVideoStream
    // interface IAgStkGraphicsRasterStream
    // interface IAgStkGraphicsRaster

struct __declspec(uuid("d5114b3e-a57e-4eed-83f5-aa9b9b47fcec"))
AgStkGraphicsKmlContainer;
    // [ default ] interface _IAgStkGraphicsKmlContainer
    // interface IAgStkGraphicsKmlContainer
    // interface IAgStkGraphicsKmlFeature

struct __declspec(uuid("344da767-5626-4474-87c0-bd68ff83a2ff"))
AgStkGraphicsKmlDocument;
    // [ default ] interface _IAgStkGraphicsKmlDocument
    // interface IAgStkGraphicsKmlDocument
    // interface IAgStkGraphicsKmlContainer
    // interface IAgStkGraphicsKmlFeature

struct __declspec(uuid("582c8db7-55ef-447c-bbc6-6e9282f46c9b"))
AgStkGraphicsKmlFeature;
    // [ default ] interface _IAgStkGraphicsKmlFeature
    // interface IAgStkGraphicsKmlFeature

struct __declspec(uuid("c18a2964-dba9-4381-94bd-efe8542932f3"))
AgStkGraphicsKmlFolder;
    // [ default ] interface _IAgStkGraphicsKmlFolder
    // interface IAgStkGraphicsKmlFolder
    // interface IAgStkGraphicsKmlContainer
    // interface IAgStkGraphicsKmlFeature

struct __declspec(uuid("d5ad24fb-f4f3-4088-9071-5de2dba10556"))
AgStkGraphicsKmlGraphics;
    // [ default ] interface _IAgStkGraphicsKmlGraphics
    // interface IAgStkGraphicsKmlGraphics
    // [ default, source ] dispinterface IAgStkGraphicsKmlGraphicsEvents

struct __declspec(uuid("f976e27f-8155-496d-ade7-efb7d1946f0a"))
AgStkGraphicsKmlNetworkLink;
    // [ default ] interface _IAgStkGraphicsKmlNetworkLink
    // interface IAgStkGraphicsKmlNetworkLink
    // interface IAgStkGraphicsKmlFeature

struct __declspec(uuid("2131fe5a-da73-4991-b12f-5799d98adaef"))
AgStkGraphicsMarkerBatchPrimitive;
    // [ default ] interface _IAgStkGraphicsMarkerBatchPrimitive
    // interface IAgStkGraphicsMarkerBatchPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("ca6977e4-4b11-4d9e-8ebe-e0f1d374fdb8"))
AgStkGraphicsMarkerBatchPrimitiveOptionalParameters;
    // [ default ] interface _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters
    // interface IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters

struct __declspec(uuid("cd5df50c-9807-4aef-8254-2634a6bd351d"))
AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy;
    // [ default ] interface _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy
    // interface IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy
    // interface IAgStkGraphicsPathPrimitiveUpdatePolicy

struct __declspec(uuid("851addf7-80fd-48ed-ba65-8bba4a05c100"))
AgStkGraphicsModelArticulation;
    // [ default ] interface _IAgStkGraphicsModelArticulation
    // interface IAgStkGraphicsModelArticulation

struct __declspec(uuid("70f7dc99-1e57-406d-a8f8-abcbad84db28"))
AgStkGraphicsModelArticulationCollection;
    // [ default ] interface _IAgStkGraphicsModelArticulationCollection
    // interface IAgStkGraphicsModelArticulationCollection

struct __declspec(uuid("70b122e0-52f2-428a-9835-c50bf703d15a"))
AgStkGraphicsModelPrimitive;
    // [ default ] interface _IAgStkGraphicsModelPrimitive
    // interface IAgStkGraphicsModelPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("3e21f56d-556b-407e-ba54-cce0c3491780"))
AgStkGraphicsModelTransformation;
    // [ default ] interface _IAgStkGraphicsModelTransformation
    // interface IAgStkGraphicsModelTransformation

struct __declspec(uuid("ebe301d4-b0af-4299-b49c-00191ba7b906"))
AgStkGraphicsOverlay;
    // [ default ] interface _IAgStkGraphicsOverlay
    // interface IAgStkGraphicsOverlay
    // interface IAgStkGraphicsScreenOverlayContainer

struct __declspec(uuid("ed2be34e-3e15-4f63-8667-adf0d9c71c7d"))
AgStkGraphicsPathPrimitive;
    // [ default ] interface _IAgStkGraphicsPathPrimitive
    // interface IAgStkGraphicsPathPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("d5e8fa47-f424-4713-85e4-e5fc9de6baa6"))
AgStkGraphicsPickResult;
    // [ default ] interface _IAgStkGraphicsPickResult
    // interface IAgStkGraphicsPickResult

struct __declspec(uuid("9ea371da-d6fc-406b-ad1c-971b7ea4959a"))
AgStkGraphicsPixelSizeDisplayCondition;
    // [ default ] interface _IAgStkGraphicsPixelSizeDisplayCondition
    // interface IAgStkGraphicsPixelSizeDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("7bd1a513-c70c-49d8-8e63-a33828592a29"))
AgStkGraphicsPointBatchPrimitive;
    // [ default ] interface _IAgStkGraphicsPointBatchPrimitive
    // interface IAgStkGraphicsPointBatchPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("b8345b38-5822-4331-92ce-db8d0c56d1ea"))
AgStkGraphicsPolylinePrimitive;
    // [ default ] interface _IAgStkGraphicsPolylinePrimitive
    // interface IAgStkGraphicsPolylinePrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("7d6e4996-1d67-4756-ad71-82a698366ed6"))
AgStkGraphicsPositionInterpolator;
    // [ default ] interface _IAgStkGraphicsPositionInterpolator
    // interface IAgStkGraphicsPositionInterpolator

struct __declspec(uuid("6539f179-1750-42e1-8f4c-4b7531c63eeb"))
AgStkGraphicsPrimitive;
    // [ default ] interface _IAgStkGraphicsPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("7d445d2a-9e0f-4b5b-ba58-da9713c7eb5a"))
AgStkGraphicsPrimitiveManager;
    // [ default ] interface _IAgStkGraphicsPrimitiveManager
    // interface IAgStkGraphicsPrimitiveManager

struct __declspec(uuid("4dca6b24-66af-4bea-be5a-def0cb2373cc"))
AgStkGraphicsRasterImageGlobeOverlay;
    // [ default ] interface _IAgStkGraphicsRasterImageGlobeOverlay
    // interface IAgStkGraphicsRasterImageGlobeOverlay
    // interface IAgStkGraphicsGlobeImageOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("4c56fef8-0ee9-43ad-98d4-7ab1ebce84c6"))
AgStkGraphicsRhumbLineInterpolator;
    // [ default ] interface _IAgStkGraphicsRhumbLineInterpolator
    // interface IAgStkGraphicsRhumbLineInterpolator
    // interface IAgStkGraphicsPositionInterpolator

struct __declspec(uuid("9ffc049c-28df-47ba-813c-efb90def8b0b"))
AgStkGraphicsScene;
    // [ default ] interface _IAgStkGraphicsScene
    // interface IAgStkGraphicsScene
    // [ default, source ] dispinterface IAgStkGraphicsSceneEvents

struct __declspec(uuid("0555afac-ac04-42cb-ab2b-5a7c03130f14"))
AgStkGraphicsSceneDisplayCondition;
    // [ default ] interface _IAgStkGraphicsSceneDisplayCondition
    // interface IAgStkGraphicsSceneDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("2fccd8c9-935f-48a7-8cd2-435064e40652"))
AgStkGraphicsSceneManager;
    // [ default ] interface _IAgStkGraphicsSceneManager
    // interface IAgStkGraphicsSceneManager
    // [ default, source ] dispinterface IAgStkGraphicsSceneManagerEvents

struct __declspec(uuid("bfc8b19a-f844-4a16-98a0-066a55f2807a"))
AgStkGraphicsScreenOverlay;
    // [ default ] interface _IAgStkGraphicsScreenOverlay
    // interface IAgStkGraphicsScreenOverlay
    // interface IAgStkGraphicsOverlay
    // interface IAgStkGraphicsScreenOverlayContainer

struct __declspec(uuid("c38d05e6-47ed-47e5-933b-706f7e31d071"))
AgStkGraphicsScreenOverlayCollection;
    // [ default ] interface _IAgStkGraphicsScreenOverlayCollection
    // interface IAgStkGraphicsScreenOverlayCollection
    // interface IAgStkGraphicsScreenOverlayCollectionBase

struct __declspec(uuid("006a2edb-3b8d-41e9-bcd5-4a6e4485e40d"))
AgStkGraphicsScreenOverlayManager;
    // [ default ] interface _IAgStkGraphicsScreenOverlayManager
    // interface IAgStkGraphicsScreenOverlayManager
    // interface IAgStkGraphicsScreenOverlayCollectionBase
    // interface IAgStkGraphicsScreenOverlayContainer

struct __declspec(uuid("5a533b2c-a920-46fd-83b5-05a5999a26fa"))
AgStkGraphicsScreenOverlayPickResult;
    // [ default ] interface _IAgStkGraphicsScreenOverlayPickResult
    // interface IAgStkGraphicsScreenOverlayPickResult

struct __declspec(uuid("df0a8a07-a109-474d-a2d0-849cd9c86e9f"))
AgStkGraphicsSolidPrimitive;
    // [ default ] interface _IAgStkGraphicsSolidPrimitive
    // interface IAgStkGraphicsSolidPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("ba612e4e-dd08-48ad-b467-4361a9e120b9"))
AgStkGraphicsStereoscopic;
    // [ default ] interface _IAgStkGraphicsStereoscopic
    // interface IAgStkGraphicsStereoscopic

struct __declspec(uuid("e146f3fc-0db4-45fa-bf31-c34e6c2f102a"))
AgStkGraphicsSurfaceMeshPrimitive;
    // [ default ] interface _IAgStkGraphicsSurfaceMeshPrimitive
    // interface IAgStkGraphicsSurfaceMeshPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("493cb270-7aff-402b-81cb-ec5404b070ad"))
AgStkGraphicsTerrainCollection;
    // [ default ] interface _IAgStkGraphicsTerrainCollection
    // interface IAgStkGraphicsTerrainCollection
    // [ default, source ] dispinterface IAgStkGraphicsTerrainCollectionEvents

struct __declspec(uuid("bf3c0ef0-d5a6-4426-ac8f-4250e0f9cc3c"))
AgStkGraphicsTerrainOverlay;
    // [ default ] interface _IAgStkGraphicsTerrainOverlay
    // interface IAgStkGraphicsTerrainOverlay
    // interface IAgStkGraphicsGlobeOverlay

struct __declspec(uuid("9f85e0e9-ed39-4762-a4b1-24c98d9f49dc"))
AgStkGraphicsTextBatchPrimitive;
    // [ default ] interface _IAgStkGraphicsTextBatchPrimitive
    // interface IAgStkGraphicsTextBatchPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("a51f7623-1b69-4c19-88db-f7e0a8b7e620"))
AgStkGraphicsTextBatchPrimitiveOptionalParameters;
    // [ default ] interface _IAgStkGraphicsTextBatchPrimitiveOptionalParameters
    // interface IAgStkGraphicsTextBatchPrimitiveOptionalParameters

struct __declspec(uuid("a9cbc192-54c0-4865-bee7-b6f88ee00c8e"))
AgStkGraphicsTextOverlay;
    // [ default ] interface _IAgStkGraphicsTextOverlay
    // interface IAgStkGraphicsTextOverlay
    // interface IAgStkGraphicsScreenOverlay
    // interface IAgStkGraphicsOverlay
    // interface IAgStkGraphicsScreenOverlayContainer

struct __declspec(uuid("5b6df831-226e-4add-8bd1-5af05edecca2"))
AgStkGraphicsTextureMatrix;
    // [ default ] interface _IAgStkGraphicsTextureMatrix
    // interface IAgStkGraphicsTextureMatrix

struct __declspec(uuid("777415ab-f518-42e2-a423-785eb7e0abed"))
AgStkGraphicsTextureScreenOverlay;
    // [ default ] interface _IAgStkGraphicsTextureScreenOverlay
    // interface IAgStkGraphicsTextureScreenOverlay
    // interface IAgStkGraphicsScreenOverlay
    // interface IAgStkGraphicsOverlay
    // interface IAgStkGraphicsScreenOverlayContainer

struct __declspec(uuid("0921be69-b0e2-4c92-921e-207556502607"))
AgStkGraphicsTimeIntervalDisplayCondition;
    // [ default ] interface _IAgStkGraphicsTimeIntervalDisplayCondition
    // interface IAgStkGraphicsTimeIntervalDisplayCondition
    // interface IAgStkGraphicsDisplayCondition

struct __declspec(uuid("bab96b8f-fc13-42c4-afdb-112238304396"))
AgStkGraphicsTriangleMeshPrimitive;
    // [ default ] interface _IAgStkGraphicsTriangleMeshPrimitive
    // interface IAgStkGraphicsTriangleMeshPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("aa2f0c02-286f-463a-9ffc-f63432bf59a9"))
AgStkGraphicsTriangleMeshPrimitiveOptionalParameters;
    // [ default ] interface _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters
    // interface IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters

struct __declspec(uuid("484db8a7-d1a4-4bbf-9f5d-a4f76ea30d4a"))
AgStkGraphicsVectorPrimitive;
    // [ default ] interface _IAgStkGraphicsVectorPrimitive
    // interface IAgStkGraphicsVectorPrimitive
    // interface IAgStkGraphicsPrimitive

struct __declspec(uuid("a49b6a9e-f145-4b2d-9caa-089f79f8e069"))
AgStkGraphicsBoxTriangulatorInitializer;
    // [ default ] interface _IAgStkGraphicsBoxTriangulatorInitializer
    // interface IAgStkGraphicsBoxTriangulatorInitializer

struct __declspec(uuid("d5251630-d92f-41ec-9440-43c933a794a7"))
AgStkGraphicsCylinderTriangulatorInitializer;
    // [ default ] interface _IAgStkGraphicsCylinderTriangulatorInitializer
    // interface IAgStkGraphicsCylinderTriangulatorInitializer

struct __declspec(uuid("e2b6e371-e82e-4315-938b-e610157732c2"))
AgStkGraphicsEllipsoidTriangulatorInitializer;
    // [ default ] interface _IAgStkGraphicsEllipsoidTriangulatorInitializer
    // interface IAgStkGraphicsEllipsoidTriangulatorInitializer

struct __declspec(uuid("2a60ab2b-967b-4b59-b5b9-b8e99387166d"))
AgStkGraphicsExtrudedPolylineTriangulatorInitializer;
    // [ default ] interface _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer
    // interface IAgStkGraphicsExtrudedPolylineTriangulatorInitializer

struct __declspec(uuid("6d7717a1-43d8-48e9-8dac-0e1a6a238155"))
AgStkGraphicsSurfaceExtentTriangulatorInitializer;
    // [ default ] interface _IAgStkGraphicsSurfaceExtentTriangulatorInitializer
    // interface IAgStkGraphicsSurfaceExtentTriangulatorInitializer

struct __declspec(uuid("9302db7e-f503-4f04-8577-e5513e9ece27"))
AgStkGraphicsSurfacePolygonTriangulatorInitializer;
    // [ default ] interface _IAgStkGraphicsSurfacePolygonTriangulatorInitializer
    // interface IAgStkGraphicsSurfacePolygonTriangulatorInitializer

struct __declspec(uuid("5d84c102-8d87-4b41-a93d-3159cbc4a1cd"))
AgStkGraphicsSurfaceShapesInitializer;
    // [ default ] interface _IAgStkGraphicsSurfaceShapesInitializer
    // interface IAgStkGraphicsSurfaceShapesInitializer

struct __declspec(uuid("91501fd0-bddd-44de-a889-99f5b8b5509c"))
AgStkGraphicsAGICustomTerrainOverlayFactory;
    // [ default ] interface _IAgStkGraphicsAGICustomTerrainOverlayFactory
    // interface IAgStkGraphicsAGICustomTerrainOverlayFactory

struct __declspec(uuid("e2bb79be-f444-42f3-82be-b65212c72485"))
AgStkGraphicsAGIProcessedImageGlobeOverlayFactory;
    // [ default ] interface _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory
    // interface IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory

struct __declspec(uuid("da795126-84ad-4546-922c-e28862c5962f"))
AgStkGraphicsAGIProcessedTerrainOverlayFactory;
    // [ default ] interface _IAgStkGraphicsAGIProcessedTerrainOverlayFactory
    // interface IAgStkGraphicsAGIProcessedTerrainOverlayFactory

struct __declspec(uuid("5b29f8fe-12cc-45a5-844b-8ff971c0385e"))
AgStkGraphicsAGIRoamImageGlobeOverlayFactory;
    // [ default ] interface _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory
    // interface IAgStkGraphicsAGIRoamImageGlobeOverlayFactory

struct __declspec(uuid("d082dd5a-bd02-4c6e-9deb-f117b29dd4eb"))
AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory;
    // [ default ] interface _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory
    // interface IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory

struct __declspec(uuid("103b647c-7326-4ac7-be4a-4c1d7c079200"))
AgStkGraphicsGeospatialImageGlobeOverlayFactory;
    // [ default ] interface _IAgStkGraphicsGeospatialImageGlobeOverlayFactory
    // interface IAgStkGraphicsGeospatialImageGlobeOverlayFactory

struct __declspec(uuid("0df1a8ae-8a31-49cc-9361-8e343d29f389"))
AgStkGraphicsProjectedRasterOverlayFactory;
    // [ default ] interface _IAgStkGraphicsProjectedRasterOverlayFactory
    // interface IAgStkGraphicsProjectedRasterOverlayFactory

struct __declspec(uuid("a041941a-c90d-46c7-b7c7-c3995d4d6380"))
AgStkGraphicsProjectionFactory;
    // [ default ] interface _IAgStkGraphicsProjectionFactory
    // interface IAgStkGraphicsProjectionFactory

struct __declspec(uuid("b58d9a70-e952-472b-a54c-bfc28a22c264"))
AgStkGraphicsAltitudeDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsAltitudeDisplayConditionFactory
    // interface IAgStkGraphicsAltitudeDisplayConditionFactory

struct __declspec(uuid("7fc5aa9f-1758-4595-8dc5-f07861e68483"))
AgStkGraphicsAxesPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsAxesPrimitiveFactory
    // interface IAgStkGraphicsAxesPrimitiveFactory

struct __declspec(uuid("0bad46d4-2c24-40f2-a2cc-ea19bb77a767"))
AgStkGraphicsCompositeDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsCompositeDisplayConditionFactory
    // interface IAgStkGraphicsCompositeDisplayConditionFactory

struct __declspec(uuid("f1c103cd-912f-4553-bf8d-eb9eb6d5063d"))
AgStkGraphicsCompositePrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsCompositePrimitiveFactory
    // interface IAgStkGraphicsCompositePrimitiveFactory

struct __declspec(uuid("6ecdfe5e-60b8-466b-8b97-20de1b749bc6"))
AgStkGraphicsConstantDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsConstantDisplayConditionFactory
    // interface IAgStkGraphicsConstantDisplayConditionFactory

struct __declspec(uuid("93830c33-18fa-488e-bfb0-676f4dbbf020"))
AgStkGraphicsDistanceDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsDistanceDisplayConditionFactory
    // interface IAgStkGraphicsDistanceDisplayConditionFactory

struct __declspec(uuid("8a73371e-d6c6-4987-9d08-14b26938a1a8"))
AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory
    // interface IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory

struct __declspec(uuid("c5302375-c194-4496-b4a1-5a3db9df7f40"))
AgStkGraphicsDistanceToPositionDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsDistanceToPositionDisplayConditionFactory
    // interface IAgStkGraphicsDistanceToPositionDisplayConditionFactory

struct __declspec(uuid("ee7c1507-d7de-4282-a1e1-a9c55ebe9b11"))
AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory
    // interface IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory

struct __declspec(uuid("1088e0ef-f47c-48e3-8465-59993c3d31ae"))
AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory;
    // [ default ] interface _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory
    // interface IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory

struct __declspec(uuid("5500ab70-3f63-418f-a965-db4be15b0abd"))
AgStkGraphicsGlobeImageOverlayInitializer;
    // [ default ] interface _IAgStkGraphicsGlobeImageOverlayInitializer
    // interface IAgStkGraphicsGlobeImageOverlayInitializer

struct __declspec(uuid("11e87f5b-be0b-4d4b-8fe2-bb1b098c9c52"))
AgStkGraphicsGraphicsFontFactory;
    // [ default ] interface _IAgStkGraphicsGraphicsFontFactory
    // interface IAgStkGraphicsGraphicsFontFactory

struct __declspec(uuid("d758db32-1475-40f6-a753-a2582df38882"))
AgStkGraphicsGreatArcInterpolatorFactory;
    // [ default ] interface _IAgStkGraphicsGreatArcInterpolatorFactory
    // interface IAgStkGraphicsGreatArcInterpolatorFactory

struct __declspec(uuid("76b51bcf-0fa7-4fd6-987f-2c1347ae5d8c"))
AgStkGraphicsAlphaFromLuminanceFilterFactory;
    // [ default ] interface _IAgStkGraphicsAlphaFromLuminanceFilterFactory
    // interface IAgStkGraphicsAlphaFromLuminanceFilterFactory

struct __declspec(uuid("07ebf3fe-5eea-44cd-9b43-26df48264084"))
AgStkGraphicsAlphaFromPixelFilterFactory;
    // [ default ] interface _IAgStkGraphicsAlphaFromPixelFilterFactory
    // interface IAgStkGraphicsAlphaFromPixelFilterFactory

struct __declspec(uuid("832e5956-b115-4eaf-bc9d-05f81c2d1fd9"))
AgStkGraphicsAlphaFromRasterFilterFactory;
    // [ default ] interface _IAgStkGraphicsAlphaFromRasterFilterFactory
    // interface IAgStkGraphicsAlphaFromRasterFilterFactory

struct __declspec(uuid("36aef3b5-6a84-494f-bb28-a829687b7e37"))
AgStkGraphicsBandExtractFilterFactory;
    // [ default ] interface _IAgStkGraphicsBandExtractFilterFactory
    // interface IAgStkGraphicsBandExtractFilterFactory

struct __declspec(uuid("7145194e-c0fb-4516-a8be-056715fdb03e"))
AgStkGraphicsBandOrderFilterFactory;
    // [ default ] interface _IAgStkGraphicsBandOrderFilterFactory
    // interface IAgStkGraphicsBandOrderFilterFactory

struct __declspec(uuid("c9271be4-c823-4127-89b4-11be9074f904"))
AgStkGraphicsBlurFilterFactory;
    // [ default ] interface _IAgStkGraphicsBlurFilterFactory
    // interface IAgStkGraphicsBlurFilterFactory

struct __declspec(uuid("7365692e-cac8-40a1-9018-f877fb3521e6"))
AgStkGraphicsBrightnessFilterFactory;
    // [ default ] interface _IAgStkGraphicsBrightnessFilterFactory
    // interface IAgStkGraphicsBrightnessFilterFactory

struct __declspec(uuid("82180125-e2f3-400a-adb7-e13a154bf6a8"))
AgStkGraphicsColorToLuminanceFilterFactory;
    // [ default ] interface _IAgStkGraphicsColorToLuminanceFilterFactory
    // interface IAgStkGraphicsColorToLuminanceFilterFactory

struct __declspec(uuid("796431de-c471-471b-a348-6ce2d087e3df"))
AgStkGraphicsContrastFilterFactory;
    // [ default ] interface _IAgStkGraphicsContrastFilterFactory
    // interface IAgStkGraphicsContrastFilterFactory

struct __declspec(uuid("1331a62b-1cbe-4135-98af-0e0356bb1ebb"))
AgStkGraphicsConvolutionFilterFactory;
    // [ default ] interface _IAgStkGraphicsConvolutionFilterFactory
    // interface IAgStkGraphicsConvolutionFilterFactory

struct __declspec(uuid("0a2b762f-40e9-4117-8ef1-73b14b665dae"))
AgStkGraphicsEdgeDetectFilterFactory;
    // [ default ] interface _IAgStkGraphicsEdgeDetectFilterFactory
    // interface IAgStkGraphicsEdgeDetectFilterFactory

struct __declspec(uuid("5520ea28-8af7-40a3-8f54-7f55fde80772"))
AgStkGraphicsFilteringRasterStreamFactory;
    // [ default ] interface _IAgStkGraphicsFilteringRasterStreamFactory
    // interface IAgStkGraphicsFilteringRasterStreamFactory

struct __declspec(uuid("e105191a-14a5-473b-9e70-6cfb2228a3c9"))
AgStkGraphicsFlipFilterFactory;
    // [ default ] interface _IAgStkGraphicsFlipFilterFactory
    // interface IAgStkGraphicsFlipFilterFactory

struct __declspec(uuid("6c48d094-ed24-4222-8baa-dbb269b94127"))
AgStkGraphicsGammaCorrectionFilterFactory;
    // [ default ] interface _IAgStkGraphicsGammaCorrectionFilterFactory
    // interface IAgStkGraphicsGammaCorrectionFilterFactory

struct __declspec(uuid("c7029578-22b2-4cb9-a214-60c8222ee09c"))
AgStkGraphicsGaussianBlurFilterFactory;
    // [ default ] interface _IAgStkGraphicsGaussianBlurFilterFactory
    // interface IAgStkGraphicsGaussianBlurFilterFactory

struct __declspec(uuid("544ee136-5c8b-4c03-8b7c-9cf5f5b9a7ca"))
AgStkGraphicsGradientDetectFilterFactory;
    // [ default ] interface _IAgStkGraphicsGradientDetectFilterFactory
    // interface IAgStkGraphicsGradientDetectFilterFactory

struct __declspec(uuid("116f436f-2c47-43d0-8a0b-bc1f805a46b5"))
AgStkGraphicsJpeg2000WriterInitializer;
    // [ default ] interface _IAgStkGraphicsJpeg2000WriterInitializer
    // interface IAgStkGraphicsJpeg2000WriterInitializer

struct __declspec(uuid("a81c7827-b8e2-462d-94c3-c265529a8351"))
AgStkGraphicsLevelsFilterFactory;
    // [ default ] interface _IAgStkGraphicsLevelsFilterFactory
    // interface IAgStkGraphicsLevelsFilterFactory

struct __declspec(uuid("9a400fce-c79b-4ee1-a9bb-9e6886daff30"))
AgStkGraphicsProjectionRasterStreamPluginActivatorFactory;
    // [ default ] interface _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory
    // interface IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory

struct __declspec(uuid("f2d66293-b9cb-44d5-a9b7-3ed87bd2f304"))
AgStkGraphicsRasterFactory;
    // [ default ] interface _IAgStkGraphicsRasterFactory
    // interface IAgStkGraphicsRasterFactory

struct __declspec(uuid("7f988242-9f5f-4b06-8a3d-84ceccf0c671"))
AgStkGraphicsRasterAttributesFactory;
    // [ default ] interface _IAgStkGraphicsRasterAttributesFactory
    // interface IAgStkGraphicsRasterAttributesFactory

struct __declspec(uuid("048eb8d8-6de3-49d4-9bd8-39ed5304e67d"))
AgStkGraphicsRotateFilterFactory;
    // [ default ] interface _IAgStkGraphicsRotateFilterFactory
    // interface IAgStkGraphicsRotateFilterFactory

struct __declspec(uuid("ba979648-df93-4c71-82af-f6d9c3a7d15b"))
AgStkGraphicsSequenceFilterFactory;
    // [ default ] interface _IAgStkGraphicsSequenceFilterFactory
    // interface IAgStkGraphicsSequenceFilterFactory

struct __declspec(uuid("ac41c343-c70f-4e85-a7d3-37ab6c4cf077"))
AgStkGraphicsSharpenFilterFactory;
    // [ default ] interface _IAgStkGraphicsSharpenFilterFactory
    // interface IAgStkGraphicsSharpenFilterFactory

struct __declspec(uuid("b375724f-a9d7-4052-8923-a5b45dae50f6"))
AgStkGraphicsVideoStreamFactory;
    // [ default ] interface _IAgStkGraphicsVideoStreamFactory
    // interface IAgStkGraphicsVideoStreamFactory

struct __declspec(uuid("00191eca-151b-4107-90f6-85e780e4acab"))
AgStkGraphicsMarkerBatchPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsMarkerBatchPrimitiveFactory
    // interface IAgStkGraphicsMarkerBatchPrimitiveFactory

struct __declspec(uuid("c7f7d84f-a597-48e4-928e-5090a308876e"))
AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory;
    // [ default ] interface _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory
    // interface IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory

struct __declspec(uuid("4396fd8e-28e2-46ec-9e64-18a7c316a5c6"))
AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory;
    // [ default ] interface _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory
    // interface IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory

struct __declspec(uuid("51168fa3-939c-440e-92d6-eae44ffd9dfc"))
AgStkGraphicsModelPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsModelPrimitiveFactory
    // interface IAgStkGraphicsModelPrimitiveFactory

struct __declspec(uuid("62a1b021-71e6-462f-85a4-af76f307b645"))
AgStkGraphicsPathPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsPathPrimitiveFactory
    // interface IAgStkGraphicsPathPrimitiveFactory

struct __declspec(uuid("b55263ca-5c17-42f9-b6df-fb64a5734607"))
AgStkGraphicsPixelSizeDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsPixelSizeDisplayConditionFactory
    // interface IAgStkGraphicsPixelSizeDisplayConditionFactory

struct __declspec(uuid("28d6fac1-9be2-4857-91cf-65342bdc32e0"))
AgStkGraphicsPointBatchPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsPointBatchPrimitiveFactory
    // interface IAgStkGraphicsPointBatchPrimitiveFactory

struct __declspec(uuid("7d9fca76-8173-442d-b44e-c42409eaad60"))
AgStkGraphicsPolylinePrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsPolylinePrimitiveFactory
    // interface IAgStkGraphicsPolylinePrimitiveFactory

struct __declspec(uuid("6c3e6e2f-b331-419c-95b4-b1a89867bfba"))
AgStkGraphicsRasterImageGlobeOverlayFactory;
    // [ default ] interface _IAgStkGraphicsRasterImageGlobeOverlayFactory
    // interface IAgStkGraphicsRasterImageGlobeOverlayFactory

struct __declspec(uuid("e7c9ff04-b681-465d-9820-c3ca130ce7ca"))
AgStkGraphicsRhumbLineInterpolatorFactory;
    // [ default ] interface _IAgStkGraphicsRhumbLineInterpolatorFactory
    // interface IAgStkGraphicsRhumbLineInterpolatorFactory

struct __declspec(uuid("273b68d9-4746-456d-afa4-74f6a9d986ce"))
AgStkGraphicsSceneDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsSceneDisplayConditionFactory
    // interface IAgStkGraphicsSceneDisplayConditionFactory

struct __declspec(uuid("5fd868fb-9643-4642-a9f9-4405641507a4"))
AgStkGraphicsSceneManagerInitializer;
    // [ default ] interface _IAgStkGraphicsSceneManagerInitializer
    // interface IAgStkGraphicsSceneManagerInitializer

struct __declspec(uuid("16759ebf-c3d2-4a24-aa74-1db53b885808"))
AgStkGraphicsScreenOverlayFactory;
    // [ default ] interface _IAgStkGraphicsScreenOverlayFactory
    // interface IAgStkGraphicsScreenOverlayFactory

struct __declspec(uuid("721080e7-8cab-42cb-ba79-100d08db4489"))
AgStkGraphicsSolidPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsSolidPrimitiveFactory
    // interface IAgStkGraphicsSolidPrimitiveFactory

struct __declspec(uuid("fb5877f1-32c4-496d-83f6-d7383d88892a"))
AgStkGraphicsSurfaceMeshPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsSurfaceMeshPrimitiveFactory
    // interface IAgStkGraphicsSurfaceMeshPrimitiveFactory

struct __declspec(uuid("b54b31ab-29d1-45c7-b3f1-52b1f1f5587a"))
AgStkGraphicsTerrainOverlayInitializer;
    // [ default ] interface _IAgStkGraphicsTerrainOverlayInitializer
    // interface IAgStkGraphicsTerrainOverlayInitializer

struct __declspec(uuid("201e12f5-4859-449d-810f-f387e7f325cc"))
AgStkGraphicsTextBatchPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsTextBatchPrimitiveFactory
    // interface IAgStkGraphicsTextBatchPrimitiveFactory

struct __declspec(uuid("ae90082f-0a09-4035-b519-185a7ea1a2c9"))
AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory;
    // [ default ] interface _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory
    // interface IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory

struct __declspec(uuid("93510500-db25-43de-b2ed-8431db7be2fe"))
AgStkGraphicsTextOverlayFactory;
    // [ default ] interface _IAgStkGraphicsTextOverlayFactory
    // interface IAgStkGraphicsTextOverlayFactory

struct __declspec(uuid("765386a1-d447-4711-96cc-2d874b412cfb"))
AgStkGraphicsTextureMatrixFactory;
    // [ default ] interface _IAgStkGraphicsTextureMatrixFactory
    // interface IAgStkGraphicsTextureMatrixFactory

struct __declspec(uuid("1020a593-757e-4dfb-86b6-a22059cf813d"))
AgStkGraphicsTextureScreenOverlayFactory;
    // [ default ] interface _IAgStkGraphicsTextureScreenOverlayFactory
    // interface IAgStkGraphicsTextureScreenOverlayFactory

struct __declspec(uuid("13b8e519-8d0a-4240-8c0e-47b1dd902168"))
AgStkGraphicsTimeIntervalDisplayConditionFactory;
    // [ default ] interface _IAgStkGraphicsTimeIntervalDisplayConditionFactory
    // interface IAgStkGraphicsTimeIntervalDisplayConditionFactory

struct __declspec(uuid("60bcf84f-a10c-462a-9d34-89bd20c92d61"))
AgStkGraphicsTriangleMeshPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsTriangleMeshPrimitiveFactory
    // interface IAgStkGraphicsTriangleMeshPrimitiveFactory

struct __declspec(uuid("ac6b9c58-12ae-492c-8868-1a5f527d1589"))
AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory;
    // [ default ] interface _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory
    // interface IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory

struct __declspec(uuid("798697c4-c903-4e26-a97b-0f95e69c9027"))
AgStkGraphicsVectorPrimitiveFactory;
    // [ default ] interface _IAgStkGraphicsVectorPrimitiveFactory
    // interface IAgStkGraphicsVectorPrimitiveFactory

struct __declspec(uuid("5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69"))
IAgStkGraphicsFactoryAndInitializers : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBoxTriangulator))
    IAgStkGraphicsBoxTriangulatorInitializerPtr BoxTriangulator;
    __declspec(property(get=GetCylinderTriangulator))
    IAgStkGraphicsCylinderTriangulatorInitializerPtr CylinderTriangulator;
    __declspec(property(get=GetEllipsoidTriangulator))
    IAgStkGraphicsEllipsoidTriangulatorInitializerPtr EllipsoidTriangulator;
    __declspec(property(get=GetExtrudedPolylineTriangulator))
    IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr ExtrudedPolylineTriangulator;
    __declspec(property(get=GetSurfaceExtentTriangulator))
    IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr SurfaceExtentTriangulator;
    __declspec(property(get=GetSurfacePolygonTriangulator))
    IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr SurfacePolygonTriangulator;
    __declspec(property(get=GetSurfaceShapes))
    IAgStkGraphicsSurfaceShapesInitializerPtr SurfaceShapes;
    __declspec(property(get=GetAGIProcessedImageGlobeOverlay))
    IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr AGIProcessedImageGlobeOverlay;
    __declspec(property(get=GetAGIProcessedTerrainOverlay))
    IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr AGIProcessedTerrainOverlay;
    __declspec(property(get=GetAGIRoamImageGlobeOverlay))
    IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr AGIRoamImageGlobeOverlay;
    __declspec(property(get=GetCustomImageGlobeOverlayPluginActivator))
    IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr CustomImageGlobeOverlayPluginActivator;
    __declspec(property(get=GetGeospatialImageGlobeOverlay))
    IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr GeospatialImageGlobeOverlay;
    __declspec(property(get=GetProjectedRasterOverlay))
    IAgStkGraphicsProjectedRasterOverlayFactoryPtr ProjectedRasterOverlay;
    __declspec(property(get=GetProjection))
    IAgStkGraphicsProjectionFactoryPtr Projection;
    __declspec(property(get=GetAltitudeDisplayCondition))
    IAgStkGraphicsAltitudeDisplayConditionFactoryPtr AltitudeDisplayCondition;
    __declspec(property(get=GetCompositeDisplayCondition))
    IAgStkGraphicsCompositeDisplayConditionFactoryPtr CompositeDisplayCondition;
    __declspec(property(get=GetCompositePrimitive))
    IAgStkGraphicsCompositePrimitiveFactoryPtr CompositePrimitive;
    __declspec(property(get=GetConstantDisplayCondition))
    IAgStkGraphicsConstantDisplayConditionFactoryPtr ConstantDisplayCondition;
    __declspec(property(get=GetDistanceDisplayCondition))
    IAgStkGraphicsDistanceDisplayConditionFactoryPtr DistanceDisplayCondition;
    __declspec(property(get=GetDistanceToGlobeOverlayDisplayCondition))
    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr DistanceToGlobeOverlayDisplayCondition;
    __declspec(property(get=GetDistanceToPositionDisplayCondition))
    IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr DistanceToPositionDisplayCondition;
    __declspec(property(get=GetDistanceToPrimitiveDisplayCondition))
    IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr DistanceToPrimitiveDisplayCondition;
    __declspec(property(get=GetDurationPathPrimitiveUpdatePolicy))
    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr DurationPathPrimitiveUpdatePolicy;
    __declspec(property(get=GetGlobeImageOverlay))
    IAgStkGraphicsGlobeImageOverlayInitializerPtr GlobeImageOverlay;
    __declspec(property(get=GetGraphicsFont))
    IAgStkGraphicsGraphicsFontFactoryPtr GraphicsFont;
    __declspec(property(get=GetGreatArcInterpolator))
    IAgStkGraphicsGreatArcInterpolatorFactoryPtr GreatArcInterpolator;
    __declspec(property(get=GetAlphaFromLuminanceFilter))
    IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr AlphaFromLuminanceFilter;
    __declspec(property(get=GetAlphaFromPixelFilter))
    IAgStkGraphicsAlphaFromPixelFilterFactoryPtr AlphaFromPixelFilter;
    __declspec(property(get=GetAlphaFromRasterFilter))
    IAgStkGraphicsAlphaFromRasterFilterFactoryPtr AlphaFromRasterFilter;
    __declspec(property(get=GetBandExtractFilter))
    IAgStkGraphicsBandExtractFilterFactoryPtr BandExtractFilter;
    __declspec(property(get=GetBandOrderFilter))
    IAgStkGraphicsBandOrderFilterFactoryPtr BandOrderFilter;
    __declspec(property(get=GetBlurFilter))
    IAgStkGraphicsBlurFilterFactoryPtr BlurFilter;
    __declspec(property(get=GetBrightnessFilter))
    IAgStkGraphicsBrightnessFilterFactoryPtr BrightnessFilter;
    __declspec(property(get=GetColorToLuminanceFilter))
    IAgStkGraphicsColorToLuminanceFilterFactoryPtr ColorToLuminanceFilter;
    __declspec(property(get=GetContrastFilter))
    IAgStkGraphicsContrastFilterFactoryPtr ContrastFilter;
    __declspec(property(get=GetConvolutionFilter))
    IAgStkGraphicsConvolutionFilterFactoryPtr ConvolutionFilter;
    __declspec(property(get=GetEdgeDetectFilter))
    IAgStkGraphicsEdgeDetectFilterFactoryPtr EdgeDetectFilter;
    __declspec(property(get=GetFilteringRasterStream))
    IAgStkGraphicsFilteringRasterStreamFactoryPtr FilteringRasterStream;
    __declspec(property(get=GetFlipFilter))
    IAgStkGraphicsFlipFilterFactoryPtr FlipFilter;
    __declspec(property(get=GetGammaCorrectionFilter))
    IAgStkGraphicsGammaCorrectionFilterFactoryPtr GammaCorrectionFilter;
    __declspec(property(get=GetGaussianBlurFilter))
    IAgStkGraphicsGaussianBlurFilterFactoryPtr GaussianBlurFilter;
    __declspec(property(get=GetGradientDetectFilter))
    IAgStkGraphicsGradientDetectFilterFactoryPtr GradientDetectFilter;
    __declspec(property(get=GetJpeg2000Writer))
    IAgStkGraphicsJpeg2000WriterInitializerPtr Jpeg2000Writer;
    __declspec(property(get=GetLevelsFilter))
    IAgStkGraphicsLevelsFilterFactoryPtr LevelsFilter;
    __declspec(property(get=GetProjectionRasterStreamPluginActivator))
    IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr ProjectionRasterStreamPluginActivator;
    __declspec(property(get=GetRaster))
    IAgStkGraphicsRasterFactoryPtr Raster;
    __declspec(property(get=GetRasterAttributes))
    IAgStkGraphicsRasterAttributesFactoryPtr RasterAttributes;
    __declspec(property(get=GetRotateFilter))
    IAgStkGraphicsRotateFilterFactoryPtr RotateFilter;
    __declspec(property(get=GetSequenceFilter))
    IAgStkGraphicsSequenceFilterFactoryPtr SequenceFilter;
    __declspec(property(get=GetSharpenFilter))
    IAgStkGraphicsSharpenFilterFactoryPtr SharpenFilter;
    __declspec(property(get=GetVideoStream))
    IAgStkGraphicsVideoStreamFactoryPtr VideoStream;
    __declspec(property(get=GetMarkerBatchPrimitive))
    IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr MarkerBatchPrimitive;
    __declspec(property(get=GetMarkerBatchPrimitiveOptionalParameters))
    IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr MarkerBatchPrimitiveOptionalParameters;
    __declspec(property(get=GetMaximumCountPathPrimitiveUpdatePolicy))
    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr MaximumCountPathPrimitiveUpdatePolicy;
    __declspec(property(get=GetModelPrimitive))
    IAgStkGraphicsModelPrimitiveFactoryPtr ModelPrimitive;
    __declspec(property(get=GetPathPrimitive))
    IAgStkGraphicsPathPrimitiveFactoryPtr PathPrimitive;
    __declspec(property(get=GetPixelSizeDisplayCondition))
    IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr PixelSizeDisplayCondition;
    __declspec(property(get=GetPointBatchPrimitive))
    IAgStkGraphicsPointBatchPrimitiveFactoryPtr PointBatchPrimitive;
    __declspec(property(get=GetPolylinePrimitive))
    IAgStkGraphicsPolylinePrimitiveFactoryPtr PolylinePrimitive;
    __declspec(property(get=GetRasterImageGlobeOverlay))
    IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr RasterImageGlobeOverlay;
    __declspec(property(get=GetRhumbLineInterpolator))
    IAgStkGraphicsRhumbLineInterpolatorFactoryPtr RhumbLineInterpolator;
    __declspec(property(get=GetSceneDisplayCondition))
    IAgStkGraphicsSceneDisplayConditionFactoryPtr SceneDisplayCondition;
    __declspec(property(get=GetSceneManager))
    IAgStkGraphicsSceneManagerInitializerPtr SceneManager;
    __declspec(property(get=GetScreenOverlay))
    IAgStkGraphicsScreenOverlayFactoryPtr ScreenOverlay;
    __declspec(property(get=GetSolidPrimitive))
    IAgStkGraphicsSolidPrimitiveFactoryPtr SolidPrimitive;
    __declspec(property(get=GetSurfaceMeshPrimitive))
    IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr SurfaceMeshPrimitive;
    __declspec(property(get=GetTerrainOverlay))
    IAgStkGraphicsTerrainOverlayInitializerPtr TerrainOverlay;
    __declspec(property(get=GetTextBatchPrimitive))
    IAgStkGraphicsTextBatchPrimitiveFactoryPtr TextBatchPrimitive;
    __declspec(property(get=GetTextBatchPrimitiveOptionalParameters))
    IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr TextBatchPrimitiveOptionalParameters;
    __declspec(property(get=GetTextureMatrix))
    IAgStkGraphicsTextureMatrixFactoryPtr TextureMatrix;
    __declspec(property(get=GetTextureScreenOverlay))
    IAgStkGraphicsTextureScreenOverlayFactoryPtr TextureScreenOverlay;
    __declspec(property(get=GetTimeIntervalDisplayCondition))
    IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr TimeIntervalDisplayCondition;
    __declspec(property(get=GetTriangleMeshPrimitive))
    IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr TriangleMeshPrimitive;
    __declspec(property(get=GetTriangleMeshPrimitiveOptionalParameters))
    IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr TriangleMeshPrimitiveOptionalParameters;
    __declspec(property(get=GetTextureFilter2D))
    IAgStkGraphicsTextureFilter2DFactoryPtr TextureFilter2D;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSphereFactoryPtr BoundingSphere;
    __declspec(property(get=GetPathPoint))
    IAgStkGraphicsPathPointFactoryPtr PathPoint;
    __declspec(property(get=GetTextOverlay))
    IAgStkGraphicsTextOverlayFactoryPtr TextOverlay;
    __declspec(property(get=GetAGICustomTerrainOverlay))
    IAgStkGraphicsAGICustomTerrainOverlayFactoryPtr AGICustomTerrainOverlay;
    __declspec(property(get=GetAxesPrimitive))
    IAgStkGraphicsAxesPrimitiveFactoryPtr AxesPrimitive;
    __declspec(property(get=GetVectorPrimitive))
    IAgStkGraphicsVectorPrimitiveFactoryPtr VectorPrimitive;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBoxTriangulatorInitializerPtr GetBoxTriangulator ( );
    IAgStkGraphicsCylinderTriangulatorInitializerPtr GetCylinderTriangulator ( );
    IAgStkGraphicsEllipsoidTriangulatorInitializerPtr GetEllipsoidTriangulator ( );
    IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr GetExtrudedPolylineTriangulator ( );
    IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr GetSurfaceExtentTriangulator ( );
    IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr GetSurfacePolygonTriangulator ( );
    IAgStkGraphicsSurfaceShapesInitializerPtr GetSurfaceShapes ( );
    IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr GetAGIProcessedImageGlobeOverlay ( );
    IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr GetAGIProcessedTerrainOverlay ( );
    IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr GetAGIRoamImageGlobeOverlay ( );
    IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr GetCustomImageGlobeOverlayPluginActivator ( );
    IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr GetGeospatialImageGlobeOverlay ( );
    IAgStkGraphicsProjectedRasterOverlayFactoryPtr GetProjectedRasterOverlay ( );
    IAgStkGraphicsProjectionFactoryPtr GetProjection ( );
    IAgStkGraphicsAltitudeDisplayConditionFactoryPtr GetAltitudeDisplayCondition ( );
    IAgStkGraphicsCompositeDisplayConditionFactoryPtr GetCompositeDisplayCondition ( );
    IAgStkGraphicsCompositePrimitiveFactoryPtr GetCompositePrimitive ( );
    IAgStkGraphicsConstantDisplayConditionFactoryPtr GetConstantDisplayCondition ( );
    IAgStkGraphicsDistanceDisplayConditionFactoryPtr GetDistanceDisplayCondition ( );
    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr GetDistanceToGlobeOverlayDisplayCondition ( );
    IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr GetDistanceToPositionDisplayCondition ( );
    IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr GetDistanceToPrimitiveDisplayCondition ( );
    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr GetDurationPathPrimitiveUpdatePolicy ( );
    IAgStkGraphicsGlobeImageOverlayInitializerPtr GetGlobeImageOverlay ( );
    IAgStkGraphicsGraphicsFontFactoryPtr GetGraphicsFont ( );
    IAgStkGraphicsGreatArcInterpolatorFactoryPtr GetGreatArcInterpolator ( );
    IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr GetAlphaFromLuminanceFilter ( );
    IAgStkGraphicsAlphaFromPixelFilterFactoryPtr GetAlphaFromPixelFilter ( );
    IAgStkGraphicsAlphaFromRasterFilterFactoryPtr GetAlphaFromRasterFilter ( );
    IAgStkGraphicsBandExtractFilterFactoryPtr GetBandExtractFilter ( );
    IAgStkGraphicsBandOrderFilterFactoryPtr GetBandOrderFilter ( );
    IAgStkGraphicsBlurFilterFactoryPtr GetBlurFilter ( );
    IAgStkGraphicsBrightnessFilterFactoryPtr GetBrightnessFilter ( );
    IAgStkGraphicsColorToLuminanceFilterFactoryPtr GetColorToLuminanceFilter ( );
    IAgStkGraphicsContrastFilterFactoryPtr GetContrastFilter ( );
    IAgStkGraphicsConvolutionFilterFactoryPtr GetConvolutionFilter ( );
    IAgStkGraphicsEdgeDetectFilterFactoryPtr GetEdgeDetectFilter ( );
    IAgStkGraphicsFilteringRasterStreamFactoryPtr GetFilteringRasterStream ( );
    IAgStkGraphicsFlipFilterFactoryPtr GetFlipFilter ( );
    IAgStkGraphicsGammaCorrectionFilterFactoryPtr GetGammaCorrectionFilter ( );
    IAgStkGraphicsGaussianBlurFilterFactoryPtr GetGaussianBlurFilter ( );
    IAgStkGraphicsGradientDetectFilterFactoryPtr GetGradientDetectFilter ( );
    IAgStkGraphicsJpeg2000WriterInitializerPtr GetJpeg2000Writer ( );
    IAgStkGraphicsLevelsFilterFactoryPtr GetLevelsFilter ( );
    IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr GetProjectionRasterStreamPluginActivator ( );
    IAgStkGraphicsRasterFactoryPtr GetRaster ( );
    IAgStkGraphicsRasterAttributesFactoryPtr GetRasterAttributes ( );
    IAgStkGraphicsRotateFilterFactoryPtr GetRotateFilter ( );
    IAgStkGraphicsSequenceFilterFactoryPtr GetSequenceFilter ( );
    IAgStkGraphicsSharpenFilterFactoryPtr GetSharpenFilter ( );
    IAgStkGraphicsVideoStreamFactoryPtr GetVideoStream ( );
    IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr GetMarkerBatchPrimitive ( );
    IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr GetMarkerBatchPrimitiveOptionalParameters ( );
    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr GetMaximumCountPathPrimitiveUpdatePolicy ( );
    IAgStkGraphicsModelPrimitiveFactoryPtr GetModelPrimitive ( );
    IAgStkGraphicsPathPrimitiveFactoryPtr GetPathPrimitive ( );
    IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr GetPixelSizeDisplayCondition ( );
    IAgStkGraphicsPointBatchPrimitiveFactoryPtr GetPointBatchPrimitive ( );
    IAgStkGraphicsPolylinePrimitiveFactoryPtr GetPolylinePrimitive ( );
    IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr GetRasterImageGlobeOverlay ( );
    IAgStkGraphicsRhumbLineInterpolatorFactoryPtr GetRhumbLineInterpolator ( );
    IAgStkGraphicsSceneDisplayConditionFactoryPtr GetSceneDisplayCondition ( );
    IAgStkGraphicsSceneManagerInitializerPtr GetSceneManager ( );
    IAgStkGraphicsScreenOverlayFactoryPtr GetScreenOverlay ( );
    IAgStkGraphicsSolidPrimitiveFactoryPtr GetSolidPrimitive ( );
    IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr GetSurfaceMeshPrimitive ( );
    IAgStkGraphicsTerrainOverlayInitializerPtr GetTerrainOverlay ( );
    IAgStkGraphicsTextBatchPrimitiveFactoryPtr GetTextBatchPrimitive ( );
    IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr GetTextBatchPrimitiveOptionalParameters ( );
    IAgStkGraphicsTextureMatrixFactoryPtr GetTextureMatrix ( );
    IAgStkGraphicsTextureScreenOverlayFactoryPtr GetTextureScreenOverlay ( );
    IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr GetTimeIntervalDisplayCondition ( );
    IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr GetTriangleMeshPrimitive ( );
    IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr GetTriangleMeshPrimitiveOptionalParameters ( );
    IAgStkGraphicsTextureFilter2DFactoryPtr GetTextureFilter2D ( );
    IAgStkGraphicsBoundingSphereFactoryPtr GetBoundingSphere ( );
    IAgStkGraphicsPathPointFactoryPtr GetPathPoint ( );
    IAgStkGraphicsTextOverlayFactoryPtr GetTextOverlay ( );
    IAgStkGraphicsAGICustomTerrainOverlayFactoryPtr GetAGICustomTerrainOverlay ( );
    IAgStkGraphicsAxesPrimitiveFactoryPtr GetAxesPrimitive ( );
    IAgStkGraphicsVectorPrimitiveFactoryPtr GetVectorPrimitive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoxTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsBoxTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CylinderTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsCylinderTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EllipsoidTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsEllipsoidTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudedPolylineTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceExtentTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceExtentTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfacePolygonTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsSurfacePolygonTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceShapes (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGIProcessedImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGIProcessedTerrainOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedTerrainOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGIRoamImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGIRoamImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomImageGlobeOverlayPluginActivator (
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GeospatialImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGeospatialImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectedRasterOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsProjectedRasterOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CompositeDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsCompositeDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CompositePrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsCompositePrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstantDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsConstantDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToGlobeOverlayDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToPositionDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToPrimitiveDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationPathPrimitiveUpdatePolicy (
        /*[out,retval]*/ struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeImageOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlayInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GraphicsFont (
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFontFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GreatArcInterpolator (
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaFromLuminanceFilter (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromLuminanceFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaFromPixelFilter (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromPixelFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaFromRasterFilter (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromRasterFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BandExtractFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BandOrderFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BlurFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBlurFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BrightnessFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBrightnessFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorToLuminanceFilter (
        /*[out,retval]*/ struct IAgStkGraphicsColorToLuminanceFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastFilter (
        /*[out,retval]*/ struct IAgStkGraphicsContrastFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConvolutionFilter (
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgeDetectFilter (
        /*[out,retval]*/ struct IAgStkGraphicsEdgeDetectFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FilteringRasterStream (
        /*[out,retval]*/ struct IAgStkGraphicsFilteringRasterStreamFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipFilter (
        /*[out,retval]*/ struct IAgStkGraphicsFlipFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GammaCorrectionFilter (
        /*[out,retval]*/ struct IAgStkGraphicsGammaCorrectionFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussianBlurFilter (
        /*[out,retval]*/ struct IAgStkGraphicsGaussianBlurFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GradientDetectFilter (
        /*[out,retval]*/ struct IAgStkGraphicsGradientDetectFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Jpeg2000Writer (
        /*[out,retval]*/ struct IAgStkGraphicsJpeg2000WriterInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LevelsFilter (
        /*[out,retval]*/ struct IAgStkGraphicsLevelsFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionRasterStreamPluginActivator (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Raster (
        /*[out,retval]*/ struct IAgStkGraphicsRasterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RasterAttributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributesFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateFilter (
        /*[out,retval]*/ struct IAgStkGraphicsRotateFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SequenceFilter (
        /*[out,retval]*/ struct IAgStkGraphicsSequenceFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SharpenFilter (
        /*[out,retval]*/ struct IAgStkGraphicsSharpenFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VideoStream (
        /*[out,retval]*/ struct IAgStkGraphicsVideoStreamFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MarkerBatchPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MarkerBatchPrimitiveOptionalParameters (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumCountPathPrimitiveUpdatePolicy (
        /*[out,retval]*/ struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PathPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelSizeDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsPixelSizeDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointBatchPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsPointBatchPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylinePrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RasterImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RhumbLineInterpolator (
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SceneDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsSceneDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SceneManager (
        /*[out,retval]*/ struct IAgStkGraphicsSceneManagerInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScreenOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SolidPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsSolidPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceMeshPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TerrainOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlayInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextBatchPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextBatchPrimitiveOptionalParameters (
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureMatrix (
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrixFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureScreenOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeIntervalDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleMeshPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleMeshPrimitiveOptionalParameters (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter2D (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2DFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphereFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PathPoint (
        /*[out,retval]*/ struct IAgStkGraphicsPathPointFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGICustomTerrainOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGICustomTerrainOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AxesPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsAxesPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsVectorPrimitiveFactory * * ppRetVal ) = 0;
};

struct __declspec(uuid("257b97ef-839b-4a17-a924-c40320174d13"))
IAgStkGraphicsSceneManager : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimitives))
    IAgStkGraphicsPrimitiveManagerPtr Primitives;
    __declspec(property(get=GetScreenOverlays))
    IAgStkGraphicsScreenOverlayManagerPtr ScreenOverlays;
    __declspec(property(get=GetTextures))
    IAgStkGraphicsTexture2DFactoryPtr Textures;
    __declspec(property(get=GetGlobeOverlaySettings))
    IAgStkGraphicsGlobeOverlaySettingsPtr GlobeOverlaySettings;
    __declspec(property(get=GetScenes))
    IAgStkGraphicsSceneCollectionPtr Scenes;
    __declspec(property(get=GetInitializers))
    IAgStkGraphicsFactoryAndInitializersPtr Initializers;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPrimitiveManagerPtr GetPrimitives ( );
    IAgStkGraphicsScreenOverlayManagerPtr GetScreenOverlays ( );
    IAgStkGraphicsTexture2DFactoryPtr GetTextures ( );
    IAgStkGraphicsGlobeOverlaySettingsPtr GetGlobeOverlaySettings ( );
    IAgStkGraphicsSceneCollectionPtr GetScenes ( );
    HRESULT Render ( );
    IAgStkGraphicsFactoryAndInitializersPtr GetInitializers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Primitives (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitiveManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScreenOverlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Textures (
        /*[out,retval]*/ struct IAgStkGraphicsTexture2DFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeOverlaySettings (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeOverlaySettings * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scenes (
        /*[out,retval]*/ struct IAgStkGraphicsSceneCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Render ( ) = 0;
      virtual HRESULT __stdcall get_Initializers (
        /*[out,retval]*/ struct IAgStkGraphicsFactoryAndInitializers * * ppRetVal ) = 0;
};

struct __declspec(uuid("f2089edf-81f7-4c6b-8fb4-756bfbe722dc"))
_IAgStkGraphicsSceneManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimitives))
    IAgStkGraphicsPrimitiveManagerPtr Primitives;
    __declspec(property(get=GetScreenOverlays))
    IAgStkGraphicsScreenOverlayManagerPtr ScreenOverlays;
    __declspec(property(get=GetTextures))
    IAgStkGraphicsTexture2DFactoryPtr Textures;
    __declspec(property(get=GetGlobeOverlaySettings))
    IAgStkGraphicsGlobeOverlaySettingsPtr GlobeOverlaySettings;
    __declspec(property(get=GetScenes))
    IAgStkGraphicsSceneCollectionPtr Scenes;
    __declspec(property(get=GetInitializers))
    IAgStkGraphicsFactoryAndInitializersPtr Initializers;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPrimitiveManagerPtr GetPrimitives ( );
    IAgStkGraphicsScreenOverlayManagerPtr GetScreenOverlays ( );
    IAgStkGraphicsTexture2DFactoryPtr GetTextures ( );
    IAgStkGraphicsGlobeOverlaySettingsPtr GetGlobeOverlaySettings ( );
    IAgStkGraphicsSceneCollectionPtr GetScenes ( );
    HRESULT Render ( );
    IAgStkGraphicsFactoryAndInitializersPtr GetInitializers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Primitives (
        /*[out,retval]*/ struct IAgStkGraphicsPrimitiveManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScreenOverlays (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayManager * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Textures (
        /*[out,retval]*/ struct IAgStkGraphicsTexture2DFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeOverlaySettings (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeOverlaySettings * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scenes (
        /*[out,retval]*/ struct IAgStkGraphicsSceneCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Render ( ) = 0;
      virtual HRESULT __stdcall get_Initializers (
        /*[out,retval]*/ struct IAgStkGraphicsFactoryAndInitializers * * ppRetVal ) = 0;
};

struct __declspec(uuid("2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8"))
IAgStkGraphicsPathPrimitiveFactory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPathPrimitivePtr Initialize ( );
    IAgStkGraphicsPathPrimitivePtr InitializeWithCapacity (
        int Capacity );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCapacity (
        /*[in]*/ int Capacity,
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("cec2cc9e-d647-4b14-a9cf-3411203e3e2c"))
_IAgStkGraphicsFactoryAndInitializers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSolidPrimitive))
    IAgStkGraphicsSolidPrimitiveFactoryPtr SolidPrimitive;
    __declspec(property(get=GetSurfaceMeshPrimitive))
    IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr SurfaceMeshPrimitive;
    __declspec(property(get=GetTextBatchPrimitive))
    IAgStkGraphicsTextBatchPrimitiveFactoryPtr TextBatchPrimitive;
    __declspec(property(get=GetTextBatchPrimitiveOptionalParameters))
    IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr TextBatchPrimitiveOptionalParameters;
    __declspec(property(get=GetTextureMatrix))
    IAgStkGraphicsTextureMatrixFactoryPtr TextureMatrix;
    __declspec(property(get=GetTimeIntervalDisplayCondition))
    IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr TimeIntervalDisplayCondition;
    __declspec(property(get=GetTriangleMeshPrimitive))
    IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr TriangleMeshPrimitive;
    __declspec(property(get=GetAGIProcessedImageGlobeOverlay))
    IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr AGIProcessedImageGlobeOverlay;
    __declspec(property(get=GetAGIProcessedTerrainOverlay))
    IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr AGIProcessedTerrainOverlay;
    __declspec(property(get=GetAGIRoamImageGlobeOverlay))
    IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr AGIRoamImageGlobeOverlay;
    __declspec(property(get=GetGeospatialImageGlobeOverlay))
    IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr GeospatialImageGlobeOverlay;
    __declspec(property(get=GetProjectedRasterOverlay))
    IAgStkGraphicsProjectedRasterOverlayFactoryPtr ProjectedRasterOverlay;
    __declspec(property(get=GetProjection))
    IAgStkGraphicsProjectionFactoryPtr Projection;
    __declspec(property(get=GetDistanceToGlobeOverlayDisplayCondition))
    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr DistanceToGlobeOverlayDisplayCondition;
    __declspec(property(get=GetDurationPathPrimitiveUpdatePolicy))
    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr DurationPathPrimitiveUpdatePolicy;
    __declspec(property(get=GetRaster))
    IAgStkGraphicsRasterFactoryPtr Raster;
    __declspec(property(get=GetRasterAttributes))
    IAgStkGraphicsRasterAttributesFactoryPtr RasterAttributes;
    __declspec(property(get=GetMaximumCountPathPrimitiveUpdatePolicy))
    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr MaximumCountPathPrimitiveUpdatePolicy;
    __declspec(property(get=GetPathPrimitive))
    IAgStkGraphicsPathPrimitiveFactoryPtr PathPrimitive;
    __declspec(property(get=GetRasterImageGlobeOverlay))
    IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr RasterImageGlobeOverlay;
    __declspec(property(get=GetSceneDisplayCondition))
    IAgStkGraphicsSceneDisplayConditionFactoryPtr SceneDisplayCondition;
    __declspec(property(get=GetScreenOverlay))
    IAgStkGraphicsScreenOverlayFactoryPtr ScreenOverlay;
    __declspec(property(get=GetTextureScreenOverlay))
    IAgStkGraphicsTextureScreenOverlayFactoryPtr TextureScreenOverlay;
    __declspec(property(get=GetSceneManager))
    IAgStkGraphicsSceneManagerInitializerPtr SceneManager;
    __declspec(property(get=GetTextureFilter2D))
    IAgStkGraphicsTextureFilter2DFactoryPtr TextureFilter2D;
    __declspec(property(get=GetGlobeImageOverlay))
    IAgStkGraphicsGlobeImageOverlayInitializerPtr GlobeImageOverlay;
    __declspec(property(get=GetTerrainOverlay))
    IAgStkGraphicsTerrainOverlayInitializerPtr TerrainOverlay;
    __declspec(property(get=GetBoundingSphere))
    IAgStkGraphicsBoundingSphereFactoryPtr BoundingSphere;
    __declspec(property(get=GetPathPoint))
    IAgStkGraphicsPathPointFactoryPtr PathPoint;
    __declspec(property(get=GetFilteringRasterStream))
    IAgStkGraphicsFilteringRasterStreamFactoryPtr FilteringRasterStream;
    __declspec(property(get=GetVideoStream))
    IAgStkGraphicsVideoStreamFactoryPtr VideoStream;
    __declspec(property(get=GetAlphaFromLuminanceFilter))
    IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr AlphaFromLuminanceFilter;
    __declspec(property(get=GetAlphaFromPixelFilter))
    IAgStkGraphicsAlphaFromPixelFilterFactoryPtr AlphaFromPixelFilter;
    __declspec(property(get=GetAlphaFromRasterFilter))
    IAgStkGraphicsAlphaFromRasterFilterFactoryPtr AlphaFromRasterFilter;
    __declspec(property(get=GetBandExtractFilter))
    IAgStkGraphicsBandExtractFilterFactoryPtr BandExtractFilter;
    __declspec(property(get=GetBandOrderFilter))
    IAgStkGraphicsBandOrderFilterFactoryPtr BandOrderFilter;
    __declspec(property(get=GetBlurFilter))
    IAgStkGraphicsBlurFilterFactoryPtr BlurFilter;
    __declspec(property(get=GetBrightnessFilter))
    IAgStkGraphicsBrightnessFilterFactoryPtr BrightnessFilter;
    __declspec(property(get=GetColorToLuminanceFilter))
    IAgStkGraphicsColorToLuminanceFilterFactoryPtr ColorToLuminanceFilter;
    __declspec(property(get=GetContrastFilter))
    IAgStkGraphicsContrastFilterFactoryPtr ContrastFilter;
    __declspec(property(get=GetConvolutionFilter))
    IAgStkGraphicsConvolutionFilterFactoryPtr ConvolutionFilter;
    __declspec(property(get=GetEdgeDetectFilter))
    IAgStkGraphicsEdgeDetectFilterFactoryPtr EdgeDetectFilter;
    __declspec(property(get=GetFlipFilter))
    IAgStkGraphicsFlipFilterFactoryPtr FlipFilter;
    __declspec(property(get=GetGammaCorrectionFilter))
    IAgStkGraphicsGammaCorrectionFilterFactoryPtr GammaCorrectionFilter;
    __declspec(property(get=GetGaussianBlurFilter))
    IAgStkGraphicsGaussianBlurFilterFactoryPtr GaussianBlurFilter;
    __declspec(property(get=GetGradientDetectFilter))
    IAgStkGraphicsGradientDetectFilterFactoryPtr GradientDetectFilter;
    __declspec(property(get=GetLevelsFilter))
    IAgStkGraphicsLevelsFilterFactoryPtr LevelsFilter;
    __declspec(property(get=GetRotateFilter))
    IAgStkGraphicsRotateFilterFactoryPtr RotateFilter;
    __declspec(property(get=GetSequenceFilter))
    IAgStkGraphicsSequenceFilterFactoryPtr SequenceFilter;
    __declspec(property(get=GetSharpenFilter))
    IAgStkGraphicsSharpenFilterFactoryPtr SharpenFilter;
    __declspec(property(get=GetJpeg2000Writer))
    IAgStkGraphicsJpeg2000WriterInitializerPtr Jpeg2000Writer;
    __declspec(property(get=GetProjectionRasterStreamPluginActivator))
    IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr ProjectionRasterStreamPluginActivator;
    __declspec(property(get=GetCustomImageGlobeOverlayPluginActivator))
    IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr CustomImageGlobeOverlayPluginActivator;
    __declspec(property(get=GetTriangleMeshPrimitiveOptionalParameters))
    IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr TriangleMeshPrimitiveOptionalParameters;
    __declspec(property(get=GetTextOverlay))
    IAgStkGraphicsTextOverlayFactoryPtr TextOverlay;
    __declspec(property(get=GetAGICustomTerrainOverlay))
    IAgStkGraphicsAGICustomTerrainOverlayFactoryPtr AGICustomTerrainOverlay;
    __declspec(property(get=GetVectorPrimitive))
    IAgStkGraphicsVectorPrimitiveFactoryPtr VectorPrimitive;
    __declspec(property(get=GetAxesPrimitive))
    IAgStkGraphicsAxesPrimitiveFactoryPtr AxesPrimitive;
    __declspec(property(get=GetBoxTriangulator))
    IAgStkGraphicsBoxTriangulatorInitializerPtr BoxTriangulator;
    __declspec(property(get=GetCylinderTriangulator))
    IAgStkGraphicsCylinderTriangulatorInitializerPtr CylinderTriangulator;
    __declspec(property(get=GetEllipsoidTriangulator))
    IAgStkGraphicsEllipsoidTriangulatorInitializerPtr EllipsoidTriangulator;
    __declspec(property(get=GetExtrudedPolylineTriangulator))
    IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr ExtrudedPolylineTriangulator;
    __declspec(property(get=GetSurfaceExtentTriangulator))
    IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr SurfaceExtentTriangulator;
    __declspec(property(get=GetSurfacePolygonTriangulator))
    IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr SurfacePolygonTriangulator;
    __declspec(property(get=GetSurfaceShapes))
    IAgStkGraphicsSurfaceShapesInitializerPtr SurfaceShapes;
    __declspec(property(get=GetAltitudeDisplayCondition))
    IAgStkGraphicsAltitudeDisplayConditionFactoryPtr AltitudeDisplayCondition;
    __declspec(property(get=GetCompositeDisplayCondition))
    IAgStkGraphicsCompositeDisplayConditionFactoryPtr CompositeDisplayCondition;
    __declspec(property(get=GetCompositePrimitive))
    IAgStkGraphicsCompositePrimitiveFactoryPtr CompositePrimitive;
    __declspec(property(get=GetConstantDisplayCondition))
    IAgStkGraphicsConstantDisplayConditionFactoryPtr ConstantDisplayCondition;
    __declspec(property(get=GetDistanceDisplayCondition))
    IAgStkGraphicsDistanceDisplayConditionFactoryPtr DistanceDisplayCondition;
    __declspec(property(get=GetDistanceToPositionDisplayCondition))
    IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr DistanceToPositionDisplayCondition;
    __declspec(property(get=GetDistanceToPrimitiveDisplayCondition))
    IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr DistanceToPrimitiveDisplayCondition;
    __declspec(property(get=GetGraphicsFont))
    IAgStkGraphicsGraphicsFontFactoryPtr GraphicsFont;
    __declspec(property(get=GetGreatArcInterpolator))
    IAgStkGraphicsGreatArcInterpolatorFactoryPtr GreatArcInterpolator;
    __declspec(property(get=GetMarkerBatchPrimitive))
    IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr MarkerBatchPrimitive;
    __declspec(property(get=GetMarkerBatchPrimitiveOptionalParameters))
    IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr MarkerBatchPrimitiveOptionalParameters;
    __declspec(property(get=GetModelPrimitive))
    IAgStkGraphicsModelPrimitiveFactoryPtr ModelPrimitive;
    __declspec(property(get=GetPixelSizeDisplayCondition))
    IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr PixelSizeDisplayCondition;
    __declspec(property(get=GetPointBatchPrimitive))
    IAgStkGraphicsPointBatchPrimitiveFactoryPtr PointBatchPrimitive;
    __declspec(property(get=GetPolylinePrimitive))
    IAgStkGraphicsPolylinePrimitiveFactoryPtr PolylinePrimitive;
    __declspec(property(get=GetRhumbLineInterpolator))
    IAgStkGraphicsRhumbLineInterpolatorFactoryPtr RhumbLineInterpolator;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsBoxTriangulatorInitializerPtr GetBoxTriangulator ( );
    IAgStkGraphicsCylinderTriangulatorInitializerPtr GetCylinderTriangulator ( );
    IAgStkGraphicsEllipsoidTriangulatorInitializerPtr GetEllipsoidTriangulator ( );
    IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr GetExtrudedPolylineTriangulator ( );
    IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr GetSurfaceExtentTriangulator ( );
    IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr GetSurfacePolygonTriangulator ( );
    IAgStkGraphicsSurfaceShapesInitializerPtr GetSurfaceShapes ( );
    IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr GetAGIProcessedImageGlobeOverlay ( );
    IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr GetAGIProcessedTerrainOverlay ( );
    IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr GetAGIRoamImageGlobeOverlay ( );
    IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr GetCustomImageGlobeOverlayPluginActivator ( );
    IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr GetGeospatialImageGlobeOverlay ( );
    IAgStkGraphicsProjectedRasterOverlayFactoryPtr GetProjectedRasterOverlay ( );
    IAgStkGraphicsProjectionFactoryPtr GetProjection ( );
    IAgStkGraphicsAltitudeDisplayConditionFactoryPtr GetAltitudeDisplayCondition ( );
    IAgStkGraphicsCompositeDisplayConditionFactoryPtr GetCompositeDisplayCondition ( );
    IAgStkGraphicsCompositePrimitiveFactoryPtr GetCompositePrimitive ( );
    IAgStkGraphicsConstantDisplayConditionFactoryPtr GetConstantDisplayCondition ( );
    IAgStkGraphicsDistanceDisplayConditionFactoryPtr GetDistanceDisplayCondition ( );
    IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr GetDistanceToGlobeOverlayDisplayCondition ( );
    IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr GetDistanceToPositionDisplayCondition ( );
    IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr GetDistanceToPrimitiveDisplayCondition ( );
    IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr GetDurationPathPrimitiveUpdatePolicy ( );
    IAgStkGraphicsGlobeImageOverlayInitializerPtr GetGlobeImageOverlay ( );
    IAgStkGraphicsGraphicsFontFactoryPtr GetGraphicsFont ( );
    IAgStkGraphicsGreatArcInterpolatorFactoryPtr GetGreatArcInterpolator ( );
    IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr GetAlphaFromLuminanceFilter ( );
    IAgStkGraphicsAlphaFromPixelFilterFactoryPtr GetAlphaFromPixelFilter ( );
    IAgStkGraphicsAlphaFromRasterFilterFactoryPtr GetAlphaFromRasterFilter ( );
    IAgStkGraphicsBandExtractFilterFactoryPtr GetBandExtractFilter ( );
    IAgStkGraphicsBandOrderFilterFactoryPtr GetBandOrderFilter ( );
    IAgStkGraphicsBlurFilterFactoryPtr GetBlurFilter ( );
    IAgStkGraphicsBrightnessFilterFactoryPtr GetBrightnessFilter ( );
    IAgStkGraphicsColorToLuminanceFilterFactoryPtr GetColorToLuminanceFilter ( );
    IAgStkGraphicsContrastFilterFactoryPtr GetContrastFilter ( );
    IAgStkGraphicsConvolutionFilterFactoryPtr GetConvolutionFilter ( );
    IAgStkGraphicsEdgeDetectFilterFactoryPtr GetEdgeDetectFilter ( );
    IAgStkGraphicsFilteringRasterStreamFactoryPtr GetFilteringRasterStream ( );
    IAgStkGraphicsFlipFilterFactoryPtr GetFlipFilter ( );
    IAgStkGraphicsGammaCorrectionFilterFactoryPtr GetGammaCorrectionFilter ( );
    IAgStkGraphicsGaussianBlurFilterFactoryPtr GetGaussianBlurFilter ( );
    IAgStkGraphicsGradientDetectFilterFactoryPtr GetGradientDetectFilter ( );
    IAgStkGraphicsJpeg2000WriterInitializerPtr GetJpeg2000Writer ( );
    IAgStkGraphicsLevelsFilterFactoryPtr GetLevelsFilter ( );
    IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr GetProjectionRasterStreamPluginActivator ( );
    IAgStkGraphicsRasterFactoryPtr GetRaster ( );
    IAgStkGraphicsRasterAttributesFactoryPtr GetRasterAttributes ( );
    IAgStkGraphicsRotateFilterFactoryPtr GetRotateFilter ( );
    IAgStkGraphicsSequenceFilterFactoryPtr GetSequenceFilter ( );
    IAgStkGraphicsSharpenFilterFactoryPtr GetSharpenFilter ( );
    IAgStkGraphicsVideoStreamFactoryPtr GetVideoStream ( );
    IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr GetMarkerBatchPrimitive ( );
    IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr GetMarkerBatchPrimitiveOptionalParameters ( );
    IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr GetMaximumCountPathPrimitiveUpdatePolicy ( );
    IAgStkGraphicsModelPrimitiveFactoryPtr GetModelPrimitive ( );
    IAgStkGraphicsPathPrimitiveFactoryPtr GetPathPrimitive ( );
    IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr GetPixelSizeDisplayCondition ( );
    IAgStkGraphicsPointBatchPrimitiveFactoryPtr GetPointBatchPrimitive ( );
    IAgStkGraphicsPolylinePrimitiveFactoryPtr GetPolylinePrimitive ( );
    IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr GetRasterImageGlobeOverlay ( );
    IAgStkGraphicsRhumbLineInterpolatorFactoryPtr GetRhumbLineInterpolator ( );
    IAgStkGraphicsSceneDisplayConditionFactoryPtr GetSceneDisplayCondition ( );
    IAgStkGraphicsSceneManagerInitializerPtr GetSceneManager ( );
    IAgStkGraphicsScreenOverlayFactoryPtr GetScreenOverlay ( );
    IAgStkGraphicsSolidPrimitiveFactoryPtr GetSolidPrimitive ( );
    IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr GetSurfaceMeshPrimitive ( );
    IAgStkGraphicsTerrainOverlayInitializerPtr GetTerrainOverlay ( );
    IAgStkGraphicsTextBatchPrimitiveFactoryPtr GetTextBatchPrimitive ( );
    IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr GetTextBatchPrimitiveOptionalParameters ( );
    IAgStkGraphicsTextureMatrixFactoryPtr GetTextureMatrix ( );
    IAgStkGraphicsTextureScreenOverlayFactoryPtr GetTextureScreenOverlay ( );
    IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr GetTimeIntervalDisplayCondition ( );
    IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr GetTriangleMeshPrimitive ( );
    IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr GetTriangleMeshPrimitiveOptionalParameters ( );
    IAgStkGraphicsTextureFilter2DFactoryPtr GetTextureFilter2D ( );
    IAgStkGraphicsBoundingSphereFactoryPtr GetBoundingSphere ( );
    IAgStkGraphicsPathPointFactoryPtr GetPathPoint ( );
    IAgStkGraphicsTextOverlayFactoryPtr GetTextOverlay ( );
    IAgStkGraphicsAGICustomTerrainOverlayFactoryPtr GetAGICustomTerrainOverlay ( );
    IAgStkGraphicsAxesPrimitiveFactoryPtr GetAxesPrimitive ( );
    IAgStkGraphicsVectorPrimitiveFactoryPtr GetVectorPrimitive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoxTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsBoxTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CylinderTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsCylinderTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EllipsoidTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsEllipsoidTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudedPolylineTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsExtrudedPolylineTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceExtentTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceExtentTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfacePolygonTriangulator (
        /*[out,retval]*/ struct IAgStkGraphicsSurfacePolygonTriangulatorInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceShapes (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceShapesInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGIProcessedImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGIProcessedTerrainOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGIProcessedTerrainOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGIRoamImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGIRoamImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CustomImageGlobeOverlayPluginActivator (
        /*[out,retval]*/ struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GeospatialImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGeospatialImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectedRasterOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsProjectedRasterOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsAltitudeDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CompositeDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsCompositeDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CompositePrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsCompositePrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstantDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsConstantDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToGlobeOverlayDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToPositionDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPositionDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToPrimitiveDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DurationPathPrimitiveUpdatePolicy (
        /*[out,retval]*/ struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GlobeImageOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsGlobeImageOverlayInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GraphicsFont (
        /*[out,retval]*/ struct IAgStkGraphicsGraphicsFontFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GreatArcInterpolator (
        /*[out,retval]*/ struct IAgStkGraphicsGreatArcInterpolatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaFromLuminanceFilter (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromLuminanceFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaFromPixelFilter (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromPixelFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaFromRasterFilter (
        /*[out,retval]*/ struct IAgStkGraphicsAlphaFromRasterFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BandExtractFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBandExtractFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BandOrderFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBandOrderFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BlurFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBlurFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BrightnessFilter (
        /*[out,retval]*/ struct IAgStkGraphicsBrightnessFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorToLuminanceFilter (
        /*[out,retval]*/ struct IAgStkGraphicsColorToLuminanceFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastFilter (
        /*[out,retval]*/ struct IAgStkGraphicsContrastFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConvolutionFilter (
        /*[out,retval]*/ struct IAgStkGraphicsConvolutionFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgeDetectFilter (
        /*[out,retval]*/ struct IAgStkGraphicsEdgeDetectFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FilteringRasterStream (
        /*[out,retval]*/ struct IAgStkGraphicsFilteringRasterStreamFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FlipFilter (
        /*[out,retval]*/ struct IAgStkGraphicsFlipFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GammaCorrectionFilter (
        /*[out,retval]*/ struct IAgStkGraphicsGammaCorrectionFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussianBlurFilter (
        /*[out,retval]*/ struct IAgStkGraphicsGaussianBlurFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GradientDetectFilter (
        /*[out,retval]*/ struct IAgStkGraphicsGradientDetectFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Jpeg2000Writer (
        /*[out,retval]*/ struct IAgStkGraphicsJpeg2000WriterInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LevelsFilter (
        /*[out,retval]*/ struct IAgStkGraphicsLevelsFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionRasterStreamPluginActivator (
        /*[out,retval]*/ struct IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Raster (
        /*[out,retval]*/ struct IAgStkGraphicsRasterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RasterAttributes (
        /*[out,retval]*/ struct IAgStkGraphicsRasterAttributesFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateFilter (
        /*[out,retval]*/ struct IAgStkGraphicsRotateFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SequenceFilter (
        /*[out,retval]*/ struct IAgStkGraphicsSequenceFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SharpenFilter (
        /*[out,retval]*/ struct IAgStkGraphicsSharpenFilterFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VideoStream (
        /*[out,retval]*/ struct IAgStkGraphicsVideoStreamFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MarkerBatchPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MarkerBatchPrimitiveOptionalParameters (
        /*[out,retval]*/ struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumCountPathPrimitiveUpdatePolicy (
        /*[out,retval]*/ struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsModelPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PathPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PixelSizeDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsPixelSizeDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointBatchPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsPointBatchPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylinePrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsPolylinePrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RasterImageGlobeOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsRasterImageGlobeOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RhumbLineInterpolator (
        /*[out,retval]*/ struct IAgStkGraphicsRhumbLineInterpolatorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SceneDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsSceneDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SceneManager (
        /*[out,retval]*/ struct IAgStkGraphicsSceneManagerInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScreenOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsScreenOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SolidPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsSolidPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceMeshPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsSurfaceMeshPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TerrainOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsTerrainOverlayInitializer * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextBatchPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextBatchPrimitiveOptionalParameters (
        /*[out,retval]*/ struct IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureMatrix (
        /*[out,retval]*/ struct IAgStkGraphicsTextureMatrixFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureScreenOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsTextureScreenOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeIntervalDisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsTimeIntervalDisplayConditionFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleMeshPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleMeshPrimitiveOptionalParameters (
        /*[out,retval]*/ struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextureFilter2D (
        /*[out,retval]*/ struct IAgStkGraphicsTextureFilter2DFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphereFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PathPoint (
        /*[out,retval]*/ struct IAgStkGraphicsPathPointFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsTextOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGICustomTerrainOverlay (
        /*[out,retval]*/ struct IAgStkGraphicsAGICustomTerrainOverlayFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AxesPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsAxesPrimitiveFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorPrimitive (
        /*[out,retval]*/ struct IAgStkGraphicsVectorPrimitiveFactory * * ppRetVal ) = 0;
};

struct __declspec(uuid("264ef2e0-ae0d-412d-9d89-f5f17f095a52"))
IAgStkGraphicsPathPrimitive : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsPathPointPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetCapacity))
    int Capacity;
    __declspec(property(get=GetUpdatePolicy,put=PutUpdatePolicy))
    IAgStkGraphicsPathPrimitiveUpdatePolicyPtr UpdatePolicy;
    __declspec(property(get=GetPolylineType,put=PutPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    int GetCapacity ( );
    IAgStkGraphicsPathPrimitiveUpdatePolicyPtr GetUpdatePolicy ( );
    void PutUpdatePolicy (
        struct IAgStkGraphicsPathPrimitiveUpdatePolicy * ppRetVal );
    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    void PutPolylineType (
        enum AgEStkGraphicsPolylineType pRetVal );
    float GetWidth ( );
    void PutWidth (
        float pRetVal );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsPathPointPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT AddFront (
        struct IAgStkGraphicsPathPoint * PathPoint );
    HRESULT AddRangeToFront (
        SAFEARRAY * * Positions );
    HRESULT AddBack (
        struct IAgStkGraphicsPathPoint * PathPoint );
    HRESULT AddRangeToBack (
        SAFEARRAY * * Positions );
    HRESULT RemoveFront ( );
    HRESULT RemoveAllBefore (
        int Index );
    HRESULT RemoveBack ( );
    HRESULT RemoveAllAfter (
        int Index );
    IAgStkGraphicsPathPointPtr Front ( );
    IAgStkGraphicsPathPointPtr Back ( );
    HRESULT Clear ( );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Capacity (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UpdatePolicy (
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdatePolicy (
        /*[in]*/ struct IAgStkGraphicsPathPrimitiveUpdatePolicy * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PolylineType (
        /*[in]*/ enum AgEStkGraphicsPolylineType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddFront (
        /*[in]*/ struct IAgStkGraphicsPathPoint * PathPoint ) = 0;
      virtual HRESULT __stdcall raw_AddRangeToFront (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_AddBack (
        /*[in]*/ struct IAgStkGraphicsPathPoint * PathPoint ) = 0;
      virtual HRESULT __stdcall raw_AddRangeToBack (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_RemoveFront ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllBefore (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveBack ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllAfter (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Front (
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Back (
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("71fe898e-dabb-4501-9c80-dcb1cde9c16b"))
IAgStkGraphicsPathPrimitiveUpdatePolicy : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Update (
        struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        struct STKUtil::IAgDate * Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        /*[in]*/ struct STKUtil::IAgDate * Date ) = 0;
};

struct __declspec(uuid("428b559f-63ea-4e8e-9595-62439db0b25b"))
_IAgStkGraphicsPathPrimitiveUpdatePolicy : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Update (
        struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        struct STKUtil::IAgDate * Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        /*[in]*/ struct STKUtil::IAgDate * Date ) = 0;
};

struct __declspec(uuid("7b966df4-8080-4cb1-98f4-b4f0edbb7e99"))
_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDuration,put=PutDuration))
    double Duration;
    __declspec(property(get=GetRemoveLocation,put=PutRemoveLocation))
    enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Update (
        struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        struct STKUtil::IAgDate * Date );
    double GetDuration ( );
    void PutDuration (
        double pRetVal );
    enum AgEStkGraphicsPathPrimitiveRemoveLocation GetRemoveLocation ( );
    void PutRemoveLocation (
        enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        /*[in]*/ struct STKUtil::IAgDate * Date ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveLocation (
        /*[out,retval]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveLocation (
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) = 0;
};

struct __declspec(uuid("ab4fcf98-8150-4ddb-8ff8-3ab5c7d3a850"))
_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumCount,put=PutMaximumCount))
    int MaximumCount;
    __declspec(property(get=GetRemoveLocation,put=PutRemoveLocation))
    enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Update (
        struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        struct STKUtil::IAgDate * Date );
    int GetMaximumCount ( );
    void PutMaximumCount (
        int pRetVal );
    enum AgEStkGraphicsPathPrimitiveRemoveLocation GetRemoveLocation ( );
    void PutRemoveLocation (
        enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ struct IAgStkGraphicsPathPrimitive * PathPrimitive,
        /*[in]*/ struct STKUtil::IAgDate * Date ) = 0;
      virtual HRESULT __stdcall get_MaximumCount (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumCount (
        /*[in]*/ int pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveLocation (
        /*[out,retval]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveLocation (
        /*[in]*/ enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) = 0;
};

struct __declspec(uuid("974c0af0-5f1e-45de-b45c-4ae5fc465913"))
_IAgStkGraphicsPathPrimitive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkGraphicsPathPointPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    AgSTKVgtLib::IAgCrdnSystemPtr ReferenceFrame;
    __declspec(property(get=GetBoundingSphere,put=PutBoundingSphere))
    IAgStkGraphicsBoundingSpherePtr BoundingSphere;
    __declspec(property(get=GetAutomaticallyComputeBoundingSphere,put=PutAutomaticallyComputeBoundingSphere))
    VARIANT_BOOL AutomaticallyComputeBoundingSphere;
    __declspec(property(get=GetDisplayCondition,put=PutDisplayCondition))
    IAgStkGraphicsDisplayConditionPtr DisplayCondition;
    __declspec(property(get=GetDisplay,put=PutDisplay))
    VARIANT_BOOL Display;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    float Translucency;
    __declspec(property(get=GetTag,put=PutTag))
    _variant_t Tag;
    __declspec(property(get=GetCentralBodyClipped,put=PutCentralBodyClipped))
    VARIANT_BOOL CentralBodyClipped;
    __declspec(property(get=GetCapacity))
    int Capacity;
    __declspec(property(get=GetUpdatePolicy,put=PutUpdatePolicy))
    IAgStkGraphicsPathPrimitiveUpdatePolicyPtr UpdatePolicy;
    __declspec(property(get=GetPolylineType,put=PutPolylineType))
    enum AgEStkGraphicsPolylineType PolylineType;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    float OutlineWidth;
    __declspec(property(get=GetPerItemPickingEnabled,put=PutPerItemPickingEnabled))
    VARIANT_BOOL PerItemPickingEnabled;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    AgSTKVgtLib::IAgCrdnSystemPtr GetReferenceFrame ( );
    void PutReferenceFrame (
        struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal );
    IAgStkGraphicsBoundingSpherePtr GetBoundingSphere ( );
    void PutBoundingSphere (
        struct IAgStkGraphicsBoundingSphere * ppRetVal );
    VARIANT_BOOL GetAutomaticallyComputeBoundingSphere ( );
    void PutAutomaticallyComputeBoundingSphere (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsDisplayConditionPtr GetDisplayCondition ( );
    void PutDisplayCondition (
        struct IAgStkGraphicsDisplayCondition * ppRetVal );
    VARIANT_BOOL GetDisplay ( );
    void PutDisplay (
        VARIANT_BOOL pRetVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pRetVal );
    float GetTranslucency ( );
    void PutTranslucency (
        float pRetVal );
    int GetCount ( );
    int GetCapacity ( );
    IAgStkGraphicsPathPrimitiveUpdatePolicyPtr GetUpdatePolicy ( );
    void PutUpdatePolicy (
        struct IAgStkGraphicsPathPrimitiveUpdatePolicy * ppRetVal );
    enum AgEStkGraphicsPolylineType GetPolylineType ( );
    void PutPolylineType (
        enum AgEStkGraphicsPolylineType pRetVal );
    float GetWidth ( );
    void PutWidth (
        float pRetVal );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL pRetVal );
    float GetOutlineWidth ( );
    void PutOutlineWidth (
        float pRetVal );
    VARIANT_BOOL GetPerItemPickingEnabled ( );
    void PutPerItemPickingEnabled (
        VARIANT_BOOL pRetVal );
    IAgStkGraphicsPathPointPtr GetItem (
        int Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT AddFront (
        struct IAgStkGraphicsPathPoint * PathPoint );
    HRESULT AddRangeToFront (
        SAFEARRAY * * Positions );
    HRESULT AddBack (
        struct IAgStkGraphicsPathPoint * PathPoint );
    HRESULT AddRangeToBack (
        SAFEARRAY * * Positions );
    HRESULT RemoveFront ( );
    HRESULT RemoveAllBefore (
        int Index );
    HRESULT RemoveBack ( );
    HRESULT RemoveAllAfter (
        int Index );
    IAgStkGraphicsPathPointPtr Front ( );
    IAgStkGraphicsPathPointPtr Back ( );
    HRESULT Clear ( );
    _variant_t GetTag ( );
    void PutTag (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetCentralBodyClipped ( );
    void PutCentralBodyClipped (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundingSphere (
        /*[out,retval]*/ struct IAgStkGraphicsBoundingSphere * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundingSphere (
        /*[in]*/ struct IAgStkGraphicsBoundingSphere * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyComputeBoundingSphere (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyComputeBoundingSphere (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCondition (
        /*[out,retval]*/ struct IAgStkGraphicsDisplayCondition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayCondition (
        /*[in]*/ struct IAgStkGraphicsDisplayCondition * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Display (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Capacity (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UpdatePolicy (
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitiveUpdatePolicy * * ppRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdatePolicy (
        /*[in]*/ struct IAgStkGraphicsPathPrimitiveUpdatePolicy * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PolylineType (
        /*[out,retval]*/ enum AgEStkGraphicsPolylineType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PolylineType (
        /*[in]*/ enum AgEStkGraphicsPolylineType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ float pRetVal ) = 0;
      virtual HRESULT __stdcall get_PerItemPickingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PerItemPickingEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddFront (
        /*[in]*/ struct IAgStkGraphicsPathPoint * PathPoint ) = 0;
      virtual HRESULT __stdcall raw_AddRangeToFront (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_AddBack (
        /*[in]*/ struct IAgStkGraphicsPathPoint * PathPoint ) = 0;
      virtual HRESULT __stdcall raw_AddRangeToBack (
        /*[in]*/ SAFEARRAY * * Positions ) = 0;
      virtual HRESULT __stdcall raw_RemoveFront ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllBefore (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveBack ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllAfter (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Front (
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Back (
        /*[out,retval]*/ struct IAgStkGraphicsPathPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyClipped (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyClipped (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("6f773b6f-f175-43ee-a38e-ad62bacfc479"))
_IAgStkGraphicsPathPrimitiveFactory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumWidthSupported))
    float MinimumWidthSupported;
    __declspec(property(get=GetMaximumWidthSupported))
    float MaximumWidthSupported;

    //
    // Wrapper methods for error-handling
    //

    IAgStkGraphicsPathPrimitivePtr Initialize ( );
    IAgStkGraphicsPathPrimitivePtr InitializeWithCapacity (
        int Capacity );
    float GetMinimumWidthSupported ( );
    float GetMaximumWidthSupported ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeWithCapacity (
        /*[in]*/ int Capacity,
        /*[out,retval]*/ struct IAgStkGraphicsPathPrimitive * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumWidthSupported (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

} // namespace AgSTKGraphicsLib

#pragma pack(pop)
